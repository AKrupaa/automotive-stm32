
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dfc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08007f3c  08007f3c  00017f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082cc  080082cc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080082cc  080082cc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082cc  080082cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080082d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003778  20000010  080082e4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003788  080082e4  00023788  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023c86  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046e7  00000000  00000000  00043cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017c8  00000000  00000000  000483a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001598  00000000  00000000  00049b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005a55  00000000  00000000  0004b108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a6a6  00000000  00000000  00050b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a90f2  00000000  00000000  0006b203  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001142f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f98  00000000  00000000  00114370  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08007f24 	.word	0x08007f24

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08007f24 	.word	0x08007f24

08000180 <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 800018a:	2300      	movs	r3, #0
 800018c:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < /*mod_N*/mod_0; i++) {
 800018e:	2300      	movs	r3, #0
 8000190:	807b      	strh	r3, [r7, #2]
 8000192:	bf00      	nop
		}

		modsToInit++;
	}

	if (modsToInit != successCnt) {
 8000194:	88ba      	ldrh	r2, [r7, #4]
 8000196:	88fb      	ldrh	r3, [r7, #6]
 8000198:	429a      	cmp	r2, r3
 800019a:	d000      	beq.n	800019e <device_init+0x1e>
		// some kind of error
		while (1)
 800019c:	e7fe      	b.n	800019c <device_init+0x1c>
			; //TODO: call some error handler
	}

}
 800019e:	bf00      	nop
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 80001a8:	b5b0      	push	{r4, r5, r7, lr}
 80001aa:	b08a      	sub	sp, #40	; 0x28
 80001ac:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 80001ae:	2300      	movs	r3, #0
 80001b0:	77fb      	strb	r3, [r7, #31]
 80001b2:	e02c      	b.n	800020e <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 80001b4:	7ffa      	ldrb	r2, [r7, #31]
 80001b6:	4613      	mov	r3, r2
 80001b8:	009b      	lsls	r3, r3, #2
 80001ba:	4413      	add	r3, r2
 80001bc:	009b      	lsls	r3, r3, #2
 80001be:	461a      	mov	r2, r3
 80001c0:	4b47      	ldr	r3, [pc, #284]	; (80002e0 <rt_init+0x138>)
 80001c2:	4413      	add	r3, r2
 80001c4:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 80001c6:	7ffb      	ldrb	r3, [r7, #31]
 80001c8:	009b      	lsls	r3, r3, #2
 80001ca:	4a46      	ldr	r2, [pc, #280]	; (80002e4 <rt_init+0x13c>)
 80001cc:	4413      	add	r3, r2
 80001ce:	603b      	str	r3, [r7, #0]
		if (def->active) {
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	7c9b      	ldrb	r3, [r3, #18]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d014      	beq.n	8000202 <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	6818      	ldr	r0, [r3, #0]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	6859      	ldr	r1, [r3, #4]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	8a1c      	ldrh	r4, [r3, #16]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	689d      	ldr	r5, [r3, #8]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	68db      	ldr	r3, [r3, #12]
 80001ec:	683a      	ldr	r2, [r7, #0]
 80001ee:	9201      	str	r2, [sp, #4]
 80001f0:	9300      	str	r3, [sp, #0]
 80001f2:	462b      	mov	r3, r5
 80001f4:	4622      	mov	r2, r4
 80001f6:	f005 ffcc 	bl	8006192 <xTaskCreate>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d003      	beq.n	8000208 <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 8000200:	e7fe      	b.n	8000200 <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000208:	7ffb      	ldrb	r3, [r7, #31]
 800020a:	3301      	adds	r3, #1
 800020c:	77fb      	strb	r3, [r7, #31]
 800020e:	7ffb      	ldrb	r3, [r7, #31]
 8000210:	2b04      	cmp	r3, #4
 8000212:	d9cf      	bls.n	80001b4 <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 8000214:	2300      	movs	r3, #0
 8000216:	77bb      	strb	r3, [r7, #30]
 8000218:	e01c      	b.n	8000254 <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 800021a:	7fbb      	ldrb	r3, [r7, #30]
 800021c:	011b      	lsls	r3, r3, #4
 800021e:	4a32      	ldr	r2, [pc, #200]	; (80002e8 <rt_init+0x140>)
 8000220:	4413      	add	r3, r2
 8000222:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 8000224:	7fbb      	ldrb	r3, [r7, #30]
 8000226:	009b      	lsls	r3, r3, #2
 8000228:	4a30      	ldr	r2, [pc, #192]	; (80002ec <rt_init+0x144>)
 800022a:	4413      	add	r3, r2
 800022c:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	6818      	ldr	r0, [r3, #0]
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	685b      	ldr	r3, [r3, #4]
 8000236:	2200      	movs	r2, #0
 8000238:	4619      	mov	r1, r3
 800023a:	f005 fb1b 	bl	8005874 <xQueueGenericCreate>
 800023e:	4602      	mov	r2, r0
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d100      	bne.n	800024e <rt_init+0xa6>
				== 0) {
			while (1)
 800024c:	e7fe      	b.n	800024c <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 800024e:	7fbb      	ldrb	r3, [r7, #30]
 8000250:	3301      	adds	r3, #1
 8000252:	77bb      	strb	r3, [r7, #30]
 8000254:	7fbb      	ldrb	r3, [r7, #30]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d9df      	bls.n	800021a <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 800025a:	2300      	movs	r3, #0
 800025c:	777b      	strb	r3, [r7, #29]
 800025e:	e020      	b.n	80002a2 <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 8000260:	7f7b      	ldrb	r3, [r7, #29]
 8000262:	011b      	lsls	r3, r3, #4
 8000264:	4a22      	ldr	r2, [pc, #136]	; (80002f0 <rt_init+0x148>)
 8000266:	4413      	add	r3, r2
 8000268:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 800026a:	7f7b      	ldrb	r3, [r7, #29]
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	4a21      	ldr	r2, [pc, #132]	; (80002f4 <rt_init+0x14c>)
 8000270:	4413      	add	r3, r2
 8000272:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 8000274:	697b      	ldr	r3, [r7, #20]
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	6859      	ldr	r1, [r3, #4]
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	689a      	ldr	r2, [r3, #8]
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	2300      	movs	r3, #0
 8000288:	f006 ff22 	bl	80070d0 <xTimerCreate>
 800028c:	4602      	mov	r2, r0
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d100      	bne.n	800029c <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 800029a:	e7fe      	b.n	800029a <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 800029c:	7f7b      	ldrb	r3, [r7, #29]
 800029e:	3301      	adds	r3, #1
 80002a0:	777b      	strb	r3, [r7, #29]
 80002a2:	7f7b      	ldrb	r3, [r7, #29]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d9db      	bls.n	8000260 <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 80002a8:	2300      	movs	r3, #0
 80002aa:	773b      	strb	r3, [r7, #28]
 80002ac:	e011      	b.n	80002d2 <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 80002ae:	7f3b      	ldrb	r3, [r7, #28]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	4a11      	ldr	r2, [pc, #68]	; (80002f8 <rt_init+0x150>)
 80002b4:	4413      	add	r3, r2
 80002b6:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 80002b8:	f004 ffa2 	bl	8005200 <xEventGroupCreate>
 80002bc:	4602      	mov	r2, r0
 80002be:	69bb      	ldr	r3, [r7, #24]
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	69bb      	ldr	r3, [r7, #24]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d100      	bne.n	80002cc <rt_init+0x124>
			while (1)
 80002ca:	e7fe      	b.n	80002ca <rt_init+0x122>
			evgroup++) {
 80002cc:	7f3b      	ldrb	r3, [r7, #28]
 80002ce:	3301      	adds	r3, #1
 80002d0:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 80002d2:	7f3b      	ldrb	r3, [r7, #28]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d9ea      	bls.n	80002ae <rt_init+0x106>
				;
		}
	}

}
 80002d8:	bf00      	nop
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bdb0      	pop	{r4, r5, r7, pc}
 80002e0:	080081e0 	.word	0x080081e0
 80002e4:	2000353c 	.word	0x2000353c
 80002e8:	08008244 	.word	0x08008244
 80002ec:	20003560 	.word	0x20003560
 80002f0:	08008264 	.word	0x08008264
 80002f4:	20003550 	.word	0x20003550
 80002f8:	20003558 	.word	0x20003558

080002fc <rt_evbitwait_any>:

uint32_t rt_evbitwait_any(rt_evgroup_t Ev) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af02      	add	r7, sp, #8
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	4a09      	ldr	r2, [pc, #36]	; (8000330 <rt_evbitwait_any+0x34>)
 800030a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030e:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdTRUE, pdFALSE, portMAX_DELAY);
 8000310:	f04f 33ff 	mov.w	r3, #4294967295
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2300      	movs	r3, #0
 8000318:	2201      	movs	r2, #1
 800031a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800031e:	68f8      	ldr	r0, [r7, #12]
 8000320:	f004 ff88 	bl	8005234 <xEventGroupWaitBits>
 8000324:	4603      	mov	r3, r0
}
 8000326:	4618      	mov	r0, r3
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20003558 	.word	0x20003558

08000334 <rt_evbit_set>:

void rt_evbit_set(rt_evgroup_t Ev, uint32_t bit) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	6039      	str	r1, [r7, #0]
 800033e:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000340:	2201      	movs	r2, #1
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fa02 f303 	lsl.w	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	4a05      	ldr	r2, [pc, #20]	; (8000364 <rt_evbit_set+0x30>)
 800034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000352:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBits(Evh, msk);
 8000354:	68f9      	ldr	r1, [r7, #12]
 8000356:	68b8      	ldr	r0, [r7, #8]
 8000358:	f005 f836 	bl	80053c8 <xEventGroupSetBits>
}
 800035c:	bf00      	nop
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20003558 	.word	0x20003558

08000368 <rt_evbit_set_from_ISR>:

void rt_evbit_set_from_ISR(rt_evgroup_t Ev, uint32_t bit) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	6039      	str	r1, [r7, #0]
 8000372:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000374:	2201      	movs	r2, #1
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	fa02 f303 	lsl.w	r3, r2, r3
 800037c:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	4a06      	ldr	r2, [pc, #24]	; (800039c <rt_evbit_set_from_ISR+0x34>)
 8000382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000386:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBitsFromISR(Evh, msk, pdFALSE);
 8000388:	2200      	movs	r2, #0
 800038a:	68f9      	ldr	r1, [r7, #12]
 800038c:	68b8      	ldr	r0, [r7, #8]
 800038e:	f005 f8d3 	bl	8005538 <xEventGroupSetBitsFromISR>
	portYIELD_FROM_ISR(pdFALSE);
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20003558 	.word	0x20003558

080003a0 <task_ble>:

//#include "task_ble.h"
#include "bluetooth_le.h"
#include <stdio.h>
// working all the time, checking if something is received or sending data to android device
void task_ble(void *pvParameters) {
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
//	ble_receive_string("AT+RX\r", pData);

//	free(pData);
//	AT + RX \ r
//	int i = 0;
	for (;;) {
 80003a8:	e7fe      	b.n	80003a8 <task_ble+0x8>

080003aa <task_eyes>:
 *      Author: Arkadiusz
 */

//#include "task_eyes.h"

void task_eyes(void *pvParameters) {
 80003aa:	b480      	push	{r7}
 80003ac:	b083      	sub	sp, #12
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80003b2:	e7fe      	b.n	80003b2 <task_eyes+0x8>

080003b4 <task_memory>:
 *      Author: Arkadiusz
 */

//#include "task_memory.h"

void task_memory(void *pvParameters) {
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80003bc:	e7fe      	b.n	80003bc <task_memory+0x8>
	...

080003c0 <HAL_GPIO_EXTI_Callback>:
static uint32_t ultrasound_time = 0U;
bool ultrasound_was = false;
bool ultrasound_done = false;

// interrupt pin callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	80fb      	strh	r3, [r7, #6]
//	IRQ_ULTRASOUND_ECHO_Pin
	if (GPIO_Pin & (1 << IRQ_ULTRASOUND_ECHO_Pin)) {
 80003ca:	88fb      	ldrh	r3, [r7, #6]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d01e      	beq.n	8000412 <HAL_GPIO_EXTI_Callback+0x52>

		if (ultrasound_was == false) {
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <HAL_GPIO_EXTI_Callback+0x5c>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	f083 0301 	eor.w	r3, r3, #1
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d008      	beq.n	80003f4 <HAL_GPIO_EXTI_Callback+0x34>
			ultrasound_time = HAL_GetTick();
 80003e2:	f000 ff15 	bl	8001210 <HAL_GetTick>
 80003e6:	4602      	mov	r2, r0
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <HAL_GPIO_EXTI_Callback+0x60>)
 80003ea:	601a      	str	r2, [r3, #0]
			ultrasound_was = true;
 80003ec:	4b0b      	ldr	r3, [pc, #44]	; (800041c <HAL_GPIO_EXTI_Callback+0x5c>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	701a      	strb	r2, [r3, #0]
			rt_evbit_set_from_ISR(rt_evgroup_sensors,
					evgroup_ultrasound_evbit_echo);
//			ultrasound_done = true;
		}
	}
}
 80003f2:	e00e      	b.n	8000412 <HAL_GPIO_EXTI_Callback+0x52>
			ultrasound_time = HAL_GetTick() - ultrasound_time;
 80003f4:	f000 ff0c 	bl	8001210 <HAL_GetTick>
 80003f8:	4602      	mov	r2, r0
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <HAL_GPIO_EXTI_Callback+0x60>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	1ad3      	subs	r3, r2, r3
 8000400:	4a07      	ldr	r2, [pc, #28]	; (8000420 <HAL_GPIO_EXTI_Callback+0x60>)
 8000402:	6013      	str	r3, [r2, #0]
			ultrasound_was = false;
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
			rt_evbit_set_from_ISR(rt_evgroup_sensors,
 800040a:	2100      	movs	r1, #0
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ffab 	bl	8000368 <rt_evbit_set_from_ISR>
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000030 	.word	0x20000030
 8000420:	2000002c 	.word	0x2000002c

08000424 <task_sensors>:

void task_sensors(void *pvParameters) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

	uint32_t evgroup = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
		// ultrasound measurment
//		ultrasound_trig();
//		if ( ultrasound_done ) {
//		}

		evgroup = rt_evbitwait_any(rt_evgroup_sensors);
 8000430:	2000      	movs	r0, #0
 8000432:	f7ff ff63 	bl	80002fc <rt_evbitwait_any>
 8000436:	60f8      	str	r0, [r7, #12]

		if (evgroup & (1 << evgroup_ultrasound_evbit_echo)) {
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	2b00      	cmp	r3, #0
 8000440:	d0f6      	beq.n	8000430 <task_sensors+0xc>
			// obsluga sensora ultradzwiekowego
			// policz odleglosc
			// na podstawie na danych zareaguj :)

			// jakis tam bit do ustawienia, np skret w lewo - uzupelnic
			rt_evbit_set(rt_evgroup_state_machine, (1 << 8));
 8000442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000446:	2001      	movs	r0, #1
 8000448:	f7ff ff74 	bl	8000334 <rt_evbit_set>
		evgroup = rt_evbitwait_any(rt_evgroup_sensors);
 800044c:	e7f0      	b.n	8000430 <task_sensors+0xc>

0800044e <task_state_machine>:
 */

//#include "task_state_machine.h"
#include "runtime.h"
#define jakis_tam_bit 12
void task_state_machine(void *pvParameters) {
 800044e:	b580      	push	{r7, lr}
 8000450:	b084      	sub	sp, #16
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	uint32_t evgroup = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]

	for (;;) {

		evgroup = rt_evbitwait_any(rt_evgroup_sensors);
 800045a:	2000      	movs	r0, #0
 800045c:	f7ff ff4e 	bl	80002fc <rt_evbitwait_any>
 8000460:	60f8      	str	r0, [r7, #12]
 8000462:	e7fa      	b.n	800045a <task_state_machine+0xc>

08000464 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000474:	4b25      	ldr	r3, [pc, #148]	; (800050c <MX_ADC_Init+0xa8>)
 8000476:	4a26      	ldr	r2, [pc, #152]	; (8000510 <MX_ADC_Init+0xac>)
 8000478:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800047a:	4b24      	ldr	r3, [pc, #144]	; (800050c <MX_ADC_Init+0xa8>)
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000480:	4b22      	ldr	r3, [pc, #136]	; (800050c <MX_ADC_Init+0xa8>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000486:	4b21      	ldr	r3, [pc, #132]	; (800050c <MX_ADC_Init+0xa8>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800048c:	4b1f      	ldr	r3, [pc, #124]	; (800050c <MX_ADC_Init+0xa8>)
 800048e:	2200      	movs	r2, #0
 8000490:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000492:	4b1e      	ldr	r3, [pc, #120]	; (800050c <MX_ADC_Init+0xa8>)
 8000494:	2200      	movs	r2, #0
 8000496:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000498:	4b1c      	ldr	r3, [pc, #112]	; (800050c <MX_ADC_Init+0xa8>)
 800049a:	2200      	movs	r2, #0
 800049c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800049e:	4b1b      	ldr	r3, [pc, #108]	; (800050c <MX_ADC_Init+0xa8>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80004a4:	4b19      	ldr	r3, [pc, #100]	; (800050c <MX_ADC_Init+0xa8>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004aa:	4b18      	ldr	r3, [pc, #96]	; (800050c <MX_ADC_Init+0xa8>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80004b2:	4b16      	ldr	r3, [pc, #88]	; (800050c <MX_ADC_Init+0xa8>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_ADC_Init+0xa8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <MX_ADC_Init+0xa8>)
 80004c2:	2210      	movs	r2, #16
 80004c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_ADC_Init+0xa8>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_ADC_Init+0xa8>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004d4:	480d      	ldr	r0, [pc, #52]	; (800050c <MX_ADC_Init+0xa8>)
 80004d6:	f000 fea5 	bl	8001224 <HAL_ADC_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80004e0:	f000 fab8 	bl	8000a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004e4:	2301      	movs	r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	4619      	mov	r1, r3
 80004f4:	4805      	ldr	r0, [pc, #20]	; (800050c <MX_ADC_Init+0xa8>)
 80004f6:	f001 f939 	bl	800176c <HAL_ADC_ConfigChannel>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000500:	f000 faa8 	bl	8000a54 <Error_Handler>
  }

}
 8000504:	bf00      	nop
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20003568 	.word	0x20003568
 8000510:	40012400 	.word	0x40012400

08000514 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	f107 031c 	add.w	r3, r7, #28
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a2d      	ldr	r2, [pc, #180]	; (80005e8 <HAL_ADC_MspInit+0xd4>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d154      	bne.n	80005e0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000536:	4b2d      	ldr	r3, [pc, #180]	; (80005ec <HAL_ADC_MspInit+0xd8>)
 8000538:	6a1b      	ldr	r3, [r3, #32]
 800053a:	4a2c      	ldr	r2, [pc, #176]	; (80005ec <HAL_ADC_MspInit+0xd8>)
 800053c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000540:	6213      	str	r3, [r2, #32]
 8000542:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <HAL_ADC_MspInit+0xd8>)
 8000544:	6a1b      	ldr	r3, [r3, #32]
 8000546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800054a:	61bb      	str	r3, [r7, #24]
 800054c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800054e:	4b27      	ldr	r3, [pc, #156]	; (80005ec <HAL_ADC_MspInit+0xd8>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4a26      	ldr	r2, [pc, #152]	; (80005ec <HAL_ADC_MspInit+0xd8>)
 8000554:	f043 0304 	orr.w	r3, r3, #4
 8000558:	61d3      	str	r3, [r2, #28]
 800055a:	4b24      	ldr	r3, [pc, #144]	; (80005ec <HAL_ADC_MspInit+0xd8>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f003 0304 	and.w	r3, r3, #4
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b21      	ldr	r3, [pc, #132]	; (80005ec <HAL_ADC_MspInit+0xd8>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	4a20      	ldr	r2, [pc, #128]	; (80005ec <HAL_ADC_MspInit+0xd8>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	61d3      	str	r3, [r2, #28]
 8000572:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <HAL_ADC_MspInit+0xd8>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <HAL_ADC_MspInit+0xd8>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a1a      	ldr	r2, [pc, #104]	; (80005ec <HAL_ADC_MspInit+0xd8>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <HAL_ADC_MspInit+0xd8>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 8000596:	2301      	movs	r3, #1
 8000598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800059a:	2303      	movs	r3, #3
 800059c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80005a2:	f107 031c 	add.w	r3, r7, #28
 80005a6:	4619      	mov	r1, r3
 80005a8:	4811      	ldr	r0, [pc, #68]	; (80005f0 <HAL_ADC_MspInit+0xdc>)
 80005aa:	f001 fc87 	bl	8001ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 80005ae:	2386      	movs	r3, #134	; 0x86
 80005b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b2:	2303      	movs	r3, #3
 80005b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	4619      	mov	r1, r3
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <HAL_ADC_MspInit+0xe0>)
 80005c2:	f001 fc7b 	bl	8001ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 80005c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005cc:	2303      	movs	r3, #3
 80005ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	4619      	mov	r1, r3
 80005da:	4807      	ldr	r0, [pc, #28]	; (80005f8 <HAL_ADC_MspInit+0xe4>)
 80005dc:	f001 fc6e 	bl	8001ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005e0:	bf00      	nop
 80005e2:	3730      	adds	r7, #48	; 0x30
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40012400 	.word	0x40012400
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020800 	.word	0x40020800
 80005f4:	40020000 	.word	0x40020000
 80005f8:	40020400 	.word	0x40020400

080005fc <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000644:	4a05      	ldr	r2, [pc, #20]	; (800065c <MX_FREERTOS_Init+0x1c>)
 8000646:	2100      	movs	r1, #0
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_FREERTOS_Init+0x20>)
 800064a:	f004 fccf 	bl	8004fec <osThreadNew>
 800064e:	4602      	mov	r2, r0
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <MX_FREERTOS_Init+0x24>)
 8000652:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 8000654:	f7ff fda8 	bl	80001a8 <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	08008284 	.word	0x08008284
 8000660:	08000669 	.word	0x08000669
 8000664:	200035bc 	.word	0x200035bc

08000668 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f004 fd65 	bl	8005140 <osDelay>
 8000676:	e7fb      	b.n	8000670 <StartDefaultTask+0x8>

08000678 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	; 0x28
 800067c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b72      	ldr	r3, [pc, #456]	; (8000858 <MX_GPIO_Init+0x1e0>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	4a71      	ldr	r2, [pc, #452]	; (8000858 <MX_GPIO_Init+0x1e0>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	61d3      	str	r3, [r2, #28]
 800069a:	4b6f      	ldr	r3, [pc, #444]	; (8000858 <MX_GPIO_Init+0x1e0>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b6c      	ldr	r3, [pc, #432]	; (8000858 <MX_GPIO_Init+0x1e0>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	4a6b      	ldr	r2, [pc, #428]	; (8000858 <MX_GPIO_Init+0x1e0>)
 80006ac:	f043 0320 	orr.w	r3, r3, #32
 80006b0:	61d3      	str	r3, [r2, #28]
 80006b2:	4b69      	ldr	r3, [pc, #420]	; (8000858 <MX_GPIO_Init+0x1e0>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f003 0320 	and.w	r3, r3, #32
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b66      	ldr	r3, [pc, #408]	; (8000858 <MX_GPIO_Init+0x1e0>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a65      	ldr	r2, [pc, #404]	; (8000858 <MX_GPIO_Init+0x1e0>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b63      	ldr	r3, [pc, #396]	; (8000858 <MX_GPIO_Init+0x1e0>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b60      	ldr	r3, [pc, #384]	; (8000858 <MX_GPIO_Init+0x1e0>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a5f      	ldr	r2, [pc, #380]	; (8000858 <MX_GPIO_Init+0x1e0>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b5d      	ldr	r3, [pc, #372]	; (8000858 <MX_GPIO_Init+0x1e0>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ee:	4b5a      	ldr	r3, [pc, #360]	; (8000858 <MX_GPIO_Init+0x1e0>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a59      	ldr	r2, [pc, #356]	; (8000858 <MX_GPIO_Init+0x1e0>)
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b57      	ldr	r3, [pc, #348]	; (8000858 <MX_GPIO_Init+0x1e0>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f003 0308 	and.w	r3, r3, #8
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 8000706:	2200      	movs	r2, #0
 8000708:	f640 616e 	movw	r1, #3694	; 0xe6e
 800070c:	4853      	ldr	r0, [pc, #332]	; (800085c <MX_GPIO_Init+0x1e4>)
 800070e:	f001 fe47 	bl	80023a0 <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000712:	2200      	movs	r2, #0
 8000714:	f248 7108 	movw	r1, #34568	; 0x8708
 8000718:	4851      	ldr	r0, [pc, #324]	; (8000860 <MX_GPIO_Init+0x1e8>)
 800071a:	f001 fe41 	bl	80023a0 <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	2110      	movs	r1, #16
 8000722:	484e      	ldr	r0, [pc, #312]	; (800085c <MX_GPIO_Init+0x1e4>)
 8000724:	f001 fe3c 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 8000728:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072e:	2303      	movs	r3, #3
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	4847      	ldr	r0, [pc, #284]	; (800085c <MX_GPIO_Init+0x1e4>)
 800073e:	f001 fbbd 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 8000742:	f640 637e 	movw	r3, #3710	; 0xe7e
 8000746:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4619      	mov	r1, r3
 800075a:	4840      	ldr	r0, [pc, #256]	; (800085c <MX_GPIO_Init+0x1e4>)
 800075c:	f001 fbae 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000760:	f248 7308 	movw	r3, #34568	; 0x8708
 8000764:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	4839      	ldr	r0, [pc, #228]	; (8000860 <MX_GPIO_Init+0x1e8>)
 800077a:	f001 fb9f 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 800077e:	f241 0370 	movw	r3, #4208	; 0x1070
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000784:	2303      	movs	r3, #3
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	4833      	ldr	r0, [pc, #204]	; (8000860 <MX_GPIO_Init+0x1e8>)
 8000794:	f001 fb92 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin|IRQ_ULTRASOUND_ECHO_Pin;
 8000798:	2303      	movs	r3, #3
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	4b31      	ldr	r3, [pc, #196]	; (8000864 <MX_GPIO_Init+0x1ec>)
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	482f      	ldr	r0, [pc, #188]	; (8000868 <MX_GPIO_Init+0x1f0>)
 80007ac:	f001 fb86 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 80007b0:	f242 333c 	movw	r3, #9020	; 0x233c
 80007b4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b6:	2303      	movs	r3, #3
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4828      	ldr	r0, [pc, #160]	; (8000868 <MX_GPIO_Init+0x1f0>)
 80007c6:	f001 fb79 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_LEFT_Pin;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_LEFT_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4822      	ldr	r0, [pc, #136]	; (8000868 <MX_GPIO_Init+0x1f0>)
 80007e0:	f001 fb6c 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4819      	ldr	r0, [pc, #100]	; (800085c <MX_GPIO_Init+0x1e4>)
 80007f8:	f001 fb60 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 80007fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4813      	ldr	r0, [pc, #76]	; (8000860 <MX_GPIO_Init+0x1e8>)
 8000812:	f001 fb53 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000816:	2304      	movs	r3, #4
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081a:	2303      	movs	r3, #3
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4810      	ldr	r0, [pc, #64]	; (800086c <MX_GPIO_Init+0x1f4>)
 800082a:	f001 fb47 	bl	8001ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	2006      	movs	r0, #6
 8000834:	f001 fafe 	bl	8001e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000838:	2006      	movs	r0, #6
 800083a:	f001 fb27 	bl	8001e8c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	2007      	movs	r0, #7
 8000844:	f001 faf6 	bl	8001e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000848:	2007      	movs	r0, #7
 800084a:	f001 fb1f 	bl	8001e8c <HAL_NVIC_EnableIRQ>

}
 800084e:	bf00      	nop
 8000850:	3728      	adds	r7, #40	; 0x28
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40020800 	.word	0x40020800
 8000860:	40020000 	.word	0x40020000
 8000864:	10110000 	.word	0x10110000
 8000868:	40020400 	.word	0x40020400
 800086c:	40020c00 	.word	0x40020c00

08000870 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000876:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <MX_I2C1_Init+0x54>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C1_Init+0x50>)
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_I2C1_Init+0x58>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_I2C1_Init+0x50>)
 800088e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000892:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_I2C1_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_I2C1_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_I2C1_Init+0x50>)
 80008ae:	f001 fdc1 	bl	8002434 <HAL_I2C_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b8:	f000 f8cc 	bl	8000a54 <Error_Handler>
  }

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200035c0 	.word	0x200035c0
 80008c4:	40005400 	.word	0x40005400
 80008c8:	000186a0 	.word	0x000186a0

080008cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a17      	ldr	r2, [pc, #92]	; (8000948 <HAL_I2C_MspInit+0x7c>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d127      	bne.n	800093e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <HAL_I2C_MspInit+0x80>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	4a16      	ldr	r2, [pc, #88]	; (800094c <HAL_I2C_MspInit+0x80>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	61d3      	str	r3, [r2, #28]
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <HAL_I2C_MspInit+0x80>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000906:	23c0      	movs	r3, #192	; 0xc0
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800090a:	2312      	movs	r3, #18
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090e:	2301      	movs	r3, #1
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000916:	2304      	movs	r3, #4
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <HAL_I2C_MspInit+0x84>)
 8000922:	f001 facb 	bl	8001ebc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_I2C_MspInit+0x80>)
 8000928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_I2C_MspInit+0x80>)
 800092c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000930:	6253      	str	r3, [r2, #36]	; 0x24
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_I2C_MspInit+0x80>)
 8000934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40005400 	.word	0x40005400
 800094c:	40023800 	.word	0x40023800
 8000950:	40020400 	.word	0x40020400

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 fc2f 	bl	80011ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f818 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f7ff fe8a 	bl	8000678 <MX_GPIO_Init>
  MX_ADC_Init();
 8000964:	f7ff fd7e 	bl	8000464 <MX_ADC_Init>
  MX_I2C1_Init();
 8000968:	f7ff ff82 	bl	8000870 <MX_I2C1_Init>
  MX_TIM2_Init();
 800096c:	f000 f970 	bl	8000c50 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000970:	f000 f9e0 	bl	8000d34 <MX_TIM3_Init>
  MX_TIM9_Init();
 8000974:	f000 fa52 	bl	8000e1c <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8000978:	f000 fb8c 	bl	8001094 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	device_init();
 800097c:	f7ff fc00 	bl	8000180 <device_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000980:	f004 face 	bl	8004f20 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8000984:	f7ff fe5c 	bl	8000640 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000988:	f004 fafc 	bl	8004f84 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800098c:	e7fe      	b.n	800098c <main+0x38>
	...

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b092      	sub	sp, #72	; 0x48
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2234      	movs	r2, #52	; 0x34
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f007 fab7 	bl	8007f12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <SystemClock_Config+0x9c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <SystemClock_Config+0x9c>)
 80009bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009c0:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80009c2:	2303      	movs	r3, #3
 80009c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ca:	2301      	movs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ce:	2310      	movs	r3, #16
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	2302      	movs	r3, #2
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80009dc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80009e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80009e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fecb 	bl	8002788 <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80009f8:	f000 f82c 	bl	8000a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fc:	230f      	movs	r3, #15
 80009fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a00:	2303      	movs	r3, #3
 8000a02:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	2101      	movs	r1, #1
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 fb35 	bl	8003084 <HAL_RCC_ClockConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a20:	f000 f818 	bl	8000a54 <Error_Handler>
  }
}
 8000a24:	bf00      	nop
 8000a26:	3748      	adds	r7, #72	; 0x48
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40007000 	.word	0x40007000

08000a30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d101      	bne.n	8000a46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a42:	f000 fbd3 	bl	80011ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40000c00 	.word	0x40000c00

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_MspInit+0x64>)
 8000a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7e:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <HAL_MspInit+0x64>)
 8000a80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a84:	6253      	str	r3, [r2, #36]	; 0x24
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_MspInit+0x64>)
 8000a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_MspInit+0x64>)
 8000a94:	6a1b      	ldr	r3, [r3, #32]
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_MspInit+0x64>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6213      	str	r3, [r2, #32]
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_MspInit+0x64>)
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_MspInit+0x64>)
 8000aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_MspInit+0x64>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	6253      	str	r3, [r2, #36]	; 0x24
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_MspInit+0x64>)
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	210f      	movs	r1, #15
 8000ac6:	f06f 0001 	mvn.w	r0, #1
 8000aca:	f001 f9b3 	bl	8001e34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	; 0x30
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	202e      	movs	r0, #46	; 0x2e
 8000af2:	f001 f99f 	bl	8001e34 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000af6:	202e      	movs	r0, #46	; 0x2e
 8000af8:	f001 f9c8 	bl	8001e8c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_InitTick+0x9c>)
 8000afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <HAL_InitTick+0x9c>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	6253      	str	r3, [r2, #36]	; 0x24
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_InitTick+0x9c>)
 8000b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b14:	f107 0210 	add.w	r2, r7, #16
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fcf8 	bl	8003514 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b24:	f002 fcce 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 8000b28:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <HAL_InitTick+0xa0>)
 8000b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b32:	0c9b      	lsrs	r3, r3, #18
 8000b34:	3b01      	subs	r3, #1
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_InitTick+0xa4>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <HAL_InitTick+0xa8>)
 8000b3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_InitTick+0xa4>)
 8000b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b44:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_InitTick+0xa4>)
 8000b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_InitTick+0xa4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_InitTick+0xa4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000b58:	4809      	ldr	r0, [pc, #36]	; (8000b80 <HAL_InitTick+0xa4>)
 8000b5a:	f002 fd7d 	bl	8003658 <HAL_TIM_Base_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d104      	bne.n	8000b6e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <HAL_InitTick+0xa4>)
 8000b66:	f002 fe1f 	bl	80037a8 <HAL_TIM_Base_Start_IT>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3730      	adds	r7, #48	; 0x30
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	431bde83 	.word	0x431bde83
 8000b80:	20003614 	.word	0x20003614
 8000b84:	40000c00 	.word	0x40000c00

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <HardFault_Handler+0x4>

08000b9a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <UsageFault_Handler+0x4>

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f001 fc21 	bl	8002404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f001 fc1a 	bl	8002404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <TIM5_IRQHandler+0x10>)
 8000bda:	f002 fefc 	bl	80039d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20003614 	.word	0x20003614

08000be8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <SystemInit+0x5c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <SystemInit+0x5c>)
 8000bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <SystemInit+0x5c>)
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	4911      	ldr	r1, [pc, #68]	; (8000c44 <SystemInit+0x5c>)
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <SystemInit+0x60>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <SystemInit+0x5c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <SystemInit+0x5c>)
 8000c0a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000c0e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000c12:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <SystemInit+0x5c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <SystemInit+0x5c>)
 8000c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c1e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <SystemInit+0x5c>)
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <SystemInit+0x5c>)
 8000c26:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000c2a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <SystemInit+0x5c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x64>)
 8000c34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c38:	609a      	str	r2, [r3, #8]
#endif
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800
 8000c48:	88ffc00c 	.word	0x88ffc00c
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <MX_TIM2_Init+0xe0>)
 8000c7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c82:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <MX_TIM2_Init+0xe0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <MX_TIM2_Init+0xe0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200;
 8000c8e:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <MX_TIM2_Init+0xe0>)
 8000c90:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000c94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <MX_TIM2_Init+0xe0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c9c:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <MX_TIM2_Init+0xe0>)
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca2:	4823      	ldr	r0, [pc, #140]	; (8000d30 <MX_TIM2_Init+0xe0>)
 8000ca4:	f002 fcd8 	bl	8003658 <HAL_TIM_Base_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000cae:	f7ff fed1 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb8:	f107 0318 	add.w	r3, r7, #24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481c      	ldr	r0, [pc, #112]	; (8000d30 <MX_TIM2_Init+0xe0>)
 8000cc0:	f003 f8f6 	bl	8003eb0 <HAL_TIM_ConfigClockSource>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000cca:	f7ff fec3 	bl	8000a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cce:	4818      	ldr	r0, [pc, #96]	; (8000d30 <MX_TIM2_Init+0xe0>)
 8000cd0:	f002 fdd0 	bl	8003874 <HAL_TIM_PWM_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cda:	f7ff febb 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4619      	mov	r1, r3
 8000cec:	4810      	ldr	r0, [pc, #64]	; (8000d30 <MX_TIM2_Init+0xe0>)
 8000cee:	f003 fdf1 	bl	80048d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000cf8:	f7ff feac 	bl	8000a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cfc:	2360      	movs	r3, #96	; 0x60
 8000cfe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2200      	movs	r2, #0
 8000d10:	4619      	mov	r1, r3
 8000d12:	4807      	ldr	r0, [pc, #28]	; (8000d30 <MX_TIM2_Init+0xe0>)
 8000d14:	f002 ff3c 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000d1e:	f7ff fe99 	bl	8000a54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000d22:	4803      	ldr	r0, [pc, #12]	; (8000d30 <MX_TIM2_Init+0xe0>)
 8000d24:	f000 f932 	bl	8000f8c <HAL_TIM_MspPostInit>

}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200036c8 	.word	0x200036c8

08000d34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3a:	f107 0318 	add.w	r3, r7, #24
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <MX_TIM3_Init+0xe0>)
 8000d60:	4a2d      	ldr	r2, [pc, #180]	; (8000e18 <MX_TIM3_Init+0xe4>)
 8000d62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d64:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <MX_TIM3_Init+0xe0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <MX_TIM3_Init+0xe0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200;
 8000d70:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <MX_TIM3_Init+0xe0>)
 8000d72:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000d76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <MX_TIM3_Init+0xe0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d7e:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <MX_TIM3_Init+0xe0>)
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d84:	4823      	ldr	r0, [pc, #140]	; (8000e14 <MX_TIM3_Init+0xe0>)
 8000d86:	f002 fc67 	bl	8003658 <HAL_TIM_Base_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000d90:	f7ff fe60 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d9a:	f107 0318 	add.w	r3, r7, #24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	481c      	ldr	r0, [pc, #112]	; (8000e14 <MX_TIM3_Init+0xe0>)
 8000da2:	f003 f885 	bl	8003eb0 <HAL_TIM_ConfigClockSource>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000dac:	f7ff fe52 	bl	8000a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000db0:	4818      	ldr	r0, [pc, #96]	; (8000e14 <MX_TIM3_Init+0xe0>)
 8000db2:	f002 fd5f 	bl	8003874 <HAL_TIM_PWM_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000dbc:	f7ff fe4a 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4811      	ldr	r0, [pc, #68]	; (8000e14 <MX_TIM3_Init+0xe0>)
 8000dd0:	f003 fd80 	bl	80048d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000dda:	f7ff fe3b 	bl	8000a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dde:	2360      	movs	r3, #96	; 0x60
 8000de0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	2208      	movs	r2, #8
 8000df2:	4619      	mov	r1, r3
 8000df4:	4807      	ldr	r0, [pc, #28]	; (8000e14 <MX_TIM3_Init+0xe0>)
 8000df6:	f002 fecb 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000e00:	f7ff fe28 	bl	8000a54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <MX_TIM3_Init+0xe0>)
 8000e06:	f000 f8c1 	bl	8000f8c <HAL_TIM_MspPostInit>

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20003650 	.word	0x20003650
 8000e18:	40000400 	.word	0x40000400

08000e1c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0318 	add.w	r3, r7, #24
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <MX_TIM9_Init+0xe0>)
 8000e48:	4a2d      	ldr	r2, [pc, #180]	; (8000f00 <MX_TIM9_Init+0xe4>)
 8000e4a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32768;
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <MX_TIM9_Init+0xe0>)
 8000e4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e52:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b29      	ldr	r3, [pc, #164]	; (8000efc <MX_TIM9_Init+0xe0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19;
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <MX_TIM9_Init+0xe0>)
 8000e5c:	2213      	movs	r2, #19
 8000e5e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <MX_TIM9_Init+0xe0>)
 8000e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e66:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <MX_TIM9_Init+0xe0>)
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000e6e:	4823      	ldr	r0, [pc, #140]	; (8000efc <MX_TIM9_Init+0xe0>)
 8000e70:	f002 fbf2 	bl	8003658 <HAL_TIM_Base_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000e7a:	f7ff fdeb 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e82:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000e84:	f107 0318 	add.w	r3, r7, #24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481c      	ldr	r0, [pc, #112]	; (8000efc <MX_TIM9_Init+0xe0>)
 8000e8c:	f003 f810 	bl	8003eb0 <HAL_TIM_ConfigClockSource>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM9_Init+0x7e>
  {
    Error_Handler();
 8000e96:	f7ff fddd 	bl	8000a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000e9a:	4818      	ldr	r0, [pc, #96]	; (8000efc <MX_TIM9_Init+0xe0>)
 8000e9c:	f002 fcea 	bl	8003874 <HAL_TIM_PWM_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM9_Init+0x8e>
  {
    Error_Handler();
 8000ea6:	f7ff fdd5 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4810      	ldr	r0, [pc, #64]	; (8000efc <MX_TIM9_Init+0xe0>)
 8000eba:	f003 fd0b 	bl	80048d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8000ec4:	f7ff fdc6 	bl	8000a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec8:	2360      	movs	r3, #96	; 0x60
 8000eca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2204      	movs	r2, #4
 8000edc:	4619      	mov	r1, r3
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <MX_TIM9_Init+0xe0>)
 8000ee0:	f002 fe56 	bl	8003b90 <HAL_TIM_PWM_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM9_Init+0xd2>
  {
    Error_Handler();
 8000eea:	f7ff fdb3 	bl	8000a54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8000eee:	4803      	ldr	r0, [pc, #12]	; (8000efc <MX_TIM9_Init+0xe0>)
 8000ef0:	f000 f84c 	bl	8000f8c <HAL_TIM_MspPostInit>

}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	; 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000368c 	.word	0x2000368c
 8000f00:	40010800 	.word	0x40010800

08000f04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f14:	d10c      	bne.n	8000f30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_TIM_Base_MspInit+0x7c>)
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_TIM_Base_MspInit+0x7c>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6253      	str	r3, [r2, #36]	; 0x24
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_TIM_Base_MspInit+0x7c>)
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8000f2e:	e022      	b.n	8000f76 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <HAL_TIM_Base_MspInit+0x80>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d10c      	bne.n	8000f54 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_TIM_Base_MspInit+0x7c>)
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <HAL_TIM_Base_MspInit+0x7c>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6253      	str	r3, [r2, #36]	; 0x24
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_TIM_Base_MspInit+0x7c>)
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
}
 8000f52:	e010      	b.n	8000f76 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM9)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_TIM_Base_MspInit+0x84>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d10b      	bne.n	8000f76 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_TIM_Base_MspInit+0x7c>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_TIM_Base_MspInit+0x7c>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	6213      	str	r3, [r2, #32]
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_TIM_Base_MspInit+0x7c>)
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
}
 8000f76:	bf00      	nop
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40000400 	.word	0x40000400
 8000f88:	40010800 	.word	0x40010800

08000f8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fac:	d11c      	bne.n	8000fe8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <HAL_TIM_MspPostInit+0xf0>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a32      	ldr	r2, [pc, #200]	; (800107c <HAL_TIM_MspPostInit+0xf0>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <HAL_TIM_MspPostInit+0xf0>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4827      	ldr	r0, [pc, #156]	; (8001080 <HAL_TIM_MspPostInit+0xf4>)
 8000fe2:	f000 ff6b 	bl	8001ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8000fe6:	e044      	b.n	8001072 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a25      	ldr	r2, [pc, #148]	; (8001084 <HAL_TIM_MspPostInit+0xf8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d11d      	bne.n	800102e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <HAL_TIM_MspPostInit+0xf0>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <HAL_TIM_MspPostInit+0xf0>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_TIM_MspPostInit+0xf0>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 800100a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800101c:	2302      	movs	r3, #2
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4818      	ldr	r0, [pc, #96]	; (8001088 <HAL_TIM_MspPostInit+0xfc>)
 8001028:	f000 ff48 	bl	8001ebc <HAL_GPIO_Init>
}
 800102c:	e021      	b.n	8001072 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a16      	ldr	r2, [pc, #88]	; (800108c <HAL_TIM_MspPostInit+0x100>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d11c      	bne.n	8001072 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_TIM_MspPostInit+0xf0>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <HAL_TIM_MspPostInit+0xf0>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	61d3      	str	r3, [r2, #28]
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_TIM_MspPostInit+0xf0>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8001050:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001062:	2303      	movs	r3, #3
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4808      	ldr	r0, [pc, #32]	; (8001090 <HAL_TIM_MspPostInit+0x104>)
 800106e:	f000 ff25 	bl	8001ebc <HAL_GPIO_Init>
}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	; 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000
 8001084:	40000400 	.word	0x40000400
 8001088:	40020800 	.word	0x40020800
 800108c:	40010800 	.word	0x40010800
 8001090:	40020400 	.word	0x40020400

08001094 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_USART3_UART_Init+0x50>)
 800109c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010cc:	f003 fc9c 	bl	8004a08 <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010d6:	f7ff fcbd 	bl	8000a54 <Error_Handler>
  }

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20003704 	.word	0x20003704
 80010e4:	40004800 	.word	0x40004800

080010e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <HAL_UART_MspInit+0x7c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d128      	bne.n	800115c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_UART_MspInit+0x80>)
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	4a16      	ldr	r2, [pc, #88]	; (8001168 <HAL_UART_MspInit+0x80>)
 8001110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001114:	6253      	str	r3, [r2, #36]	; 0x24
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_UART_MspInit+0x80>)
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_UART_MspInit+0x80>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a10      	ldr	r2, [pc, #64]	; (8001168 <HAL_UART_MspInit+0x80>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	61d3      	str	r3, [r2, #28]
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_UART_MspInit+0x80>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800113a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800114c:	2307      	movs	r3, #7
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <HAL_UART_MspInit+0x84>)
 8001158:	f000 feb0 	bl	8001ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40004800 	.word	0x40004800
 8001168:	40023800 	.word	0x40023800
 800116c:	40020400 	.word	0x40020400

08001170 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001170:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001172:	e003      	b.n	800117c <LoopCopyDataInit>

08001174 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001176:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001178:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800117a:	3104      	adds	r1, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800117c:	480a      	ldr	r0, [pc, #40]	; (80011a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001180:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001182:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001184:	d3f6      	bcc.n	8001174 <CopyDataInit>
  ldr r2, =_sbss
 8001186:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001188:	e002      	b.n	8001190 <LoopFillZerobss>

0800118a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800118c:	f842 3b04 	str.w	r3, [r2], #4

08001190 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001192:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001194:	d3f9      	bcc.n	800118a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001196:	f7ff fd27 	bl	8000be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119a:	f006 fe8b 	bl	8007eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119e:	f7ff fbd9 	bl	8000954 <main>
  bx lr
 80011a2:	4770      	bx	lr
  ldr r3, =_sidata
 80011a4:	080082d4 	.word	0x080082d4
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011ac:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80011b0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80011b4:	20003788 	.word	0x20003788

080011b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC1_IRQHandler>

080011ba <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c4:	2003      	movs	r0, #3
 80011c6:	f000 fe15 	bl	8001df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff fc86 	bl	8000adc <HAL_InitTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	e001      	b.n	80011e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011dc:	f7ff fc4a 	bl	8000a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011e0:	79fb      	ldrb	r3, [r7, #7]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_IncTick+0x1c>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_IncTick+0x20>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	4a03      	ldr	r2, [pc, #12]	; (8001208 <HAL_IncTick+0x1c>)
 80011fc:	6013      	str	r3, [r2, #0]
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20003744 	.word	0x20003744
 800120c:	20000008 	.word	0x20000008

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b02      	ldr	r3, [pc, #8]	; (8001220 <HAL_GetTick+0x10>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	20003744 	.word	0x20003744

08001224 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08e      	sub	sp, #56	; 0x38
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e282      	b.n	800174a <HAL_ADC_Init+0x526>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a9d      	ldr	r2, [pc, #628]	; (80014c0 <HAL_ADC_Init+0x29c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d004      	beq.n	8001258 <HAL_ADC_Init+0x34>
 800124e:	f240 11bd 	movw	r1, #445	; 0x1bd
 8001252:	489c      	ldr	r0, [pc, #624]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 8001254:	f7ff fc04 	bl	8000a60 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00e      	beq.n	800127e <HAL_ADC_Init+0x5a>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001268:	d009      	beq.n	800127e <HAL_ADC_Init+0x5a>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001272:	d004      	beq.n	800127e <HAL_ADC_Init+0x5a>
 8001274:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8001278:	4892      	ldr	r0, [pc, #584]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 800127a:	f7ff fbf1 	bl	8000a60 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d013      	beq.n	80012ae <HAL_ADC_Init+0x8a>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128e:	d00e      	beq.n	80012ae <HAL_ADC_Init+0x8a>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001298:	d009      	beq.n	80012ae <HAL_ADC_Init+0x8a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80012a2:	d004      	beq.n	80012ae <HAL_ADC_Init+0x8a>
 80012a4:	f240 11bf 	movw	r1, #447	; 0x1bf
 80012a8:	4886      	ldr	r0, [pc, #536]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 80012aa:	f7ff fbd9 	bl	8000a60 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d009      	beq.n	80012ca <HAL_ADC_Init+0xa6>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012be:	d004      	beq.n	80012ca <HAL_ADC_Init+0xa6>
 80012c0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80012c4:	487f      	ldr	r0, [pc, #508]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 80012c6:	f7ff fbcb 	bl	8000a60 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d009      	beq.n	80012e6 <HAL_ADC_Init+0xc2>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012da:	d004      	beq.n	80012e6 <HAL_ADC_Init+0xc2>
 80012dc:	f240 11c1 	movw	r1, #449	; 0x1c1
 80012e0:	4878      	ldr	r0, [pc, #480]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 80012e2:	f7ff fbbd 	bl	8000a60 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ee:	d008      	beq.n	8001302 <HAL_ADC_Init+0xde>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d004      	beq.n	8001302 <HAL_ADC_Init+0xde>
 80012f8:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80012fc:	4871      	ldr	r0, [pc, #452]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 80012fe:	f7ff fbaf 	bl	8000a60 <assert_failed>
  assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d020      	beq.n	800134c <HAL_ADC_Init+0x128>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	2b10      	cmp	r3, #16
 8001310:	d01c      	beq.n	800134c <HAL_ADC_Init+0x128>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	2b20      	cmp	r3, #32
 8001318:	d018      	beq.n	800134c <HAL_ADC_Init+0x128>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	2b30      	cmp	r3, #48	; 0x30
 8001320:	d014      	beq.n	800134c <HAL_ADC_Init+0x128>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	2b40      	cmp	r3, #64	; 0x40
 8001328:	d010      	beq.n	800134c <HAL_ADC_Init+0x128>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b50      	cmp	r3, #80	; 0x50
 8001330:	d00c      	beq.n	800134c <HAL_ADC_Init+0x128>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	2b60      	cmp	r3, #96	; 0x60
 8001338:	d008      	beq.n	800134c <HAL_ADC_Init+0x128>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	2b70      	cmp	r3, #112	; 0x70
 8001340:	d004      	beq.n	800134c <HAL_ADC_Init+0x128>
 8001342:	f240 11c3 	movw	r1, #451	; 0x1c3
 8001346:	485f      	ldr	r0, [pc, #380]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 8001348:	f7ff fb8a 	bl	8000a60 <assert_failed>
  assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d013      	beq.n	800137c <HAL_ADC_Init+0x158>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800135c:	d00e      	beq.n	800137c <HAL_ADC_Init+0x158>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001366:	d009      	beq.n	800137c <HAL_ADC_Init+0x158>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001370:	d004      	beq.n	800137c <HAL_ADC_Init+0x158>
 8001372:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001376:	4853      	ldr	r0, [pc, #332]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 8001378:	f7ff fb72 	bl	8000a60 <assert_failed>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <HAL_ADC_Init+0x172>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	2b04      	cmp	r3, #4
 800138a:	d004      	beq.n	8001396 <HAL_ADC_Init+0x172>
 800138c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001390:	484c      	ldr	r0, [pc, #304]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 8001392:	f7ff fb65 	bl	8000a60 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800139c:	2b00      	cmp	r3, #0
 800139e:	d009      	beq.n	80013b4 <HAL_ADC_Init+0x190>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d004      	beq.n	80013b4 <HAL_ADC_Init+0x190>
 80013aa:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80013ae:	4845      	ldr	r0, [pc, #276]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 80013b0:	f7ff fb56 	bl	8000a60 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80013bc:	d03e      	beq.n	800143c <HAL_ADC_Init+0x218>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80013c6:	d039      	beq.n	800143c <HAL_ADC_Init+0x218>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013cc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80013d0:	d034      	beq.n	800143c <HAL_ADC_Init+0x218>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d6:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80013da:	d02f      	beq.n	800143c <HAL_ADC_Init+0x218>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80013e4:	d02a      	beq.n	800143c <HAL_ADC_Init+0x218>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80013ee:	d025      	beq.n	800143c <HAL_ADC_Init+0x218>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80013f8:	d020      	beq.n	800143c <HAL_ADC_Init+0x218>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8001402:	d01b      	beq.n	800143c <HAL_ADC_Init+0x218>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001408:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800140c:	d016      	beq.n	800143c <HAL_ADC_Init+0x218>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	2b00      	cmp	r3, #0
 8001414:	d012      	beq.n	800143c <HAL_ADC_Init+0x218>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141e:	d00d      	beq.n	800143c <HAL_ADC_Init+0x218>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001424:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8001428:	d008      	beq.n	800143c <HAL_ADC_Init+0x218>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142e:	2b10      	cmp	r3, #16
 8001430:	d004      	beq.n	800143c <HAL_ADC_Init+0x218>
 8001432:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001436:	4823      	ldr	r0, [pc, #140]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 8001438:	f7ff fb12 	bl	8000a60 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <HAL_ADC_Init+0x236>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800144c:	2b01      	cmp	r3, #1
 800144e:	d004      	beq.n	800145a <HAL_ADC_Init+0x236>
 8001450:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8001454:	481b      	ldr	r0, [pc, #108]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 8001456:	f7ff fb03 	bl	8000a60 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d032      	beq.n	80014c8 <HAL_ADC_Init+0x2a4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_ADC_Init+0x24e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146e:	2b1c      	cmp	r3, #28
 8001470:	d904      	bls.n	800147c <HAL_ADC_Init+0x258>
 8001472:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8001476:	4813      	ldr	r0, [pc, #76]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 8001478:	f7ff faf2 	bl	8000a60 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <HAL_ADC_Init+0x276>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800148c:	2b01      	cmp	r3, #1
 800148e:	d004      	beq.n	800149a <HAL_ADC_Init+0x276>
 8001490:	f240 11cd 	movw	r1, #461	; 0x1cd
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 8001496:	f7ff fae3 	bl	8000a60 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d011      	beq.n	80014c8 <HAL_ADC_Init+0x2a4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_ADC_Init+0x290>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d909      	bls.n	80014c8 <HAL_ADC_Init+0x2a4>
 80014b4:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <HAL_ADC_Init+0x2a0>)
 80014ba:	f7ff fad1 	bl	8000a60 <assert_failed>
 80014be:	e003      	b.n	80014c8 <HAL_ADC_Init+0x2a4>
 80014c0:	40012400 	.word	0x40012400
 80014c4:	08007ff8 	.word	0x08007ff8
    }
  }
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014cc:	2b10      	cmp	r3, #16
 80014ce:	d017      	beq.n	8001500 <HAL_ADC_Init+0x2dc>
  {
    assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_ADC_Init+0x2dc>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014e0:	d00e      	beq.n	8001500 <HAL_ADC_Init+0x2dc>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014ea:	d009      	beq.n	8001500 <HAL_ADC_Init+0x2dc>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80014f4:	d004      	beq.n	8001500 <HAL_ADC_Init+0x2dc>
 80014f6:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80014fa:	4896      	ldr	r0, [pc, #600]	; (8001754 <HAL_ADC_Init+0x530>)
 80014fc:	f7ff fab0 	bl	8000a60 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	2b00      	cmp	r3, #0
 8001506:	d115      	bne.n	8001534 <HAL_ADC_Init+0x310>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	4b90      	ldr	r3, [pc, #576]	; (8001758 <HAL_ADC_Init+0x534>)
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	4a8f      	ldr	r2, [pc, #572]	; (8001758 <HAL_ADC_Init+0x534>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6213      	str	r3, [r2, #32]
 8001522:	4b8d      	ldr	r3, [pc, #564]	; (8001758 <HAL_ADC_Init+0x534>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7fe fff0 	bl	8000514 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	2b00      	cmp	r3, #0
 800153e:	f040 80ff 	bne.w	8001740 <HAL_ADC_Init+0x51c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800154a:	f023 0302 	bic.w	r3, r3, #2
 800154e:	f043 0202 	orr.w	r2, r3, #2
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001556:	4b81      	ldr	r3, [pc, #516]	; (800175c <HAL_ADC_Init+0x538>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	497e      	ldr	r1, [pc, #504]	; (800175c <HAL_ADC_Init+0x538>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001570:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001578:	4619      	mov	r1, r3
 800157a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157e:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001594:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800159a:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	2302      	movs	r3, #2
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	fa93 f3a3 	rbit	r3, r3
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	fab3 f383 	clz	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80015bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80015be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c0:	4313      	orrs	r3, r2
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c8:	2b10      	cmp	r3, #16
 80015ca:	d007      	beq.n	80015dc <HAL_ADC_Init+0x3b8>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80015d4:	4313      	orrs	r3, r2
 80015d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015d8:	4313      	orrs	r3, r2
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e6:	2b40      	cmp	r3, #64	; 0x40
 80015e8:	d04f      	beq.n	800168a <HAL_ADC_Init+0x466>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015f0:	4313      	orrs	r3, r2
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80015fc:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6912      	ldr	r2, [r2, #16]
 8001602:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001606:	d003      	beq.n	8001610 <HAL_ADC_Init+0x3ec>
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6912      	ldr	r2, [r2, #16]
 800160c:	2a01      	cmp	r2, #1
 800160e:	d102      	bne.n	8001616 <HAL_ADC_Init+0x3f2>
 8001610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001614:	e000      	b.n	8001618 <HAL_ADC_Init+0x3f4>
 8001616:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001618:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800161a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800161c:	4313      	orrs	r3, r2
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001626:	2b01      	cmp	r3, #1
 8001628:	d125      	bne.n	8001676 <HAL_ADC_Init+0x452>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001630:	2b00      	cmp	r3, #0
 8001632:	d114      	bne.n	800165e <HAL_ADC_Init+0x43a>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	3b01      	subs	r3, #1
 800163a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800163e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	fa92 f2a2 	rbit	r2, r2
 8001646:	617a      	str	r2, [r7, #20]
  return result;
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	fab2 f282 	clz	r2, r2
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	4093      	lsls	r3, r2
 8001652:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001658:	4313      	orrs	r3, r2
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
 800165c:	e00b      	b.n	8001676 <HAL_ADC_Init+0x452>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	f043 0220 	orr.w	r2, r3, #32
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800166e:	f043 0201 	orr.w	r2, r3, #1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4b38      	ldr	r3, [pc, #224]	; (8001760 <HAL_ADC_Init+0x53c>)
 800167e:	4013      	ands	r3, r2
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001686:	430b      	orrs	r3, r1
 8001688:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	4b34      	ldr	r3, [pc, #208]	; (8001764 <HAL_ADC_Init+0x540>)
 8001692:	4013      	ands	r3, r2
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800169a:	430b      	orrs	r3, r1
 800169c:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a6:	d003      	beq.n	80016b0 <HAL_ADC_Init+0x48c>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d119      	bne.n	80016e4 <HAL_ADC_Init+0x4c0>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	3b01      	subs	r3, #1
 80016c0:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80016c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	fa92 f2a2 	rbit	r2, r2
 80016cc:	60fa      	str	r2, [r7, #12]
  return result;
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	fab2 f282 	clz	r2, r2
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	fa03 f202 	lsl.w	r2, r3, r2
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	631a      	str	r2, [r3, #48]	; 0x30
 80016e2:	e007      	b.n	80016f4 <HAL_ADC_Init+0x4d0>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80016f2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_ADC_Init+0x544>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001700:	429a      	cmp	r2, r3
 8001702:	d10b      	bne.n	800171c <HAL_ADC_Init+0x4f8>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	f023 0303 	bic.w	r3, r3, #3
 8001712:	f043 0201 	orr.w	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	64da      	str	r2, [r3, #76]	; 0x4c
 800171a:	e014      	b.n	8001746 <HAL_ADC_Init+0x522>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001720:	f023 0312 	bic.w	r3, r3, #18
 8001724:	f043 0210 	orr.w	r2, r3, #16
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001730:	f043 0201 	orr.w	r2, r3, #1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800173e:	e002      	b.n	8001746 <HAL_ADC_Init+0x522>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001746:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800174a:	4618      	mov	r0, r3
 800174c:	3738      	adds	r7, #56	; 0x38
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	08007ff8 	.word	0x08007ff8
 8001758:	40023800 	.word	0x40023800
 800175c:	40012700 	.word	0x40012700
 8001760:	fcfc16ff 	.word	0xfcfc16ff
 8001764:	c0fff189 	.word	0xc0fff189
 8001768:	bf80fffe 	.word	0xbf80fffe

0800176c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a94      	ldr	r2, [pc, #592]	; (80019d4 <HAL_ADC_ConfigChannel+0x268>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d004      	beq.n	8001792 <HAL_ADC_ConfigChannel+0x26>
 8001788:	f240 7191 	movw	r1, #1937	; 0x791
 800178c:	4892      	ldr	r0, [pc, #584]	; (80019d8 <HAL_ADC_ConfigChannel+0x26c>)
 800178e:	f7ff f967 	bl	8000a60 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8081 	beq.w	800189e <HAL_ADC_ConfigChannel+0x132>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d07c      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d078      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d074      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d070      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b05      	cmp	r3, #5
 80017c2:	d06c      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b06      	cmp	r3, #6
 80017ca:	d068      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b07      	cmp	r3, #7
 80017d2:	d064      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d060      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b09      	cmp	r3, #9
 80017e2:	d05c      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b0a      	cmp	r3, #10
 80017ea:	d058      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b0b      	cmp	r3, #11
 80017f2:	d054      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b0c      	cmp	r3, #12
 80017fa:	d050      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b0d      	cmp	r3, #13
 8001802:	d04c      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b0e      	cmp	r3, #14
 800180a:	d048      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d044      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b10      	cmp	r3, #16
 800181a:	d040      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b11      	cmp	r3, #17
 8001822:	d03c      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b12      	cmp	r3, #18
 800182a:	d038      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b13      	cmp	r3, #19
 8001832:	d034      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b14      	cmp	r3, #20
 800183a:	d030      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b15      	cmp	r3, #21
 8001842:	d02c      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b16      	cmp	r3, #22
 800184a:	d028      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b17      	cmp	r3, #23
 8001852:	d024      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b18      	cmp	r3, #24
 800185a:	d020      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b19      	cmp	r3, #25
 8001862:	d01c      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b1a      	cmp	r3, #26
 800186a:	d018      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b1b      	cmp	r3, #27
 8001872:	d014      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b1c      	cmp	r3, #28
 800187a:	d010      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b1d      	cmp	r3, #29
 8001882:	d00c      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b1e      	cmp	r3, #30
 800188a:	d008      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b1f      	cmp	r3, #31
 8001892:	d004      	beq.n	800189e <HAL_ADC_ConfigChannel+0x132>
 8001894:	f240 7192 	movw	r1, #1938	; 0x792
 8001898:	484f      	ldr	r0, [pc, #316]	; (80019d8 <HAL_ADC_ConfigChannel+0x26c>)
 800189a:	f7ff f8e1 	bl	8000a60 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d070      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d06c      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d068      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d064      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d060      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d05c      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b07      	cmp	r3, #7
 80018d4:	d058      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d054      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b09      	cmp	r3, #9
 80018e4:	d050      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b0a      	cmp	r3, #10
 80018ec:	d04c      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b0b      	cmp	r3, #11
 80018f4:	d048      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b0c      	cmp	r3, #12
 80018fc:	d044      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b0d      	cmp	r3, #13
 8001904:	d040      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b0e      	cmp	r3, #14
 800190c:	d03c      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	d038      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b10      	cmp	r3, #16
 800191c:	d034      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b11      	cmp	r3, #17
 8001924:	d030      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b12      	cmp	r3, #18
 800192c:	d02c      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b13      	cmp	r3, #19
 8001934:	d028      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b14      	cmp	r3, #20
 800193c:	d024      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b15      	cmp	r3, #21
 8001944:	d020      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b16      	cmp	r3, #22
 800194c:	d01c      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b17      	cmp	r3, #23
 8001954:	d018      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b18      	cmp	r3, #24
 800195c:	d014      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b19      	cmp	r3, #25
 8001964:	d010      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b1a      	cmp	r3, #26
 800196c:	d00c      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b1b      	cmp	r3, #27
 8001974:	d008      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b1c      	cmp	r3, #28
 800197c:	d004      	beq.n	8001988 <HAL_ADC_ConfigChannel+0x21c>
 800197e:	f240 7193 	movw	r1, #1939	; 0x793
 8001982:	4815      	ldr	r0, [pc, #84]	; (80019d8 <HAL_ADC_ConfigChannel+0x26c>)
 8001984:	f7ff f86c 	bl	8000a60 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d025      	beq.n	80019dc <HAL_ADC_ConfigChannel+0x270>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d021      	beq.n	80019dc <HAL_ADC_ConfigChannel+0x270>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d01d      	beq.n	80019dc <HAL_ADC_ConfigChannel+0x270>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d019      	beq.n	80019dc <HAL_ADC_ConfigChannel+0x270>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d015      	beq.n	80019dc <HAL_ADC_ConfigChannel+0x270>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d011      	beq.n	80019dc <HAL_ADC_ConfigChannel+0x270>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b06      	cmp	r3, #6
 80019be:	d00d      	beq.n	80019dc <HAL_ADC_ConfigChannel+0x270>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b07      	cmp	r3, #7
 80019c6:	d009      	beq.n	80019dc <HAL_ADC_ConfigChannel+0x270>
 80019c8:	f240 7194 	movw	r1, #1940	; 0x794
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <HAL_ADC_ConfigChannel+0x26c>)
 80019ce:	f7ff f847 	bl	8000a60 <assert_failed>
 80019d2:	e003      	b.n	80019dc <HAL_ADC_ConfigChannel+0x270>
 80019d4:	40012400 	.word	0x40012400
 80019d8:	08007ff8 	.word	0x08007ff8
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x27e>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e14f      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x51e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d81c      	bhi.n	8001a34 <HAL_ADC_ConfigChannel+0x2c8>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	3b05      	subs	r3, #5
 8001a0c:	221f      	movs	r2, #31
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	4019      	ands	r1, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	3b05      	subs	r3, #5
 8001a26:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
 8001a32:	e07e      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b0c      	cmp	r3, #12
 8001a3a:	d81c      	bhi.n	8001a76 <HAL_ADC_ConfigChannel+0x30a>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3b23      	subs	r3, #35	; 0x23
 8001a4e:	221f      	movs	r2, #31
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4019      	ands	r1, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	3b23      	subs	r3, #35	; 0x23
 8001a68:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a74:	e05d      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d81c      	bhi.n	8001ab8 <HAL_ADC_ConfigChannel+0x34c>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3b41      	subs	r3, #65	; 0x41
 8001a90:	221f      	movs	r2, #31
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	4019      	ands	r1, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b41      	subs	r3, #65	; 0x41
 8001aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ab6:	e03c      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b18      	cmp	r3, #24
 8001abe:	d81c      	bhi.n	8001afa <HAL_ADC_ConfigChannel+0x38e>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	3b5f      	subs	r3, #95	; 0x5f
 8001ad2:	221f      	movs	r2, #31
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4019      	ands	r1, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b5f      	subs	r3, #95	; 0x5f
 8001aec:	fa00 f203 	lsl.w	r2, r0, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34
 8001af8:	e01b      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	3b7d      	subs	r3, #125	; 0x7d
 8001b0c:	221f      	movs	r2, #31
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	4019      	ands	r1, r3
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b7d      	subs	r3, #125	; 0x7d
 8001b26:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b09      	cmp	r3, #9
 8001b38:	d81a      	bhi.n	8001b70 <HAL_ADC_ConfigChannel+0x404>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6959      	ldr	r1, [r3, #20]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	4019      	ands	r1, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	6898      	ldr	r0, [r3, #8]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	fa00 f203 	lsl.w	r2, r0, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	615a      	str	r2, [r3, #20]
 8001b6e:	e05d      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b13      	cmp	r3, #19
 8001b76:	d81c      	bhi.n	8001bb2 <HAL_ADC_ConfigChannel+0x446>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6919      	ldr	r1, [r3, #16]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	3b1e      	subs	r3, #30
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4019      	ands	r1, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6898      	ldr	r0, [r3, #8]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b1e      	subs	r3, #30
 8001ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	611a      	str	r2, [r3, #16]
 8001bb0:	e03c      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b1d      	cmp	r3, #29
 8001bb8:	d81c      	bhi.n	8001bf4 <HAL_ADC_ConfigChannel+0x488>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68d9      	ldr	r1, [r3, #12]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	3b3c      	subs	r3, #60	; 0x3c
 8001bcc:	2207      	movs	r2, #7
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	4019      	ands	r1, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6898      	ldr	r0, [r3, #8]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	3b3c      	subs	r3, #60	; 0x3c
 8001be6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	e01b      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	3b5a      	subs	r3, #90	; 0x5a
 8001c06:	2207      	movs	r2, #7
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4019      	ands	r1, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	6898      	ldr	r0, [r3, #8]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b5a      	subs	r3, #90	; 0x5a
 8001c20:	fa00 f203 	lsl.w	r2, r0, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b10      	cmp	r3, #16
 8001c32:	d003      	beq.n	8001c3c <HAL_ADC_ConfigChannel+0x4d0>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c38:	2b11      	cmp	r3, #17
 8001c3a:	d121      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x514>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_ADC_ConfigChannel+0x528>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d11b      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x514>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_ADC_ConfigChannel+0x528>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a11      	ldr	r2, [pc, #68]	; (8001c94 <HAL_ADC_ConfigChannel+0x528>)
 8001c4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c52:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d111      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x514>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_ADC_ConfigChannel+0x52c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <HAL_ADC_ConfigChannel+0x530>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	0c9a      	lsrs	r2, r3, #18
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001c72:	e002      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x50e>
          {
            wait_loop_index--;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f9      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x508>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40012700 	.word	0x40012700
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	431bde83 	.word	0x431bde83

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4906      	ldr	r1, [pc, #24]	; (8001d38 <__NVIC_EnableIRQ+0x34>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	; (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b07      	cmp	r3, #7
 8001e00:	d00f      	beq.n	8001e22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b06      	cmp	r3, #6
 8001e06:	d00c      	beq.n	8001e22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d009      	beq.n	8001e22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d006      	beq.n	8001e22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d003      	beq.n	8001e22 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e1a:	21ac      	movs	r1, #172	; 0xac
 8001e1c:	4804      	ldr	r0, [pc, #16]	; (8001e30 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001e1e:	f7fe fe1f 	bl	8000a60 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ff3c 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	08008030 	.word	0x08008030

08001e34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b0f      	cmp	r3, #15
 8001e4a:	d903      	bls.n	8001e54 <HAL_NVIC_SetPriority+0x20>
 8001e4c:	21c4      	movs	r1, #196	; 0xc4
 8001e4e:	480e      	ldr	r0, [pc, #56]	; (8001e88 <HAL_NVIC_SetPriority+0x54>)
 8001e50:	f7fe fe06 	bl	8000a60 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b0f      	cmp	r3, #15
 8001e58:	d903      	bls.n	8001e62 <HAL_NVIC_SetPriority+0x2e>
 8001e5a:	21c5      	movs	r1, #197	; 0xc5
 8001e5c:	480a      	ldr	r0, [pc, #40]	; (8001e88 <HAL_NVIC_SetPriority+0x54>)
 8001e5e:	f7fe fdff 	bl	8000a60 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e62:	f7ff ff41 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	6978      	ldr	r0, [r7, #20]
 8001e6e:	f7ff ff8f 	bl	8001d90 <NVIC_EncodePriority>
 8001e72:	4602      	mov	r2, r0
 8001e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff5e 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e80:	bf00      	nop
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	08008030 	.word	0x08008030

08001e8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	da03      	bge.n	8001ea6 <HAL_NVIC_EnableIRQ+0x1a>
 8001e9e:	21d8      	movs	r1, #216	; 0xd8
 8001ea0:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <HAL_NVIC_EnableIRQ+0x2c>)
 8001ea2:	f7fe fddd 	bl	8000a60 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff2a 	bl	8001d04 <__NVIC_EnableIRQ>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	08008030 	.word	0x08008030

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a3f      	ldr	r2, [pc, #252]	; (8001fd4 <HAL_GPIO_Init+0x118>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <HAL_GPIO_Init+0x5e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a3e      	ldr	r2, [pc, #248]	; (8001fd8 <HAL_GPIO_Init+0x11c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01b      	beq.n	8001f1a <HAL_GPIO_Init+0x5e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <HAL_GPIO_Init+0x120>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d017      	beq.n	8001f1a <HAL_GPIO_Init+0x5e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a3c      	ldr	r2, [pc, #240]	; (8001fe0 <HAL_GPIO_Init+0x124>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_GPIO_Init+0x5e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a3b      	ldr	r2, [pc, #236]	; (8001fe4 <HAL_GPIO_Init+0x128>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00f      	beq.n	8001f1a <HAL_GPIO_Init+0x5e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a3a      	ldr	r2, [pc, #232]	; (8001fe8 <HAL_GPIO_Init+0x12c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00b      	beq.n	8001f1a <HAL_GPIO_Init+0x5e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a39      	ldr	r2, [pc, #228]	; (8001fec <HAL_GPIO_Init+0x130>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <HAL_GPIO_Init+0x5e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a38      	ldr	r2, [pc, #224]	; (8001ff0 <HAL_GPIO_Init+0x134>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x5e>
 8001f12:	21b9      	movs	r1, #185	; 0xb9
 8001f14:	4837      	ldr	r0, [pc, #220]	; (8001ff4 <HAL_GPIO_Init+0x138>)
 8001f16:	f7fe fda3 	bl	8000a60 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_GPIO_Init+0x74>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0c1b      	lsrs	r3, r3, #16
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x7c>
 8001f30:	21ba      	movs	r1, #186	; 0xba
 8001f32:	4830      	ldr	r0, [pc, #192]	; (8001ff4 <HAL_GPIO_Init+0x138>)
 8001f34:	f7fe fd94 	bl	8000a60 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d035      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d031      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b11      	cmp	r3, #17
 8001f4e:	d02d      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d029      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b12      	cmp	r3, #18
 8001f5e:	d025      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4a24      	ldr	r2, [pc, #144]	; (8001ff8 <HAL_GPIO_Init+0x13c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d020      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <HAL_GPIO_Init+0x140>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d01b      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a21      	ldr	r2, [pc, #132]	; (8002000 <HAL_GPIO_Init+0x144>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d016      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4a20      	ldr	r2, [pc, #128]	; (8002004 <HAL_GPIO_Init+0x148>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d011      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <HAL_GPIO_Init+0x14c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00c      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_GPIO_Init+0x150>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
 8001fa4:	21bb      	movs	r1, #187	; 0xbb
 8001fa6:	4813      	ldr	r0, [pc, #76]	; (8001ff4 <HAL_GPIO_Init+0x138>)
 8001fa8:	f7fe fd5a 	bl	8000a60 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 81e4 	beq.w	800237e <HAL_GPIO_Init+0x4c2>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	f000 81df 	beq.w	800237e <HAL_GPIO_Init+0x4c2>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	f000 81da 	beq.w	800237e <HAL_GPIO_Init+0x4c2>
 8001fca:	21bc      	movs	r1, #188	; 0xbc
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <HAL_GPIO_Init+0x138>)
 8001fce:	f7fe fd47 	bl	8000a60 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001fd2:	e1d4      	b.n	800237e <HAL_GPIO_Init+0x4c2>
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40021800 	.word	0x40021800
 8001fec:	40021c00 	.word	0x40021c00
 8001ff0:	40021400 	.word	0x40021400
 8001ff4:	0800806c 	.word	0x0800806c
 8001ff8:	10110000 	.word	0x10110000
 8001ffc:	10210000 	.word	0x10210000
 8002000:	10310000 	.word	0x10310000
 8002004:	10120000 	.word	0x10120000
 8002008:	10220000 	.word	0x10220000
 800200c:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	4013      	ands	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 81a8 	beq.w	8002378 <HAL_GPIO_Init+0x4bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x17c>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b12      	cmp	r3, #18
 8002036:	d14f      	bne.n	80020d8 <HAL_GPIO_Init+0x21c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a92      	ldr	r2, [pc, #584]	; (8002284 <HAL_GPIO_Init+0x3c8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d01f      	beq.n	8002080 <HAL_GPIO_Init+0x1c4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a91      	ldr	r2, [pc, #580]	; (8002288 <HAL_GPIO_Init+0x3cc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d01b      	beq.n	8002080 <HAL_GPIO_Init+0x1c4>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a90      	ldr	r2, [pc, #576]	; (800228c <HAL_GPIO_Init+0x3d0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0x1c4>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a8f      	ldr	r2, [pc, #572]	; (8002290 <HAL_GPIO_Init+0x3d4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <HAL_GPIO_Init+0x1c4>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a8e      	ldr	r2, [pc, #568]	; (8002294 <HAL_GPIO_Init+0x3d8>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d00f      	beq.n	8002080 <HAL_GPIO_Init+0x1c4>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a8d      	ldr	r2, [pc, #564]	; (8002298 <HAL_GPIO_Init+0x3dc>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00b      	beq.n	8002080 <HAL_GPIO_Init+0x1c4>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a8c      	ldr	r2, [pc, #560]	; (800229c <HAL_GPIO_Init+0x3e0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d007      	beq.n	8002080 <HAL_GPIO_Init+0x1c4>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a8b      	ldr	r2, [pc, #556]	; (80022a0 <HAL_GPIO_Init+0x3e4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x1c4>
 8002078:	21cb      	movs	r1, #203	; 0xcb
 800207a:	488a      	ldr	r0, [pc, #552]	; (80022a4 <HAL_GPIO_Init+0x3e8>)
 800207c:	f7fe fcf0 	bl	8000a60 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b0f      	cmp	r3, #15
 8002086:	d903      	bls.n	8002090 <HAL_GPIO_Init+0x1d4>
 8002088:	21cc      	movs	r1, #204	; 0xcc
 800208a:	4886      	ldr	r0, [pc, #536]	; (80022a4 <HAL_GPIO_Init+0x3e8>)
 800208c:	f7fe fce8 	bl	8000a60 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	08da      	lsrs	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3208      	adds	r2, #8
 8002098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	220f      	movs	r2, #15
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	08da      	lsrs	r2, r3, #3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3208      	adds	r2, #8
 80020d2:	6939      	ldr	r1, [r7, #16]
 80020d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	2203      	movs	r2, #3
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0203 	and.w	r2, r3, #3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d00b      	beq.n	800212c <HAL_GPIO_Init+0x270>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d007      	beq.n	800212c <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002120:	2b11      	cmp	r3, #17
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b12      	cmp	r3, #18
 800212a:	d144      	bne.n	80021b6 <HAL_GPIO_Init+0x2fa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00f      	beq.n	8002154 <HAL_GPIO_Init+0x298>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d00b      	beq.n	8002154 <HAL_GPIO_Init+0x298>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d007      	beq.n	8002154 <HAL_GPIO_Init+0x298>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x298>
 800214c:	21e1      	movs	r1, #225	; 0xe1
 800214e:	4855      	ldr	r0, [pc, #340]	; (80022a4 <HAL_GPIO_Init+0x3e8>)
 8002150:	f7fe fc86 	bl	8000a60 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800218a:	2201      	movs	r2, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	f003 0201 	and.w	r2, r3, #1
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80c2 	beq.w	8002378 <HAL_GPIO_Init+0x4bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f4:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <HAL_GPIO_Init+0x3ec>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4a2b      	ldr	r2, [pc, #172]	; (80022a8 <HAL_GPIO_Init+0x3ec>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	6213      	str	r3, [r2, #32]
 8002200:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <HAL_GPIO_Init+0x3ec>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 800220c:	4a27      	ldr	r2, [pc, #156]	; (80022ac <HAL_GPIO_Init+0x3f0>)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3302      	adds	r3, #2
 8002214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002218:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	220f      	movs	r2, #15
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a14      	ldr	r2, [pc, #80]	; (8002284 <HAL_GPIO_Init+0x3c8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d03b      	beq.n	80022b0 <HAL_GPIO_Init+0x3f4>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a13      	ldr	r2, [pc, #76]	; (8002288 <HAL_GPIO_Init+0x3cc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d01f      	beq.n	8002280 <HAL_GPIO_Init+0x3c4>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a12      	ldr	r2, [pc, #72]	; (800228c <HAL_GPIO_Init+0x3d0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d019      	beq.n	800227c <HAL_GPIO_Init+0x3c0>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a11      	ldr	r2, [pc, #68]	; (8002290 <HAL_GPIO_Init+0x3d4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d013      	beq.n	8002278 <HAL_GPIO_Init+0x3bc>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a10      	ldr	r2, [pc, #64]	; (8002294 <HAL_GPIO_Init+0x3d8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00d      	beq.n	8002274 <HAL_GPIO_Init+0x3b8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_GPIO_Init+0x3e4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d007      	beq.n	8002270 <HAL_GPIO_Init+0x3b4>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <HAL_GPIO_Init+0x3dc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d101      	bne.n	800226c <HAL_GPIO_Init+0x3b0>
 8002268:	2306      	movs	r3, #6
 800226a:	e022      	b.n	80022b2 <HAL_GPIO_Init+0x3f6>
 800226c:	2307      	movs	r3, #7
 800226e:	e020      	b.n	80022b2 <HAL_GPIO_Init+0x3f6>
 8002270:	2305      	movs	r3, #5
 8002272:	e01e      	b.n	80022b2 <HAL_GPIO_Init+0x3f6>
 8002274:	2304      	movs	r3, #4
 8002276:	e01c      	b.n	80022b2 <HAL_GPIO_Init+0x3f6>
 8002278:	2303      	movs	r3, #3
 800227a:	e01a      	b.n	80022b2 <HAL_GPIO_Init+0x3f6>
 800227c:	2302      	movs	r3, #2
 800227e:	e018      	b.n	80022b2 <HAL_GPIO_Init+0x3f6>
 8002280:	2301      	movs	r3, #1
 8002282:	e016      	b.n	80022b2 <HAL_GPIO_Init+0x3f6>
 8002284:	40020000 	.word	0x40020000
 8002288:	40020400 	.word	0x40020400
 800228c:	40020800 	.word	0x40020800
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40021000 	.word	0x40021000
 8002298:	40021800 	.word	0x40021800
 800229c:	40021c00 	.word	0x40021c00
 80022a0:	40021400 	.word	0x40021400
 80022a4:	0800806c 	.word	0x0800806c
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40010000 	.word	0x40010000
 80022b0:	2300      	movs	r3, #0
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	f002 0203 	and.w	r2, r2, #3
 80022b8:	0092      	lsls	r2, r2, #2
 80022ba:	4093      	lsls	r3, r2
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022c2:	4935      	ldr	r1, [pc, #212]	; (8002398 <HAL_GPIO_Init+0x4dc>)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	3302      	adds	r3, #2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d0:	4b32      	ldr	r3, [pc, #200]	; (800239c <HAL_GPIO_Init+0x4e0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x438>
        {
          SET_BIT(temp, iocurrent); 
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022f4:	4a29      	ldr	r2, [pc, #164]	; (800239c <HAL_GPIO_Init+0x4e0>)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022fa:	4b28      	ldr	r3, [pc, #160]	; (800239c <HAL_GPIO_Init+0x4e0>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x462>
        {
          SET_BIT(temp, iocurrent); 
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800231e:	4a1f      	ldr	r2, [pc, #124]	; (800239c <HAL_GPIO_Init+0x4e0>)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_GPIO_Init+0x4e0>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x48c>
        {
          SET_BIT(temp, iocurrent); 
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002348:	4a14      	ldr	r2, [pc, #80]	; (800239c <HAL_GPIO_Init+0x4e0>)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_GPIO_Init+0x4e0>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x4b6>
        {
          SET_BIT(temp, iocurrent); 
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002372:	4a0a      	ldr	r2, [pc, #40]	; (800239c <HAL_GPIO_Init+0x4e0>)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3301      	adds	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	f47f ae41 	bne.w	8002010 <HAL_GPIO_Init+0x154>
  } 
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40010000 	.word	0x40010000
 800239c:	40010400 	.word	0x40010400

080023a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
 80023ac:	4613      	mov	r3, r2
 80023ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d004      	beq.n	80023c0 <HAL_GPIO_WritePin+0x20>
 80023b6:	887b      	ldrh	r3, [r7, #2]
 80023b8:	0c1b      	lsrs	r3, r3, #16
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d004      	beq.n	80023ca <HAL_GPIO_WritePin+0x2a>
 80023c0:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80023c4:	480e      	ldr	r0, [pc, #56]	; (8002400 <HAL_GPIO_WritePin+0x60>)
 80023c6:	f7fe fb4b 	bl	8000a60 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80023ca:	787b      	ldrb	r3, [r7, #1]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_GPIO_WritePin+0x40>
 80023d0:	787b      	ldrb	r3, [r7, #1]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d004      	beq.n	80023e0 <HAL_GPIO_WritePin+0x40>
 80023d6:	f240 11a5 	movw	r1, #421	; 0x1a5
 80023da:	4809      	ldr	r0, [pc, #36]	; (8002400 <HAL_GPIO_WritePin+0x60>)
 80023dc:	f7fe fb40 	bl	8000a60 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80023e0:	787b      	ldrb	r3, [r7, #1]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80023ec:	e003      	b.n	80023f6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80023ee:	887b      	ldrh	r3, [r7, #2]
 80023f0:	041a      	lsls	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	619a      	str	r2, [r3, #24]
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	0800806c 	.word	0x0800806c

08002404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	4013      	ands	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fd ffcc 	bl	80003c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40010400 	.word	0x40010400

08002434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e19b      	b.n	800277e <HAL_I2C_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a98      	ldr	r2, [pc, #608]	; (80026ac <HAL_I2C_Init+0x278>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d009      	beq.n	8002464 <HAL_I2C_Init+0x30>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a96      	ldr	r2, [pc, #600]	; (80026b0 <HAL_I2C_Init+0x27c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d004      	beq.n	8002464 <HAL_I2C_Init+0x30>
 800245a:	f240 11bb 	movw	r1, #443	; 0x1bb
 800245e:	4895      	ldr	r0, [pc, #596]	; (80026b4 <HAL_I2C_Init+0x280>)
 8002460:	f7fe fafe 	bl	8000a60 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <HAL_I2C_Init+0x42>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a91      	ldr	r2, [pc, #580]	; (80026b8 <HAL_I2C_Init+0x284>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d904      	bls.n	8002480 <HAL_I2C_Init+0x4c>
 8002476:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800247a:	488e      	ldr	r0, [pc, #568]	; (80026b4 <HAL_I2C_Init+0x280>)
 800247c:	f7fe faf0 	bl	8000a60 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d009      	beq.n	800249c <HAL_I2C_Init+0x68>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002490:	d004      	beq.n	800249c <HAL_I2C_Init+0x68>
 8002492:	f240 11bd 	movw	r1, #445	; 0x1bd
 8002496:	4887      	ldr	r0, [pc, #540]	; (80026b4 <HAL_I2C_Init+0x280>)
 8002498:	f7fe fae2 	bl	8000a60 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024a4:	f023 0303 	bic.w	r3, r3, #3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <HAL_I2C_Init+0x82>
 80024ac:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80024b0:	4880      	ldr	r0, [pc, #512]	; (80026b4 <HAL_I2C_Init+0x280>)
 80024b2:	f7fe fad5 	bl	8000a60 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024be:	d009      	beq.n	80024d4 <HAL_I2C_Init+0xa0>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80024c8:	d004      	beq.n	80024d4 <HAL_I2C_Init+0xa0>
 80024ca:	f240 11bf 	movw	r1, #447	; 0x1bf
 80024ce:	4879      	ldr	r0, [pc, #484]	; (80026b4 <HAL_I2C_Init+0x280>)
 80024d0:	f7fe fac6 	bl	8000a60 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_I2C_Init+0xba>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d004      	beq.n	80024ee <HAL_I2C_Init+0xba>
 80024e4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80024e8:	4872      	ldr	r0, [pc, #456]	; (80026b4 <HAL_I2C_Init+0x280>)
 80024ea:	f7fe fab9 	bl	8000a60 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d004      	beq.n	8002504 <HAL_I2C_Init+0xd0>
 80024fa:	f240 11c1 	movw	r1, #449	; 0x1c1
 80024fe:	486d      	ldr	r0, [pc, #436]	; (80026b4 <HAL_I2C_Init+0x280>)
 8002500:	f7fe faae 	bl	8000a60 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_I2C_Init+0xea>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d004      	beq.n	800251e <HAL_I2C_Init+0xea>
 8002514:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002518:	4866      	ldr	r0, [pc, #408]	; (80026b4 <HAL_I2C_Init+0x280>)
 800251a:	f7fe faa1 	bl	8000a60 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_I2C_Init+0x104>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	2b80      	cmp	r3, #128	; 0x80
 800252c:	d004      	beq.n	8002538 <HAL_I2C_Init+0x104>
 800252e:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002532:	4860      	ldr	r0, [pc, #384]	; (80026b4 <HAL_I2C_Init+0x280>)
 8002534:	f7fe fa94 	bl	8000a60 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7fe f9bd 	bl	80008cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2224      	movs	r2, #36	; 0x24
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800256a:	f000 ffab 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 800256e:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a51      	ldr	r2, [pc, #324]	; (80026bc <HAL_I2C_Init+0x288>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d807      	bhi.n	800258a <HAL_I2C_Init+0x156>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4a50      	ldr	r2, [pc, #320]	; (80026c0 <HAL_I2C_Init+0x28c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	bf94      	ite	ls
 8002582:	2301      	movls	r3, #1
 8002584:	2300      	movhi	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	e006      	b.n	8002598 <HAL_I2C_Init+0x164>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a4d      	ldr	r2, [pc, #308]	; (80026c4 <HAL_I2C_Init+0x290>)
 800258e:	4293      	cmp	r3, r2
 8002590:	bf94      	ite	ls
 8002592:	2301      	movls	r3, #1
 8002594:	2300      	movhi	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_I2C_Init+0x16c>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0ee      	b.n	800277e <HAL_I2C_Init+0x34a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a49      	ldr	r2, [pc, #292]	; (80026c8 <HAL_I2C_Init+0x294>)
 80025a4:	fba2 2303 	umull	r2, r3, r2, r3
 80025a8:	0c9b      	lsrs	r3, r3, #18
 80025aa:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	430a      	orrs	r2, r1
 80025be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4a3b      	ldr	r2, [pc, #236]	; (80026bc <HAL_I2C_Init+0x288>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d802      	bhi.n	80025da <HAL_I2C_Init+0x1a6>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3301      	adds	r3, #1
 80025d8:	e009      	b.n	80025ee <HAL_I2C_Init+0x1ba>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	4a39      	ldr	r2, [pc, #228]	; (80026cc <HAL_I2C_Init+0x298>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	3301      	adds	r3, #1
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	430b      	orrs	r3, r1
 80025f4:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002600:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	492c      	ldr	r1, [pc, #176]	; (80026bc <HAL_I2C_Init+0x288>)
 800260a:	428b      	cmp	r3, r1
 800260c:	d80d      	bhi.n	800262a <HAL_I2C_Init+0x1f6>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1e59      	subs	r1, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fbb1 f3f3 	udiv	r3, r1, r3
 800261c:	3301      	adds	r3, #1
 800261e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf38      	it	cc
 8002626:	2304      	movcc	r3, #4
 8002628:	e062      	b.n	80026f0 <HAL_I2C_Init+0x2bc>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d111      	bne.n	8002656 <HAL_I2C_Init+0x222>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1e58      	subs	r0, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	440b      	add	r3, r1
 8002640:	fbb0 f3f3 	udiv	r3, r0, r3
 8002644:	3301      	adds	r3, #1
 8002646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	e012      	b.n	800267c <HAL_I2C_Init+0x248>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1e58      	subs	r0, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	0099      	lsls	r1, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	fbb0 f3f3 	udiv	r3, r0, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf0c      	ite	eq
 8002676:	2301      	moveq	r3, #1
 8002678:	2300      	movne	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_I2C_Init+0x250>
 8002680:	2301      	movs	r3, #1
 8002682:	e035      	b.n	80026f0 <HAL_I2C_Init+0x2bc>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d121      	bne.n	80026d0 <HAL_I2C_Init+0x29c>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e58      	subs	r0, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	440b      	add	r3, r1
 800269a:	fbb0 f3f3 	udiv	r3, r0, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a8:	e022      	b.n	80026f0 <HAL_I2C_Init+0x2bc>
 80026aa:	bf00      	nop
 80026ac:	40005400 	.word	0x40005400
 80026b0:	40005800 	.word	0x40005800
 80026b4:	080080a8 	.word	0x080080a8
 80026b8:	00061a80 	.word	0x00061a80
 80026bc:	000186a0 	.word	0x000186a0
 80026c0:	001e847f 	.word	0x001e847f
 80026c4:	003d08ff 	.word	0x003d08ff
 80026c8:	431bde83 	.word	0x431bde83
 80026cc:	10624dd3 	.word	0x10624dd3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e58      	subs	r0, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	0099      	lsls	r1, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	6809      	ldr	r1, [r1, #0]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800271e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6911      	ldr	r1, [r2, #16]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68d2      	ldr	r2, [r2, #12]
 800272a:	4311      	orrs	r1, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	430b      	orrs	r3, r1
 8002732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop

08002788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d102      	bne.n	800279c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	f000 bc6c 	b.w	8003074 <HAL_RCC_OscConfig+0x8ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d022      	beq.n	80027ea <HAL_RCC_OscConfig+0x62>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d11c      	bne.n	80027ea <HAL_RCC_OscConfig+0x62>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d116      	bne.n	80027ea <HAL_RCC_OscConfig+0x62>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d110      	bne.n	80027ea <HAL_RCC_OscConfig+0x62>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <HAL_RCC_OscConfig+0x62>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d104      	bne.n	80027ea <HAL_RCC_OscConfig+0x62>
 80027e0:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80027e4:	4897      	ldr	r0, [pc, #604]	; (8002a44 <HAL_RCC_OscConfig+0x2bc>)
 80027e6:	f7fe f93b 	bl	8000a60 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ea:	4b97      	ldr	r3, [pc, #604]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027f4:	4b94      	ldr	r3, [pc, #592]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 808e 	beq.w	8002928 <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00c      	beq.n	800282e <HAL_RCC_OscConfig+0xa6>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d008      	beq.n	800282e <HAL_RCC_OscConfig+0xa6>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b05      	cmp	r3, #5
 8002822:	d004      	beq.n	800282e <HAL_RCC_OscConfig+0xa6>
 8002824:	f240 1159 	movw	r1, #345	; 0x159
 8002828:	4886      	ldr	r0, [pc, #536]	; (8002a44 <HAL_RCC_OscConfig+0x2bc>)
 800282a:	f7fe f919 	bl	8000a60 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d006      	beq.n	8002842 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d110      	bne.n	800285c <HAL_RCC_OscConfig+0xd4>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002842:	4b81      	ldr	r3, [pc, #516]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d06b      	beq.n	8002926 <HAL_RCC_OscConfig+0x19e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d167      	bne.n	8002926 <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	f000 bc0c 	b.w	8003074 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0xea>
 8002864:	4b78      	ldr	r3, [pc, #480]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a77      	ldr	r2, [pc, #476]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e02d      	b.n	80028ce <HAL_RCC_OscConfig+0x146>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x10c>
 800287a:	4b73      	ldr	r3, [pc, #460]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a72      	ldr	r2, [pc, #456]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 8002880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b70      	ldr	r3, [pc, #448]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6f      	ldr	r2, [pc, #444]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 800288c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e01c      	b.n	80028ce <HAL_RCC_OscConfig+0x146>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b05      	cmp	r3, #5
 800289a:	d10c      	bne.n	80028b6 <HAL_RCC_OscConfig+0x12e>
 800289c:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a69      	ldr	r2, [pc, #420]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 80028a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b67      	ldr	r3, [pc, #412]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a66      	ldr	r2, [pc, #408]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 80028ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	e00b      	b.n	80028ce <HAL_RCC_OscConfig+0x146>
 80028b6:	4b64      	ldr	r3, [pc, #400]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a63      	ldr	r2, [pc, #396]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 80028bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b61      	ldr	r3, [pc, #388]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a60      	ldr	r2, [pc, #384]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 80028c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d013      	beq.n	80028fe <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7fe fc9b 	bl	8001210 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028de:	f7fe fc97 	bl	8001210 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b64      	cmp	r3, #100	; 0x64
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e3c1      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028f0:	4b55      	ldr	r3, [pc, #340]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x156>
 80028fc:	e014      	b.n	8002928 <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fe fc87 	bl	8001210 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002906:	f7fe fc83 	bl	8001210 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b64      	cmp	r3, #100	; 0x64
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e3ad      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002918:	4b4b      	ldr	r3, [pc, #300]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f0      	bne.n	8002906 <HAL_RCC_OscConfig+0x17e>
 8002924:	e000      	b.n	8002928 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002926:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d070      	beq.n	8002a16 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCC_OscConfig+0x1c6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d004      	beq.n	800294e <HAL_RCC_OscConfig+0x1c6>
 8002944:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002948:	483e      	ldr	r0, [pc, #248]	; (8002a44 <HAL_RCC_OscConfig+0x2bc>)
 800294a:	f7fe f889 	bl	8000a60 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b1f      	cmp	r3, #31
 8002954:	d904      	bls.n	8002960 <HAL_RCC_OscConfig+0x1d8>
 8002956:	f240 118d 	movw	r1, #397	; 0x18d
 800295a:	483a      	ldr	r0, [pc, #232]	; (8002a44 <HAL_RCC_OscConfig+0x2bc>)
 800295c:	f7fe f880 	bl	8000a60 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d005      	beq.n	8002972 <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2b0c      	cmp	r3, #12
 800296a:	d119      	bne.n	80029a0 <HAL_RCC_OscConfig+0x218>
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d116      	bne.n	80029a0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	4b35      	ldr	r3, [pc, #212]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_RCC_OscConfig+0x202>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d001      	beq.n	800298a <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e374      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	492b      	ldr	r1, [pc, #172]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299e:	e03a      	b.n	8002a16 <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d020      	beq.n	80029ea <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a8:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <HAL_RCC_OscConfig+0x2c4>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fe fc2f 	bl	8001210 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b6:	f7fe fc2b 	bl	8001210 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e355      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029c8:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	4919      	ldr	r1, [pc, #100]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
 80029e8:	e015      	b.n	8002a16 <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <HAL_RCC_OscConfig+0x2c4>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7fe fc0e 	bl	8001210 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f8:	f7fe fc0a 	bl	8001210 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e334      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8129 	beq.w	8002c76 <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 80a4 	bne.w	8002b74 <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_OscConfig+0x2c0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00b      	beq.n	8002a50 <HAL_RCC_OscConfig+0x2c8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e317      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
 8002a44:	080080e0 	.word	0x080080e0
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	2bff      	cmp	r3, #255	; 0xff
 8002a56:	d904      	bls.n	8002a62 <HAL_RCC_OscConfig+0x2da>
 8002a58:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002a5c:	48a5      	ldr	r0, [pc, #660]	; (8002cf4 <HAL_RCC_OscConfig+0x56c>)
 8002a5e:	f7fd ffff 	bl	8000a60 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d022      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x328>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a72:	d01d      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x328>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a7c:	d018      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x328>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002a86:	d013      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x328>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a90:	d00e      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x328>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002a9a:	d009      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x328>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002aa4:	d004      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x328>
 8002aa6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002aaa:	4892      	ldr	r0, [pc, #584]	; (8002cf4 <HAL_RCC_OscConfig+0x56c>)
 8002aac:	f7fd ffd8 	bl	8000a60 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1a      	ldr	r2, [r3, #32]
 8002ab4:	4b90      	ldr	r3, [pc, #576]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d91d      	bls.n	8002afc <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fd67 	bl	8003598 <RCC_SetFlashLatencyFromMSIRange>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e2cf      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad4:	4b88      	ldr	r3, [pc, #544]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4985      	ldr	r1, [pc, #532]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae6:	4b84      	ldr	r3, [pc, #528]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	061b      	lsls	r3, r3, #24
 8002af4:	4980      	ldr	r1, [pc, #512]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
 8002afa:	e01c      	b.n	8002b36 <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002afc:	4b7e      	ldr	r3, [pc, #504]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	497b      	ldr	r1, [pc, #492]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b0e:	4b7a      	ldr	r3, [pc, #488]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	061b      	lsls	r3, r3, #24
 8002b1c:	4976      	ldr	r1, [pc, #472]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fd36 	bl	8003598 <RCC_SetFlashLatencyFromMSIRange>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e29e      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	0b5b      	lsrs	r3, r3, #13
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002b46:	4a6c      	ldr	r2, [pc, #432]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002b48:	6892      	ldr	r2, [r2, #8]
 8002b4a:	0912      	lsrs	r2, r2, #4
 8002b4c:	f002 020f 	and.w	r2, r2, #15
 8002b50:	496a      	ldr	r1, [pc, #424]	; (8002cfc <HAL_RCC_OscConfig+0x574>)
 8002b52:	5c8a      	ldrb	r2, [r1, r2]
 8002b54:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b56:	4a6a      	ldr	r2, [pc, #424]	; (8002d00 <HAL_RCC_OscConfig+0x578>)
 8002b58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b5a:	4b6a      	ldr	r3, [pc, #424]	; (8002d04 <HAL_RCC_OscConfig+0x57c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fd ffbc 	bl	8000adc <HAL_InitTick>
 8002b64:	4603      	mov	r3, r0
 8002b66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8083 	beq.w	8002c76 <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	e27f      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCC_OscConfig+0x406>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d004      	beq.n	8002b8e <HAL_RCC_OscConfig+0x406>
 8002b84:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002b88:	485a      	ldr	r0, [pc, #360]	; (8002cf4 <HAL_RCC_OscConfig+0x56c>)
 8002b8a:	f7fd ff69 	bl	8000a60 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d059      	beq.n	8002c4a <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b96:	4b5c      	ldr	r3, [pc, #368]	; (8002d08 <HAL_RCC_OscConfig+0x580>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fb38 	bl	8001210 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ba4:	f7fe fb34 	bl	8001210 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e25e      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bb6:	4b50      	ldr	r3, [pc, #320]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	2bff      	cmp	r3, #255	; 0xff
 8002bc8:	d904      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x44c>
 8002bca:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8002bce:	4849      	ldr	r0, [pc, #292]	; (8002cf4 <HAL_RCC_OscConfig+0x56c>)
 8002bd0:	f7fd ff46 	bl	8000a60 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d022      	beq.n	8002c22 <HAL_RCC_OscConfig+0x49a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be4:	d01d      	beq.n	8002c22 <HAL_RCC_OscConfig+0x49a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bee:	d018      	beq.n	8002c22 <HAL_RCC_OscConfig+0x49a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002bf8:	d013      	beq.n	8002c22 <HAL_RCC_OscConfig+0x49a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c02:	d00e      	beq.n	8002c22 <HAL_RCC_OscConfig+0x49a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002c0c:	d009      	beq.n	8002c22 <HAL_RCC_OscConfig+0x49a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c16:	d004      	beq.n	8002c22 <HAL_RCC_OscConfig+0x49a>
 8002c18:	f240 211d 	movw	r1, #541	; 0x21d
 8002c1c:	4835      	ldr	r0, [pc, #212]	; (8002cf4 <HAL_RCC_OscConfig+0x56c>)
 8002c1e:	f7fd ff1f 	bl	8000a60 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c22:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4932      	ldr	r1, [pc, #200]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c34:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	492d      	ldr	r1, [pc, #180]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
 8002c48:	e015      	b.n	8002c76 <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c4a:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <HAL_RCC_OscConfig+0x580>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe fade 	bl	8001210 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c58:	f7fe fada 	bl	8001210 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e204      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d04c      	beq.n	8002d1c <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_RCC_OscConfig+0x514>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d004      	beq.n	8002c9c <HAL_RCC_OscConfig+0x514>
 8002c92:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8002c96:	4817      	ldr	r0, [pc, #92]	; (8002cf4 <HAL_RCC_OscConfig+0x56c>)
 8002c98:	f7fd fee2 	bl	8000a60 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d016      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_OscConfig+0x584>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002caa:	f7fe fab1 	bl	8001210 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb2:	f7fe faad 	bl	8001210 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e1d7      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <HAL_RCC_OscConfig+0x570>)
 8002cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x52a>
 8002cd0:	e024      	b.n	8002d1c <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <HAL_RCC_OscConfig+0x584>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fa9a 	bl	8001210 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cde:	e017      	b.n	8002d10 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce0:	f7fe fa96 	bl	8001210 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d910      	bls.n	8002d10 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1c0      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
 8002cf2:	bf00      	nop
 8002cf4:	080080e0 	.word	0x080080e0
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	080082b4 	.word	0x080082b4
 8002d00:	20000000 	.word	0x20000000
 8002d04:	20000004 	.word	0x20000004
 8002d08:	42470020 	.word	0x42470020
 8002d0c:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d10:	4ba2      	ldr	r3, [pc, #648]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e1      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80b7 	beq.w	8002e98 <HAL_RCC_OscConfig+0x710>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00c      	beq.n	8002d50 <HAL_RCC_OscConfig+0x5c8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d008      	beq.n	8002d50 <HAL_RCC_OscConfig+0x5c8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b05      	cmp	r3, #5
 8002d44:	d004      	beq.n	8002d50 <HAL_RCC_OscConfig+0x5c8>
 8002d46:	f44f 711a 	mov.w	r1, #616	; 0x268
 8002d4a:	4895      	ldr	r0, [pc, #596]	; (8002fa0 <HAL_RCC_OscConfig+0x818>)
 8002d4c:	f7fd fe88 	bl	8000a60 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d50:	4b92      	ldr	r3, [pc, #584]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10d      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5c:	4b8f      	ldr	r3, [pc, #572]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	4a8e      	ldr	r2, [pc, #568]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6253      	str	r3, [r2, #36]	; 0x24
 8002d68:	4b8c      	ldr	r3, [pc, #560]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d74:	2301      	movs	r3, #1
 8002d76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	4b8a      	ldr	r3, [pc, #552]	; (8002fa4 <HAL_RCC_OscConfig+0x81c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d118      	bne.n	8002db6 <HAL_RCC_OscConfig+0x62e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d84:	4b87      	ldr	r3, [pc, #540]	; (8002fa4 <HAL_RCC_OscConfig+0x81c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a86      	ldr	r2, [pc, #536]	; (8002fa4 <HAL_RCC_OscConfig+0x81c>)
 8002d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d90:	f7fe fa3e 	bl	8001210 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d98:	f7fe fa3a 	bl	8001210 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e164      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002daa:	4b7e      	ldr	r3, [pc, #504]	; (8002fa4 <HAL_RCC_OscConfig+0x81c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x610>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d106      	bne.n	8002dcc <HAL_RCC_OscConfig+0x644>
 8002dbe:	4b77      	ldr	r3, [pc, #476]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc2:	4a76      	ldr	r2, [pc, #472]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc8:	6353      	str	r3, [r2, #52]	; 0x34
 8002dca:	e02d      	b.n	8002e28 <HAL_RCC_OscConfig+0x6a0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10c      	bne.n	8002dee <HAL_RCC_OscConfig+0x666>
 8002dd4:	4b71      	ldr	r3, [pc, #452]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd8:	4a70      	ldr	r2, [pc, #448]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002dda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dde:	6353      	str	r3, [r2, #52]	; 0x34
 8002de0:	4b6e      	ldr	r3, [pc, #440]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	4a6d      	ldr	r2, [pc, #436]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002de6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dea:	6353      	str	r3, [r2, #52]	; 0x34
 8002dec:	e01c      	b.n	8002e28 <HAL_RCC_OscConfig+0x6a0>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b05      	cmp	r3, #5
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x688>
 8002df6:	4b69      	ldr	r3, [pc, #420]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfa:	4a68      	ldr	r2, [pc, #416]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002dfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e00:	6353      	str	r3, [r2, #52]	; 0x34
 8002e02:	4b66      	ldr	r3, [pc, #408]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e06:	4a65      	ldr	r2, [pc, #404]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6353      	str	r3, [r2, #52]	; 0x34
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0x6a0>
 8002e10:	4b62      	ldr	r3, [pc, #392]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e14:	4a61      	ldr	r2, [pc, #388]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e1a:	6353      	str	r3, [r2, #52]	; 0x34
 8002e1c:	4b5f      	ldr	r3, [pc, #380]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	4a5e      	ldr	r2, [pc, #376]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002e22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e26:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d015      	beq.n	8002e5c <HAL_RCC_OscConfig+0x6d4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7fe f9ee 	bl	8001210 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7fe f9ea 	bl	8001210 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e112      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e4e:	4b53      	ldr	r3, [pc, #332]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0ee      	beq.n	8002e38 <HAL_RCC_OscConfig+0x6b0>
 8002e5a:	e014      	b.n	8002e86 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5c:	f7fe f9d8 	bl	8001210 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_OscConfig+0x6f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e64:	f7fe f9d4 	bl	8001210 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0fc      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e7a:	4b48      	ldr	r3, [pc, #288]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1ee      	bne.n	8002e64 <HAL_RCC_OscConfig+0x6dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e86:	7ffb      	ldrb	r3, [r7, #31]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCC_OscConfig+0x710>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8c:	4b43      	ldr	r3, [pc, #268]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	4a42      	ldr	r2, [pc, #264]	; (8002f9c <HAL_RCC_OscConfig+0x814>)
 8002e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e96:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00c      	beq.n	8002eba <HAL_RCC_OscConfig+0x732>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d008      	beq.n	8002eba <HAL_RCC_OscConfig+0x732>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d004      	beq.n	8002eba <HAL_RCC_OscConfig+0x732>
 8002eb0:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8002eb4:	483a      	ldr	r0, [pc, #232]	; (8002fa0 <HAL_RCC_OscConfig+0x818>)
 8002eb6:	f7fd fdd3 	bl	8000a60 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80d7 	beq.w	8003072 <HAL_RCC_OscConfig+0x8ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2b0c      	cmp	r3, #12
 8002ec8:	f000 80b3 	beq.w	8003032 <HAL_RCC_OscConfig+0x8aa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	f040 8097 	bne.w	8003004 <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x76a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee6:	d004      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x76a>
 8002ee8:	f240 21b5 	movw	r1, #693	; 0x2b5
 8002eec:	482c      	ldr	r0, [pc, #176]	; (8002fa0 <HAL_RCC_OscConfig+0x818>)
 8002eee:	f7fd fdb7 	bl	8000a60 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d02c      	beq.n	8002f54 <HAL_RCC_OscConfig+0x7cc>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f02:	d027      	beq.n	8002f54 <HAL_RCC_OscConfig+0x7cc>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f0c:	d022      	beq.n	8002f54 <HAL_RCC_OscConfig+0x7cc>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f16:	d01d      	beq.n	8002f54 <HAL_RCC_OscConfig+0x7cc>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f20:	d018      	beq.n	8002f54 <HAL_RCC_OscConfig+0x7cc>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002f2a:	d013      	beq.n	8002f54 <HAL_RCC_OscConfig+0x7cc>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002f34:	d00e      	beq.n	8002f54 <HAL_RCC_OscConfig+0x7cc>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002f3e:	d009      	beq.n	8002f54 <HAL_RCC_OscConfig+0x7cc>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f48:	d004      	beq.n	8002f54 <HAL_RCC_OscConfig+0x7cc>
 8002f4a:	f240 21b6 	movw	r1, #694	; 0x2b6
 8002f4e:	4814      	ldr	r0, [pc, #80]	; (8002fa0 <HAL_RCC_OscConfig+0x818>)
 8002f50:	f7fd fd86 	bl	8000a60 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f5c:	d00e      	beq.n	8002f7c <HAL_RCC_OscConfig+0x7f4>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f66:	d009      	beq.n	8002f7c <HAL_RCC_OscConfig+0x7f4>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f70:	d004      	beq.n	8002f7c <HAL_RCC_OscConfig+0x7f4>
 8002f72:	f240 21b7 	movw	r1, #695	; 0x2b7
 8002f76:	480a      	ldr	r0, [pc, #40]	; (8002fa0 <HAL_RCC_OscConfig+0x818>)
 8002f78:	f7fd fd72 	bl	8000a60 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_RCC_OscConfig+0x820>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe f945 	bl	8001210 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f88:	e010      	b.n	8002fac <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fe f941 	bl	8001210 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d909      	bls.n	8002fac <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e06b      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	080080e0 	.word	0x080080e0
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fac:	4b33      	ldr	r3, [pc, #204]	; (800307c <HAL_RCC_OscConfig+0x8f4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e8      	bne.n	8002f8a <HAL_RCC_OscConfig+0x802>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb8:	4b30      	ldr	r3, [pc, #192]	; (800307c <HAL_RCC_OscConfig+0x8f4>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	4319      	orrs	r1, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	492a      	ldr	r1, [pc, #168]	; (800307c <HAL_RCC_OscConfig+0x8f4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd6:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <HAL_RCC_OscConfig+0x8f8>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe f918 	bl	8001210 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe f914 	bl	8001210 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e03e      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ff6:	4b21      	ldr	r3, [pc, #132]	; (800307c <HAL_RCC_OscConfig+0x8f4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x85c>
 8003002:	e036      	b.n	8003072 <HAL_RCC_OscConfig+0x8ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003004:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <HAL_RCC_OscConfig+0x8f8>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fe f901 	bl	8001210 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x89c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003012:	f7fe f8fd 	bl	8001210 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x89c>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e027      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_RCC_OscConfig+0x8f4>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f0      	bne.n	8003012 <HAL_RCC_OscConfig+0x88a>
 8003030:	e01f      	b.n	8003072 <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_RCC_OscConfig+0x8b6>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e01a      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800303e:	4b0f      	ldr	r3, [pc, #60]	; (800307c <HAL_RCC_OscConfig+0x8f4>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	429a      	cmp	r2, r3
 8003050:	d10d      	bne.n	800306e <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x8ea>
        {
          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_RCC_OscConfig+0x8ec>
        }
      }
    }
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40023800 	.word	0x40023800
 8003080:	42470060 	.word	0x42470060

08003084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e1a4      	b.n	80033e2 <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <HAL_RCC_ClockConfig+0x2a>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d004      	beq.n	80030ae <HAL_RCC_ClockConfig+0x2a>
 80030a4:	f240 312a 	movw	r1, #810	; 0x32a
 80030a8:	4893      	ldr	r0, [pc, #588]	; (80032f8 <HAL_RCC_ClockConfig+0x274>)
 80030aa:	f7fd fcd9 	bl	8000a60 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ae:	4b93      	ldr	r3, [pc, #588]	; (80032fc <HAL_RCC_ClockConfig+0x278>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d919      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d105      	bne.n	80030ce <HAL_RCC_ClockConfig+0x4a>
 80030c2:	4b8e      	ldr	r3, [pc, #568]	; (80032fc <HAL_RCC_ClockConfig+0x278>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a8d      	ldr	r2, [pc, #564]	; (80032fc <HAL_RCC_ClockConfig+0x278>)
 80030c8:	f043 0304 	orr.w	r3, r3, #4
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b8b      	ldr	r3, [pc, #556]	; (80032fc <HAL_RCC_ClockConfig+0x278>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0201 	bic.w	r2, r3, #1
 80030d6:	4989      	ldr	r1, [pc, #548]	; (80032fc <HAL_RCC_ClockConfig+0x278>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b87      	ldr	r3, [pc, #540]	; (80032fc <HAL_RCC_ClockConfig+0x278>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e178      	b.n	80033e2 <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d031      	beq.n	8003160 <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d024      	beq.n	800314e <HAL_RCC_ClockConfig+0xca>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b80      	cmp	r3, #128	; 0x80
 800310a:	d020      	beq.n	800314e <HAL_RCC_ClockConfig+0xca>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b90      	cmp	r3, #144	; 0x90
 8003112:	d01c      	beq.n	800314e <HAL_RCC_ClockConfig+0xca>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2ba0      	cmp	r3, #160	; 0xa0
 800311a:	d018      	beq.n	800314e <HAL_RCC_ClockConfig+0xca>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2bb0      	cmp	r3, #176	; 0xb0
 8003122:	d014      	beq.n	800314e <HAL_RCC_ClockConfig+0xca>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2bc0      	cmp	r3, #192	; 0xc0
 800312a:	d010      	beq.n	800314e <HAL_RCC_ClockConfig+0xca>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2bd0      	cmp	r3, #208	; 0xd0
 8003132:	d00c      	beq.n	800314e <HAL_RCC_ClockConfig+0xca>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2be0      	cmp	r3, #224	; 0xe0
 800313a:	d008      	beq.n	800314e <HAL_RCC_ClockConfig+0xca>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2bf0      	cmp	r3, #240	; 0xf0
 8003142:	d004      	beq.n	800314e <HAL_RCC_ClockConfig+0xca>
 8003144:	f240 3141 	movw	r1, #833	; 0x341
 8003148:	486b      	ldr	r0, [pc, #428]	; (80032f8 <HAL_RCC_ClockConfig+0x274>)
 800314a:	f7fd fc89 	bl	8000a60 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314e:	4b6c      	ldr	r3, [pc, #432]	; (8003300 <HAL_RCC_ClockConfig+0x27c>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	4969      	ldr	r1, [pc, #420]	; (8003300 <HAL_RCC_ClockConfig+0x27c>)
 800315c:	4313      	orrs	r3, r2
 800315e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80a3 	beq.w	80032b4 <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <HAL_RCC_ClockConfig+0x114>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d00c      	beq.n	8003198 <HAL_RCC_ClockConfig+0x114>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d008      	beq.n	8003198 <HAL_RCC_ClockConfig+0x114>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b03      	cmp	r3, #3
 800318c:	d004      	beq.n	8003198 <HAL_RCC_ClockConfig+0x114>
 800318e:	f44f 7152 	mov.w	r1, #840	; 0x348
 8003192:	4859      	ldr	r0, [pc, #356]	; (80032f8 <HAL_RCC_ClockConfig+0x274>)
 8003194:	f7fd fc64 	bl	8000a60 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d107      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031a0:	4b57      	ldr	r3, [pc, #348]	; (8003300 <HAL_RCC_ClockConfig+0x27c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d121      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e118      	b.n	80033e2 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d107      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031b8:	4b51      	ldr	r3, [pc, #324]	; (8003300 <HAL_RCC_ClockConfig+0x27c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d115      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e10c      	b.n	80033e2 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031d0:	4b4b      	ldr	r3, [pc, #300]	; (8003300 <HAL_RCC_ClockConfig+0x27c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d109      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e100      	b.n	80033e2 <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031e0:	4b47      	ldr	r3, [pc, #284]	; (8003300 <HAL_RCC_ClockConfig+0x27c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0f8      	b.n	80033e2 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f0:	4b43      	ldr	r3, [pc, #268]	; (8003300 <HAL_RCC_ClockConfig+0x27c>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f023 0203 	bic.w	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4940      	ldr	r1, [pc, #256]	; (8003300 <HAL_RCC_ClockConfig+0x27c>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003202:	f7fe f805 	bl	8001210 <HAL_GetTick>
 8003206:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d112      	bne.n	8003236 <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003210:	e00a      	b.n	8003228 <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003212:	f7fd fffd 	bl	8001210 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003220:	4293      	cmp	r3, r2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e0dc      	b.n	80033e2 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003228:	4b35      	ldr	r3, [pc, #212]	; (8003300 <HAL_RCC_ClockConfig+0x27c>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 030c 	and.w	r3, r3, #12
 8003230:	2b08      	cmp	r3, #8
 8003232:	d1ee      	bne.n	8003212 <HAL_RCC_ClockConfig+0x18e>
 8003234:	e03e      	b.n	80032b4 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b03      	cmp	r3, #3
 800323c:	d112      	bne.n	8003264 <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800323e:	e00a      	b.n	8003256 <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003240:	f7fd ffe6 	bl	8001210 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e0c5      	b.n	80033e2 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003256:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <HAL_RCC_ClockConfig+0x27c>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b0c      	cmp	r3, #12
 8003260:	d1ee      	bne.n	8003240 <HAL_RCC_ClockConfig+0x1bc>
 8003262:	e027      	b.n	80032b4 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d11d      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800326e:	f7fd ffcf 	bl	8001210 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0ae      	b.n	80033e2 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003284:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <HAL_RCC_ClockConfig+0x27c>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b04      	cmp	r3, #4
 800328e:	d1ee      	bne.n	800326e <HAL_RCC_ClockConfig+0x1ea>
 8003290:	e010      	b.n	80032b4 <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003292:	f7fd ffbd 	bl	8001210 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e09c      	b.n	80033e2 <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_RCC_ClockConfig+0x27c>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ee      	bne.n	8003292 <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b4:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_RCC_ClockConfig+0x278>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d220      	bcs.n	8003304 <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x250>
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <HAL_RCC_ClockConfig+0x278>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <HAL_RCC_ClockConfig+0x278>)
 80032ce:	f043 0304 	orr.w	r3, r3, #4
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x278>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f023 0201 	bic.w	r2, r3, #1
 80032dc:	4907      	ldr	r1, [pc, #28]	; (80032fc <HAL_RCC_ClockConfig+0x278>)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <HAL_RCC_ClockConfig+0x278>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d008      	beq.n	8003304 <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e075      	b.n	80033e2 <HAL_RCC_ClockConfig+0x35e>
 80032f6:	bf00      	nop
 80032f8:	080080e0 	.word	0x080080e0
 80032fc:	40023c00 	.word	0x40023c00
 8003300:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d025      	beq.n	800335c <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d018      	beq.n	800334a <HAL_RCC_ClockConfig+0x2c6>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003320:	d013      	beq.n	800334a <HAL_RCC_ClockConfig+0x2c6>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800332a:	d00e      	beq.n	800334a <HAL_RCC_ClockConfig+0x2c6>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003334:	d009      	beq.n	800334a <HAL_RCC_ClockConfig+0x2c6>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800333e:	d004      	beq.n	800334a <HAL_RCC_ClockConfig+0x2c6>
 8003340:	f240 31ad 	movw	r1, #941	; 0x3ad
 8003344:	4829      	ldr	r0, [pc, #164]	; (80033ec <HAL_RCC_ClockConfig+0x368>)
 8003346:	f7fd fb8b 	bl	8000a60 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334a:	4b29      	ldr	r3, [pc, #164]	; (80033f0 <HAL_RCC_ClockConfig+0x36c>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	4926      	ldr	r1, [pc, #152]	; (80033f0 <HAL_RCC_ClockConfig+0x36c>)
 8003358:	4313      	orrs	r3, r2
 800335a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d026      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d018      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x31e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003378:	d013      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x31e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003382:	d00e      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x31e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800338c:	d009      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x31e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003396:	d004      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x31e>
 8003398:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 800339c:	4813      	ldr	r0, [pc, #76]	; (80033ec <HAL_RCC_ClockConfig+0x368>)
 800339e:	f7fd fb5f 	bl	8000a60 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_RCC_ClockConfig+0x36c>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	490f      	ldr	r1, [pc, #60]	; (80033f0 <HAL_RCC_ClockConfig+0x36c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033b6:	f000 f823 	bl	8003400 <HAL_RCC_GetSysClockFreq>
 80033ba:	4601      	mov	r1, r0
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <HAL_RCC_ClockConfig+0x36c>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	4a0b      	ldr	r2, [pc, #44]	; (80033f4 <HAL_RCC_ClockConfig+0x370>)
 80033c8:	5cd3      	ldrb	r3, [r2, r3]
 80033ca:	fa21 f303 	lsr.w	r3, r1, r3
 80033ce:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <HAL_RCC_ClockConfig+0x374>)
 80033d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_RCC_ClockConfig+0x378>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd fb80 	bl	8000adc <HAL_InitTick>
 80033dc:	4603      	mov	r3, r0
 80033de:	72fb      	strb	r3, [r7, #11]

  return status;
 80033e0:	7afb      	ldrb	r3, [r7, #11]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	080080e0 	.word	0x080080e0
 80033f0:	40023800 	.word	0x40023800
 80033f4:	080082b4 	.word	0x080082b4
 80033f8:	20000000 	.word	0x20000000
 80033fc:	20000004 	.word	0x20000004

08003400 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003406:	4b26      	ldr	r3, [pc, #152]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b08      	cmp	r3, #8
 8003414:	d006      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x24>
 8003416:	2b0c      	cmp	r3, #12
 8003418:	d007      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x2a>
 800341a:	2b04      	cmp	r3, #4
 800341c:	d12c      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800341e:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003420:	613b      	str	r3, [r7, #16]
      break;
 8003422:	e037      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003424:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003426:	613b      	str	r3, [r7, #16]
      break;
 8003428:	e034      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	0c9b      	lsrs	r3, r3, #18
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	4a1e      	ldr	r2, [pc, #120]	; (80034ac <HAL_RCC_GetSysClockFreq+0xac>)
 8003434:	5cd3      	ldrb	r3, [r2, r3]
 8003436:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	0d9b      	lsrs	r3, r3, #22
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	3301      	adds	r3, #1
 8003442:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003444:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003454:	fb02 f203 	mul.w	r2, r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e007      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4a0f      	ldr	r2, [pc, #60]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003466:	fb02 f203 	mul.w	r2, r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	613b      	str	r3, [r7, #16]
      break;
 8003476:	e00d      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	0b5b      	lsrs	r3, r3, #13
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	3301      	adds	r3, #1
 8003488:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	613b      	str	r3, [r7, #16]
      break;
 8003492:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003494:	693b      	ldr	r3, [r7, #16]
}
 8003496:	4618      	mov	r0, r3
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	40023800 	.word	0x40023800
 80034a4:	00f42400 	.word	0x00f42400
 80034a8:	007a1200 	.word	0x007a1200
 80034ac:	080082a8 	.word	0x080082a8

080034b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b4:	4b02      	ldr	r3, [pc, #8]	; (80034c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr
 80034c0:	20000000 	.word	0x20000000

080034c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034c8:	f7ff fff2 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034cc:	4601      	mov	r1, r0
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	0a1b      	lsrs	r3, r3, #8
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	4a03      	ldr	r2, [pc, #12]	; (80034e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40023800 	.word	0x40023800
 80034e8:	080082c4 	.word	0x080082c4

080034ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034f0:	f7ff ffde 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034f4:	4601      	mov	r1, r0
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	0adb      	lsrs	r3, r3, #11
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	4a03      	ldr	r2, [pc, #12]	; (8003510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003502:	5cd3      	ldrb	r3, [r2, r3]
 8003504:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	080082c4 	.word	0x080082c4

08003514 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d104      	bne.n	800352e <HAL_RCC_GetClockConfig+0x1a>
 8003524:	f240 41fa 	movw	r1, #1274	; 0x4fa
 8003528:	4818      	ldr	r0, [pc, #96]	; (800358c <HAL_RCC_GetClockConfig+0x78>)
 800352a:	f7fd fa99 	bl	8000a60 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d104      	bne.n	800353e <HAL_RCC_GetClockConfig+0x2a>
 8003534:	f240 41fb 	movw	r1, #1275	; 0x4fb
 8003538:	4814      	ldr	r0, [pc, #80]	; (800358c <HAL_RCC_GetClockConfig+0x78>)
 800353a:	f7fd fa91 	bl	8000a60 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	220f      	movs	r2, #15
 8003542:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <HAL_RCC_GetClockConfig+0x7c>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0203 	and.w	r2, r3, #3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <HAL_RCC_GetClockConfig+0x7c>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <HAL_RCC_GetClockConfig+0x7c>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_RCC_GetClockConfig+0x7c>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	08db      	lsrs	r3, r3, #3
 800356e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003576:	4b07      	ldr	r3, [pc, #28]	; (8003594 <HAL_RCC_GetClockConfig+0x80>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0201 	and.w	r2, r3, #1
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	601a      	str	r2, [r3, #0]
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	080080e0 	.word	0x080080e0
 8003590:	40023800 	.word	0x40023800
 8003594:	40023c00 	.word	0x40023c00

08003598 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80035a4:	4b29      	ldr	r3, [pc, #164]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d12c      	bne.n	800360a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035b0:	4b26      	ldr	r3, [pc, #152]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80035bc:	4b24      	ldr	r3, [pc, #144]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	e016      	b.n	80035f6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c8:	4b20      	ldr	r3, [pc, #128]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	4a1f      	ldr	r2, [pc, #124]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d2:	6253      	str	r3, [r2, #36]	; 0x24
 80035d4:	4b1d      	ldr	r3, [pc, #116]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80035e0:	4b1b      	ldr	r3, [pc, #108]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80035e8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ea:	4b18      	ldr	r3, [pc, #96]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	4a17      	ldr	r2, [pc, #92]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80035f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80035fc:	d105      	bne.n	800360a <RCC_SetFlashLatencyFromMSIRange+0x72>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003604:	d101      	bne.n	800360a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003606:	2301      	movs	r3, #1
 8003608:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d105      	bne.n	800361c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003610:	4b10      	ldr	r3, [pc, #64]	; (8003654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a0f      	ldr	r2, [pc, #60]	; (8003654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003616:	f043 0304 	orr.w	r3, r3, #4
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f023 0201 	bic.w	r2, r3, #1
 8003624:	490b      	ldr	r1, [pc, #44]	; (8003654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800362c:	4b09      	ldr	r3, [pc, #36]	; (8003654 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	429a      	cmp	r2, r3
 8003638:	d001      	beq.n	800363e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800
 8003650:	40007000 	.word	0x40007000
 8003654:	40023c00 	.word	0x40023c00

08003658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e088      	b.n	800377c <HAL_TIM_Base_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003672:	d02c      	beq.n	80036ce <HAL_TIM_Base_Init+0x76>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a42      	ldr	r2, [pc, #264]	; (8003784 <HAL_TIM_Base_Init+0x12c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d027      	beq.n	80036ce <HAL_TIM_Base_Init+0x76>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a41      	ldr	r2, [pc, #260]	; (8003788 <HAL_TIM_Base_Init+0x130>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d022      	beq.n	80036ce <HAL_TIM_Base_Init+0x76>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a3f      	ldr	r2, [pc, #252]	; (800378c <HAL_TIM_Base_Init+0x134>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01d      	beq.n	80036ce <HAL_TIM_Base_Init+0x76>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a3e      	ldr	r2, [pc, #248]	; (8003790 <HAL_TIM_Base_Init+0x138>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d018      	beq.n	80036ce <HAL_TIM_Base_Init+0x76>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a3c      	ldr	r2, [pc, #240]	; (8003794 <HAL_TIM_Base_Init+0x13c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_TIM_Base_Init+0x76>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a3b      	ldr	r2, [pc, #236]	; (8003798 <HAL_TIM_Base_Init+0x140>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00e      	beq.n	80036ce <HAL_TIM_Base_Init+0x76>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a39      	ldr	r2, [pc, #228]	; (800379c <HAL_TIM_Base_Init+0x144>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d009      	beq.n	80036ce <HAL_TIM_Base_Init+0x76>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a38      	ldr	r2, [pc, #224]	; (80037a0 <HAL_TIM_Base_Init+0x148>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d004      	beq.n	80036ce <HAL_TIM_Base_Init+0x76>
 80036c4:	f240 110b 	movw	r1, #267	; 0x10b
 80036c8:	4836      	ldr	r0, [pc, #216]	; (80037a4 <HAL_TIM_Base_Init+0x14c>)
 80036ca:	f7fd f9c9 	bl	8000a60 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d014      	beq.n	8003700 <HAL_TIM_Base_Init+0xa8>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b10      	cmp	r3, #16
 80036dc:	d010      	beq.n	8003700 <HAL_TIM_Base_Init+0xa8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d00c      	beq.n	8003700 <HAL_TIM_Base_Init+0xa8>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b40      	cmp	r3, #64	; 0x40
 80036ec:	d008      	beq.n	8003700 <HAL_TIM_Base_Init+0xa8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b60      	cmp	r3, #96	; 0x60
 80036f4:	d004      	beq.n	8003700 <HAL_TIM_Base_Init+0xa8>
 80036f6:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80036fa:	482a      	ldr	r0, [pc, #168]	; (80037a4 <HAL_TIM_Base_Init+0x14c>)
 80036fc:	f7fd f9b0 	bl	8000a60 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00e      	beq.n	8003726 <HAL_TIM_Base_Init+0xce>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003710:	d009      	beq.n	8003726 <HAL_TIM_Base_Init+0xce>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800371a:	d004      	beq.n	8003726 <HAL_TIM_Base_Init+0xce>
 800371c:	f240 110d 	movw	r1, #269	; 0x10d
 8003720:	4820      	ldr	r0, [pc, #128]	; (80037a4 <HAL_TIM_Base_Init+0x14c>)
 8003722:	f7fd f99d 	bl	8000a60 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_TIM_Base_Init+0xe8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	2b80      	cmp	r3, #128	; 0x80
 8003734:	d004      	beq.n	8003740 <HAL_TIM_Base_Init+0xe8>
 8003736:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800373a:	481a      	ldr	r0, [pc, #104]	; (80037a4 <HAL_TIM_Base_Init+0x14c>)
 800373c:	f7fd f990 	bl	8000a60 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d106      	bne.n	800375a <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7fd fbd5 	bl	8000f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	4619      	mov	r1, r3
 800376c:	4610      	mov	r0, r2
 800376e:	f000 feb5 	bl	80044dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800
 800378c:	40000c00 	.word	0x40000c00
 8003790:	40001000 	.word	0x40001000
 8003794:	40001400 	.word	0x40001400
 8003798:	40010800 	.word	0x40010800
 800379c:	40010c00 	.word	0x40010c00
 80037a0:	40011000 	.word	0x40011000
 80037a4:	08008118 	.word	0x08008118

080037a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b8:	d02c      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x6c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a24      	ldr	r2, [pc, #144]	; (8003850 <HAL_TIM_Base_Start_IT+0xa8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d027      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x6c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a22      	ldr	r2, [pc, #136]	; (8003854 <HAL_TIM_Base_Start_IT+0xac>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d022      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x6c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a21      	ldr	r2, [pc, #132]	; (8003858 <HAL_TIM_Base_Start_IT+0xb0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d01d      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x6c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1f      	ldr	r2, [pc, #124]	; (800385c <HAL_TIM_Base_Start_IT+0xb4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d018      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x6c>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1e      	ldr	r2, [pc, #120]	; (8003860 <HAL_TIM_Base_Start_IT+0xb8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d013      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x6c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <HAL_TIM_Base_Start_IT+0xbc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00e      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x6c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <HAL_TIM_Base_Start_IT+0xc0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d009      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x6c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a19      	ldr	r2, [pc, #100]	; (800386c <HAL_TIM_Base_Start_IT+0xc4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x6c>
 800380a:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 800380e:	4818      	ldr	r0, [pc, #96]	; (8003870 <HAL_TIM_Base_Start_IT+0xc8>)
 8003810:	f7fd f926 	bl	8000a60 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b06      	cmp	r3, #6
 8003834:	d007      	beq.n	8003846 <HAL_TIM_Base_Start_IT+0x9e>
  {
    __HAL_TIM_ENABLE(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0201 	orr.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40001000 	.word	0x40001000
 8003860:	40001400 	.word	0x40001400
 8003864:	40010800 	.word	0x40010800
 8003868:	40010c00 	.word	0x40010c00
 800386c:	40011000 	.word	0x40011000
 8003870:	08008118 	.word	0x08008118

08003874 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e088      	b.n	8003998 <HAL_TIM_PWM_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388e:	d02c      	beq.n	80038ea <HAL_TIM_PWM_Init+0x76>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a42      	ldr	r2, [pc, #264]	; (80039a0 <HAL_TIM_PWM_Init+0x12c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d027      	beq.n	80038ea <HAL_TIM_PWM_Init+0x76>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a41      	ldr	r2, [pc, #260]	; (80039a4 <HAL_TIM_PWM_Init+0x130>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d022      	beq.n	80038ea <HAL_TIM_PWM_Init+0x76>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <HAL_TIM_PWM_Init+0x134>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01d      	beq.n	80038ea <HAL_TIM_PWM_Init+0x76>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a3e      	ldr	r2, [pc, #248]	; (80039ac <HAL_TIM_PWM_Init+0x138>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d018      	beq.n	80038ea <HAL_TIM_PWM_Init+0x76>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a3c      	ldr	r2, [pc, #240]	; (80039b0 <HAL_TIM_PWM_Init+0x13c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <HAL_TIM_PWM_Init+0x76>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a3b      	ldr	r2, [pc, #236]	; (80039b4 <HAL_TIM_PWM_Init+0x140>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00e      	beq.n	80038ea <HAL_TIM_PWM_Init+0x76>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a39      	ldr	r2, [pc, #228]	; (80039b8 <HAL_TIM_PWM_Init+0x144>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d009      	beq.n	80038ea <HAL_TIM_PWM_Init+0x76>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a38      	ldr	r2, [pc, #224]	; (80039bc <HAL_TIM_PWM_Init+0x148>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d004      	beq.n	80038ea <HAL_TIM_PWM_Init+0x76>
 80038e0:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80038e4:	4836      	ldr	r0, [pc, #216]	; (80039c0 <HAL_TIM_PWM_Init+0x14c>)
 80038e6:	f7fd f8bb 	bl	8000a60 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d014      	beq.n	800391c <HAL_TIM_PWM_Init+0xa8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d010      	beq.n	800391c <HAL_TIM_PWM_Init+0xa8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d00c      	beq.n	800391c <HAL_TIM_PWM_Init+0xa8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b40      	cmp	r3, #64	; 0x40
 8003908:	d008      	beq.n	800391c <HAL_TIM_PWM_Init+0xa8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b60      	cmp	r3, #96	; 0x60
 8003910:	d004      	beq.n	800391c <HAL_TIM_PWM_Init+0xa8>
 8003912:	f240 4171 	movw	r1, #1137	; 0x471
 8003916:	482a      	ldr	r0, [pc, #168]	; (80039c0 <HAL_TIM_PWM_Init+0x14c>)
 8003918:	f7fd f8a2 	bl	8000a60 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00e      	beq.n	8003942 <HAL_TIM_PWM_Init+0xce>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392c:	d009      	beq.n	8003942 <HAL_TIM_PWM_Init+0xce>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003936:	d004      	beq.n	8003942 <HAL_TIM_PWM_Init+0xce>
 8003938:	f240 4172 	movw	r1, #1138	; 0x472
 800393c:	4820      	ldr	r0, [pc, #128]	; (80039c0 <HAL_TIM_PWM_Init+0x14c>)
 800393e:	f7fd f88f 	bl	8000a60 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_TIM_PWM_Init+0xe8>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	2b80      	cmp	r3, #128	; 0x80
 8003950:	d004      	beq.n	800395c <HAL_TIM_PWM_Init+0xe8>
 8003952:	f240 4173 	movw	r1, #1139	; 0x473
 8003956:	481a      	ldr	r0, [pc, #104]	; (80039c0 <HAL_TIM_PWM_Init+0x14c>)
 8003958:	f7fd f882 	bl	8000a60 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <HAL_TIM_PWM_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f827 	bl	80039c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3304      	adds	r3, #4
 8003986:	4619      	mov	r1, r3
 8003988:	4610      	mov	r0, r2
 800398a:	f000 fda7 	bl	80044dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40000400 	.word	0x40000400
 80039a4:	40000800 	.word	0x40000800
 80039a8:	40000c00 	.word	0x40000c00
 80039ac:	40001000 	.word	0x40001000
 80039b0:	40001400 	.word	0x40001400
 80039b4:	40010800 	.word	0x40010800
 80039b8:	40010c00 	.word	0x40010c00
 80039bc:	40011000 	.word	0x40011000
 80039c0:	08008118 	.word	0x08008118

080039c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d122      	bne.n	8003a32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d11b      	bne.n	8003a32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f06f 0202 	mvn.w	r2, #2
 8003a02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fd44 	bl	80044a6 <HAL_TIM_IC_CaptureCallback>
 8003a1e:	e005      	b.n	8003a2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fd37 	bl	8004494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fd46 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d122      	bne.n	8003a86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d11b      	bne.n	8003a86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f06f 0204 	mvn.w	r2, #4
 8003a56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fd1a 	bl	80044a6 <HAL_TIM_IC_CaptureCallback>
 8003a72:	e005      	b.n	8003a80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fd0d 	bl	8004494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fd1c 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d122      	bne.n	8003ada <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d11b      	bne.n	8003ada <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f06f 0208 	mvn.w	r2, #8
 8003aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2204      	movs	r2, #4
 8003ab0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fcf0 	bl	80044a6 <HAL_TIM_IC_CaptureCallback>
 8003ac6:	e005      	b.n	8003ad4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fce3 	bl	8004494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fcf2 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d122      	bne.n	8003b2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b10      	cmp	r3, #16
 8003af4:	d11b      	bne.n	8003b2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f06f 0210 	mvn.w	r2, #16
 8003afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2208      	movs	r2, #8
 8003b04:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fcc6 	bl	80044a6 <HAL_TIM_IC_CaptureCallback>
 8003b1a:	e005      	b.n	8003b28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fcb9 	bl	8004494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fcc8 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10e      	bne.n	8003b5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d107      	bne.n	8003b5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f06f 0201 	mvn.w	r2, #1
 8003b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7fc ff6b 	bl	8000a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b40      	cmp	r3, #64	; 0x40
 8003b66:	d10e      	bne.n	8003b86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b72:	2b40      	cmp	r3, #64	; 0x40
 8003b74:	d107      	bne.n	8003b86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fca2 	bl	80044ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d010      	beq.n	8003bc4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d00a      	beq.n	8003bc4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b0c      	cmp	r3, #12
 8003bb2:	d007      	beq.n	8003bc4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b3c      	cmp	r3, #60	; 0x3c
 8003bb8:	d004      	beq.n	8003bc4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003bba:	f640 5169 	movw	r1, #3433	; 0xd69
 8003bbe:	488d      	ldr	r0, [pc, #564]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003bc0:	f7fc ff4e 	bl	8000a60 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b60      	cmp	r3, #96	; 0x60
 8003bca:	d008      	beq.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b70      	cmp	r3, #112	; 0x70
 8003bd2:	d004      	beq.n	8003bde <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003bd4:	f640 516a 	movw	r1, #3434	; 0xd6a
 8003bd8:	4886      	ldr	r0, [pc, #536]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003bda:	f7fc ff41 	bl	8000a60 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x68>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d004      	beq.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x68>
 8003bee:	f640 516b 	movw	r1, #3435	; 0xd6b
 8003bf2:	4880      	ldr	r0, [pc, #512]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003bf4:	f7fc ff34 	bl	8000a60 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x82>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d004      	beq.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x82>
 8003c08:	f640 516c 	movw	r1, #3436	; 0xd6c
 8003c0c:	4879      	ldr	r0, [pc, #484]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003c0e:	f7fc ff27 	bl	8000a60 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x90>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e13b      	b.n	8003e98 <HAL_TIM_PWM_ConfigChannel+0x308>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b0c      	cmp	r3, #12
 8003c34:	f200 8126 	bhi.w	8003e84 <HAL_TIM_PWM_ConfigChannel+0x2f4>
 8003c38:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c75 	.word	0x08003c75
 8003c44:	08003e85 	.word	0x08003e85
 8003c48:	08003e85 	.word	0x08003e85
 8003c4c:	08003e85 	.word	0x08003e85
 8003c50:	08003d05 	.word	0x08003d05
 8003c54:	08003e85 	.word	0x08003e85
 8003c58:	08003e85 	.word	0x08003e85
 8003c5c:	08003e85 	.word	0x08003e85
 8003c60:	08003d83 	.word	0x08003d83
 8003c64:	08003e85 	.word	0x08003e85
 8003c68:	08003e85 	.word	0x08003e85
 8003c6c:	08003e85 	.word	0x08003e85
 8003c70:	08003e11 	.word	0x08003e11
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7c:	d022      	beq.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a5d      	ldr	r2, [pc, #372]	; (8003df8 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d01d      	beq.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a5b      	ldr	r2, [pc, #364]	; (8003dfc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d018      	beq.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a5a      	ldr	r2, [pc, #360]	; (8003e00 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d013      	beq.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a58      	ldr	r2, [pc, #352]	; (8003e04 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00e      	beq.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a57      	ldr	r2, [pc, #348]	; (8003e08 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d009      	beq.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a55      	ldr	r2, [pc, #340]	; (8003e0c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003cba:	f640 5178 	movw	r1, #3448	; 0xd78
 8003cbe:	484d      	ldr	r0, [pc, #308]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003cc0:	f7fc fece 	bl	8000a60 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fc76 	bl	80045bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0208 	orr.w	r2, r2, #8
 8003cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0204 	bic.w	r2, r2, #4
 8003cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6999      	ldr	r1, [r3, #24]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	619a      	str	r2, [r3, #24]
      break;
 8003d02:	e0c0      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0c:	d018      	beq.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a39      	ldr	r2, [pc, #228]	; (8003df8 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d013      	beq.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a37      	ldr	r2, [pc, #220]	; (8003dfc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00e      	beq.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a36      	ldr	r2, [pc, #216]	; (8003e00 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d009      	beq.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a34      	ldr	r2, [pc, #208]	; (8003e04 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d004      	beq.n	8003d40 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003d36:	f640 5189 	movw	r1, #3465	; 0xd89
 8003d3a:	482e      	ldr	r0, [pc, #184]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003d3c:	f7fc fe90 	bl	8000a60 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fc74 	bl	8004634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6999      	ldr	r1, [r3, #24]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	021a      	lsls	r2, r3, #8
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	619a      	str	r2, [r3, #24]
      break;
 8003d80:	e081      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8a:	d013      	beq.n	8003db4 <HAL_TIM_PWM_ConfigChannel+0x224>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00e      	beq.n	8003db4 <HAL_TIM_PWM_ConfigChannel+0x224>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d009      	beq.n	8003db4 <HAL_TIM_PWM_ConfigChannel+0x224>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a16      	ldr	r2, [pc, #88]	; (8003e00 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_TIM_PWM_ConfigChannel+0x224>
 8003daa:	f640 519a 	movw	r1, #3482	; 0xd9a
 8003dae:	4811      	ldr	r0, [pc, #68]	; (8003df4 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003db0:	f7fc fe56 	bl	8000a60 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fc78 	bl	80046b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0208 	orr.w	r2, r2, #8
 8003dce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0204 	bic.w	r2, r2, #4
 8003dde:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69d9      	ldr	r1, [r3, #28]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	61da      	str	r2, [r3, #28]
      break;
 8003df2:	e048      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8003df4:	08008118 	.word	0x08008118
 8003df8:	40000400 	.word	0x40000400
 8003dfc:	40000800 	.word	0x40000800
 8003e00:	40000c00 	.word	0x40000c00
 8003e04:	40010800 	.word	0x40010800
 8003e08:	40010c00 	.word	0x40010c00
 8003e0c:	40011000 	.word	0x40011000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e18:	d013      	beq.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a20      	ldr	r2, [pc, #128]	; (8003ea0 <HAL_TIM_PWM_ConfigChannel+0x310>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00e      	beq.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1e      	ldr	r2, [pc, #120]	; (8003ea4 <HAL_TIM_PWM_ConfigChannel+0x314>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1d      	ldr	r2, [pc, #116]	; (8003ea8 <HAL_TIM_PWM_ConfigChannel+0x318>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d004      	beq.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8003e38:	f640 51ab 	movw	r1, #3499	; 0xdab
 8003e3c:	481b      	ldr	r0, [pc, #108]	; (8003eac <HAL_TIM_PWM_ConfigChannel+0x31c>)
 8003e3e:	f7fc fe0f 	bl	8000a60 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fc6e 	bl	800472a <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69d9      	ldr	r1, [r3, #28]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	021a      	lsls	r2, r3, #8
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	61da      	str	r2, [r3, #28]
      break;
 8003e82:	e000      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    default:
      break;
 8003e84:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40000400 	.word	0x40000400
 8003ea4:	40000800 	.word	0x40000800
 8003ea8:	40000c00 	.word	0x40000c00
 8003eac:	08008118 	.word	0x08008118

08003eb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_TIM_ConfigClockSource+0x18>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e2d7      	b.n	8004478 <HAL_TIM_ConfigClockSource+0x5c8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee0:	d029      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x86>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eea:	d024      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x86>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d020      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x86>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d01c      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x86>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d018      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x86>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b30      	cmp	r3, #48	; 0x30
 8003f0a:	d014      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x86>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d010      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x86>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b50      	cmp	r3, #80	; 0x50
 8003f1a:	d00c      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x86>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b60      	cmp	r3, #96	; 0x60
 8003f22:	d008      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x86>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b70      	cmp	r3, #112	; 0x70
 8003f2a:	d004      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x86>
 8003f2c:	f241 01d0 	movw	r1, #4304	; 0x10d0
 8003f30:	4874      	ldr	r0, [pc, #464]	; (8004104 <HAL_TIM_ConfigClockSource+0x254>)
 8003f32:	f7fc fd95 	bl	8000a60 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f44:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f4c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b40      	cmp	r3, #64	; 0x40
 8003f5c:	f000 820a 	beq.w	8004374 <HAL_TIM_ConfigClockSource+0x4c4>
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d80f      	bhi.n	8003f84 <HAL_TIM_ConfigClockSource+0xd4>
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	f000 8256 	beq.w	8004416 <HAL_TIM_ConfigClockSource+0x566>
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	d803      	bhi.n	8003f76 <HAL_TIM_ConfigClockSource+0xc6>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8251 	beq.w	8004416 <HAL_TIM_ConfigClockSource+0x566>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003f74:	e277      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	f000 824d 	beq.w	8004416 <HAL_TIM_ConfigClockSource+0x566>
 8003f7c:	2b30      	cmp	r3, #48	; 0x30
 8003f7e:	f000 824a 	beq.w	8004416 <HAL_TIM_ConfigClockSource+0x566>
      break;
 8003f82:	e270      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8003f84:	2b70      	cmp	r3, #112	; 0x70
 8003f86:	d04c      	beq.n	8004022 <HAL_TIM_ConfigClockSource+0x172>
 8003f88:	2b70      	cmp	r3, #112	; 0x70
 8003f8a:	d806      	bhi.n	8003f9a <HAL_TIM_ConfigClockSource+0xea>
 8003f8c:	2b50      	cmp	r3, #80	; 0x50
 8003f8e:	f000 8141 	beq.w	8004214 <HAL_TIM_ConfigClockSource+0x364>
 8003f92:	2b60      	cmp	r3, #96	; 0x60
 8003f94:	f000 818f 	beq.w	80042b6 <HAL_TIM_ConfigClockSource+0x406>
      break;
 8003f98:	e265      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8003f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9e:	d004      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0xfa>
 8003fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa4:	f000 80c0 	beq.w	8004128 <HAL_TIM_ConfigClockSource+0x278>
      break;
 8003fa8:	e25d      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb2:	f000 8257 	beq.w	8004464 <HAL_TIM_ConfigClockSource+0x5b4>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a53      	ldr	r2, [pc, #332]	; (8004108 <HAL_TIM_ConfigClockSource+0x258>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	f000 8251 	beq.w	8004464 <HAL_TIM_ConfigClockSource+0x5b4>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a51      	ldr	r2, [pc, #324]	; (800410c <HAL_TIM_ConfigClockSource+0x25c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	f000 824b 	beq.w	8004464 <HAL_TIM_ConfigClockSource+0x5b4>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a4f      	ldr	r2, [pc, #316]	; (8004110 <HAL_TIM_ConfigClockSource+0x260>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	f000 8245 	beq.w	8004464 <HAL_TIM_ConfigClockSource+0x5b4>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a4d      	ldr	r2, [pc, #308]	; (8004114 <HAL_TIM_ConfigClockSource+0x264>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	f000 823f 	beq.w	8004464 <HAL_TIM_ConfigClockSource+0x5b4>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a4b      	ldr	r2, [pc, #300]	; (8004118 <HAL_TIM_ConfigClockSource+0x268>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	f000 8239 	beq.w	8004464 <HAL_TIM_ConfigClockSource+0x5b4>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a49      	ldr	r2, [pc, #292]	; (800411c <HAL_TIM_ConfigClockSource+0x26c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	f000 8233 	beq.w	8004464 <HAL_TIM_ConfigClockSource+0x5b4>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a47      	ldr	r2, [pc, #284]	; (8004120 <HAL_TIM_ConfigClockSource+0x270>)
 8004004:	4293      	cmp	r3, r2
 8004006:	f000 822d 	beq.w	8004464 <HAL_TIM_ConfigClockSource+0x5b4>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a45      	ldr	r2, [pc, #276]	; (8004124 <HAL_TIM_ConfigClockSource+0x274>)
 8004010:	4293      	cmp	r3, r2
 8004012:	f000 8227 	beq.w	8004464 <HAL_TIM_ConfigClockSource+0x5b4>
 8004016:	f241 01dc 	movw	r1, #4316	; 0x10dc
 800401a:	483a      	ldr	r0, [pc, #232]	; (8004104 <HAL_TIM_ConfigClockSource+0x254>)
 800401c:	f7fc fd20 	bl	8000a60 <assert_failed>
      break;
 8004020:	e220      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x5b4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402a:	d018      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x1ae>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a35      	ldr	r2, [pc, #212]	; (8004108 <HAL_TIM_ConfigClockSource+0x258>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x1ae>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a34      	ldr	r2, [pc, #208]	; (800410c <HAL_TIM_ConfigClockSource+0x25c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00e      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x1ae>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a32      	ldr	r2, [pc, #200]	; (8004110 <HAL_TIM_ConfigClockSource+0x260>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d009      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x1ae>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a33      	ldr	r2, [pc, #204]	; (800411c <HAL_TIM_ConfigClockSource+0x26c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x1ae>
 8004054:	f241 01e3 	movw	r1, #4323	; 0x10e3
 8004058:	482a      	ldr	r0, [pc, #168]	; (8004104 <HAL_TIM_ConfigClockSource+0x254>)
 800405a:	f7fc fd01 	bl	8000a60 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d013      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406e:	d00e      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004078:	d009      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x1de>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004082:	d004      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x1de>
 8004084:	f241 01e6 	movw	r1, #4326	; 0x10e6
 8004088:	481e      	ldr	r0, [pc, #120]	; (8004104 <HAL_TIM_ConfigClockSource+0x254>)
 800408a:	f7fc fce9 	bl	8000a60 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004096:	d014      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x212>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d010      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x212>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00c      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x212>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d008      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x212>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b0a      	cmp	r3, #10
 80040b6:	d004      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x212>
 80040b8:	f241 01e7 	movw	r1, #4327	; 0x10e7
 80040bc:	4811      	ldr	r0, [pc, #68]	; (8004104 <HAL_TIM_ConfigClockSource+0x254>)
 80040be:	f7fc fccf 	bl	8000a60 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2b0f      	cmp	r3, #15
 80040c8:	d904      	bls.n	80040d4 <HAL_TIM_ConfigClockSource+0x224>
 80040ca:	f241 01e8 	movw	r1, #4328	; 0x10e8
 80040ce:	480d      	ldr	r0, [pc, #52]	; (8004104 <HAL_TIM_ConfigClockSource+0x254>)
 80040d0:	f7fc fcc6 	bl	8000a60 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	6899      	ldr	r1, [r3, #8]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f000 fbd6 	bl	8004894 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	609a      	str	r2, [r3, #8]
      break;
 8004100:	e1b1      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x5b6>
 8004102:	bf00      	nop
 8004104:	08008118 	.word	0x08008118
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800
 8004110:	40000c00 	.word	0x40000c00
 8004114:	40001000 	.word	0x40001000
 8004118:	40001400 	.word	0x40001400
 800411c:	40010800 	.word	0x40010800
 8004120:	40010c00 	.word	0x40010c00
 8004124:	40011000 	.word	0x40011000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004130:	d022      	beq.n	8004178 <HAL_TIM_ConfigClockSource+0x2c8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a88      	ldr	r2, [pc, #544]	; (8004358 <HAL_TIM_ConfigClockSource+0x4a8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d01d      	beq.n	8004178 <HAL_TIM_ConfigClockSource+0x2c8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a86      	ldr	r2, [pc, #536]	; (800435c <HAL_TIM_ConfigClockSource+0x4ac>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d018      	beq.n	8004178 <HAL_TIM_ConfigClockSource+0x2c8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a85      	ldr	r2, [pc, #532]	; (8004360 <HAL_TIM_ConfigClockSource+0x4b0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <HAL_TIM_ConfigClockSource+0x2c8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a83      	ldr	r2, [pc, #524]	; (8004364 <HAL_TIM_ConfigClockSource+0x4b4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_TIM_ConfigClockSource+0x2c8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a82      	ldr	r2, [pc, #520]	; (8004368 <HAL_TIM_ConfigClockSource+0x4b8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_TIM_ConfigClockSource+0x2c8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a80      	ldr	r2, [pc, #512]	; (800436c <HAL_TIM_ConfigClockSource+0x4bc>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_TIM_ConfigClockSource+0x2c8>
 800416e:	f241 01fb 	movw	r1, #4347	; 0x10fb
 8004172:	487f      	ldr	r0, [pc, #508]	; (8004370 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004174:	f7fc fc74 	bl	8000a60 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d013      	beq.n	80041a8 <HAL_TIM_ConfigClockSource+0x2f8>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004188:	d00e      	beq.n	80041a8 <HAL_TIM_ConfigClockSource+0x2f8>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004192:	d009      	beq.n	80041a8 <HAL_TIM_ConfigClockSource+0x2f8>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800419c:	d004      	beq.n	80041a8 <HAL_TIM_ConfigClockSource+0x2f8>
 800419e:	f241 01fe 	movw	r1, #4350	; 0x10fe
 80041a2:	4873      	ldr	r0, [pc, #460]	; (8004370 <HAL_TIM_ConfigClockSource+0x4c0>)
 80041a4:	f7fc fc5c 	bl	8000a60 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b0:	d014      	beq.n	80041dc <HAL_TIM_ConfigClockSource+0x32c>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d010      	beq.n	80041dc <HAL_TIM_ConfigClockSource+0x32c>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00c      	beq.n	80041dc <HAL_TIM_ConfigClockSource+0x32c>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d008      	beq.n	80041dc <HAL_TIM_ConfigClockSource+0x32c>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b0a      	cmp	r3, #10
 80041d0:	d004      	beq.n	80041dc <HAL_TIM_ConfigClockSource+0x32c>
 80041d2:	f241 01ff 	movw	r1, #4351	; 0x10ff
 80041d6:	4866      	ldr	r0, [pc, #408]	; (8004370 <HAL_TIM_ConfigClockSource+0x4c0>)
 80041d8:	f7fc fc42 	bl	8000a60 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b0f      	cmp	r3, #15
 80041e2:	d904      	bls.n	80041ee <HAL_TIM_ConfigClockSource+0x33e>
 80041e4:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 80041e8:	4861      	ldr	r0, [pc, #388]	; (8004370 <HAL_TIM_ConfigClockSource+0x4c0>)
 80041ea:	f7fc fc39 	bl	8000a60 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	6899      	ldr	r1, [r3, #8]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f000 fb49 	bl	8004894 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004210:	609a      	str	r2, [r3, #8]
      break;
 8004212:	e128      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421c:	d018      	beq.n	8004250 <HAL_TIM_ConfigClockSource+0x3a0>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a4d      	ldr	r2, [pc, #308]	; (8004358 <HAL_TIM_ConfigClockSource+0x4a8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d013      	beq.n	8004250 <HAL_TIM_ConfigClockSource+0x3a0>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a4b      	ldr	r2, [pc, #300]	; (800435c <HAL_TIM_ConfigClockSource+0x4ac>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00e      	beq.n	8004250 <HAL_TIM_ConfigClockSource+0x3a0>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a4a      	ldr	r2, [pc, #296]	; (8004360 <HAL_TIM_ConfigClockSource+0x4b0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d009      	beq.n	8004250 <HAL_TIM_ConfigClockSource+0x3a0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a48      	ldr	r2, [pc, #288]	; (8004364 <HAL_TIM_ConfigClockSource+0x4b4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d004      	beq.n	8004250 <HAL_TIM_ConfigClockSource+0x3a0>
 8004246:	f241 110f 	movw	r1, #4367	; 0x110f
 800424a:	4849      	ldr	r0, [pc, #292]	; (8004370 <HAL_TIM_ConfigClockSource+0x4c0>)
 800424c:	f7fc fc08 	bl	8000a60 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004258:	d014      	beq.n	8004284 <HAL_TIM_ConfigClockSource+0x3d4>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d010      	beq.n	8004284 <HAL_TIM_ConfigClockSource+0x3d4>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00c      	beq.n	8004284 <HAL_TIM_ConfigClockSource+0x3d4>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d008      	beq.n	8004284 <HAL_TIM_ConfigClockSource+0x3d4>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b0a      	cmp	r3, #10
 8004278:	d004      	beq.n	8004284 <HAL_TIM_ConfigClockSource+0x3d4>
 800427a:	f241 1112 	movw	r1, #4370	; 0x1112
 800427e:	483c      	ldr	r0, [pc, #240]	; (8004370 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004280:	f7fc fbee 	bl	8000a60 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b0f      	cmp	r3, #15
 800428a:	d904      	bls.n	8004296 <HAL_TIM_ConfigClockSource+0x3e6>
 800428c:	f241 1113 	movw	r1, #4371	; 0x1113
 8004290:	4837      	ldr	r0, [pc, #220]	; (8004370 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004292:	f7fc fbe5 	bl	8000a60 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6859      	ldr	r1, [r3, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	461a      	mov	r2, r3
 80042a4:	f000 fa7f 	bl	80047a6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2150      	movs	r1, #80	; 0x50
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fad6 	bl	8004860 <TIM_ITRx_SetConfig>
      break;
 80042b4:	e0d7      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042be:	d018      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x442>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a24      	ldr	r2, [pc, #144]	; (8004358 <HAL_TIM_ConfigClockSource+0x4a8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x442>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a23      	ldr	r2, [pc, #140]	; (800435c <HAL_TIM_ConfigClockSource+0x4ac>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x442>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a21      	ldr	r2, [pc, #132]	; (8004360 <HAL_TIM_ConfigClockSource+0x4b0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x442>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a20      	ldr	r2, [pc, #128]	; (8004364 <HAL_TIM_ConfigClockSource+0x4b4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x442>
 80042e8:	f241 111f 	movw	r1, #4383	; 0x111f
 80042ec:	4820      	ldr	r0, [pc, #128]	; (8004370 <HAL_TIM_ConfigClockSource+0x4c0>)
 80042ee:	f7fc fbb7 	bl	8000a60 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fa:	d014      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x476>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d010      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x476>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00c      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x476>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d008      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x476>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b0a      	cmp	r3, #10
 800431a:	d004      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x476>
 800431c:	f241 1122 	movw	r1, #4386	; 0x1122
 8004320:	4813      	ldr	r0, [pc, #76]	; (8004370 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004322:	f7fc fb9d 	bl	8000a60 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	2b0f      	cmp	r3, #15
 800432c:	d904      	bls.n	8004338 <HAL_TIM_ConfigClockSource+0x488>
 800432e:	f241 1123 	movw	r1, #4387	; 0x1123
 8004332:	480f      	ldr	r0, [pc, #60]	; (8004370 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004334:	f7fc fb94 	bl	8000a60 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	461a      	mov	r2, r3
 8004346:	f000 fa5c 	bl	8004802 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2160      	movs	r1, #96	; 0x60
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fa85 	bl	8004860 <TIM_ITRx_SetConfig>
      break;
 8004356:	e086      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x5b6>
 8004358:	40000400 	.word	0x40000400
 800435c:	40000800 	.word	0x40000800
 8004360:	40000c00 	.word	0x40000c00
 8004364:	40010800 	.word	0x40010800
 8004368:	40010c00 	.word	0x40010c00
 800436c:	40011000 	.word	0x40011000
 8004370:	08008118 	.word	0x08008118
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437c:	d018      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x500>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a3f      	ldr	r2, [pc, #252]	; (8004480 <HAL_TIM_ConfigClockSource+0x5d0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d013      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x500>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a3d      	ldr	r2, [pc, #244]	; (8004484 <HAL_TIM_ConfigClockSource+0x5d4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x500>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a3c      	ldr	r2, [pc, #240]	; (8004488 <HAL_TIM_ConfigClockSource+0x5d8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x500>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a3a      	ldr	r2, [pc, #232]	; (800448c <HAL_TIM_ConfigClockSource+0x5dc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x500>
 80043a6:	f241 112f 	movw	r1, #4399	; 0x112f
 80043aa:	4839      	ldr	r0, [pc, #228]	; (8004490 <HAL_TIM_ConfigClockSource+0x5e0>)
 80043ac:	f7fc fb58 	bl	8000a60 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b8:	d014      	beq.n	80043e4 <HAL_TIM_ConfigClockSource+0x534>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d010      	beq.n	80043e4 <HAL_TIM_ConfigClockSource+0x534>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00c      	beq.n	80043e4 <HAL_TIM_ConfigClockSource+0x534>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d008      	beq.n	80043e4 <HAL_TIM_ConfigClockSource+0x534>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b0a      	cmp	r3, #10
 80043d8:	d004      	beq.n	80043e4 <HAL_TIM_ConfigClockSource+0x534>
 80043da:	f241 1132 	movw	r1, #4402	; 0x1132
 80043de:	482c      	ldr	r0, [pc, #176]	; (8004490 <HAL_TIM_ConfigClockSource+0x5e0>)
 80043e0:	f7fc fb3e 	bl	8000a60 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2b0f      	cmp	r3, #15
 80043ea:	d904      	bls.n	80043f6 <HAL_TIM_ConfigClockSource+0x546>
 80043ec:	f241 1133 	movw	r1, #4403	; 0x1133
 80043f0:	4827      	ldr	r0, [pc, #156]	; (8004490 <HAL_TIM_ConfigClockSource+0x5e0>)
 80043f2:	f7fc fb35 	bl	8000a60 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6859      	ldr	r1, [r3, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	461a      	mov	r2, r3
 8004404:	f000 f9cf 	bl	80047a6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2140      	movs	r1, #64	; 0x40
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fa26 	bl	8004860 <TIM_ITRx_SetConfig>
      break;
 8004414:	e027      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441e:	d018      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x5a2>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a16      	ldr	r2, [pc, #88]	; (8004480 <HAL_TIM_ConfigClockSource+0x5d0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x5a2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a15      	ldr	r2, [pc, #84]	; (8004484 <HAL_TIM_ConfigClockSource+0x5d4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00e      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x5a2>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a13      	ldr	r2, [pc, #76]	; (8004488 <HAL_TIM_ConfigClockSource+0x5d8>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d009      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x5a2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a12      	ldr	r2, [pc, #72]	; (800448c <HAL_TIM_ConfigClockSource+0x5dc>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d004      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x5a2>
 8004448:	f241 1142 	movw	r1, #4418	; 0x1142
 800444c:	4810      	ldr	r0, [pc, #64]	; (8004490 <HAL_TIM_ConfigClockSource+0x5e0>)
 800444e:	f7fc fb07 	bl	8000a60 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4619      	mov	r1, r3
 800445c:	4610      	mov	r0, r2
 800445e:	f000 f9ff 	bl	8004860 <TIM_ITRx_SetConfig>
      break;
 8004462:	e000      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x5b6>
      break;
 8004464:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40000400 	.word	0x40000400
 8004484:	40000800 	.word	0x40000800
 8004488:	40000c00 	.word	0x40000c00
 800448c:	40010800 	.word	0x40010800
 8004490:	08008118 	.word	0x08008118

08004494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr

080044a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr

080044ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f2:	d00f      	beq.n	8004514 <TIM_Base_SetConfig+0x38>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a2b      	ldr	r2, [pc, #172]	; (80045a4 <TIM_Base_SetConfig+0xc8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d00b      	beq.n	8004514 <TIM_Base_SetConfig+0x38>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a2a      	ldr	r2, [pc, #168]	; (80045a8 <TIM_Base_SetConfig+0xcc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d007      	beq.n	8004514 <TIM_Base_SetConfig+0x38>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a29      	ldr	r2, [pc, #164]	; (80045ac <TIM_Base_SetConfig+0xd0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d003      	beq.n	8004514 <TIM_Base_SetConfig+0x38>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a28      	ldr	r2, [pc, #160]	; (80045b0 <TIM_Base_SetConfig+0xd4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d108      	bne.n	8004526 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452c:	d017      	beq.n	800455e <TIM_Base_SetConfig+0x82>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a1c      	ldr	r2, [pc, #112]	; (80045a4 <TIM_Base_SetConfig+0xc8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <TIM_Base_SetConfig+0x82>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a1b      	ldr	r2, [pc, #108]	; (80045a8 <TIM_Base_SetConfig+0xcc>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00f      	beq.n	800455e <TIM_Base_SetConfig+0x82>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a1a      	ldr	r2, [pc, #104]	; (80045ac <TIM_Base_SetConfig+0xd0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00b      	beq.n	800455e <TIM_Base_SetConfig+0x82>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a19      	ldr	r2, [pc, #100]	; (80045b0 <TIM_Base_SetConfig+0xd4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <TIM_Base_SetConfig+0x82>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <TIM_Base_SetConfig+0xd8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_Base_SetConfig+0x82>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <TIM_Base_SetConfig+0xdc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d108      	bne.n	8004570 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	615a      	str	r2, [r3, #20]
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800
 80045ac:	40000c00 	.word	0x40000c00
 80045b0:	40010800 	.word	0x40010800
 80045b4:	40010c00 	.word	0x40010c00
 80045b8:	40011000 	.word	0x40011000

080045bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f023 0201 	bic.w	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f023 0302 	bic.w	r3, r3, #2
 8004604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f023 0210 	bic.w	r2, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 0320 	bic.w	r3, r3, #32
 800467e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr

080046b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	621a      	str	r2, [r3, #32]
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr

0800472a <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800472a:	b480      	push	{r7}
 800472c:	b087      	sub	sp, #28
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004758:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004760:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	031b      	lsls	r3, r3, #12
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	621a      	str	r2, [r3, #32]
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr

080047a6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b087      	sub	sp, #28
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f023 0201 	bic.w	r2, r3, #1
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f023 030a 	bic.w	r3, r3, #10
 80047e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	621a      	str	r2, [r3, #32]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr

08004802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004802:	b480      	push	{r7}
 8004804:	b087      	sub	sp, #28
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f023 0210 	bic.w	r2, r3, #16
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800482c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	031b      	lsls	r3, r3, #12
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800483e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	f043 0307 	orr.w	r3, r3, #7
 8004882:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	609a      	str	r2, [r3, #8]
}
 800488a:	bf00      	nop
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	021a      	lsls	r2, r3, #8
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	609a      	str	r2, [r3, #8]
}
 80048c8:	bf00      	nop
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr
	...

080048d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e6:	d017      	beq.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a41      	ldr	r2, [pc, #260]	; (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d012      	beq.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a40      	ldr	r2, [pc, #256]	; (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00d      	beq.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a3e      	ldr	r2, [pc, #248]	; (80049fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d008      	beq.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a3d      	ldr	r2, [pc, #244]	; (8004a00 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d003      	beq.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004910:	215a      	movs	r1, #90	; 0x5a
 8004912:	483c      	ldr	r0, [pc, #240]	; (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004914:	f7fc f8a4 	bl	8000a60 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01f      	beq.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b10      	cmp	r3, #16
 8004926:	d01b      	beq.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b20      	cmp	r3, #32
 800492e:	d017      	beq.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b30      	cmp	r3, #48	; 0x30
 8004936:	d013      	beq.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b40      	cmp	r3, #64	; 0x40
 800493e:	d00f      	beq.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b50      	cmp	r3, #80	; 0x50
 8004946:	d00b      	beq.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b60      	cmp	r3, #96	; 0x60
 800494e:	d007      	beq.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b70      	cmp	r3, #112	; 0x70
 8004956:	d003      	beq.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004958:	215b      	movs	r1, #91	; 0x5b
 800495a:	482a      	ldr	r0, [pc, #168]	; (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800495c:	f7fc f880 	bl	8000a60 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b80      	cmp	r3, #128	; 0x80
 8004966:	d007      	beq.n	8004978 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004970:	215c      	movs	r1, #92	; 0x5c
 8004972:	4824      	ldr	r0, [pc, #144]	; (8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004974:	f7fc f874 	bl	8000a60 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8004982:	2302      	movs	r3, #2
 8004984:	e032      	b.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x118>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2202      	movs	r2, #2
 8004992:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049be:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40010800 	.word	0x40010800
 8004a04:	08008150 	.word	0x08008150

08004a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e0aa      	b.n	8004b70 <HAL_UART_Init+0x168>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d02c      	beq.n	8004a7c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a54      	ldr	r2, [pc, #336]	; (8004b78 <HAL_UART_Init+0x170>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00e      	beq.n	8004a4a <HAL_UART_Init+0x42>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a52      	ldr	r2, [pc, #328]	; (8004b7c <HAL_UART_Init+0x174>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d009      	beq.n	8004a4a <HAL_UART_Init+0x42>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a51      	ldr	r2, [pc, #324]	; (8004b80 <HAL_UART_Init+0x178>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d004      	beq.n	8004a4a <HAL_UART_Init+0x42>
 8004a40:	f240 1145 	movw	r1, #325	; 0x145
 8004a44:	484f      	ldr	r0, [pc, #316]	; (8004b84 <HAL_UART_Init+0x17c>)
 8004a46:	f7fc f80b 	bl	8000a60 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d032      	beq.n	8004ab8 <HAL_UART_Init+0xb0>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a5a:	d02d      	beq.n	8004ab8 <HAL_UART_Init+0xb0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a64:	d028      	beq.n	8004ab8 <HAL_UART_Init+0xb0>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a6e:	d023      	beq.n	8004ab8 <HAL_UART_Init+0xb0>
 8004a70:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004a74:	4843      	ldr	r0, [pc, #268]	; (8004b84 <HAL_UART_Init+0x17c>)
 8004a76:	f7fb fff3 	bl	8000a60 <assert_failed>
 8004a7a:	e01d      	b.n	8004ab8 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a3d      	ldr	r2, [pc, #244]	; (8004b78 <HAL_UART_Init+0x170>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d018      	beq.n	8004ab8 <HAL_UART_Init+0xb0>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a3c      	ldr	r2, [pc, #240]	; (8004b7c <HAL_UART_Init+0x174>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d013      	beq.n	8004ab8 <HAL_UART_Init+0xb0>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a3a      	ldr	r2, [pc, #232]	; (8004b80 <HAL_UART_Init+0x178>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00e      	beq.n	8004ab8 <HAL_UART_Init+0xb0>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a3a      	ldr	r2, [pc, #232]	; (8004b88 <HAL_UART_Init+0x180>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d009      	beq.n	8004ab8 <HAL_UART_Init+0xb0>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a38      	ldr	r2, [pc, #224]	; (8004b8c <HAL_UART_Init+0x184>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <HAL_UART_Init+0xb0>
 8004aae:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004ab2:	4834      	ldr	r0, [pc, #208]	; (8004b84 <HAL_UART_Init+0x17c>)
 8004ab4:	f7fb ffd4 	bl	8000a60 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d009      	beq.n	8004ad4 <HAL_UART_Init+0xcc>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac8:	d004      	beq.n	8004ad4 <HAL_UART_Init+0xcc>
 8004aca:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004ace:	482d      	ldr	r0, [pc, #180]	; (8004b84 <HAL_UART_Init+0x17c>)
 8004ad0:	f7fb ffc6 	bl	8000a60 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d009      	beq.n	8004af0 <HAL_UART_Init+0xe8>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae4:	d004      	beq.n	8004af0 <HAL_UART_Init+0xe8>
 8004ae6:	f240 114d 	movw	r1, #333	; 0x14d
 8004aea:	4826      	ldr	r0, [pc, #152]	; (8004b84 <HAL_UART_Init+0x17c>)
 8004aec:	f7fb ffb8 	bl	8000a60 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d106      	bne.n	8004b0a <HAL_UART_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7fc faef 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2224      	movs	r2, #36	; 0x24
 8004b0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f834 	bl	8004b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695a      	ldr	r2, [r3, #20]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40013800 	.word	0x40013800
 8004b7c:	40004400 	.word	0x40004400
 8004b80:	40004800 	.word	0x40004800
 8004b84:	0800818c 	.word	0x0800818c
 8004b88:	40004c00 	.word	0x40004c00
 8004b8c:	40005000 	.word	0x40005000

08004b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4ab2      	ldr	r2, [pc, #712]	; (8004e68 <UART_SetConfig+0x2d8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d904      	bls.n	8004bac <UART_SetConfig+0x1c>
 8004ba2:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8004ba6:	48b1      	ldr	r0, [pc, #708]	; (8004e6c <UART_SetConfig+0x2dc>)
 8004ba8:	f7fb ff5a 	bl	8000a60 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d009      	beq.n	8004bc8 <UART_SetConfig+0x38>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbc:	d004      	beq.n	8004bc8 <UART_SetConfig+0x38>
 8004bbe:	f640 31e3 	movw	r1, #3043	; 0xbe3
 8004bc2:	48aa      	ldr	r0, [pc, #680]	; (8004e6c <UART_SetConfig+0x2dc>)
 8004bc4:	f7fb ff4c 	bl	8000a60 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00e      	beq.n	8004bee <UART_SetConfig+0x5e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd8:	d009      	beq.n	8004bee <UART_SetConfig+0x5e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004be2:	d004      	beq.n	8004bee <UART_SetConfig+0x5e>
 8004be4:	f640 31e4 	movw	r1, #3044	; 0xbe4
 8004be8:	48a0      	ldr	r0, [pc, #640]	; (8004e6c <UART_SetConfig+0x2dc>)
 8004bea:	f7fb ff39 	bl	8000a60 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d103      	bne.n	8004c04 <UART_SetConfig+0x74>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d104      	bne.n	8004c0e <UART_SetConfig+0x7e>
 8004c04:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8004c08:	4898      	ldr	r0, [pc, #608]	; (8004e6c <UART_SetConfig+0x2dc>)
 8004c0a:	f7fb ff29 	bl	8000a60 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004c46:	f023 030c 	bic.w	r3, r3, #12
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	68f9      	ldr	r1, [r7, #12]
 8004c50:	430b      	orrs	r3, r1
 8004c52:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c72:	f040 80a5 	bne.w	8004dc0 <UART_SetConfig+0x230>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a7d      	ldr	r2, [pc, #500]	; (8004e70 <UART_SetConfig+0x2e0>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d14f      	bne.n	8004d20 <UART_SetConfig+0x190>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c80:	f7fe fc34 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 8004c84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009a      	lsls	r2, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	4a75      	ldr	r2, [pc, #468]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	0119      	lsls	r1, r3, #4
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	009a      	lsls	r2, r3, #2
 8004cb0:	441a      	add	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cbc:	4b6d      	ldr	r3, [pc, #436]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004cbe:	fba3 0302 	umull	r0, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2064      	movs	r0, #100	; 0x64
 8004cc6:	fb00 f303 	mul.w	r3, r0, r3
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	3332      	adds	r3, #50	; 0x32
 8004cd0:	4a68      	ldr	r2, [pc, #416]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cde:	4419      	add	r1, r3
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009a      	lsls	r2, r3, #2
 8004cea:	441a      	add	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cf6:	4b5f      	ldr	r3, [pc, #380]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004cf8:	fba3 0302 	umull	r0, r3, r3, r2
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	2064      	movs	r0, #100	; 0x64
 8004d00:	fb00 f303 	mul.w	r3, r0, r3
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	3332      	adds	r3, #50	; 0x32
 8004d0a:	4a5a      	ldr	r2, [pc, #360]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	f003 0207 	and.w	r2, r3, #7
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	440a      	add	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004d1e:	e0f9      	b.n	8004f14 <UART_SetConfig+0x384>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d20:	f7fe fbd0 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 8004d24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009a      	lsls	r2, r3, #2
 8004d30:	441a      	add	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3c:	4a4d      	ldr	r2, [pc, #308]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	0119      	lsls	r1, r3, #4
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009a      	lsls	r2, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d5c:	4b45      	ldr	r3, [pc, #276]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004d5e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	2064      	movs	r0, #100	; 0x64
 8004d66:	fb00 f303 	mul.w	r3, r0, r3
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	3332      	adds	r3, #50	; 0x32
 8004d70:	4a40      	ldr	r2, [pc, #256]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d7e:	4419      	add	r1, r3
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009a      	lsls	r2, r3, #2
 8004d8a:	441a      	add	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d96:	4b37      	ldr	r3, [pc, #220]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004d98:	fba3 0302 	umull	r0, r3, r3, r2
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	2064      	movs	r0, #100	; 0x64
 8004da0:	fb00 f303 	mul.w	r3, r0, r3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	3332      	adds	r3, #50	; 0x32
 8004daa:	4a32      	ldr	r2, [pc, #200]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004dac:	fba2 2303 	umull	r2, r3, r2, r3
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	f003 0207 	and.w	r2, r3, #7
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	440a      	add	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]
}
 8004dbe:	e0a9      	b.n	8004f14 <UART_SetConfig+0x384>
    if((huart->Instance == USART1))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a2a      	ldr	r2, [pc, #168]	; (8004e70 <UART_SetConfig+0x2e0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d156      	bne.n	8004e78 <UART_SetConfig+0x2e8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dca:	f7fe fb8f 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 8004dce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009a      	lsls	r2, r3, #2
 8004dda:	441a      	add	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de6:	4a23      	ldr	r2, [pc, #140]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004de8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	0119      	lsls	r1, r3, #4
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	009a      	lsls	r2, r3, #2
 8004dfa:	441a      	add	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e06:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004e08:	fba3 0302 	umull	r0, r3, r3, r2
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	2064      	movs	r0, #100	; 0x64
 8004e10:	fb00 f303 	mul.w	r3, r0, r3
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	3332      	adds	r3, #50	; 0x32
 8004e1a:	4a16      	ldr	r2, [pc, #88]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e26:	4419      	add	r1, r3
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	009a      	lsls	r2, r3, #2
 8004e32:	441a      	add	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004e40:	fba3 0302 	umull	r0, r3, r3, r2
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	2064      	movs	r0, #100	; 0x64
 8004e48:	fb00 f303 	mul.w	r3, r0, r3
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	3332      	adds	r3, #50	; 0x32
 8004e52:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <UART_SetConfig+0x2e4>)
 8004e54:	fba2 2303 	umull	r2, r3, r2, r3
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	f003 020f 	and.w	r2, r3, #15
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	440a      	add	r2, r1
 8004e64:	609a      	str	r2, [r3, #8]
}
 8004e66:	e055      	b.n	8004f14 <UART_SetConfig+0x384>
 8004e68:	003d0900 	.word	0x003d0900
 8004e6c:	0800818c 	.word	0x0800818c
 8004e70:	40013800 	.word	0x40013800
 8004e74:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e78:	f7fe fb24 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 8004e7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	009a      	lsls	r2, r3, #2
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	4a21      	ldr	r2, [pc, #132]	; (8004f1c <UART_SetConfig+0x38c>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	0119      	lsls	r1, r3, #4
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009a      	lsls	r2, r3, #2
 8004ea8:	441a      	add	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eb4:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <UART_SetConfig+0x38c>)
 8004eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	2064      	movs	r0, #100	; 0x64
 8004ebe:	fb00 f303 	mul.w	r3, r0, r3
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	3332      	adds	r3, #50	; 0x32
 8004ec8:	4a14      	ldr	r2, [pc, #80]	; (8004f1c <UART_SetConfig+0x38c>)
 8004eca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ed4:	4419      	add	r1, r3
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009a      	lsls	r2, r3, #2
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <UART_SetConfig+0x38c>)
 8004eee:	fba3 0302 	umull	r0, r3, r3, r2
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	2064      	movs	r0, #100	; 0x64
 8004ef6:	fb00 f303 	mul.w	r3, r0, r3
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	3332      	adds	r3, #50	; 0x32
 8004f00:	4a06      	ldr	r2, [pc, #24]	; (8004f1c <UART_SetConfig+0x38c>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	f003 020f 	and.w	r2, r3, #15
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	440a      	add	r2, r1
 8004f12:	609a      	str	r2, [r3, #8]
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	51eb851f 	.word	0x51eb851f

08004f20 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f26:	f3ef 8305 	mrs	r3, IPSR
 8004f2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10f      	bne.n	8004f52 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f32:	f3ef 8310 	mrs	r3, PRIMASK
 8004f36:	607b      	str	r3, [r7, #4]
  return(result);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <osKernelInitialize+0x32>
 8004f3e:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <osKernelInitialize+0x60>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d109      	bne.n	8004f5a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f46:	f3ef 8311 	mrs	r3, BASEPRI
 8004f4a:	603b      	str	r3, [r7, #0]
  return(result);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004f52:	f06f 0305 	mvn.w	r3, #5
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e00c      	b.n	8004f74 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f5a:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <osKernelInitialize+0x60>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d105      	bne.n	8004f6e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004f62:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <osKernelInitialize+0x60>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e002      	b.n	8004f74 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f72:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004f74:	68fb      	ldr	r3, [r7, #12]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr
 8004f80:	20000034 	.word	0x20000034

08004f84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f8a:	f3ef 8305 	mrs	r3, IPSR
 8004f8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10f      	bne.n	8004fb6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f96:	f3ef 8310 	mrs	r3, PRIMASK
 8004f9a:	607b      	str	r3, [r7, #4]
  return(result);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <osKernelStart+0x32>
 8004fa2:	4b11      	ldr	r3, [pc, #68]	; (8004fe8 <osKernelStart+0x64>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d109      	bne.n	8004fbe <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004faa:	f3ef 8311 	mrs	r3, BASEPRI
 8004fae:	603b      	str	r3, [r7, #0]
  return(result);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <osKernelStart+0x3a>
    stat = osErrorISR;
 8004fb6:	f06f 0305 	mvn.w	r3, #5
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	e00e      	b.n	8004fdc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <osKernelStart+0x64>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d107      	bne.n	8004fd6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004fc6:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <osKernelStart+0x64>)
 8004fc8:	2202      	movs	r2, #2
 8004fca:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004fcc:	f001 fa50 	bl	8006470 <vTaskStartScheduler>
      stat = osOK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e002      	b.n	8004fdc <osKernelStart+0x58>
    } else {
      stat = osError;
 8004fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000034 	.word	0x20000034

08004fec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b092      	sub	sp, #72	; 0x48
 8004ff0:	af04      	add	r7, sp, #16
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ffc:	f3ef 8305 	mrs	r3, IPSR
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005004:	2b00      	cmp	r3, #0
 8005006:	f040 8094 	bne.w	8005132 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500a:	f3ef 8310 	mrs	r3, PRIMASK
 800500e:	623b      	str	r3, [r7, #32]
  return(result);
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f040 808d 	bne.w	8005132 <osThreadNew+0x146>
 8005018:	4b48      	ldr	r3, [pc, #288]	; (800513c <osThreadNew+0x150>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d106      	bne.n	800502e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005020:	f3ef 8311 	mrs	r3, BASEPRI
 8005024:	61fb      	str	r3, [r7, #28]
  return(result);
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f040 8082 	bne.w	8005132 <osThreadNew+0x146>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d07e      	beq.n	8005132 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005038:	2318      	movs	r3, #24
 800503a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800503c:	2300      	movs	r3, #0
 800503e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005040:	f107 031b 	add.w	r3, r7, #27
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d045      	beq.n	80050de <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <osThreadNew+0x74>
        name = attr->name;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800506e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <osThreadNew+0x9a>
 8005074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005076:	2b38      	cmp	r3, #56	; 0x38
 8005078:	d805      	bhi.n	8005086 <osThreadNew+0x9a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <osThreadNew+0x9e>
        return (NULL);
 8005086:	2300      	movs	r3, #0
 8005088:	e054      	b.n	8005134 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	089b      	lsrs	r3, r3, #2
 8005098:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00e      	beq.n	80050c0 <osThreadNew+0xd4>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	2b5b      	cmp	r3, #91	; 0x5b
 80050a8:	d90a      	bls.n	80050c0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d006      	beq.n	80050c0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <osThreadNew+0xd4>
        mem = 1;
 80050ba:	2301      	movs	r3, #1
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050be:	e010      	b.n	80050e2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10c      	bne.n	80050e2 <osThreadNew+0xf6>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d108      	bne.n	80050e2 <osThreadNew+0xf6>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d104      	bne.n	80050e2 <osThreadNew+0xf6>
          mem = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
 80050dc:	e001      	b.n	80050e2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d110      	bne.n	800510a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050f0:	9202      	str	r2, [sp, #8]
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 ffee 	bl	80060e0 <xTaskCreateStatic>
 8005104:	4603      	mov	r3, r0
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e013      	b.n	8005132 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800510a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510c:	2b00      	cmp	r3, #0
 800510e:	d110      	bne.n	8005132 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	b29a      	uxth	r2, r3
 8005114:	f107 0314 	add.w	r3, r7, #20
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f001 f835 	bl	8006192 <xTaskCreate>
 8005128:	4603      	mov	r3, r0
 800512a:	2b01      	cmp	r3, #1
 800512c:	d001      	beq.n	8005132 <osThreadNew+0x146>
          hTask = NULL;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005132:	697b      	ldr	r3, [r7, #20]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3738      	adds	r7, #56	; 0x38
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000034 	.word	0x20000034

08005140 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005148:	f3ef 8305 	mrs	r3, IPSR
 800514c:	613b      	str	r3, [r7, #16]
  return(result);
 800514e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10f      	bne.n	8005174 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005154:	f3ef 8310 	mrs	r3, PRIMASK
 8005158:	60fb      	str	r3, [r7, #12]
  return(result);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d109      	bne.n	8005174 <osDelay+0x34>
 8005160:	4b0d      	ldr	r3, [pc, #52]	; (8005198 <osDelay+0x58>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d109      	bne.n	800517c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005168:	f3ef 8311 	mrs	r3, BASEPRI
 800516c:	60bb      	str	r3, [r7, #8]
  return(result);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <osDelay+0x3c>
    stat = osErrorISR;
 8005174:	f06f 0305 	mvn.w	r3, #5
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	e007      	b.n	800518c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 f93e 	bl	8006408 <vTaskDelay>
    }
  }

  return (stat);
 800518c:	697b      	ldr	r3, [r7, #20]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20000034 	.word	0x20000034

0800519c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4a06      	ldr	r2, [pc, #24]	; (80051c4 <vApplicationGetIdleTaskMemory+0x28>)
 80051ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4a05      	ldr	r2, [pc, #20]	; (80051c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80051b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2280      	movs	r2, #128	; 0x80
 80051b8:	601a      	str	r2, [r3, #0]
}
 80051ba:	bf00      	nop
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr
 80051c4:	20000038 	.word	0x20000038
 80051c8:	20000094 	.word	0x20000094

080051cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a07      	ldr	r2, [pc, #28]	; (80051f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80051dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4a06      	ldr	r2, [pc, #24]	; (80051fc <vApplicationGetTimerTaskMemory+0x30>)
 80051e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051ea:	601a      	str	r2, [r3, #0]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000294 	.word	0x20000294
 80051fc:	200002f0 	.word	0x200002f0

08005200 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005206:	2020      	movs	r0, #32
 8005208:	f002 fc7c 	bl	8007b04 <pvPortMalloc>
 800520c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3304      	adds	r3, #4
 800521e:	4618      	mov	r0, r3
 8005220:	f000 f99e 	bl	8005560 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800522a:	687b      	ldr	r3, [r7, #4]
	}
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b090      	sub	sp, #64	; 0x40
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800524a:	2300      	movs	r3, #0
 800524c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d109      	bne.n	8005268 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	623b      	str	r3, [r7, #32]
 8005266:	e7fe      	b.n	8005266 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <xEventGroupWaitBits+0x52>
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	61fb      	str	r3, [r7, #28]
 8005284:	e7fe      	b.n	8005284 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d109      	bne.n	80052a0 <xEventGroupWaitBits+0x6c>
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	e7fe      	b.n	800529e <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052a0:	f001 fdd8 	bl	8006e54 <xTaskGetSchedulerState>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d102      	bne.n	80052b0 <xEventGroupWaitBits+0x7c>
 80052aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <xEventGroupWaitBits+0x80>
 80052b0:	2301      	movs	r3, #1
 80052b2:	e000      	b.n	80052b6 <xEventGroupWaitBits+0x82>
 80052b4:	2300      	movs	r3, #0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <xEventGroupWaitBits+0x9a>
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	e7fe      	b.n	80052cc <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 80052ce:	f001 f933 	bl	8006538 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80052d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052de:	f000 f909 	bl	80054f4 <prvTestWaitCondition>
 80052e2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00e      	beq.n	8005308 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d028      	beq.n	800534a <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80052f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	43db      	mvns	r3, r3
 8005300:	401a      	ands	r2, r3
 8005302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e020      	b.n	800534a <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800530a:	2b00      	cmp	r3, #0
 800530c:	d104      	bne.n	8005318 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005312:	2301      	movs	r3, #1
 8005314:	633b      	str	r3, [r7, #48]	; 0x30
 8005316:	e018      	b.n	800534a <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005324:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005332:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005336:	1d18      	adds	r0, r3, #4
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	4313      	orrs	r3, r2
 800533e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005340:	4619      	mov	r1, r3
 8005342:	f001 fb07 	bl	8006954 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800534a:	f001 f903 	bl	8006554 <xTaskResumeAll>
 800534e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005352:	2b00      	cmp	r3, #0
 8005354:	d031      	beq.n	80053ba <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	2b00      	cmp	r3, #0
 800535a:	d107      	bne.n	800536c <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 800535c:	4b19      	ldr	r3, [pc, #100]	; (80053c4 <xEventGroupWaitBits+0x190>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800536c:	f001 fdfc 	bl	8006f68 <uxTaskResetEventItemValue>
 8005370:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d11a      	bne.n	80053b2 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 800537c:	f002 facc 	bl	8007918 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800538c:	f000 f8b2 	bl	80054f4 <prvTestWaitCondition>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d009      	beq.n	80053aa <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d006      	beq.n	80053aa <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800539c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	43db      	mvns	r3, r3
 80053a4:	401a      	ands	r2, r3
 80053a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80053aa:	2301      	movs	r3, #1
 80053ac:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80053ae:	f002 fae1 	bl	8007974 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80053b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80053ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3740      	adds	r7, #64	; 0x40
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	e000ed04 	.word	0xe000ed04

080053c8 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08e      	sub	sp, #56	; 0x38
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80053d2:	2300      	movs	r3, #0
 80053d4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80053da:	2300      	movs	r3, #0
 80053dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <xEventGroupSetBits+0x30>
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	613b      	str	r3, [r7, #16]
 80053f6:	e7fe      	b.n	80053f6 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <xEventGroupSetBits+0x4e>
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e7fe      	b.n	8005414 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	3304      	adds	r3, #4
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	3308      	adds	r3, #8
 8005420:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005422:	f001 f889 	bl	8006538 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	431a      	orrs	r2, r3
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005438:	e03c      	b.n	80054b4 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800543a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005446:	2300      	movs	r3, #0
 8005448:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005450:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005458:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d108      	bne.n	8005476 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00b      	beq.n	8005488 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8005470:	2301      	movs	r3, #1
 8005472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005474:	e008      	b.n	8005488 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	4013      	ands	r3, r2
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	429a      	cmp	r2, r3
 8005482:	d101      	bne.n	8005488 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005484:	2301      	movs	r3, #1
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d010      	beq.n	80054b0 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	4313      	orrs	r3, r2
 800549e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054a8:	4619      	mov	r1, r3
 80054aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80054ac:	f001 fb18 	bl	8006ae0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80054b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d1be      	bne.n	800543a <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	43db      	mvns	r3, r3
 80054c4:	401a      	ands	r2, r3
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80054ca:	f001 f843 	bl	8006554 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	681b      	ldr	r3, [r3, #0]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3738      	adds	r7, #56	; 0x38
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff ff6e 	bl	80053c8 <xEventGroupSetBits>
}
 80054ec:	bf00      	nop
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d107      	bne.n	800551a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4013      	ands	r3, r2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e007      	b.n	800552a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4013      	ands	r3, r2
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	429a      	cmp	r2, r3
 8005524:	d101      	bne.n	800552a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005526:	2301      	movs	r3, #1
 8005528:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800552a:	697b      	ldr	r3, [r7, #20]
}
 800552c:	4618      	mov	r0, r3
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr
	...

08005538 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	68f9      	ldr	r1, [r7, #12]
 800554a:	4804      	ldr	r0, [pc, #16]	; (800555c <xEventGroupSetBitsFromISR+0x24>)
 800554c:	f002 f8d6 	bl	80076fc <xTimerPendFunctionCallFromISR>
 8005550:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005552:	697b      	ldr	r3, [r7, #20]
	}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	080054db 	.word	0x080054db

08005560 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f103 0208 	add.w	r2, r3, #8
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f04f 32ff 	mov.w	r2, #4294967295
 8005578:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f103 0208 	add.w	r2, r3, #8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f103 0208 	add.w	r2, r3, #8
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr

0800559e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055b6:	b480      	push	{r7}
 80055b8:	b085      	sub	sp, #20
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	601a      	str	r2, [r3, #0]
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr

080055fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d103      	bne.n	800561c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	e00c      	b.n	8005636 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3308      	adds	r3, #8
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e002      	b.n	800562a <vListInsert+0x2e>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	429a      	cmp	r2, r3
 8005634:	d2f6      	bcs.n	8005624 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	601a      	str	r2, [r3, #0]
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr

0800566c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6892      	ldr	r2, [r2, #8]
 8005682:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6852      	ldr	r2, [r2, #4]
 800568c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	429a      	cmp	r2, r3
 8005696:	d103      	bne.n	80056a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	1e5a      	subs	r2, r3, #1
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr
	...

080056c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <xQueueGenericReset+0x28>
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	60bb      	str	r3, [r7, #8]
 80056e6:	e7fe      	b.n	80056e6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80056e8:	f002 f916 	bl	8007918 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f4:	68f9      	ldr	r1, [r7, #12]
 80056f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	441a      	add	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	3b01      	subs	r3, #1
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800571e:	fb01 f303 	mul.w	r3, r1, r3
 8005722:	441a      	add	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	22ff      	movs	r2, #255	; 0xff
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	22ff      	movs	r2, #255	; 0xff
 8005734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d114      	bne.n	8005768 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d01a      	beq.n	800577c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3310      	adds	r3, #16
 800574a:	4618      	mov	r0, r3
 800574c:	f001 f966 	bl	8006a1c <xTaskRemoveFromEventList>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d012      	beq.n	800577c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005756:	4b0d      	ldr	r3, [pc, #52]	; (800578c <xQueueGenericReset+0xcc>)
 8005758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	e009      	b.n	800577c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3310      	adds	r3, #16
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff fef7 	bl	8005560 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3324      	adds	r3, #36	; 0x24
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff fef2 	bl	8005560 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800577c:	f002 f8fa 	bl	8007974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005780:	2301      	movs	r3, #1
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	e000ed04 	.word	0xe000ed04

08005790 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08e      	sub	sp, #56	; 0x38
 8005794:	af02      	add	r7, sp, #8
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <xQueueGenericCreateStatic+0x28>
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057b6:	e7fe      	b.n	80057b6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <xQueueGenericCreateStatic+0x42>
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
 80057d0:	e7fe      	b.n	80057d0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <xQueueGenericCreateStatic+0x4e>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <xQueueGenericCreateStatic+0x52>
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <xQueueGenericCreateStatic+0x54>
 80057e2:	2300      	movs	r3, #0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d109      	bne.n	80057fc <xQueueGenericCreateStatic+0x6c>
 80057e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	623b      	str	r3, [r7, #32]
 80057fa:	e7fe      	b.n	80057fa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d102      	bne.n	8005808 <xQueueGenericCreateStatic+0x78>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <xQueueGenericCreateStatic+0x7c>
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <xQueueGenericCreateStatic+0x7e>
 800580c:	2300      	movs	r3, #0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d109      	bne.n	8005826 <xQueueGenericCreateStatic+0x96>
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	61fb      	str	r3, [r7, #28]
 8005824:	e7fe      	b.n	8005824 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005826:	2350      	movs	r3, #80	; 0x50
 8005828:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b50      	cmp	r3, #80	; 0x50
 800582e:	d009      	beq.n	8005844 <xQueueGenericCreateStatic+0xb4>
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	e7fe      	b.n	8005842 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00d      	beq.n	800586a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800584e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005856:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	4613      	mov	r3, r2
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 f842 	bl	80058ee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800586c:	4618      	mov	r0, r3
 800586e:	3730      	adds	r7, #48	; 0x30
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	; 0x28
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	4613      	mov	r3, r2
 8005880:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <xQueueGenericCreate+0x28>
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	e7fe      	b.n	800589a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
 80058a6:	e004      	b.n	80058b2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	fb02 f303 	mul.w	r3, r2, r3
 80058b0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	3350      	adds	r3, #80	; 0x50
 80058b6:	4618      	mov	r0, r3
 80058b8:	f002 f924 	bl	8007b04 <pvPortMalloc>
 80058bc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00f      	beq.n	80058e4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	3350      	adds	r3, #80	; 0x50
 80058c8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058d2:	79fa      	ldrb	r2, [r7, #7]
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	4613      	mov	r3, r2
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f805 	bl	80058ee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80058e4:	69bb      	ldr	r3, [r7, #24]
	}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3720      	adds	r7, #32
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	607a      	str	r2, [r7, #4]
 80058fa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d103      	bne.n	800590a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	e002      	b.n	8005910 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800591c:	2101      	movs	r1, #1
 800591e:	69b8      	ldr	r0, [r7, #24]
 8005920:	f7ff fece 	bl	80056c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	78fa      	ldrb	r2, [r7, #3]
 8005928:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08e      	sub	sp, #56	; 0x38
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005942:	2300      	movs	r3, #0
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	2b00      	cmp	r3, #0
 800594e:	d109      	bne.n	8005964 <xQueueGenericSend+0x30>
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	62bb      	str	r3, [r7, #40]	; 0x28
 8005962:	e7fe      	b.n	8005962 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d103      	bne.n	8005972 <xQueueGenericSend+0x3e>
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <xQueueGenericSend+0x42>
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <xQueueGenericSend+0x44>
 8005976:	2300      	movs	r3, #0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <xQueueGenericSend+0x5c>
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
 800598e:	e7fe      	b.n	800598e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d103      	bne.n	800599e <xQueueGenericSend+0x6a>
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <xQueueGenericSend+0x6e>
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <xQueueGenericSend+0x70>
 80059a2:	2300      	movs	r3, #0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d109      	bne.n	80059bc <xQueueGenericSend+0x88>
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	623b      	str	r3, [r7, #32]
 80059ba:	e7fe      	b.n	80059ba <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059bc:	f001 fa4a 	bl	8006e54 <xTaskGetSchedulerState>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <xQueueGenericSend+0x98>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <xQueueGenericSend+0x9c>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <xQueueGenericSend+0x9e>
 80059d0:	2300      	movs	r3, #0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d109      	bne.n	80059ea <xQueueGenericSend+0xb6>
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	e7fe      	b.n	80059e8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059ea:	f001 ff95 	bl	8007918 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d302      	bcc.n	8005a00 <xQueueGenericSend+0xcc>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d129      	bne.n	8005a54 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a06:	f000 f9ff 	bl	8005e08 <prvCopyDataToQueue>
 8005a0a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d010      	beq.n	8005a36 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	3324      	adds	r3, #36	; 0x24
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 ffff 	bl	8006a1c <xTaskRemoveFromEventList>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d013      	beq.n	8005a4c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a24:	4b3f      	ldr	r3, [pc, #252]	; (8005b24 <xQueueGenericSend+0x1f0>)
 8005a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	e00a      	b.n	8005a4c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a3c:	4b39      	ldr	r3, [pc, #228]	; (8005b24 <xQueueGenericSend+0x1f0>)
 8005a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a4c:	f001 ff92 	bl	8007974 <vPortExitCritical>
				return pdPASS;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e063      	b.n	8005b1c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d103      	bne.n	8005a62 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a5a:	f001 ff8b 	bl	8007974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e05c      	b.n	8005b1c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d106      	bne.n	8005a76 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a68:	f107 0314 	add.w	r3, r7, #20
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 f897 	bl	8006ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a72:	2301      	movs	r3, #1
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a76:	f001 ff7d 	bl	8007974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a7a:	f000 fd5d 	bl	8006538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a7e:	f001 ff4b 	bl	8007918 <vPortEnterCritical>
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a88:	b25b      	sxtb	r3, r3
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d103      	bne.n	8005a98 <xQueueGenericSend+0x164>
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a9e:	b25b      	sxtb	r3, r3
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d103      	bne.n	8005aae <xQueueGenericSend+0x17a>
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aae:	f001 ff61 	bl	8007974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ab2:	1d3a      	adds	r2, r7, #4
 8005ab4:	f107 0314 	add.w	r3, r7, #20
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 f886 	bl	8006bcc <xTaskCheckForTimeOut>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d124      	bne.n	8005b10 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ac8:	f000 fa96 	bl	8005ff8 <prvIsQueueFull>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d018      	beq.n	8005b04 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	3310      	adds	r3, #16
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 ff16 	bl	800690c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ae2:	f000 fa21 	bl	8005f28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ae6:	f000 fd35 	bl	8006554 <xTaskResumeAll>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f47f af7c 	bne.w	80059ea <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005af2:	4b0c      	ldr	r3, [pc, #48]	; (8005b24 <xQueueGenericSend+0x1f0>)
 8005af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	e772      	b.n	80059ea <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b06:	f000 fa0f 	bl	8005f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b0a:	f000 fd23 	bl	8006554 <xTaskResumeAll>
 8005b0e:	e76c      	b.n	80059ea <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b12:	f000 fa09 	bl	8005f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b16:	f000 fd1d 	bl	8006554 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b1a:	2300      	movs	r3, #0
		}
	}
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3738      	adds	r7, #56	; 0x38
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	e000ed04 	.word	0xe000ed04

08005b28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08e      	sub	sp, #56	; 0x38
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d109      	bne.n	8005b54 <xQueueGenericSendFromISR+0x2c>
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
 8005b52:	e7fe      	b.n	8005b52 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <xQueueGenericSendFromISR+0x3a>
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <xQueueGenericSendFromISR+0x3e>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <xQueueGenericSendFromISR+0x40>
 8005b66:	2300      	movs	r3, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d109      	bne.n	8005b80 <xQueueGenericSendFromISR+0x58>
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	623b      	str	r3, [r7, #32]
 8005b7e:	e7fe      	b.n	8005b7e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d103      	bne.n	8005b8e <xQueueGenericSendFromISR+0x66>
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d101      	bne.n	8005b92 <xQueueGenericSendFromISR+0x6a>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <xQueueGenericSendFromISR+0x6c>
 8005b92:	2300      	movs	r3, #0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <xQueueGenericSendFromISR+0x84>
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	e7fe      	b.n	8005baa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bac:	f001 ff6e 	bl	8007a8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bb0:	f3ef 8211 	mrs	r2, BASEPRI
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	61ba      	str	r2, [r7, #24]
 8005bc6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005bc8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d302      	bcc.n	8005bde <xQueueGenericSendFromISR+0xb6>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d12c      	bne.n	8005c38 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bee:	f000 f90b 	bl	8005e08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bf2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d112      	bne.n	8005c22 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d016      	beq.n	8005c32 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	3324      	adds	r3, #36	; 0x24
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 ff07 	bl	8006a1c <xTaskRemoveFromEventList>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00e      	beq.n	8005c32 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	e007      	b.n	8005c32 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c26:	3301      	adds	r3, #1
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	b25a      	sxtb	r2, r3
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c32:	2301      	movs	r3, #1
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005c36:	e001      	b.n	8005c3c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3738      	adds	r7, #56	; 0x38
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08c      	sub	sp, #48	; 0x30
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d109      	bne.n	8005c7e <xQueueReceive+0x2e>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	623b      	str	r3, [r7, #32]
 8005c7c:	e7fe      	b.n	8005c7c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d103      	bne.n	8005c8c <xQueueReceive+0x3c>
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <xQueueReceive+0x40>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <xQueueReceive+0x42>
 8005c90:	2300      	movs	r3, #0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <xQueueReceive+0x5a>
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	61fb      	str	r3, [r7, #28]
 8005ca8:	e7fe      	b.n	8005ca8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005caa:	f001 f8d3 	bl	8006e54 <xTaskGetSchedulerState>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <xQueueReceive+0x6a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <xQueueReceive+0x6e>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <xQueueReceive+0x70>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d109      	bne.n	8005cd8 <xQueueReceive+0x88>
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	e7fe      	b.n	8005cd6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cd8:	f001 fe1e 	bl	8007918 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01f      	beq.n	8005d28 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cec:	f000 f8f6 	bl	8005edc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	1e5a      	subs	r2, r3, #1
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00f      	beq.n	8005d20 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	3310      	adds	r3, #16
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fe89 	bl	8006a1c <xTaskRemoveFromEventList>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d10:	4b3c      	ldr	r3, [pc, #240]	; (8005e04 <xQueueReceive+0x1b4>)
 8005d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d20:	f001 fe28 	bl	8007974 <vPortExitCritical>
				return pdPASS;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e069      	b.n	8005dfc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d2e:	f001 fe21 	bl	8007974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e062      	b.n	8005dfc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d3c:	f107 0310 	add.w	r3, r7, #16
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 ff2d 	bl	8006ba0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d46:	2301      	movs	r3, #1
 8005d48:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d4a:	f001 fe13 	bl	8007974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d4e:	f000 fbf3 	bl	8006538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d52:	f001 fde1 	bl	8007918 <vPortEnterCritical>
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d5c:	b25b      	sxtb	r3, r3
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d103      	bne.n	8005d6c <xQueueReceive+0x11c>
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d72:	b25b      	sxtb	r3, r3
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d78:	d103      	bne.n	8005d82 <xQueueReceive+0x132>
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d82:	f001 fdf7 	bl	8007974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d86:	1d3a      	adds	r2, r7, #4
 8005d88:	f107 0310 	add.w	r3, r7, #16
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 ff1c 	bl	8006bcc <xTaskCheckForTimeOut>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d123      	bne.n	8005de2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d9c:	f000 f916 	bl	8005fcc <prvIsQueueEmpty>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d017      	beq.n	8005dd6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	3324      	adds	r3, #36	; 0x24
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fdac 	bl	800690c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005db6:	f000 f8b7 	bl	8005f28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dba:	f000 fbcb 	bl	8006554 <xTaskResumeAll>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d189      	bne.n	8005cd8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <xQueueReceive+0x1b4>)
 8005dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	e780      	b.n	8005cd8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dd8:	f000 f8a6 	bl	8005f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ddc:	f000 fbba 	bl	8006554 <xTaskResumeAll>
 8005de0:	e77a      	b.n	8005cd8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005de4:	f000 f8a0 	bl	8005f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005de8:	f000 fbb4 	bl	8006554 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dee:	f000 f8ed 	bl	8005fcc <prvIsQueueEmpty>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f43f af6f 	beq.w	8005cd8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dfa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3730      	adds	r7, #48	; 0x30
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10d      	bne.n	8005e42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d14d      	bne.n	8005eca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f001 f82c 	bl	8006e90 <xTaskPriorityDisinherit>
 8005e38:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	605a      	str	r2, [r3, #4]
 8005e40:	e043      	b.n	8005eca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d119      	bne.n	8005e7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6898      	ldr	r0, [r3, #8]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	461a      	mov	r2, r3
 8005e52:	68b9      	ldr	r1, [r7, #8]
 8005e54:	f002 f852 	bl	8007efc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	441a      	add	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d32b      	bcc.n	8005eca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	609a      	str	r2, [r3, #8]
 8005e7a:	e026      	b.n	8005eca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	68d8      	ldr	r0, [r3, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	461a      	mov	r2, r3
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	f002 f838 	bl	8007efc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	425b      	negs	r3, r3
 8005e96:	441a      	add	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d207      	bcs.n	8005eb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	425b      	negs	r3, r3
 8005eb2:	441a      	add	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d105      	bne.n	8005eca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ed2:	697b      	ldr	r3, [r7, #20]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d018      	beq.n	8005f20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	441a      	add	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d303      	bcc.n	8005f10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68d9      	ldr	r1, [r3, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6838      	ldr	r0, [r7, #0]
 8005f1c:	f001 ffee 	bl	8007efc <memcpy>
	}
}
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f30:	f001 fcf2 	bl	8007918 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f3c:	e011      	b.n	8005f62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d012      	beq.n	8005f6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3324      	adds	r3, #36	; 0x24
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fd66 	bl	8006a1c <xTaskRemoveFromEventList>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f56:	f000 fe99 	bl	8006c8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	dce9      	bgt.n	8005f3e <prvUnlockQueue+0x16>
 8005f6a:	e000      	b.n	8005f6e <prvUnlockQueue+0x46>
					break;
 8005f6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	22ff      	movs	r2, #255	; 0xff
 8005f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f76:	f001 fcfd 	bl	8007974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f7a:	f001 fccd 	bl	8007918 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f86:	e011      	b.n	8005fac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d012      	beq.n	8005fb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3310      	adds	r3, #16
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fd41 	bl	8006a1c <xTaskRemoveFromEventList>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fa0:	f000 fe74 	bl	8006c8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005fa4:	7bbb      	ldrb	r3, [r7, #14]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	dce9      	bgt.n	8005f88 <prvUnlockQueue+0x60>
 8005fb4:	e000      	b.n	8005fb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005fb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	22ff      	movs	r2, #255	; 0xff
 8005fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005fc0:	f001 fcd8 	bl	8007974 <vPortExitCritical>
}
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fd4:	f001 fca0 	bl	8007918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d102      	bne.n	8005fe6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e001      	b.n	8005fea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fea:	f001 fcc3 	bl	8007974 <vPortExitCritical>

	return xReturn;
 8005fee:	68fb      	ldr	r3, [r7, #12]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006000:	f001 fc8a 	bl	8007918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600c:	429a      	cmp	r2, r3
 800600e:	d102      	bne.n	8006016 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006010:	2301      	movs	r3, #1
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e001      	b.n	800601a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800601a:	f001 fcab 	bl	8007974 <vPortExitCritical>

	return xReturn;
 800601e:	68fb      	ldr	r3, [r7, #12]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	e014      	b.n	8006062 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006038:	4a0e      	ldr	r2, [pc, #56]	; (8006074 <vQueueAddToRegistry+0x4c>)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10b      	bne.n	800605c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006044:	490b      	ldr	r1, [pc, #44]	; (8006074 <vQueueAddToRegistry+0x4c>)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800604e:	4a09      	ldr	r2, [pc, #36]	; (8006074 <vQueueAddToRegistry+0x4c>)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	4413      	add	r3, r2
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800605a:	e005      	b.n	8006068 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b07      	cmp	r3, #7
 8006066:	d9e7      	bls.n	8006038 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20003748 	.word	0x20003748

08006078 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006088:	f001 fc46 	bl	8007918 <vPortEnterCritical>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006092:	b25b      	sxtb	r3, r3
 8006094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006098:	d103      	bne.n	80060a2 <vQueueWaitForMessageRestricted+0x2a>
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060a8:	b25b      	sxtb	r3, r3
 80060aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ae:	d103      	bne.n	80060b8 <vQueueWaitForMessageRestricted+0x40>
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060b8:	f001 fc5c 	bl	8007974 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d106      	bne.n	80060d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	3324      	adds	r3, #36	; 0x24
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	68b9      	ldr	r1, [r7, #8]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fc7b 	bl	80069c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060d2:	6978      	ldr	r0, [r7, #20]
 80060d4:	f7ff ff28 	bl	8005f28 <prvUnlockQueue>
	}
 80060d8:	bf00      	nop
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08e      	sub	sp, #56	; 0x38
 80060e4:	af04      	add	r7, sp, #16
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <xTaskCreateStatic+0x28>
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	623b      	str	r3, [r7, #32]
 8006106:	e7fe      	b.n	8006106 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610a:	2b00      	cmp	r3, #0
 800610c:	d109      	bne.n	8006122 <xTaskCreateStatic+0x42>
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	61fb      	str	r3, [r7, #28]
 8006120:	e7fe      	b.n	8006120 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006122:	235c      	movs	r3, #92	; 0x5c
 8006124:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b5c      	cmp	r3, #92	; 0x5c
 800612a:	d009      	beq.n	8006140 <xTaskCreateStatic+0x60>
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	e7fe      	b.n	800613e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	2b00      	cmp	r3, #0
 8006144:	d01e      	beq.n	8006184 <xTaskCreateStatic+0xa4>
 8006146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01b      	beq.n	8006184 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006154:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	2202      	movs	r2, #2
 800615a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800615e:	2300      	movs	r3, #0
 8006160:	9303      	str	r3, [sp, #12]
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	9302      	str	r3, [sp, #8]
 8006166:	f107 0314 	add.w	r3, r7, #20
 800616a:	9301      	str	r3, [sp, #4]
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	68b9      	ldr	r1, [r7, #8]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 f850 	bl	800621c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800617c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800617e:	f000 f8d3 	bl	8006328 <prvAddNewTaskToReadyList>
 8006182:	e001      	b.n	8006188 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006184:	2300      	movs	r3, #0
 8006186:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006188:	697b      	ldr	r3, [r7, #20]
	}
 800618a:	4618      	mov	r0, r3
 800618c:	3728      	adds	r7, #40	; 0x28
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006192:	b580      	push	{r7, lr}
 8006194:	b08c      	sub	sp, #48	; 0x30
 8006196:	af04      	add	r7, sp, #16
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	603b      	str	r3, [r7, #0]
 800619e:	4613      	mov	r3, r2
 80061a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a2:	88fb      	ldrh	r3, [r7, #6]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4618      	mov	r0, r3
 80061a8:	f001 fcac 	bl	8007b04 <pvPortMalloc>
 80061ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80061b4:	205c      	movs	r0, #92	; 0x5c
 80061b6:	f001 fca5 	bl	8007b04 <pvPortMalloc>
 80061ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
 80061c8:	e005      	b.n	80061d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061ca:	6978      	ldr	r0, [r7, #20]
 80061cc:	f001 fd60 	bl	8007c90 <vPortFree>
 80061d0:	e001      	b.n	80061d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d017      	beq.n	800620c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	2300      	movs	r3, #0
 80061e8:	9303      	str	r3, [sp, #12]
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	9302      	str	r3, [sp, #8]
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	9301      	str	r3, [sp, #4]
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 f80e 	bl	800621c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006200:	69f8      	ldr	r0, [r7, #28]
 8006202:	f000 f891 	bl	8006328 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006206:	2301      	movs	r3, #1
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	e002      	b.n	8006212 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800620c:	f04f 33ff 	mov.w	r3, #4294967295
 8006210:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006212:	69bb      	ldr	r3, [r7, #24]
	}
 8006214:	4618      	mov	r0, r3
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	461a      	mov	r2, r3
 8006234:	21a5      	movs	r1, #165	; 0xa5
 8006236:	f001 fe6c 	bl	8007f12 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006244:	3b01      	subs	r3, #1
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	f023 0307 	bic.w	r3, r3, #7
 8006252:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <prvInitialiseNewTask+0x56>
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	e7fe      	b.n	8006270 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006272:	2300      	movs	r3, #0
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	e012      	b.n	800629e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	7819      	ldrb	r1, [r3, #0]
 8006280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	3334      	adds	r3, #52	; 0x34
 8006288:	460a      	mov	r2, r1
 800628a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	4413      	add	r3, r2
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d006      	beq.n	80062a6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	3301      	adds	r3, #1
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	2b0f      	cmp	r3, #15
 80062a2:	d9e9      	bls.n	8006278 <prvInitialiseNewTask+0x5c>
 80062a4:	e000      	b.n	80062a8 <prvInitialiseNewTask+0x8c>
		{
			break;
 80062a6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	2b37      	cmp	r3, #55	; 0x37
 80062b4:	d901      	bls.n	80062ba <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062b6:	2337      	movs	r3, #55	; 0x37
 80062b8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	2200      	movs	r2, #0
 80062ca:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	3304      	adds	r3, #4
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff f964 	bl	800559e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	3318      	adds	r3, #24
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff f95f 	bl	800559e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	2200      	movs	r2, #0
 80062fa:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	68f9      	ldr	r1, [r7, #12]
 8006308:	69b8      	ldr	r0, [r7, #24]
 800630a:	f001 fa17 	bl	800773c <pxPortInitialiseStack>
 800630e:	4602      	mov	r2, r0
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006320:	bf00      	nop
 8006322:	3720      	adds	r7, #32
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006330:	f001 faf2 	bl	8007918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006334:	4b2d      	ldr	r3, [pc, #180]	; (80063ec <prvAddNewTaskToReadyList+0xc4>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3301      	adds	r3, #1
 800633a:	4a2c      	ldr	r2, [pc, #176]	; (80063ec <prvAddNewTaskToReadyList+0xc4>)
 800633c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800633e:	4b2c      	ldr	r3, [pc, #176]	; (80063f0 <prvAddNewTaskToReadyList+0xc8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d109      	bne.n	800635a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006346:	4a2a      	ldr	r2, [pc, #168]	; (80063f0 <prvAddNewTaskToReadyList+0xc8>)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800634c:	4b27      	ldr	r3, [pc, #156]	; (80063ec <prvAddNewTaskToReadyList+0xc4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d110      	bne.n	8006376 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006354:	f000 fcc0 	bl	8006cd8 <prvInitialiseTaskLists>
 8006358:	e00d      	b.n	8006376 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800635a:	4b26      	ldr	r3, [pc, #152]	; (80063f4 <prvAddNewTaskToReadyList+0xcc>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d109      	bne.n	8006376 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006362:	4b23      	ldr	r3, [pc, #140]	; (80063f0 <prvAddNewTaskToReadyList+0xc8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	429a      	cmp	r2, r3
 800636e:	d802      	bhi.n	8006376 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006370:	4a1f      	ldr	r2, [pc, #124]	; (80063f0 <prvAddNewTaskToReadyList+0xc8>)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006376:	4b20      	ldr	r3, [pc, #128]	; (80063f8 <prvAddNewTaskToReadyList+0xd0>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3301      	adds	r3, #1
 800637c:	4a1e      	ldr	r2, [pc, #120]	; (80063f8 <prvAddNewTaskToReadyList+0xd0>)
 800637e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006380:	4b1d      	ldr	r3, [pc, #116]	; (80063f8 <prvAddNewTaskToReadyList+0xd0>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638c:	4b1b      	ldr	r3, [pc, #108]	; (80063fc <prvAddNewTaskToReadyList+0xd4>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d903      	bls.n	800639c <prvAddNewTaskToReadyList+0x74>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	4a18      	ldr	r2, [pc, #96]	; (80063fc <prvAddNewTaskToReadyList+0xd4>)
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4a15      	ldr	r2, [pc, #84]	; (8006400 <prvAddNewTaskToReadyList+0xd8>)
 80063aa:	441a      	add	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4619      	mov	r1, r3
 80063b2:	4610      	mov	r0, r2
 80063b4:	f7ff f8ff 	bl	80055b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063b8:	f001 fadc 	bl	8007974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063bc:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <prvAddNewTaskToReadyList+0xcc>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00e      	beq.n	80063e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063c4:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <prvAddNewTaskToReadyList+0xc8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d207      	bcs.n	80063e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063d2:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <prvAddNewTaskToReadyList+0xdc>)
 80063d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000bc4 	.word	0x20000bc4
 80063f0:	200006f0 	.word	0x200006f0
 80063f4:	20000bd0 	.word	0x20000bd0
 80063f8:	20000be0 	.word	0x20000be0
 80063fc:	20000bcc 	.word	0x20000bcc
 8006400:	200006f4 	.word	0x200006f4
 8006404:	e000ed04 	.word	0xe000ed04

08006408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d016      	beq.n	8006448 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800641a:	4b13      	ldr	r3, [pc, #76]	; (8006468 <vTaskDelay+0x60>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d009      	beq.n	8006436 <vTaskDelay+0x2e>
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	60bb      	str	r3, [r7, #8]
 8006434:	e7fe      	b.n	8006434 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006436:	f000 f87f 	bl	8006538 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800643a:	2100      	movs	r1, #0
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fdab 	bl	8006f98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006442:	f000 f887 	bl	8006554 <xTaskResumeAll>
 8006446:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d107      	bne.n	800645e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800644e:	4b07      	ldr	r3, [pc, #28]	; (800646c <vTaskDelay+0x64>)
 8006450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800645e:	bf00      	nop
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000bec 	.word	0x20000bec
 800646c:	e000ed04 	.word	0xe000ed04

08006470 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08a      	sub	sp, #40	; 0x28
 8006474:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006476:	2300      	movs	r3, #0
 8006478:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800647e:	463a      	mov	r2, r7
 8006480:	1d39      	adds	r1, r7, #4
 8006482:	f107 0308 	add.w	r3, r7, #8
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe fe88 	bl	800519c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	9202      	str	r2, [sp, #8]
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	2300      	movs	r3, #0
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	2300      	movs	r3, #0
 800649c:	460a      	mov	r2, r1
 800649e:	4920      	ldr	r1, [pc, #128]	; (8006520 <vTaskStartScheduler+0xb0>)
 80064a0:	4820      	ldr	r0, [pc, #128]	; (8006524 <vTaskStartScheduler+0xb4>)
 80064a2:	f7ff fe1d 	bl	80060e0 <xTaskCreateStatic>
 80064a6:	4602      	mov	r2, r0
 80064a8:	4b1f      	ldr	r3, [pc, #124]	; (8006528 <vTaskStartScheduler+0xb8>)
 80064aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064ac:	4b1e      	ldr	r3, [pc, #120]	; (8006528 <vTaskStartScheduler+0xb8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064b4:	2301      	movs	r3, #1
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	e001      	b.n	80064be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d102      	bne.n	80064ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064c4:	f000 fdbc 	bl	8007040 <xTimerCreateTimerTask>
 80064c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d115      	bne.n	80064fc <vTaskStartScheduler+0x8c>
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064e2:	4b12      	ldr	r3, [pc, #72]	; (800652c <vTaskStartScheduler+0xbc>)
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295
 80064e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064ea:	4b11      	ldr	r3, [pc, #68]	; (8006530 <vTaskStartScheduler+0xc0>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80064f0:	4b10      	ldr	r3, [pc, #64]	; (8006534 <vTaskStartScheduler+0xc4>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064f6:	f001 f99f 	bl	8007838 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064fa:	e00d      	b.n	8006518 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006502:	d109      	bne.n	8006518 <vTaskStartScheduler+0xa8>
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	e7fe      	b.n	8006516 <vTaskStartScheduler+0xa6>
}
 8006518:	bf00      	nop
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	080081c8 	.word	0x080081c8
 8006524:	08006ca5 	.word	0x08006ca5
 8006528:	20000be8 	.word	0x20000be8
 800652c:	20000be4 	.word	0x20000be4
 8006530:	20000bd0 	.word	0x20000bd0
 8006534:	20000bc8 	.word	0x20000bc8

08006538 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800653c:	4b04      	ldr	r3, [pc, #16]	; (8006550 <vTaskSuspendAll+0x18>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3301      	adds	r3, #1
 8006542:	4a03      	ldr	r2, [pc, #12]	; (8006550 <vTaskSuspendAll+0x18>)
 8006544:	6013      	str	r3, [r2, #0]
}
 8006546:	bf00      	nop
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	20000bec 	.word	0x20000bec

08006554 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800655e:	2300      	movs	r3, #0
 8006560:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006562:	4b41      	ldr	r3, [pc, #260]	; (8006668 <xTaskResumeAll+0x114>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d109      	bne.n	800657e <xTaskResumeAll+0x2a>
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	e7fe      	b.n	800657c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800657e:	f001 f9cb 	bl	8007918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006582:	4b39      	ldr	r3, [pc, #228]	; (8006668 <xTaskResumeAll+0x114>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3b01      	subs	r3, #1
 8006588:	4a37      	ldr	r2, [pc, #220]	; (8006668 <xTaskResumeAll+0x114>)
 800658a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800658c:	4b36      	ldr	r3, [pc, #216]	; (8006668 <xTaskResumeAll+0x114>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d162      	bne.n	800665a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006594:	4b35      	ldr	r3, [pc, #212]	; (800666c <xTaskResumeAll+0x118>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d05e      	beq.n	800665a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800659c:	e02f      	b.n	80065fe <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800659e:	4b34      	ldr	r3, [pc, #208]	; (8006670 <xTaskResumeAll+0x11c>)
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3318      	adds	r3, #24
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff f85e 	bl	800566c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3304      	adds	r3, #4
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff f859 	bl	800566c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065be:	4b2d      	ldr	r3, [pc, #180]	; (8006674 <xTaskResumeAll+0x120>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d903      	bls.n	80065ce <xTaskResumeAll+0x7a>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ca:	4a2a      	ldr	r2, [pc, #168]	; (8006674 <xTaskResumeAll+0x120>)
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4a27      	ldr	r2, [pc, #156]	; (8006678 <xTaskResumeAll+0x124>)
 80065dc:	441a      	add	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3304      	adds	r3, #4
 80065e2:	4619      	mov	r1, r3
 80065e4:	4610      	mov	r0, r2
 80065e6:	f7fe ffe6 	bl	80055b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ee:	4b23      	ldr	r3, [pc, #140]	; (800667c <xTaskResumeAll+0x128>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d302      	bcc.n	80065fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80065f8:	4b21      	ldr	r3, [pc, #132]	; (8006680 <xTaskResumeAll+0x12c>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065fe:	4b1c      	ldr	r3, [pc, #112]	; (8006670 <xTaskResumeAll+0x11c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1cb      	bne.n	800659e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800660c:	f000 fbfe 	bl	8006e0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006610:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <xTaskResumeAll+0x130>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d010      	beq.n	800663e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800661c:	f000 f844 	bl	80066a8 <xTaskIncrementTick>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006626:	4b16      	ldr	r3, [pc, #88]	; (8006680 <xTaskResumeAll+0x12c>)
 8006628:	2201      	movs	r2, #1
 800662a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3b01      	subs	r3, #1
 8006630:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1f1      	bne.n	800661c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006638:	4b12      	ldr	r3, [pc, #72]	; (8006684 <xTaskResumeAll+0x130>)
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800663e:	4b10      	ldr	r3, [pc, #64]	; (8006680 <xTaskResumeAll+0x12c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d009      	beq.n	800665a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006646:	2301      	movs	r3, #1
 8006648:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800664a:	4b0f      	ldr	r3, [pc, #60]	; (8006688 <xTaskResumeAll+0x134>)
 800664c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800665a:	f001 f98b 	bl	8007974 <vPortExitCritical>

	return xAlreadyYielded;
 800665e:	68bb      	ldr	r3, [r7, #8]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	20000bec 	.word	0x20000bec
 800666c:	20000bc4 	.word	0x20000bc4
 8006670:	20000b84 	.word	0x20000b84
 8006674:	20000bcc 	.word	0x20000bcc
 8006678:	200006f4 	.word	0x200006f4
 800667c:	200006f0 	.word	0x200006f0
 8006680:	20000bd8 	.word	0x20000bd8
 8006684:	20000bd4 	.word	0x20000bd4
 8006688:	e000ed04 	.word	0xe000ed04

0800668c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006692:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <xTaskGetTickCount+0x18>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006698:	687b      	ldr	r3, [r7, #4]
}
 800669a:	4618      	mov	r0, r3
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	bc80      	pop	{r7}
 80066a2:	4770      	bx	lr
 80066a4:	20000bc8 	.word	0x20000bc8

080066a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066ae:	2300      	movs	r3, #0
 80066b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066b2:	4b55      	ldr	r3, [pc, #340]	; (8006808 <xTaskIncrementTick+0x160>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f040 8093 	bne.w	80067e2 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066bc:	4b53      	ldr	r3, [pc, #332]	; (800680c <xTaskIncrementTick+0x164>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3301      	adds	r3, #1
 80066c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066c4:	4a51      	ldr	r2, [pc, #324]	; (800680c <xTaskIncrementTick+0x164>)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d11f      	bne.n	8006710 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80066d0:	4b4f      	ldr	r3, [pc, #316]	; (8006810 <xTaskIncrementTick+0x168>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <xTaskIncrementTick+0x46>
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	e7fe      	b.n	80066ec <xTaskIncrementTick+0x44>
 80066ee:	4b48      	ldr	r3, [pc, #288]	; (8006810 <xTaskIncrementTick+0x168>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	4b47      	ldr	r3, [pc, #284]	; (8006814 <xTaskIncrementTick+0x16c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a45      	ldr	r2, [pc, #276]	; (8006810 <xTaskIncrementTick+0x168>)
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	4a45      	ldr	r2, [pc, #276]	; (8006814 <xTaskIncrementTick+0x16c>)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	4b45      	ldr	r3, [pc, #276]	; (8006818 <xTaskIncrementTick+0x170>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3301      	adds	r3, #1
 8006708:	4a43      	ldr	r2, [pc, #268]	; (8006818 <xTaskIncrementTick+0x170>)
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	f000 fb7e 	bl	8006e0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006710:	4b42      	ldr	r3, [pc, #264]	; (800681c <xTaskIncrementTick+0x174>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	429a      	cmp	r2, r3
 8006718:	d34e      	bcc.n	80067b8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800671a:	4b3d      	ldr	r3, [pc, #244]	; (8006810 <xTaskIncrementTick+0x168>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <xTaskIncrementTick+0x80>
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <xTaskIncrementTick+0x82>
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800672e:	4b3b      	ldr	r3, [pc, #236]	; (800681c <xTaskIncrementTick+0x174>)
 8006730:	f04f 32ff 	mov.w	r2, #4294967295
 8006734:	601a      	str	r2, [r3, #0]
					break;
 8006736:	e03f      	b.n	80067b8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006738:	4b35      	ldr	r3, [pc, #212]	; (8006810 <xTaskIncrementTick+0x168>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	429a      	cmp	r2, r3
 800674e:	d203      	bcs.n	8006758 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006750:	4a32      	ldr	r2, [pc, #200]	; (800681c <xTaskIncrementTick+0x174>)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6013      	str	r3, [r2, #0]
						break;
 8006756:	e02f      	b.n	80067b8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	3304      	adds	r3, #4
 800675c:	4618      	mov	r0, r3
 800675e:	f7fe ff85 	bl	800566c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006766:	2b00      	cmp	r3, #0
 8006768:	d004      	beq.n	8006774 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	3318      	adds	r3, #24
 800676e:	4618      	mov	r0, r3
 8006770:	f7fe ff7c 	bl	800566c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006778:	4b29      	ldr	r3, [pc, #164]	; (8006820 <xTaskIncrementTick+0x178>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	429a      	cmp	r2, r3
 800677e:	d903      	bls.n	8006788 <xTaskIncrementTick+0xe0>
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	4a26      	ldr	r2, [pc, #152]	; (8006820 <xTaskIncrementTick+0x178>)
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4a23      	ldr	r2, [pc, #140]	; (8006824 <xTaskIncrementTick+0x17c>)
 8006796:	441a      	add	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	3304      	adds	r3, #4
 800679c:	4619      	mov	r1, r3
 800679e:	4610      	mov	r0, r2
 80067a0:	f7fe ff09 	bl	80055b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	4b1f      	ldr	r3, [pc, #124]	; (8006828 <xTaskIncrementTick+0x180>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d3b3      	bcc.n	800671a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80067b2:	2301      	movs	r3, #1
 80067b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b6:	e7b0      	b.n	800671a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067b8:	4b1b      	ldr	r3, [pc, #108]	; (8006828 <xTaskIncrementTick+0x180>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067be:	4919      	ldr	r1, [pc, #100]	; (8006824 <xTaskIncrementTick+0x17c>)
 80067c0:	4613      	mov	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	440b      	add	r3, r1
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d901      	bls.n	80067d4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80067d0:	2301      	movs	r3, #1
 80067d2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80067d4:	4b15      	ldr	r3, [pc, #84]	; (800682c <xTaskIncrementTick+0x184>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d109      	bne.n	80067f0 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 80067dc:	f7f9 ff14 	bl	8000608 <vApplicationTickHook>
 80067e0:	e006      	b.n	80067f0 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80067e2:	4b12      	ldr	r3, [pc, #72]	; (800682c <xTaskIncrementTick+0x184>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	4a10      	ldr	r2, [pc, #64]	; (800682c <xTaskIncrementTick+0x184>)
 80067ea:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80067ec:	f7f9 ff0c 	bl	8000608 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80067f0:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <xTaskIncrementTick+0x188>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 80067f8:	2301      	movs	r3, #1
 80067fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80067fc:	697b      	ldr	r3, [r7, #20]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000bec 	.word	0x20000bec
 800680c:	20000bc8 	.word	0x20000bc8
 8006810:	20000b7c 	.word	0x20000b7c
 8006814:	20000b80 	.word	0x20000b80
 8006818:	20000bdc 	.word	0x20000bdc
 800681c:	20000be4 	.word	0x20000be4
 8006820:	20000bcc 	.word	0x20000bcc
 8006824:	200006f4 	.word	0x200006f4
 8006828:	200006f0 	.word	0x200006f0
 800682c:	20000bd4 	.word	0x20000bd4
 8006830:	20000bd8 	.word	0x20000bd8

08006834 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800683a:	4b2f      	ldr	r3, [pc, #188]	; (80068f8 <vTaskSwitchContext+0xc4>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006842:	4b2e      	ldr	r3, [pc, #184]	; (80068fc <vTaskSwitchContext+0xc8>)
 8006844:	2201      	movs	r2, #1
 8006846:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006848:	e051      	b.n	80068ee <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 800684a:	4b2c      	ldr	r3, [pc, #176]	; (80068fc <vTaskSwitchContext+0xc8>)
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006850:	4b2b      	ldr	r3, [pc, #172]	; (8006900 <vTaskSwitchContext+0xcc>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	4b2a      	ldr	r3, [pc, #168]	; (8006900 <vTaskSwitchContext+0xcc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	429a      	cmp	r2, r3
 800685e:	d808      	bhi.n	8006872 <vTaskSwitchContext+0x3e>
 8006860:	4b27      	ldr	r3, [pc, #156]	; (8006900 <vTaskSwitchContext+0xcc>)
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	4b26      	ldr	r3, [pc, #152]	; (8006900 <vTaskSwitchContext+0xcc>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3334      	adds	r3, #52	; 0x34
 800686a:	4619      	mov	r1, r3
 800686c:	4610      	mov	r0, r2
 800686e:	f7f9 fed1 	bl	8000614 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006872:	4b24      	ldr	r3, [pc, #144]	; (8006904 <vTaskSwitchContext+0xd0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	e00f      	b.n	800689a <vTaskSwitchContext+0x66>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d109      	bne.n	8006894 <vTaskSwitchContext+0x60>
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	607b      	str	r3, [r7, #4]
 8006892:	e7fe      	b.n	8006892 <vTaskSwitchContext+0x5e>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3b01      	subs	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	491b      	ldr	r1, [pc, #108]	; (8006908 <vTaskSwitchContext+0xd4>)
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d0e5      	beq.n	800687a <vTaskSwitchContext+0x46>
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	4613      	mov	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4a13      	ldr	r2, [pc, #76]	; (8006908 <vTaskSwitchContext+0xd4>)
 80068ba:	4413      	add	r3, r2
 80068bc:	60bb      	str	r3, [r7, #8]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	605a      	str	r2, [r3, #4]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	3308      	adds	r3, #8
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d104      	bne.n	80068de <vTaskSwitchContext+0xaa>
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	685a      	ldr	r2, [r3, #4]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	605a      	str	r2, [r3, #4]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	4a06      	ldr	r2, [pc, #24]	; (8006900 <vTaskSwitchContext+0xcc>)
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	4a06      	ldr	r2, [pc, #24]	; (8006904 <vTaskSwitchContext+0xd0>)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6013      	str	r3, [r2, #0]
}
 80068ee:	bf00      	nop
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20000bec 	.word	0x20000bec
 80068fc:	20000bd8 	.word	0x20000bd8
 8006900:	200006f0 	.word	0x200006f0
 8006904:	20000bcc 	.word	0x20000bcc
 8006908:	200006f4 	.word	0x200006f4

0800690c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d109      	bne.n	8006930 <vTaskPlaceOnEventList+0x24>
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	e7fe      	b.n	800692e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006930:	4b07      	ldr	r3, [pc, #28]	; (8006950 <vTaskPlaceOnEventList+0x44>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3318      	adds	r3, #24
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7fe fe5f 	bl	80055fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800693e:	2101      	movs	r1, #1
 8006940:	6838      	ldr	r0, [r7, #0]
 8006942:	f000 fb29 	bl	8006f98 <prvAddCurrentTaskToDelayedList>
}
 8006946:	bf00      	nop
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	200006f0 	.word	0x200006f0

08006954 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d109      	bne.n	800697a <vTaskPlaceOnUnorderedEventList+0x26>
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	e7fe      	b.n	8006978 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800697a:	4b11      	ldr	r3, [pc, #68]	; (80069c0 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d109      	bne.n	8006996 <vTaskPlaceOnUnorderedEventList+0x42>
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	613b      	str	r3, [r7, #16]
 8006994:	e7fe      	b.n	8006994 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006996:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80069a0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069a2:	4b08      	ldr	r3, [pc, #32]	; (80069c4 <vTaskPlaceOnUnorderedEventList+0x70>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3318      	adds	r3, #24
 80069a8:	4619      	mov	r1, r3
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7fe fe03 	bl	80055b6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069b0:	2101      	movs	r1, #1
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 faf0 	bl	8006f98 <prvAddCurrentTaskToDelayedList>
}
 80069b8:	bf00      	nop
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20000bec 	.word	0x20000bec
 80069c4:	200006f0 	.word	0x200006f0

080069c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <vTaskPlaceOnEventListRestricted+0x26>
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	e7fe      	b.n	80069ec <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069ee:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <vTaskPlaceOnEventListRestricted+0x50>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3318      	adds	r3, #24
 80069f4:	4619      	mov	r1, r3
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f7fe fddd 	bl	80055b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006a02:	f04f 33ff 	mov.w	r3, #4294967295
 8006a06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	68b8      	ldr	r0, [r7, #8]
 8006a0c:	f000 fac4 	bl	8006f98 <prvAddCurrentTaskToDelayedList>
	}
 8006a10:	bf00      	nop
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	200006f0 	.word	0x200006f0

08006a1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d109      	bne.n	8006a46 <xTaskRemoveFromEventList+0x2a>
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e7fe      	b.n	8006a44 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	3318      	adds	r3, #24
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fe fe0e 	bl	800566c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a50:	4b1d      	ldr	r3, [pc, #116]	; (8006ac8 <xTaskRemoveFromEventList+0xac>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d11d      	bne.n	8006a94 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fe fe05 	bl	800566c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a66:	4b19      	ldr	r3, [pc, #100]	; (8006acc <xTaskRemoveFromEventList+0xb0>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d903      	bls.n	8006a76 <xTaskRemoveFromEventList+0x5a>
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a72:	4a16      	ldr	r2, [pc, #88]	; (8006acc <xTaskRemoveFromEventList+0xb0>)
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4a13      	ldr	r2, [pc, #76]	; (8006ad0 <xTaskRemoveFromEventList+0xb4>)
 8006a84:	441a      	add	r2, r3
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	3304      	adds	r3, #4
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	f7fe fd92 	bl	80055b6 <vListInsertEnd>
 8006a92:	e005      	b.n	8006aa0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	3318      	adds	r3, #24
 8006a98:	4619      	mov	r1, r3
 8006a9a:	480e      	ldr	r0, [pc, #56]	; (8006ad4 <xTaskRemoveFromEventList+0xb8>)
 8006a9c:	f7fe fd8b 	bl	80055b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa4:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <xTaskRemoveFromEventList+0xbc>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d905      	bls.n	8006aba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ab2:	4b0a      	ldr	r3, [pc, #40]	; (8006adc <xTaskRemoveFromEventList+0xc0>)
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	e001      	b.n	8006abe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006abe:	697b      	ldr	r3, [r7, #20]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	20000bec 	.word	0x20000bec
 8006acc:	20000bcc 	.word	0x20000bcc
 8006ad0:	200006f4 	.word	0x200006f4
 8006ad4:	20000b84 	.word	0x20000b84
 8006ad8:	200006f0 	.word	0x200006f0
 8006adc:	20000bd8 	.word	0x20000bd8

08006ae0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006aea:	4b28      	ldr	r3, [pc, #160]	; (8006b8c <vTaskRemoveFromUnorderedEventList+0xac>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d109      	bne.n	8006b06 <vTaskRemoveFromUnorderedEventList+0x26>
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	613b      	str	r3, [r7, #16]
 8006b04:	e7fe      	b.n	8006b04 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d109      	bne.n	8006b30 <vTaskRemoveFromUnorderedEventList+0x50>
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	e7fe      	b.n	8006b2e <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7fe fd9b 	bl	800566c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fd96 	bl	800566c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b44:	4b12      	ldr	r3, [pc, #72]	; (8006b90 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d903      	bls.n	8006b54 <vTaskRemoveFromUnorderedEventList+0x74>
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	4a0f      	ldr	r2, [pc, #60]	; (8006b90 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4a0c      	ldr	r2, [pc, #48]	; (8006b94 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006b62:	441a      	add	r2, r3
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	3304      	adds	r3, #4
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	f7fe fd23 	bl	80055b6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b74:	4b08      	ldr	r3, [pc, #32]	; (8006b98 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d902      	bls.n	8006b84 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006b7e:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006b80:	2201      	movs	r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
	}
}
 8006b84:	bf00      	nop
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20000bec 	.word	0x20000bec
 8006b90:	20000bcc 	.word	0x20000bcc
 8006b94:	200006f4 	.word	0x200006f4
 8006b98:	200006f0 	.word	0x200006f0
 8006b9c:	20000bd8 	.word	0x20000bd8

08006ba0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ba8:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <vTaskInternalSetTimeOutState+0x24>)
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <vTaskInternalSetTimeOutState+0x28>)
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	605a      	str	r2, [r3, #4]
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20000bdc 	.word	0x20000bdc
 8006bc8:	20000bc8 	.word	0x20000bc8

08006bcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d109      	bne.n	8006bf0 <xTaskCheckForTimeOut+0x24>
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	e7fe      	b.n	8006bee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d109      	bne.n	8006c0a <xTaskCheckForTimeOut+0x3e>
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	e7fe      	b.n	8006c08 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006c0a:	f000 fe85 	bl	8007918 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c0e:	4b1d      	ldr	r3, [pc, #116]	; (8006c84 <xTaskCheckForTimeOut+0xb8>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c26:	d102      	bne.n	8006c2e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61fb      	str	r3, [r7, #28]
 8006c2c:	e023      	b.n	8006c76 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	4b15      	ldr	r3, [pc, #84]	; (8006c88 <xTaskCheckForTimeOut+0xbc>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d007      	beq.n	8006c4a <xTaskCheckForTimeOut+0x7e>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d302      	bcc.n	8006c4a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c44:	2301      	movs	r3, #1
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	e015      	b.n	8006c76 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d20b      	bcs.n	8006c6c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	1ad2      	subs	r2, r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff ff9d 	bl	8006ba0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	61fb      	str	r3, [r7, #28]
 8006c6a:	e004      	b.n	8006c76 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c72:	2301      	movs	r3, #1
 8006c74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c76:	f000 fe7d 	bl	8007974 <vPortExitCritical>

	return xReturn;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3720      	adds	r7, #32
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000bc8 	.word	0x20000bc8
 8006c88:	20000bdc 	.word	0x20000bdc

08006c8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c90:	4b03      	ldr	r3, [pc, #12]	; (8006ca0 <vTaskMissedYield+0x14>)
 8006c92:	2201      	movs	r2, #1
 8006c94:	601a      	str	r2, [r3, #0]
}
 8006c96:	bf00      	nop
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	20000bd8 	.word	0x20000bd8

08006ca4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006cac:	f000 f854 	bl	8006d58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006cb0:	4b07      	ldr	r3, [pc, #28]	; (8006cd0 <prvIdleTask+0x2c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d907      	bls.n	8006cc8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006cb8:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <prvIdleTask+0x30>)
 8006cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006cc8:	f7f9 fc98 	bl	80005fc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006ccc:	e7ee      	b.n	8006cac <prvIdleTask+0x8>
 8006cce:	bf00      	nop
 8006cd0:	200006f4 	.word	0x200006f4
 8006cd4:	e000ed04 	.word	0xe000ed04

08006cd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cde:	2300      	movs	r3, #0
 8006ce0:	607b      	str	r3, [r7, #4]
 8006ce2:	e00c      	b.n	8006cfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4a12      	ldr	r2, [pc, #72]	; (8006d38 <prvInitialiseTaskLists+0x60>)
 8006cf0:	4413      	add	r3, r2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe fc34 	bl	8005560 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	607b      	str	r3, [r7, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b37      	cmp	r3, #55	; 0x37
 8006d02:	d9ef      	bls.n	8006ce4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d04:	480d      	ldr	r0, [pc, #52]	; (8006d3c <prvInitialiseTaskLists+0x64>)
 8006d06:	f7fe fc2b 	bl	8005560 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d0a:	480d      	ldr	r0, [pc, #52]	; (8006d40 <prvInitialiseTaskLists+0x68>)
 8006d0c:	f7fe fc28 	bl	8005560 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d10:	480c      	ldr	r0, [pc, #48]	; (8006d44 <prvInitialiseTaskLists+0x6c>)
 8006d12:	f7fe fc25 	bl	8005560 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d16:	480c      	ldr	r0, [pc, #48]	; (8006d48 <prvInitialiseTaskLists+0x70>)
 8006d18:	f7fe fc22 	bl	8005560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d1c:	480b      	ldr	r0, [pc, #44]	; (8006d4c <prvInitialiseTaskLists+0x74>)
 8006d1e:	f7fe fc1f 	bl	8005560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d22:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <prvInitialiseTaskLists+0x78>)
 8006d24:	4a05      	ldr	r2, [pc, #20]	; (8006d3c <prvInitialiseTaskLists+0x64>)
 8006d26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d28:	4b0a      	ldr	r3, [pc, #40]	; (8006d54 <prvInitialiseTaskLists+0x7c>)
 8006d2a:	4a05      	ldr	r2, [pc, #20]	; (8006d40 <prvInitialiseTaskLists+0x68>)
 8006d2c:	601a      	str	r2, [r3, #0]
}
 8006d2e:	bf00      	nop
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	200006f4 	.word	0x200006f4
 8006d3c:	20000b54 	.word	0x20000b54
 8006d40:	20000b68 	.word	0x20000b68
 8006d44:	20000b84 	.word	0x20000b84
 8006d48:	20000b98 	.word	0x20000b98
 8006d4c:	20000bb0 	.word	0x20000bb0
 8006d50:	20000b7c 	.word	0x20000b7c
 8006d54:	20000b80 	.word	0x20000b80

08006d58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d5e:	e019      	b.n	8006d94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d60:	f000 fdda 	bl	8007918 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006d64:	4b0f      	ldr	r3, [pc, #60]	; (8006da4 <prvCheckTasksWaitingTermination+0x4c>)
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fe fc7b 	bl	800566c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d76:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <prvCheckTasksWaitingTermination+0x50>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	4a0a      	ldr	r2, [pc, #40]	; (8006da8 <prvCheckTasksWaitingTermination+0x50>)
 8006d7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d80:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <prvCheckTasksWaitingTermination+0x54>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	4a09      	ldr	r2, [pc, #36]	; (8006dac <prvCheckTasksWaitingTermination+0x54>)
 8006d88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d8a:	f000 fdf3 	bl	8007974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f80e 	bl	8006db0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d94:	4b05      	ldr	r3, [pc, #20]	; (8006dac <prvCheckTasksWaitingTermination+0x54>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e1      	bne.n	8006d60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20000b98 	.word	0x20000b98
 8006da8:	20000bc4 	.word	0x20000bc4
 8006dac:	20000bac 	.word	0x20000bac

08006db0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d108      	bne.n	8006dd4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 ff62 	bl	8007c90 <vPortFree>
				vPortFree( pxTCB );
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 ff5f 	bl	8007c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006dd2:	e017      	b.n	8006e04 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d103      	bne.n	8006de6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 ff56 	bl	8007c90 <vPortFree>
	}
 8006de4:	e00e      	b.n	8006e04 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d009      	beq.n	8006e04 <prvDeleteTCB+0x54>
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	e7fe      	b.n	8006e02 <prvDeleteTCB+0x52>
	}
 8006e04:	bf00      	nop
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e12:	4b0e      	ldr	r3, [pc, #56]	; (8006e4c <prvResetNextTaskUnblockTime+0x40>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <prvResetNextTaskUnblockTime+0x14>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <prvResetNextTaskUnblockTime+0x16>
 8006e20:	2300      	movs	r3, #0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d004      	beq.n	8006e30 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e26:	4b0a      	ldr	r3, [pc, #40]	; (8006e50 <prvResetNextTaskUnblockTime+0x44>)
 8006e28:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e2e:	e008      	b.n	8006e42 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e30:	4b06      	ldr	r3, [pc, #24]	; (8006e4c <prvResetNextTaskUnblockTime+0x40>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	4a04      	ldr	r2, [pc, #16]	; (8006e50 <prvResetNextTaskUnblockTime+0x44>)
 8006e40:	6013      	str	r3, [r2, #0]
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr
 8006e4c:	20000b7c 	.word	0x20000b7c
 8006e50:	20000be4 	.word	0x20000be4

08006e54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e5a:	4b0b      	ldr	r3, [pc, #44]	; (8006e88 <xTaskGetSchedulerState+0x34>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d102      	bne.n	8006e68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e62:	2301      	movs	r3, #1
 8006e64:	607b      	str	r3, [r7, #4]
 8006e66:	e008      	b.n	8006e7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e68:	4b08      	ldr	r3, [pc, #32]	; (8006e8c <xTaskGetSchedulerState+0x38>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d102      	bne.n	8006e76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e70:	2302      	movs	r3, #2
 8006e72:	607b      	str	r3, [r7, #4]
 8006e74:	e001      	b.n	8006e7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e76:	2300      	movs	r3, #0
 8006e78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e7a:	687b      	ldr	r3, [r7, #4]
	}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bc80      	pop	{r7}
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	20000bd0 	.word	0x20000bd0
 8006e8c:	20000bec 	.word	0x20000bec

08006e90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d054      	beq.n	8006f50 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ea6:	4b2d      	ldr	r3, [pc, #180]	; (8006f5c <xTaskPriorityDisinherit+0xcc>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d009      	beq.n	8006ec4 <xTaskPriorityDisinherit+0x34>
 8006eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	e7fe      	b.n	8006ec2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d109      	bne.n	8006ee0 <xTaskPriorityDisinherit+0x50>
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	60bb      	str	r3, [r7, #8]
 8006ede:	e7fe      	b.n	8006ede <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee4:	1e5a      	subs	r2, r3, #1
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d02c      	beq.n	8006f50 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d128      	bne.n	8006f50 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	3304      	adds	r3, #4
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe fbb2 	bl	800566c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f20:	4b0f      	ldr	r3, [pc, #60]	; (8006f60 <xTaskPriorityDisinherit+0xd0>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d903      	bls.n	8006f30 <xTaskPriorityDisinherit+0xa0>
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	4a0c      	ldr	r2, [pc, #48]	; (8006f60 <xTaskPriorityDisinherit+0xd0>)
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4a09      	ldr	r2, [pc, #36]	; (8006f64 <xTaskPriorityDisinherit+0xd4>)
 8006f3e:	441a      	add	r2, r3
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	3304      	adds	r3, #4
 8006f44:	4619      	mov	r1, r3
 8006f46:	4610      	mov	r0, r2
 8006f48:	f7fe fb35 	bl	80055b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f50:	697b      	ldr	r3, [r7, #20]
	}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	200006f0 	.word	0x200006f0
 8006f60:	20000bcc 	.word	0x20000bcc
 8006f64:	200006f4 	.word	0x200006f4

08006f68 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006f6e:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <uxTaskResetEventItemValue+0x2c>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f76:	4b07      	ldr	r3, [pc, #28]	; (8006f94 <uxTaskResetEventItemValue+0x2c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <uxTaskResetEventItemValue+0x2c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006f84:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006f86:	687b      	ldr	r3, [r7, #4]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bc80      	pop	{r7}
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	200006f0 	.word	0x200006f0

08006f98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fa2:	4b21      	ldr	r3, [pc, #132]	; (8007028 <prvAddCurrentTaskToDelayedList+0x90>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fa8:	4b20      	ldr	r3, [pc, #128]	; (800702c <prvAddCurrentTaskToDelayedList+0x94>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3304      	adds	r3, #4
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe fb5c 	bl	800566c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fba:	d10a      	bne.n	8006fd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d007      	beq.n	8006fd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fc2:	4b1a      	ldr	r3, [pc, #104]	; (800702c <prvAddCurrentTaskToDelayedList+0x94>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4819      	ldr	r0, [pc, #100]	; (8007030 <prvAddCurrentTaskToDelayedList+0x98>)
 8006fcc:	f7fe faf3 	bl	80055b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fd0:	e026      	b.n	8007020 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fda:	4b14      	ldr	r3, [pc, #80]	; (800702c <prvAddCurrentTaskToDelayedList+0x94>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d209      	bcs.n	8006ffe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fea:	4b12      	ldr	r3, [pc, #72]	; (8007034 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	4b0f      	ldr	r3, [pc, #60]	; (800702c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f7fe fb00 	bl	80055fc <vListInsert>
}
 8006ffc:	e010      	b.n	8007020 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ffe:	4b0e      	ldr	r3, [pc, #56]	; (8007038 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4b0a      	ldr	r3, [pc, #40]	; (800702c <prvAddCurrentTaskToDelayedList+0x94>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3304      	adds	r3, #4
 8007008:	4619      	mov	r1, r3
 800700a:	4610      	mov	r0, r2
 800700c:	f7fe faf6 	bl	80055fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007010:	4b0a      	ldr	r3, [pc, #40]	; (800703c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	429a      	cmp	r2, r3
 8007018:	d202      	bcs.n	8007020 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800701a:	4a08      	ldr	r2, [pc, #32]	; (800703c <prvAddCurrentTaskToDelayedList+0xa4>)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	6013      	str	r3, [r2, #0]
}
 8007020:	bf00      	nop
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20000bc8 	.word	0x20000bc8
 800702c:	200006f0 	.word	0x200006f0
 8007030:	20000bb0 	.word	0x20000bb0
 8007034:	20000b80 	.word	0x20000b80
 8007038:	20000b7c 	.word	0x20000b7c
 800703c:	20000be4 	.word	0x20000be4

08007040 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	; 0x28
 8007044:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007046:	2300      	movs	r3, #0
 8007048:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800704a:	f000 fb17 	bl	800767c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800704e:	4b1c      	ldr	r3, [pc, #112]	; (80070c0 <xTimerCreateTimerTask+0x80>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d021      	beq.n	800709a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800705a:	2300      	movs	r3, #0
 800705c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800705e:	1d3a      	adds	r2, r7, #4
 8007060:	f107 0108 	add.w	r1, r7, #8
 8007064:	f107 030c 	add.w	r3, r7, #12
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe f8af 	bl	80051cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	9202      	str	r2, [sp, #8]
 8007076:	9301      	str	r3, [sp, #4]
 8007078:	2302      	movs	r3, #2
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	2300      	movs	r3, #0
 800707e:	460a      	mov	r2, r1
 8007080:	4910      	ldr	r1, [pc, #64]	; (80070c4 <xTimerCreateTimerTask+0x84>)
 8007082:	4811      	ldr	r0, [pc, #68]	; (80070c8 <xTimerCreateTimerTask+0x88>)
 8007084:	f7ff f82c 	bl	80060e0 <xTaskCreateStatic>
 8007088:	4602      	mov	r2, r0
 800708a:	4b10      	ldr	r3, [pc, #64]	; (80070cc <xTimerCreateTimerTask+0x8c>)
 800708c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800708e:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <xTimerCreateTimerTask+0x8c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007096:	2301      	movs	r3, #1
 8007098:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d109      	bne.n	80070b4 <xTimerCreateTimerTask+0x74>
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	e7fe      	b.n	80070b2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80070b4:	697b      	ldr	r3, [r7, #20]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	20000c20 	.word	0x20000c20
 80070c4:	080081d0 	.word	0x080081d0
 80070c8:	0800728d 	.word	0x0800728d
 80070cc:	20000c24 	.word	0x20000c24

080070d0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
 80070dc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80070de:	2030      	movs	r0, #48	; 0x30
 80070e0:	f000 fd10 	bl	8007b04 <pvPortMalloc>
 80070e4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00d      	beq.n	8007108 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	9301      	str	r3, [sp, #4]
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 f809 	bl	8007112 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007108:	697b      	ldr	r3, [r7, #20]
	}
 800710a:	4618      	mov	r0, r3
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b086      	sub	sp, #24
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	607a      	str	r2, [r7, #4]
 800711e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <prvInitialiseNewTimer+0x28>
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	e7fe      	b.n	8007138 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	2b00      	cmp	r3, #0
 800713e:	d015      	beq.n	800716c <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007140:	f000 fa9c 	bl	800767c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	6a3a      	ldr	r2, [r7, #32]
 8007160:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	3304      	adds	r3, #4
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe fa19 	bl	800559e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800716c:	bf00      	nop
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b08a      	sub	sp, #40	; 0x28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007182:	2300      	movs	r3, #0
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d109      	bne.n	80071a0 <xTimerGenericCommand+0x2c>
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	623b      	str	r3, [r7, #32]
 800719e:	e7fe      	b.n	800719e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071a0:	4b19      	ldr	r3, [pc, #100]	; (8007208 <xTimerGenericCommand+0x94>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d02a      	beq.n	80071fe <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2b05      	cmp	r3, #5
 80071b8:	dc18      	bgt.n	80071ec <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071ba:	f7ff fe4b 	bl	8006e54 <xTaskGetSchedulerState>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d109      	bne.n	80071d8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071c4:	4b10      	ldr	r3, [pc, #64]	; (8007208 <xTimerGenericCommand+0x94>)
 80071c6:	6818      	ldr	r0, [r3, #0]
 80071c8:	f107 0110 	add.w	r1, r7, #16
 80071cc:	2300      	movs	r3, #0
 80071ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d0:	f7fe fbb0 	bl	8005934 <xQueueGenericSend>
 80071d4:	6278      	str	r0, [r7, #36]	; 0x24
 80071d6:	e012      	b.n	80071fe <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071d8:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <xTimerGenericCommand+0x94>)
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	f107 0110 	add.w	r1, r7, #16
 80071e0:	2300      	movs	r3, #0
 80071e2:	2200      	movs	r2, #0
 80071e4:	f7fe fba6 	bl	8005934 <xQueueGenericSend>
 80071e8:	6278      	str	r0, [r7, #36]	; 0x24
 80071ea:	e008      	b.n	80071fe <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <xTimerGenericCommand+0x94>)
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	f107 0110 	add.w	r1, r7, #16
 80071f4:	2300      	movs	r3, #0
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	f7fe fc96 	bl	8005b28 <xQueueGenericSendFromISR>
 80071fc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007200:	4618      	mov	r0, r3
 8007202:	3728      	adds	r7, #40	; 0x28
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20000c20 	.word	0x20000c20

0800720c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af02      	add	r7, sp, #8
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007216:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <prvProcessExpiredTimer+0x7c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	3304      	adds	r3, #4
 8007224:	4618      	mov	r0, r3
 8007226:	f7fe fa21 	bl	800566c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d121      	bne.n	8007276 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	699a      	ldr	r2, [r3, #24]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	18d1      	adds	r1, r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	6978      	ldr	r0, [r7, #20]
 8007240:	f000 f8ca 	bl	80073d8 <prvInsertTimerInActiveList>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d015      	beq.n	8007276 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800724a:	2300      	movs	r3, #0
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	2300      	movs	r3, #0
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	2100      	movs	r1, #0
 8007254:	6978      	ldr	r0, [r7, #20]
 8007256:	f7ff ff8d 	bl	8007174 <xTimerGenericCommand>
 800725a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d109      	bne.n	8007276 <prvProcessExpiredTimer+0x6a>
 8007262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	e7fe      	b.n	8007274 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	6978      	ldr	r0, [r7, #20]
 800727c:	4798      	blx	r3
}
 800727e:	bf00      	nop
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20000c18 	.word	0x20000c18

0800728c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 8007294:	f7f9 f9ce 	bl	8000634 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007298:	f107 0308 	add.w	r3, r7, #8
 800729c:	4618      	mov	r0, r3
 800729e:	f000 f857 	bl	8007350 <prvGetNextExpireTime>
 80072a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4619      	mov	r1, r3
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f803 	bl	80072b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072ae:	f000 f8d5 	bl	800745c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072b2:	e7f1      	b.n	8007298 <prvTimerTask+0xc>

080072b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072be:	f7ff f93b 	bl	8006538 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072c2:	f107 0308 	add.w	r3, r7, #8
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 f866 	bl	8007398 <prvSampleTimeNow>
 80072cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d130      	bne.n	8007336 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10a      	bne.n	80072f0 <prvProcessTimerOrBlockTask+0x3c>
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d806      	bhi.n	80072f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072e2:	f7ff f937 	bl	8006554 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072e6:	68f9      	ldr	r1, [r7, #12]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff ff8f 	bl	800720c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072ee:	e024      	b.n	800733a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d008      	beq.n	8007308 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072f6:	4b13      	ldr	r3, [pc, #76]	; (8007344 <prvProcessTimerOrBlockTask+0x90>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bf0c      	ite	eq
 8007300:	2301      	moveq	r3, #1
 8007302:	2300      	movne	r3, #0
 8007304:	b2db      	uxtb	r3, r3
 8007306:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007308:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <prvProcessTimerOrBlockTask+0x94>)
 800730a:	6818      	ldr	r0, [r3, #0]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	4619      	mov	r1, r3
 8007316:	f7fe feaf 	bl	8006078 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800731a:	f7ff f91b 	bl	8006554 <xTaskResumeAll>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007324:	4b09      	ldr	r3, [pc, #36]	; (800734c <prvProcessTimerOrBlockTask+0x98>)
 8007326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	f3bf 8f6f 	isb	sy
}
 8007334:	e001      	b.n	800733a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007336:	f7ff f90d 	bl	8006554 <xTaskResumeAll>
}
 800733a:	bf00      	nop
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000c1c 	.word	0x20000c1c
 8007348:	20000c20 	.word	0x20000c20
 800734c:	e000ed04 	.word	0xe000ed04

08007350 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007358:	4b0e      	ldr	r3, [pc, #56]	; (8007394 <prvGetNextExpireTime+0x44>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	bf0c      	ite	eq
 8007362:	2301      	moveq	r3, #1
 8007364:	2300      	movne	r3, #0
 8007366:	b2db      	uxtb	r3, r3
 8007368:	461a      	mov	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d105      	bne.n	8007382 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007376:	4b07      	ldr	r3, [pc, #28]	; (8007394 <prvGetNextExpireTime+0x44>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	e001      	b.n	8007386 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007386:	68fb      	ldr	r3, [r7, #12]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	bc80      	pop	{r7}
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20000c18 	.word	0x20000c18

08007398 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073a0:	f7ff f974 	bl	800668c <xTaskGetTickCount>
 80073a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073a6:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <prvSampleTimeNow+0x3c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d205      	bcs.n	80073bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073b0:	f000 f904 	bl	80075bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	601a      	str	r2, [r3, #0]
 80073ba:	e002      	b.n	80073c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073c2:	4a04      	ldr	r2, [pc, #16]	; (80073d4 <prvSampleTimeNow+0x3c>)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073c8:	68fb      	ldr	r3, [r7, #12]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20000c28 	.word	0x20000c28

080073d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073e6:	2300      	movs	r3, #0
 80073e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d812      	bhi.n	8007424 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	1ad2      	subs	r2, r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	429a      	cmp	r2, r3
 800740a:	d302      	bcc.n	8007412 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800740c:	2301      	movs	r3, #1
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	e01b      	b.n	800744a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007412:	4b10      	ldr	r3, [pc, #64]	; (8007454 <prvInsertTimerInActiveList+0x7c>)
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3304      	adds	r3, #4
 800741a:	4619      	mov	r1, r3
 800741c:	4610      	mov	r0, r2
 800741e:	f7fe f8ed 	bl	80055fc <vListInsert>
 8007422:	e012      	b.n	800744a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d206      	bcs.n	800743a <prvInsertTimerInActiveList+0x62>
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d302      	bcc.n	800743a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007434:	2301      	movs	r3, #1
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	e007      	b.n	800744a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800743a:	4b07      	ldr	r3, [pc, #28]	; (8007458 <prvInsertTimerInActiveList+0x80>)
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3304      	adds	r3, #4
 8007442:	4619      	mov	r1, r3
 8007444:	4610      	mov	r0, r2
 8007446:	f7fe f8d9 	bl	80055fc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800744a:	697b      	ldr	r3, [r7, #20]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	20000c1c 	.word	0x20000c1c
 8007458:	20000c18 	.word	0x20000c18

0800745c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08e      	sub	sp, #56	; 0x38
 8007460:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007462:	e099      	b.n	8007598 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	da17      	bge.n	800749a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800746a:	1d3b      	adds	r3, r7, #4
 800746c:	3304      	adds	r3, #4
 800746e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	2b00      	cmp	r3, #0
 8007474:	d109      	bne.n	800748a <prvProcessReceivedCommands+0x2e>
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	e7fe      	b.n	8007488 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007490:	6850      	ldr	r0, [r2, #4]
 8007492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007494:	6892      	ldr	r2, [r2, #8]
 8007496:	4611      	mov	r1, r2
 8007498:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	db7a      	blt.n	8007596 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	3304      	adds	r3, #4
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe f8db 	bl	800566c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074b6:	463b      	mov	r3, r7
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff ff6d 	bl	8007398 <prvSampleTimeNow>
 80074be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b09      	cmp	r3, #9
 80074c4:	d868      	bhi.n	8007598 <prvProcessReceivedCommands+0x13c>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <prvProcessReceivedCommands+0x70>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	080074f5 	.word	0x080074f5
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	080074f5 	.word	0x080074f5
 80074d8:	08007599 	.word	0x08007599
 80074dc:	0800754f 	.word	0x0800754f
 80074e0:	08007585 	.word	0x08007585
 80074e4:	080074f5 	.word	0x080074f5
 80074e8:	080074f5 	.word	0x080074f5
 80074ec:	08007599 	.word	0x08007599
 80074f0:	0800754f 	.word	0x0800754f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	18d1      	adds	r1, r2, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007502:	f7ff ff69 	bl	80073d8 <prvInsertTimerInActiveList>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d045      	beq.n	8007598 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007512:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d13d      	bne.n	8007598 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	441a      	add	r2, r3
 8007524:	2300      	movs	r3, #0
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	2300      	movs	r3, #0
 800752a:	2100      	movs	r1, #0
 800752c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800752e:	f7ff fe21 	bl	8007174 <xTimerGenericCommand>
 8007532:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d12e      	bne.n	8007598 <prvProcessReceivedCommands+0x13c>
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	e7fe      	b.n	800754c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d109      	bne.n	8007570 <prvProcessReceivedCommands+0x114>
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	e7fe      	b.n	800756e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	18d1      	adds	r1, r2, r3
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800757e:	f7ff ff2b 	bl	80073d8 <prvInsertTimerInActiveList>
					break;
 8007582:	e009      	b.n	8007598 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800758e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007590:	f000 fb7e 	bl	8007c90 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007594:	e000      	b.n	8007598 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007596:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007598:	4b07      	ldr	r3, [pc, #28]	; (80075b8 <prvProcessReceivedCommands+0x15c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	1d39      	adds	r1, r7, #4
 800759e:	2200      	movs	r2, #0
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe fb55 	bl	8005c50 <xQueueReceive>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f47f af5b 	bne.w	8007464 <prvProcessReceivedCommands+0x8>
	}
}
 80075ae:	bf00      	nop
 80075b0:	3730      	adds	r7, #48	; 0x30
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20000c20 	.word	0x20000c20

080075bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075c2:	e044      	b.n	800764e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075c4:	4b2b      	ldr	r3, [pc, #172]	; (8007674 <prvSwitchTimerLists+0xb8>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075ce:	4b29      	ldr	r3, [pc, #164]	; (8007674 <prvSwitchTimerLists+0xb8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3304      	adds	r3, #4
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fe f845 	bl	800566c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d12d      	bne.n	800764e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	4413      	add	r3, r2
 80075fa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	429a      	cmp	r2, r3
 8007602:	d90e      	bls.n	8007622 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007610:	4b18      	ldr	r3, [pc, #96]	; (8007674 <prvSwitchTimerLists+0xb8>)
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	3304      	adds	r3, #4
 8007618:	4619      	mov	r1, r3
 800761a:	4610      	mov	r0, r2
 800761c:	f7fd ffee 	bl	80055fc <vListInsert>
 8007620:	e015      	b.n	800764e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007622:	2300      	movs	r3, #0
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	2300      	movs	r3, #0
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	2100      	movs	r1, #0
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f7ff fda1 	bl	8007174 <xTimerGenericCommand>
 8007632:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <prvSwitchTimerLists+0x92>
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	e7fe      	b.n	800764c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800764e:	4b09      	ldr	r3, [pc, #36]	; (8007674 <prvSwitchTimerLists+0xb8>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1b5      	bne.n	80075c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007658:	4b06      	ldr	r3, [pc, #24]	; (8007674 <prvSwitchTimerLists+0xb8>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800765e:	4b06      	ldr	r3, [pc, #24]	; (8007678 <prvSwitchTimerLists+0xbc>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a04      	ldr	r2, [pc, #16]	; (8007674 <prvSwitchTimerLists+0xb8>)
 8007664:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007666:	4a04      	ldr	r2, [pc, #16]	; (8007678 <prvSwitchTimerLists+0xbc>)
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	6013      	str	r3, [r2, #0]
}
 800766c:	bf00      	nop
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20000c18 	.word	0x20000c18
 8007678:	20000c1c 	.word	0x20000c1c

0800767c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007682:	f000 f949 	bl	8007918 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007686:	4b15      	ldr	r3, [pc, #84]	; (80076dc <prvCheckForValidListAndQueue+0x60>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d120      	bne.n	80076d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800768e:	4814      	ldr	r0, [pc, #80]	; (80076e0 <prvCheckForValidListAndQueue+0x64>)
 8007690:	f7fd ff66 	bl	8005560 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007694:	4813      	ldr	r0, [pc, #76]	; (80076e4 <prvCheckForValidListAndQueue+0x68>)
 8007696:	f7fd ff63 	bl	8005560 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800769a:	4b13      	ldr	r3, [pc, #76]	; (80076e8 <prvCheckForValidListAndQueue+0x6c>)
 800769c:	4a10      	ldr	r2, [pc, #64]	; (80076e0 <prvCheckForValidListAndQueue+0x64>)
 800769e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076a0:	4b12      	ldr	r3, [pc, #72]	; (80076ec <prvCheckForValidListAndQueue+0x70>)
 80076a2:	4a10      	ldr	r2, [pc, #64]	; (80076e4 <prvCheckForValidListAndQueue+0x68>)
 80076a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076a6:	2300      	movs	r3, #0
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	4b11      	ldr	r3, [pc, #68]	; (80076f0 <prvCheckForValidListAndQueue+0x74>)
 80076ac:	4a11      	ldr	r2, [pc, #68]	; (80076f4 <prvCheckForValidListAndQueue+0x78>)
 80076ae:	2110      	movs	r1, #16
 80076b0:	200a      	movs	r0, #10
 80076b2:	f7fe f86d 	bl	8005790 <xQueueGenericCreateStatic>
 80076b6:	4602      	mov	r2, r0
 80076b8:	4b08      	ldr	r3, [pc, #32]	; (80076dc <prvCheckForValidListAndQueue+0x60>)
 80076ba:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076bc:	4b07      	ldr	r3, [pc, #28]	; (80076dc <prvCheckForValidListAndQueue+0x60>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076c4:	4b05      	ldr	r3, [pc, #20]	; (80076dc <prvCheckForValidListAndQueue+0x60>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	490b      	ldr	r1, [pc, #44]	; (80076f8 <prvCheckForValidListAndQueue+0x7c>)
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe fcac 	bl	8006028 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076d0:	f000 f950 	bl	8007974 <vPortExitCritical>
}
 80076d4:	bf00      	nop
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20000c20 	.word	0x20000c20
 80076e0:	20000bf0 	.word	0x20000bf0
 80076e4:	20000c04 	.word	0x20000c04
 80076e8:	20000c18 	.word	0x20000c18
 80076ec:	20000c1c 	.word	0x20000c1c
 80076f0:	20000ccc 	.word	0x20000ccc
 80076f4:	20000c2c 	.word	0x20000c2c
 80076f8:	080081d8 	.word	0x080081d8

080076fc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	; 0x28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800770a:	f06f 0301 	mvn.w	r3, #1
 800770e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800771c:	4b06      	ldr	r3, [pc, #24]	; (8007738 <xTimerPendFunctionCallFromISR+0x3c>)
 800771e:	6818      	ldr	r0, [r3, #0]
 8007720:	f107 0114 	add.w	r1, r7, #20
 8007724:	2300      	movs	r3, #0
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	f7fe f9fe 	bl	8005b28 <xQueueGenericSendFromISR>
 800772c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007730:	4618      	mov	r0, r3
 8007732:	3728      	adds	r7, #40	; 0x28
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	20000c20 	.word	0x20000c20

0800773c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3b04      	subs	r3, #4
 800774c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3b04      	subs	r3, #4
 800775a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f023 0201 	bic.w	r2, r3, #1
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3b04      	subs	r3, #4
 800776a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800776c:	4a08      	ldr	r2, [pc, #32]	; (8007790 <pxPortInitialiseStack+0x54>)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3b14      	subs	r3, #20
 8007776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3b20      	subs	r3, #32
 8007782:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007784:	68fb      	ldr	r3, [r7, #12]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	bc80      	pop	{r7}
 800778e:	4770      	bx	lr
 8007790:	08007795 	.word	0x08007795

08007794 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800779a:	2300      	movs	r3, #0
 800779c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800779e:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <prvTaskExitError+0x4c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a6:	d009      	beq.n	80077bc <prvTaskExitError+0x28>
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	e7fe      	b.n	80077ba <prvTaskExitError+0x26>
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077ce:	bf00      	nop
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0fc      	beq.n	80077d0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077d6:	bf00      	nop
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr
 80077e0:	2000000c 	.word	0x2000000c
	...

080077f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077f0:	4b07      	ldr	r3, [pc, #28]	; (8007810 <pxCurrentTCBConst2>)
 80077f2:	6819      	ldr	r1, [r3, #0]
 80077f4:	6808      	ldr	r0, [r1, #0]
 80077f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80077fa:	f380 8809 	msr	PSP, r0
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f04f 0000 	mov.w	r0, #0
 8007806:	f380 8811 	msr	BASEPRI, r0
 800780a:	f04e 0e0d 	orr.w	lr, lr, #13
 800780e:	4770      	bx	lr

08007810 <pxCurrentTCBConst2>:
 8007810:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop

08007818 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007818:	4806      	ldr	r0, [pc, #24]	; (8007834 <prvPortStartFirstTask+0x1c>)
 800781a:	6800      	ldr	r0, [r0, #0]
 800781c:	6800      	ldr	r0, [r0, #0]
 800781e:	f380 8808 	msr	MSP, r0
 8007822:	b662      	cpsie	i
 8007824:	b661      	cpsie	f
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	df00      	svc	0
 8007830:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007832:	bf00      	nop
 8007834:	e000ed08 	.word	0xe000ed08

08007838 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800783e:	4b31      	ldr	r3, [pc, #196]	; (8007904 <xPortStartScheduler+0xcc>)
 8007840:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	22ff      	movs	r2, #255	; 0xff
 800784e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	b2db      	uxtb	r3, r3
 8007856:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007858:	78fb      	ldrb	r3, [r7, #3]
 800785a:	b2db      	uxtb	r3, r3
 800785c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007860:	b2da      	uxtb	r2, r3
 8007862:	4b29      	ldr	r3, [pc, #164]	; (8007908 <xPortStartScheduler+0xd0>)
 8007864:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007866:	4b29      	ldr	r3, [pc, #164]	; (800790c <xPortStartScheduler+0xd4>)
 8007868:	2207      	movs	r2, #7
 800786a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800786c:	e009      	b.n	8007882 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800786e:	4b27      	ldr	r3, [pc, #156]	; (800790c <xPortStartScheduler+0xd4>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3b01      	subs	r3, #1
 8007874:	4a25      	ldr	r2, [pc, #148]	; (800790c <xPortStartScheduler+0xd4>)
 8007876:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007878:	78fb      	ldrb	r3, [r7, #3]
 800787a:	b2db      	uxtb	r3, r3
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	b2db      	uxtb	r3, r3
 8007880:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788a:	2b80      	cmp	r3, #128	; 0x80
 800788c:	d0ef      	beq.n	800786e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800788e:	4b1f      	ldr	r3, [pc, #124]	; (800790c <xPortStartScheduler+0xd4>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1c3 0307 	rsb	r3, r3, #7
 8007896:	2b04      	cmp	r3, #4
 8007898:	d009      	beq.n	80078ae <xPortStartScheduler+0x76>
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	60bb      	str	r3, [r7, #8]
 80078ac:	e7fe      	b.n	80078ac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078ae:	4b17      	ldr	r3, [pc, #92]	; (800790c <xPortStartScheduler+0xd4>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	021b      	lsls	r3, r3, #8
 80078b4:	4a15      	ldr	r2, [pc, #84]	; (800790c <xPortStartScheduler+0xd4>)
 80078b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078b8:	4b14      	ldr	r3, [pc, #80]	; (800790c <xPortStartScheduler+0xd4>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078c0:	4a12      	ldr	r2, [pc, #72]	; (800790c <xPortStartScheduler+0xd4>)
 80078c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078cc:	4b10      	ldr	r3, [pc, #64]	; (8007910 <xPortStartScheduler+0xd8>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a0f      	ldr	r2, [pc, #60]	; (8007910 <xPortStartScheduler+0xd8>)
 80078d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078d8:	4b0d      	ldr	r3, [pc, #52]	; (8007910 <xPortStartScheduler+0xd8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a0c      	ldr	r2, [pc, #48]	; (8007910 <xPortStartScheduler+0xd8>)
 80078de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078e4:	f000 f8b0 	bl	8007a48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078e8:	4b0a      	ldr	r3, [pc, #40]	; (8007914 <xPortStartScheduler+0xdc>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078ee:	f7ff ff93 	bl	8007818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078f2:	f7fe ff9f 	bl	8006834 <vTaskSwitchContext>
	prvTaskExitError();
 80078f6:	f7ff ff4d 	bl	8007794 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	e000e400 	.word	0xe000e400
 8007908:	20000d1c 	.word	0x20000d1c
 800790c:	20000d20 	.word	0x20000d20
 8007910:	e000ed20 	.word	0xe000ed20
 8007914:	2000000c 	.word	0x2000000c

08007918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007930:	4b0e      	ldr	r3, [pc, #56]	; (800796c <vPortEnterCritical+0x54>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3301      	adds	r3, #1
 8007936:	4a0d      	ldr	r2, [pc, #52]	; (800796c <vPortEnterCritical+0x54>)
 8007938:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800793a:	4b0c      	ldr	r3, [pc, #48]	; (800796c <vPortEnterCritical+0x54>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d10e      	bne.n	8007960 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007942:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <vPortEnterCritical+0x58>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d009      	beq.n	8007960 <vPortEnterCritical+0x48>
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	603b      	str	r3, [r7, #0]
 800795e:	e7fe      	b.n	800795e <vPortEnterCritical+0x46>
	}
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	2000000c 	.word	0x2000000c
 8007970:	e000ed04 	.word	0xe000ed04

08007974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800797a:	4b10      	ldr	r3, [pc, #64]	; (80079bc <vPortExitCritical+0x48>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d109      	bne.n	8007996 <vPortExitCritical+0x22>
 8007982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	607b      	str	r3, [r7, #4]
 8007994:	e7fe      	b.n	8007994 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007996:	4b09      	ldr	r3, [pc, #36]	; (80079bc <vPortExitCritical+0x48>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3b01      	subs	r3, #1
 800799c:	4a07      	ldr	r2, [pc, #28]	; (80079bc <vPortExitCritical+0x48>)
 800799e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079a0:	4b06      	ldr	r3, [pc, #24]	; (80079bc <vPortExitCritical+0x48>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d104      	bne.n	80079b2 <vPortExitCritical+0x3e>
 80079a8:	2300      	movs	r3, #0
 80079aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr
 80079bc:	2000000c 	.word	0x2000000c

080079c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079c0:	f3ef 8009 	mrs	r0, PSP
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	4b0d      	ldr	r3, [pc, #52]	; (8007a00 <pxCurrentTCBConst>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80079d0:	6010      	str	r0, [r2, #0]
 80079d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80079d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079da:	f380 8811 	msr	BASEPRI, r0
 80079de:	f7fe ff29 	bl	8006834 <vTaskSwitchContext>
 80079e2:	f04f 0000 	mov.w	r0, #0
 80079e6:	f380 8811 	msr	BASEPRI, r0
 80079ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80079ee:	6819      	ldr	r1, [r3, #0]
 80079f0:	6808      	ldr	r0, [r1, #0]
 80079f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80079f6:	f380 8809 	msr	PSP, r0
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	4770      	bx	lr

08007a00 <pxCurrentTCBConst>:
 8007a00:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop

08007a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a20:	f7fe fe42 	bl	80066a8 <xTaskIncrementTick>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a2a:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <SysTick_Handler+0x3c>)
 8007a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	2300      	movs	r3, #0
 8007a34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	e000ed04 	.word	0xe000ed04

08007a48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a4c:	4b0a      	ldr	r3, [pc, #40]	; (8007a78 <vPortSetupTimerInterrupt+0x30>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a52:	4b0a      	ldr	r3, [pc, #40]	; (8007a7c <vPortSetupTimerInterrupt+0x34>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a58:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <vPortSetupTimerInterrupt+0x38>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a09      	ldr	r2, [pc, #36]	; (8007a84 <vPortSetupTimerInterrupt+0x3c>)
 8007a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a62:	099b      	lsrs	r3, r3, #6
 8007a64:	4a08      	ldr	r2, [pc, #32]	; (8007a88 <vPortSetupTimerInterrupt+0x40>)
 8007a66:	3b01      	subs	r3, #1
 8007a68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a6a:	4b03      	ldr	r3, [pc, #12]	; (8007a78 <vPortSetupTimerInterrupt+0x30>)
 8007a6c:	2207      	movs	r2, #7
 8007a6e:	601a      	str	r2, [r3, #0]
}
 8007a70:	bf00      	nop
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bc80      	pop	{r7}
 8007a76:	4770      	bx	lr
 8007a78:	e000e010 	.word	0xe000e010
 8007a7c:	e000e018 	.word	0xe000e018
 8007a80:	20000000 	.word	0x20000000
 8007a84:	10624dd3 	.word	0x10624dd3
 8007a88:	e000e014 	.word	0xe000e014

08007a8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a92:	f3ef 8305 	mrs	r3, IPSR
 8007a96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b0f      	cmp	r3, #15
 8007a9c:	d913      	bls.n	8007ac6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a9e:	4a15      	ldr	r2, [pc, #84]	; (8007af4 <vPortValidateInterruptPriority+0x68>)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007aa8:	4b13      	ldr	r3, [pc, #76]	; (8007af8 <vPortValidateInterruptPriority+0x6c>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	7afa      	ldrb	r2, [r7, #11]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d209      	bcs.n	8007ac6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	607b      	str	r3, [r7, #4]
 8007ac4:	e7fe      	b.n	8007ac4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ac6:	4b0d      	ldr	r3, [pc, #52]	; (8007afc <vPortValidateInterruptPriority+0x70>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ace:	4b0c      	ldr	r3, [pc, #48]	; (8007b00 <vPortValidateInterruptPriority+0x74>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d909      	bls.n	8007aea <vPortValidateInterruptPriority+0x5e>
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	e7fe      	b.n	8007ae8 <vPortValidateInterruptPriority+0x5c>
	}
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bc80      	pop	{r7}
 8007af2:	4770      	bx	lr
 8007af4:	e000e3f0 	.word	0xe000e3f0
 8007af8:	20000d1c 	.word	0x20000d1c
 8007afc:	e000ed0c 	.word	0xe000ed0c
 8007b00:	20000d20 	.word	0x20000d20

08007b04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08a      	sub	sp, #40	; 0x28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b10:	f7fe fd12 	bl	8006538 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b14:	4b59      	ldr	r3, [pc, #356]	; (8007c7c <pvPortMalloc+0x178>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b1c:	f000 f910 	bl	8007d40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b20:	4b57      	ldr	r3, [pc, #348]	; (8007c80 <pvPortMalloc+0x17c>)
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4013      	ands	r3, r2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f040 808c 	bne.w	8007c46 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d01c      	beq.n	8007b6e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007b34:	2208      	movs	r2, #8
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4413      	add	r3, r2
 8007b3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d013      	beq.n	8007b6e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f023 0307 	bic.w	r3, r3, #7
 8007b4c:	3308      	adds	r3, #8
 8007b4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d009      	beq.n	8007b6e <pvPortMalloc+0x6a>
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	617b      	str	r3, [r7, #20]
 8007b6c:	e7fe      	b.n	8007b6c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d068      	beq.n	8007c46 <pvPortMalloc+0x142>
 8007b74:	4b43      	ldr	r3, [pc, #268]	; (8007c84 <pvPortMalloc+0x180>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d863      	bhi.n	8007c46 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b7e:	4b42      	ldr	r3, [pc, #264]	; (8007c88 <pvPortMalloc+0x184>)
 8007b80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b82:	4b41      	ldr	r3, [pc, #260]	; (8007c88 <pvPortMalloc+0x184>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b88:	e004      	b.n	8007b94 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d903      	bls.n	8007ba6 <pvPortMalloc+0xa2>
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1f1      	bne.n	8007b8a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ba6:	4b35      	ldr	r3, [pc, #212]	; (8007c7c <pvPortMalloc+0x178>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d04a      	beq.n	8007c46 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2208      	movs	r2, #8
 8007bb6:	4413      	add	r3, r2
 8007bb8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	1ad2      	subs	r2, r2, r3
 8007bca:	2308      	movs	r3, #8
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d91e      	bls.n	8007c10 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	f003 0307 	and.w	r3, r3, #7
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d009      	beq.n	8007bf8 <pvPortMalloc+0xf4>
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	e7fe      	b.n	8007bf6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	1ad2      	subs	r2, r2, r3
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c0a:	69b8      	ldr	r0, [r7, #24]
 8007c0c:	f000 f8fa 	bl	8007e04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c10:	4b1c      	ldr	r3, [pc, #112]	; (8007c84 <pvPortMalloc+0x180>)
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	4a1a      	ldr	r2, [pc, #104]	; (8007c84 <pvPortMalloc+0x180>)
 8007c1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c1e:	4b19      	ldr	r3, [pc, #100]	; (8007c84 <pvPortMalloc+0x180>)
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b1a      	ldr	r3, [pc, #104]	; (8007c8c <pvPortMalloc+0x188>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d203      	bcs.n	8007c32 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c2a:	4b16      	ldr	r3, [pc, #88]	; (8007c84 <pvPortMalloc+0x180>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a17      	ldr	r2, [pc, #92]	; (8007c8c <pvPortMalloc+0x188>)
 8007c30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	4b12      	ldr	r3, [pc, #72]	; (8007c80 <pvPortMalloc+0x17c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c46:	f7fe fc85 	bl	8006554 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8007c50:	f7f8 fcea 	bl	8000628 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d009      	beq.n	8007c72 <pvPortMalloc+0x16e>
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	e7fe      	b.n	8007c70 <pvPortMalloc+0x16c>
	return pvReturn;
 8007c72:	69fb      	ldr	r3, [r7, #28]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3728      	adds	r7, #40	; 0x28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	2000352c 	.word	0x2000352c
 8007c80:	20003538 	.word	0x20003538
 8007c84:	20003530 	.word	0x20003530
 8007c88:	20003524 	.word	0x20003524
 8007c8c:	20003534 	.word	0x20003534

08007c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d046      	beq.n	8007d30 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	425b      	negs	r3, r3
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4413      	add	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	4b20      	ldr	r3, [pc, #128]	; (8007d38 <vPortFree+0xa8>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4013      	ands	r3, r2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d109      	bne.n	8007cd2 <vPortFree+0x42>
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	e7fe      	b.n	8007cd0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d009      	beq.n	8007cee <vPortFree+0x5e>
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	60bb      	str	r3, [r7, #8]
 8007cec:	e7fe      	b.n	8007cec <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	4b11      	ldr	r3, [pc, #68]	; (8007d38 <vPortFree+0xa8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d019      	beq.n	8007d30 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d115      	bne.n	8007d30 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	4b0b      	ldr	r3, [pc, #44]	; (8007d38 <vPortFree+0xa8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	43db      	mvns	r3, r3
 8007d0e:	401a      	ands	r2, r3
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d14:	f7fe fc10 	bl	8006538 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	4b07      	ldr	r3, [pc, #28]	; (8007d3c <vPortFree+0xac>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4413      	add	r3, r2
 8007d22:	4a06      	ldr	r2, [pc, #24]	; (8007d3c <vPortFree+0xac>)
 8007d24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d26:	6938      	ldr	r0, [r7, #16]
 8007d28:	f000 f86c 	bl	8007e04 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d2c:	f7fe fc12 	bl	8006554 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d30:	bf00      	nop
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	20003538 	.word	0x20003538
 8007d3c:	20003530 	.word	0x20003530

08007d40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007d4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d4c:	4b27      	ldr	r3, [pc, #156]	; (8007dec <prvHeapInit+0xac>)
 8007d4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00c      	beq.n	8007d74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3307      	adds	r3, #7
 8007d5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0307 	bic.w	r3, r3, #7
 8007d66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	4a1f      	ldr	r2, [pc, #124]	; (8007dec <prvHeapInit+0xac>)
 8007d70:	4413      	add	r3, r2
 8007d72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d78:	4a1d      	ldr	r2, [pc, #116]	; (8007df0 <prvHeapInit+0xb0>)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d7e:	4b1c      	ldr	r3, [pc, #112]	; (8007df0 <prvHeapInit+0xb0>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	4413      	add	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0307 	bic.w	r3, r3, #7
 8007d9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <prvHeapInit+0xb4>)
 8007da0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007da2:	4b14      	ldr	r3, [pc, #80]	; (8007df4 <prvHeapInit+0xb4>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2200      	movs	r2, #0
 8007da8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007daa:	4b12      	ldr	r3, [pc, #72]	; (8007df4 <prvHeapInit+0xb4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	1ad2      	subs	r2, r2, r3
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007dc0:	4b0c      	ldr	r3, [pc, #48]	; (8007df4 <prvHeapInit+0xb4>)
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	4a0a      	ldr	r2, [pc, #40]	; (8007df8 <prvHeapInit+0xb8>)
 8007dce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	4a09      	ldr	r2, [pc, #36]	; (8007dfc <prvHeapInit+0xbc>)
 8007dd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007dd8:	4b09      	ldr	r3, [pc, #36]	; (8007e00 <prvHeapInit+0xc0>)
 8007dda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007dde:	601a      	str	r2, [r3, #0]
}
 8007de0:	bf00      	nop
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bc80      	pop	{r7}
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	20000d24 	.word	0x20000d24
 8007df0:	20003524 	.word	0x20003524
 8007df4:	2000352c 	.word	0x2000352c
 8007df8:	20003534 	.word	0x20003534
 8007dfc:	20003530 	.word	0x20003530
 8007e00:	20003538 	.word	0x20003538

08007e04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e0c:	4b27      	ldr	r3, [pc, #156]	; (8007eac <prvInsertBlockIntoFreeList+0xa8>)
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	e002      	b.n	8007e18 <prvInsertBlockIntoFreeList+0x14>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d8f7      	bhi.n	8007e12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d108      	bne.n	8007e46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	441a      	add	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	441a      	add	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d118      	bne.n	8007e8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	4b14      	ldr	r3, [pc, #80]	; (8007eb0 <prvInsertBlockIntoFreeList+0xac>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d00d      	beq.n	8007e82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	441a      	add	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	e008      	b.n	8007e94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e82:	4b0b      	ldr	r3, [pc, #44]	; (8007eb0 <prvInsertBlockIntoFreeList+0xac>)
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	e003      	b.n	8007e94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d002      	beq.n	8007ea2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ea2:	bf00      	nop
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bc80      	pop	{r7}
 8007eaa:	4770      	bx	lr
 8007eac:	20003524 	.word	0x20003524
 8007eb0:	2000352c 	.word	0x2000352c

08007eb4 <__libc_init_array>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	2500      	movs	r5, #0
 8007eb8:	4e0c      	ldr	r6, [pc, #48]	; (8007eec <__libc_init_array+0x38>)
 8007eba:	4c0d      	ldr	r4, [pc, #52]	; (8007ef0 <__libc_init_array+0x3c>)
 8007ebc:	1ba4      	subs	r4, r4, r6
 8007ebe:	10a4      	asrs	r4, r4, #2
 8007ec0:	42a5      	cmp	r5, r4
 8007ec2:	d109      	bne.n	8007ed8 <__libc_init_array+0x24>
 8007ec4:	f000 f82e 	bl	8007f24 <_init>
 8007ec8:	2500      	movs	r5, #0
 8007eca:	4e0a      	ldr	r6, [pc, #40]	; (8007ef4 <__libc_init_array+0x40>)
 8007ecc:	4c0a      	ldr	r4, [pc, #40]	; (8007ef8 <__libc_init_array+0x44>)
 8007ece:	1ba4      	subs	r4, r4, r6
 8007ed0:	10a4      	asrs	r4, r4, #2
 8007ed2:	42a5      	cmp	r5, r4
 8007ed4:	d105      	bne.n	8007ee2 <__libc_init_array+0x2e>
 8007ed6:	bd70      	pop	{r4, r5, r6, pc}
 8007ed8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007edc:	4798      	blx	r3
 8007ede:	3501      	adds	r5, #1
 8007ee0:	e7ee      	b.n	8007ec0 <__libc_init_array+0xc>
 8007ee2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ee6:	4798      	blx	r3
 8007ee8:	3501      	adds	r5, #1
 8007eea:	e7f2      	b.n	8007ed2 <__libc_init_array+0x1e>
 8007eec:	080082cc 	.word	0x080082cc
 8007ef0:	080082cc 	.word	0x080082cc
 8007ef4:	080082cc 	.word	0x080082cc
 8007ef8:	080082d0 	.word	0x080082d0

08007efc <memcpy>:
 8007efc:	b510      	push	{r4, lr}
 8007efe:	1e43      	subs	r3, r0, #1
 8007f00:	440a      	add	r2, r1
 8007f02:	4291      	cmp	r1, r2
 8007f04:	d100      	bne.n	8007f08 <memcpy+0xc>
 8007f06:	bd10      	pop	{r4, pc}
 8007f08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f10:	e7f7      	b.n	8007f02 <memcpy+0x6>

08007f12 <memset>:
 8007f12:	4603      	mov	r3, r0
 8007f14:	4402      	add	r2, r0
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d100      	bne.n	8007f1c <memset+0xa>
 8007f1a:	4770      	bx	lr
 8007f1c:	f803 1b01 	strb.w	r1, [r3], #1
 8007f20:	e7f9      	b.n	8007f16 <memset+0x4>
	...

08007f24 <_init>:
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	bf00      	nop
 8007f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2a:	bc08      	pop	{r3}
 8007f2c:	469e      	mov	lr, r3
 8007f2e:	4770      	bx	lr

08007f30 <_fini>:
 8007f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f32:	bf00      	nop
 8007f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f36:	bc08      	pop	{r3}
 8007f38:	469e      	mov	lr, r3
 8007f3a:	4770      	bx	lr
