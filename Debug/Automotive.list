
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009504  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08009644  08009644  00019644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d4  080099d4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080099d4  080099d4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099d4  080099d4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099d4  080099d4  000199d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099d8  080099d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080099dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000379c  20000010  080099ec  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200037ac  080099ec  000237ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028a75  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f79  00000000  00000000  00048aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019a0  00000000  00000000  0004da28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001740  00000000  00000000  0004f3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e31a  00000000  00000000  00050b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cc96  00000000  00000000  0006ee22  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aa797  00000000  00000000  0008bab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013624f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066a0  00000000  00000000  001362cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	0800962c 	.word	0x0800962c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	0800962c 	.word	0x0800962c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <h_bridge_set_left_duty>:
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

	return true;
}

void h_bridge_set_left_duty(uint8_t percent) {
 8000190:	b480      	push	{r7}
 8000192:	b085      	sub	sp, #20
 8000194:	af00      	add	r7, sp, #0
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
	if (percent > 100)
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	2b64      	cmp	r3, #100	; 0x64
 800019e:	d901      	bls.n	80001a4 <h_bridge_set_left_duty+0x14>
		percent = 100;
 80001a0:	2364      	movs	r3, #100	; 0x64
 80001a2:	71fb      	strb	r3, [r7, #7]

	if (percent < 1)
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d101      	bne.n	80001ae <h_bridge_set_left_duty+0x1e>
		percent = 0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	71fb      	strb	r3, [r7, #7]

	uint32_t value = percent * htim2.Init.Period / 100;
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	4a08      	ldr	r2, [pc, #32]	; (80001d4 <h_bridge_set_left_duty+0x44>)
 80001b2:	68d2      	ldr	r2, [r2, #12]
 80001b4:	fb02 f303 	mul.w	r3, r2, r3
 80001b8:	4a07      	ldr	r2, [pc, #28]	; (80001d8 <h_bridge_set_left_duty+0x48>)
 80001ba:	fba2 2303 	umull	r2, r3, r2, r3
 80001be:	095b      	lsrs	r3, r3, #5
 80001c0:	60fb      	str	r3, [r7, #12]
//	htim2.Instance->CCR1 = value;
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <h_bridge_set_left_duty+0x44>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	68fa      	ldr	r2, [r7, #12]
 80001c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80001ca:	bf00      	nop
 80001cc:	3714      	adds	r7, #20
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	200036ec 	.word	0x200036ec
 80001d8:	51eb851f 	.word	0x51eb851f

080001dc <h_bridge_set_right_duty>:

void h_bridge_set_right_duty(uint8_t percent) {
 80001dc:	b480      	push	{r7}
 80001de:	b085      	sub	sp, #20
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
	if (percent > 100)
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b64      	cmp	r3, #100	; 0x64
 80001ea:	d901      	bls.n	80001f0 <h_bridge_set_right_duty+0x14>
		percent = 100;
 80001ec:	2364      	movs	r3, #100	; 0x64
 80001ee:	71fb      	strb	r3, [r7, #7]

	if (percent < 1)
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d101      	bne.n	80001fa <h_bridge_set_right_duty+0x1e>
		percent = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	71fb      	strb	r3, [r7, #7]

	uint32_t value = percent * htim3.Init.Period / 100;
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	4a08      	ldr	r2, [pc, #32]	; (8000220 <h_bridge_set_right_duty+0x44>)
 80001fe:	68d2      	ldr	r2, [r2, #12]
 8000200:	fb02 f303 	mul.w	r3, r2, r3
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <h_bridge_set_right_duty+0x48>)
 8000206:	fba2 2303 	umull	r2, r3, r2, r3
 800020a:	095b      	lsrs	r3, r3, #5
 800020c:	60fb      	str	r3, [r7, #12]
//	htim3.Instance->CCR3 = value;
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 800020e:	4b04      	ldr	r3, [pc, #16]	; (8000220 <h_bridge_set_right_duty+0x44>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000216:	bf00      	nop
 8000218:	3714      	adds	r7, #20
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	20003674 	.word	0x20003674
 8000224:	51eb851f 	.word	0x51eb851f

08000228 <ble_send_data>:

/*
 * PUBLIC ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

bool ble_send_data(char *pData) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	ble_turn_on_transmittion;
 8000230:	2200      	movs	r2, #0
 8000232:	2110      	movs	r1, #16
 8000234:	4810      	ldr	r0, [pc, #64]	; (8000278 <ble_send_data+0x50>)
 8000236:	f002 fb3f 	bl	80028b8 <HAL_GPIO_WritePin>
	if (HAL_UART_Transmit(&huart3, (uint8_t*) pData, strlen(pData), 100)
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f7ff ffa0 	bl	8000180 <strlen>
 8000240:	4603      	mov	r3, r0
 8000242:	b29a      	uxth	r2, r3
 8000244:	2364      	movs	r3, #100	; 0x64
 8000246:	6879      	ldr	r1, [r7, #4]
 8000248:	480c      	ldr	r0, [pc, #48]	; (800027c <ble_send_data+0x54>)
 800024a:	f005 fd7f 	bl	8005d4c <HAL_UART_Transmit>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d006      	beq.n	8000262 <ble_send_data+0x3a>
			!= HAL_OK) {
		ble_turn_off_transmittion;
 8000254:	2201      	movs	r2, #1
 8000256:	2110      	movs	r1, #16
 8000258:	4807      	ldr	r0, [pc, #28]	; (8000278 <ble_send_data+0x50>)
 800025a:	f002 fb2d 	bl	80028b8 <HAL_GPIO_WritePin>
		return false;
 800025e:	2300      	movs	r3, #0
 8000260:	e005      	b.n	800026e <ble_send_data+0x46>
	}
	ble_turn_off_transmittion;
 8000262:	2201      	movs	r2, #1
 8000264:	2110      	movs	r1, #16
 8000266:	4804      	ldr	r0, [pc, #16]	; (8000278 <ble_send_data+0x50>)
 8000268:	f002 fb26 	bl	80028b8 <HAL_GPIO_WritePin>
	return true;
 800026c:	2301      	movs	r3, #1
}
 800026e:	4618      	mov	r0, r3
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40020800 	.word	0x40020800
 800027c:	20003728 	.word	0x20003728

08000280 <ble_receive_data>:

bool ble_receive_data(char *pData) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	ble_turn_on_transmittion;
 8000288:	2200      	movs	r2, #0
 800028a:	2110      	movs	r1, #16
 800028c:	480e      	ldr	r0, [pc, #56]	; (80002c8 <ble_receive_data+0x48>)
 800028e:	f002 fb13 	bl	80028b8 <HAL_GPIO_WritePin>
	if (HAL_UART_Receive(&huart3, (uint8_t*) pData, MAX_SIZE, 100)
 8000292:	2364      	movs	r3, #100	; 0x64
 8000294:	2220      	movs	r2, #32
 8000296:	6879      	ldr	r1, [r7, #4]
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <ble_receive_data+0x4c>)
 800029a:	f005 fdf0 	bl	8005e7e <HAL_UART_Receive>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d006      	beq.n	80002b2 <ble_receive_data+0x32>
			!= HAL_OK) {
		ble_turn_off_transmittion;
 80002a4:	2201      	movs	r2, #1
 80002a6:	2110      	movs	r1, #16
 80002a8:	4807      	ldr	r0, [pc, #28]	; (80002c8 <ble_receive_data+0x48>)
 80002aa:	f002 fb05 	bl	80028b8 <HAL_GPIO_WritePin>
		return false;
 80002ae:	2300      	movs	r3, #0
 80002b0:	e005      	b.n	80002be <ble_receive_data+0x3e>
	}
	ble_turn_off_transmittion;
 80002b2:	2201      	movs	r2, #1
 80002b4:	2110      	movs	r1, #16
 80002b6:	4804      	ldr	r0, [pc, #16]	; (80002c8 <ble_receive_data+0x48>)
 80002b8:	f002 fafe 	bl	80028b8 <HAL_GPIO_WritePin>
	return true;
 80002bc:	2301      	movs	r3, #1
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40020800 	.word	0x40020800
 80002cc:	20003728 	.word	0x20003728

080002d0 <QMC5883L_Read_Reg>:
	uint16_t buf = ((buff[1] << 8) | buff[0]);	// U2
	buf = (~buf) + 1; // decimal
	return (int) buf / 100; // our value
}

uint8_t QMC5883L_Read_Reg(uint8_t reg) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af04      	add	r7, sp, #16
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[1];
	HAL_I2C_Mem_Read(QMC5883L_I2C_PORT, QMC5883L_ADDRESS, reg, 1, Buffer, 1,
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	b29a      	uxth	r2, r3
 80002de:	230a      	movs	r3, #10
 80002e0:	9302      	str	r3, [sp, #8]
 80002e2:	2301      	movs	r3, #1
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	f107 030c 	add.w	r3, r7, #12
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2301      	movs	r3, #1
 80002ee:	211a      	movs	r1, #26
 80002f0:	4803      	ldr	r0, [pc, #12]	; (8000300 <QMC5883L_Read_Reg+0x30>)
 80002f2:	f002 fdd3 	bl	8002e9c <HAL_I2C_Mem_Read>
			10);
	return Buffer[0];
 80002f6:	7b3b      	ldrb	r3, [r7, #12]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	200035e4 	.word	0x200035e4

08000304 <QMC5883L_Write_Reg>:

void QMC5883L_Write_Reg(uint8_t reg, uint8_t data) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af02      	add	r7, sp, #8
 800030a:	4603      	mov	r3, r0
 800030c:	460a      	mov	r2, r1
 800030e:	71fb      	strb	r3, [r7, #7]
 8000310:	4613      	mov	r3, r2
 8000312:	71bb      	strb	r3, [r7, #6]
	uint8_t Buffer[2] = { reg, data };
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	733b      	strb	r3, [r7, #12]
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(QMC5883L_I2C_PORT, QMC5883L_ADDRESS, Buffer, 2, 10);
 800031c:	f107 020c 	add.w	r2, r7, #12
 8000320:	230a      	movs	r3, #10
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	2302      	movs	r3, #2
 8000326:	211a      	movs	r1, #26
 8000328:	4803      	ldr	r0, [pc, #12]	; (8000338 <QMC5883L_Write_Reg+0x34>)
 800032a:	f002 fcb9 	bl	8002ca0 <HAL_I2C_Master_Transmit>
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	200035e4 	.word	0x200035e4

0800033c <QMC5883L_Read_Temperature>:
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_MSB)) << 8));
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_MSB)) << 8));
}

int16_t QMC5883L_Read_Temperature() {
 800033c:	b598      	push	{r3, r4, r7, lr}
 800033e:	af00      	add	r7, sp, #0
	return (((int16_t) QMC5883L_Read_Reg(QMC5883L_TEMP_READ_LSB))
 8000340:	2007      	movs	r0, #7
 8000342:	f7ff ffc5 	bl	80002d0 <QMC5883L_Read_Reg>
 8000346:	4603      	mov	r3, r0
 8000348:	461c      	mov	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_TEMP_READ_MSB)) << 8))
 800034a:	2008      	movs	r0, #8
 800034c:	f7ff ffc0 	bl	80002d0 <QMC5883L_Read_Reg>
 8000350:	4603      	mov	r3, r0
 8000352:	021b      	lsls	r3, r3, #8
 8000354:	4323      	orrs	r3, r4
			/ 100;
 8000356:	4a04      	ldr	r2, [pc, #16]	; (8000368 <QMC5883L_Read_Temperature+0x2c>)
 8000358:	fb82 1203 	smull	r1, r2, r2, r3
 800035c:	1152      	asrs	r2, r2, #5
 800035e:	17db      	asrs	r3, r3, #31
 8000360:	1ad3      	subs	r3, r2, r3
 8000362:	b21b      	sxth	r3, r3
}
 8000364:	4618      	mov	r0, r3
 8000366:	bd98      	pop	{r3, r4, r7, pc}
 8000368:	51eb851f 	.word	0x51eb851f

0800036c <QMC5883L_Initialize>:

void QMC5883L_Initialize(_qmc5883l_MODE MODE, _qmc5883l_ODR ODR,
		_qmc5883l_RNG RNG, _qmc5883l_OSR OSR) {
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4604      	mov	r4, r0
 8000374:	4608      	mov	r0, r1
 8000376:	4611      	mov	r1, r2
 8000378:	461a      	mov	r2, r3
 800037a:	4623      	mov	r3, r4
 800037c:	71fb      	strb	r3, [r7, #7]
 800037e:	4603      	mov	r3, r0
 8000380:	71bb      	strb	r3, [r7, #6]
 8000382:	460b      	mov	r3, r1
 8000384:	717b      	strb	r3, [r7, #5]
 8000386:	4613      	mov	r3, r2
 8000388:	713b      	strb	r3, [r7, #4]
	QMC5883L_Write_Reg(QMC5883L_CONFIG_3, 0x01);
 800038a:	2101      	movs	r1, #1
 800038c:	200b      	movs	r0, #11
 800038e:	f7ff ffb9 	bl	8000304 <QMC5883L_Write_Reg>
	QMC5883L_Write_Reg(QMC5883L_CONFIG_1, MODE | ODR | RNG | OSR);
 8000392:	79fa      	ldrb	r2, [r7, #7]
 8000394:	79bb      	ldrb	r3, [r7, #6]
 8000396:	4313      	orrs	r3, r2
 8000398:	b2da      	uxtb	r2, r3
 800039a:	797b      	ldrb	r3, [r7, #5]
 800039c:	4313      	orrs	r3, r2
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	793b      	ldrb	r3, [r7, #4]
 80003a2:	4313      	orrs	r3, r2
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	4619      	mov	r1, r3
 80003a8:	2009      	movs	r0, #9
 80003aa:	f7ff ffab 	bl	8000304 <QMC5883L_Write_Reg>
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd90      	pop	{r4, r7, pc}

080003b6 <QMC5883L_InterruptConfig>:

void QMC5883L_Reset() {
	QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x81);
}

void QMC5883L_InterruptConfig(_qmc5883l_INT INT) {
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b082      	sub	sp, #8
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	4603      	mov	r3, r0
 80003be:	71fb      	strb	r3, [r7, #7]
	if (INT == INTERRUPT_ENABLE) {
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d104      	bne.n	80003d0 <QMC5883L_InterruptConfig+0x1a>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x00);
 80003c6:	2100      	movs	r1, #0
 80003c8:	200a      	movs	r0, #10
 80003ca:	f7ff ff9b 	bl	8000304 <QMC5883L_Write_Reg>
	} else {
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
	}
}
 80003ce:	e003      	b.n	80003d8 <QMC5883L_InterruptConfig+0x22>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
 80003d0:	2101      	movs	r1, #1
 80003d2:	200a      	movs	r0, #10
 80003d4:	f7ff ff96 	bl	8000304 <QMC5883L_Write_Reg>
}
 80003d8:	bf00      	nop
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < /*mod_N*/mod_0; i++) {
 80003ee:	2300      	movs	r3, #0
 80003f0:	807b      	strh	r3, [r7, #2]
 80003f2:	bf00      	nop
		}

		modsToInit++;
	}

	if (modsToInit != successCnt) {
 80003f4:	88ba      	ldrh	r2, [r7, #4]
 80003f6:	88fb      	ldrh	r3, [r7, #6]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d000      	beq.n	80003fe <device_init+0x1e>
		// some kind of error
		while (1)
 80003fc:	e7fe      	b.n	80003fc <device_init+0x1c>
			; //TODO: call some error handler
	}

}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 8000408:	b5b0      	push	{r4, r5, r7, lr}
 800040a:	b08a      	sub	sp, #40	; 0x28
 800040c:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 800040e:	2300      	movs	r3, #0
 8000410:	77fb      	strb	r3, [r7, #31]
 8000412:	e02c      	b.n	800046e <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 8000414:	7ffa      	ldrb	r2, [r7, #31]
 8000416:	4613      	mov	r3, r2
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	4413      	add	r3, r2
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	461a      	mov	r2, r3
 8000420:	4b47      	ldr	r3, [pc, #284]	; (8000540 <rt_init+0x138>)
 8000422:	4413      	add	r3, r2
 8000424:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 8000426:	7ffb      	ldrb	r3, [r7, #31]
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	4a46      	ldr	r2, [pc, #280]	; (8000544 <rt_init+0x13c>)
 800042c:	4413      	add	r3, r2
 800042e:	603b      	str	r3, [r7, #0]
		if (def->active) {
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	7c9b      	ldrb	r3, [r3, #18]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d014      	beq.n	8000462 <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6818      	ldr	r0, [r3, #0]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	6859      	ldr	r1, [r3, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	8a1c      	ldrh	r4, [r3, #16]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	689d      	ldr	r5, [r3, #8]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	683a      	ldr	r2, [r7, #0]
 800044e:	9201      	str	r2, [sp, #4]
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	462b      	mov	r3, r5
 8000454:	4622      	mov	r2, r4
 8000456:	f007 f904 	bl	8007662 <xTaskCreate>
 800045a:	4603      	mov	r3, r0
 800045c:	2b01      	cmp	r3, #1
 800045e:	d003      	beq.n	8000468 <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 8000460:	e7fe      	b.n	8000460 <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000468:	7ffb      	ldrb	r3, [r7, #31]
 800046a:	3301      	adds	r3, #1
 800046c:	77fb      	strb	r3, [r7, #31]
 800046e:	7ffb      	ldrb	r3, [r7, #31]
 8000470:	2b04      	cmp	r3, #4
 8000472:	d9cf      	bls.n	8000414 <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 8000474:	2300      	movs	r3, #0
 8000476:	77bb      	strb	r3, [r7, #30]
 8000478:	e01c      	b.n	80004b4 <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 800047a:	7fbb      	ldrb	r3, [r7, #30]
 800047c:	011b      	lsls	r3, r3, #4
 800047e:	4a32      	ldr	r2, [pc, #200]	; (8000548 <rt_init+0x140>)
 8000480:	4413      	add	r3, r2
 8000482:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 8000484:	7fbb      	ldrb	r3, [r7, #30]
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	4a30      	ldr	r2, [pc, #192]	; (800054c <rt_init+0x144>)
 800048a:	4413      	add	r3, r2
 800048c:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	6818      	ldr	r0, [r3, #0]
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	2200      	movs	r2, #0
 8000498:	4619      	mov	r1, r3
 800049a:	f006 fc53 	bl	8006d44 <xQueueGenericCreate>
 800049e:	4602      	mov	r2, r0
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d100      	bne.n	80004ae <rt_init+0xa6>
				== 0) {
			while (1)
 80004ac:	e7fe      	b.n	80004ac <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 80004ae:	7fbb      	ldrb	r3, [r7, #30]
 80004b0:	3301      	adds	r3, #1
 80004b2:	77bb      	strb	r3, [r7, #30]
 80004b4:	7fbb      	ldrb	r3, [r7, #30]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d9df      	bls.n	800047a <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 80004ba:	2300      	movs	r3, #0
 80004bc:	777b      	strb	r3, [r7, #29]
 80004be:	e020      	b.n	8000502 <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 80004c0:	7f7b      	ldrb	r3, [r7, #29]
 80004c2:	011b      	lsls	r3, r3, #4
 80004c4:	4a22      	ldr	r2, [pc, #136]	; (8000550 <rt_init+0x148>)
 80004c6:	4413      	add	r3, r2
 80004c8:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 80004ca:	7f7b      	ldrb	r3, [r7, #29]
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	4a21      	ldr	r2, [pc, #132]	; (8000554 <rt_init+0x14c>)
 80004d0:	4413      	add	r3, r2
 80004d2:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	6818      	ldr	r0, [r3, #0]
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	6859      	ldr	r1, [r3, #4]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	689a      	ldr	r2, [r3, #8]
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2300      	movs	r3, #0
 80004e8:	f008 f966 	bl	80087b8 <xTimerCreate>
 80004ec:	4602      	mov	r2, r0
 80004ee:	693b      	ldr	r3, [r7, #16]
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d100      	bne.n	80004fc <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 80004fa:	e7fe      	b.n	80004fa <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 80004fc:	7f7b      	ldrb	r3, [r7, #29]
 80004fe:	3301      	adds	r3, #1
 8000500:	777b      	strb	r3, [r7, #29]
 8000502:	7f7b      	ldrb	r3, [r7, #29]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d9db      	bls.n	80004c0 <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000508:	2300      	movs	r3, #0
 800050a:	773b      	strb	r3, [r7, #28]
 800050c:	e011      	b.n	8000532 <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 800050e:	7f3b      	ldrb	r3, [r7, #28]
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	4a11      	ldr	r2, [pc, #68]	; (8000558 <rt_init+0x150>)
 8000514:	4413      	add	r3, r2
 8000516:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 8000518:	f006 f8da 	bl	80066d0 <xEventGroupCreate>
 800051c:	4602      	mov	r2, r0
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	69bb      	ldr	r3, [r7, #24]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d100      	bne.n	800052c <rt_init+0x124>
			while (1)
 800052a:	e7fe      	b.n	800052a <rt_init+0x122>
			evgroup++) {
 800052c:	7f3b      	ldrb	r3, [r7, #28]
 800052e:	3301      	adds	r3, #1
 8000530:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000532:	7f3b      	ldrb	r3, [r7, #28]
 8000534:	2b02      	cmp	r3, #2
 8000536:	d9ea      	bls.n	800050e <rt_init+0x106>
				;
		}
	}

}
 8000538:	bf00      	nop
 800053a:	3720      	adds	r7, #32
 800053c:	46bd      	mov	sp, r7
 800053e:	bdb0      	pop	{r4, r5, r7, pc}
 8000540:	080098e8 	.word	0x080098e8
 8000544:	2000355c 	.word	0x2000355c
 8000548:	0800994c 	.word	0x0800994c
 800054c:	20003584 	.word	0x20003584
 8000550:	0800996c 	.word	0x0800996c
 8000554:	20003570 	.word	0x20003570
 8000558:	20003578 	.word	0x20003578

0800055c <rt_evbitwait_any>:

uint32_t rt_evbitwait_any(rt_evgroup_t Ev) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af02      	add	r7, sp, #8
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	4a09      	ldr	r2, [pc, #36]	; (8000590 <rt_evbitwait_any+0x34>)
 800056a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056e:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdTRUE, pdFALSE, portMAX_DELAY);
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	2201      	movs	r2, #1
 800057a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800057e:	68f8      	ldr	r0, [r7, #12]
 8000580:	f006 f8c0 	bl	8006704 <xEventGroupWaitBits>
 8000584:	4603      	mov	r3, r0
}
 8000586:	4618      	mov	r0, r3
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20003578 	.word	0x20003578

08000594 <rt_evbit_set>:

void rt_evbit_set(rt_evgroup_t Ev, uint32_t bit) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	6039      	str	r1, [r7, #0]
 800059e:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 80005a0:	2201      	movs	r2, #1
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <rt_evbit_set+0x30>)
 80005ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b2:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBits(Evh, msk);
 80005b4:	68f9      	ldr	r1, [r7, #12]
 80005b6:	68b8      	ldr	r0, [r7, #8]
 80005b8:	f006 f96e 	bl	8006898 <xEventGroupSetBits>
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20003578 	.word	0x20003578

080005c8 <rt_evbit_set_from_ISR>:

void rt_evbit_set_from_ISR(rt_evgroup_t Ev, uint32_t bit) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 80005d4:	2201      	movs	r2, #1
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	4a06      	ldr	r2, [pc, #24]	; (80005fc <rt_evbit_set_from_ISR+0x34>)
 80005e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e6:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBitsFromISR(Evh, msk, pdFALSE);
 80005e8:	2200      	movs	r2, #0
 80005ea:	68f9      	ldr	r1, [r7, #12]
 80005ec:	68b8      	ldr	r0, [r7, #8]
 80005ee:	f006 fa0b 	bl	8006a08 <xEventGroupSetBitsFromISR>
	portYIELD_FROM_ISR(pdFALSE);
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20003578 	.word	0x20003578

08000600 <rt_enqueue_ISR>:
	}

	return false;
}

bool rt_enqueue_ISR(rt_queue_t Q, void const *bf) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	6039      	str	r1, [r7, #0]
 800060a:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <rt_enqueue_ISR+0x3c>)
 8000610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000614:	60fb      	str	r3, [r7, #12]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
	if (xQueueSendToBackFromISR(Qh, bf, &xHigherPriorityTaskWoken) == pdPASS) {
 800061a:	f107 0208 	add.w	r2, r7, #8
 800061e:	2300      	movs	r3, #0
 8000620:	6839      	ldr	r1, [r7, #0]
 8000622:	68f8      	ldr	r0, [r7, #12]
 8000624:	f006 fce8 	bl	8006ff8 <xQueueGenericSendFromISR>
 8000628:	4603      	mov	r3, r0
 800062a:	2b01      	cmp	r3, #1
 800062c:	d101      	bne.n	8000632 <rt_enqueue_ISR+0x32>
		return true;
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <rt_enqueue_ISR+0x34>
	}

	return false;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20003584 	.word	0x20003584

08000640 <rt_dequeue>:

bool rt_dequeue(rt_queue_t Q, void *bf) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <rt_dequeue+0x44>)
 8000650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000654:	60fb      	str	r3, [r7, #12]
	TickType_t to = rt_queue_def[Q].timeout_deq;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <rt_dequeue+0x48>)
 800065a:	011b      	lsls	r3, r3, #4
 800065c:	4413      	add	r3, r2
 800065e:	330c      	adds	r3, #12
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	60bb      	str	r3, [r7, #8]

	if (xQueueReceive(Qh, bf, to) == pdPASS) {
 8000664:	68ba      	ldr	r2, [r7, #8]
 8000666:	6839      	ldr	r1, [r7, #0]
 8000668:	68f8      	ldr	r0, [r7, #12]
 800066a:	f006 fd59 	bl	8007120 <xQueueReceive>
 800066e:	4603      	mov	r3, r0
 8000670:	2b01      	cmp	r3, #1
 8000672:	d101      	bne.n	8000678 <rt_dequeue+0x38>
		return true;
 8000674:	2301      	movs	r3, #1
 8000676:	e000      	b.n	800067a <rt_dequeue+0x3a>
	}

	return false;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20003584 	.word	0x20003584
 8000688:	0800994c 	.word	0x0800994c

0800068c <task_ble>:
#include "bluetooth_le.h"
#include "state_machine.h"
#include <stdio.h>
extern char ble_pData[MAX_SIZE];
// working all the time, checking if something is received or sending data to android device
void task_ble(void *pvParameters) {
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

//	int i = 0;
//	const TickType_t xDelay1000ms = pdMS_TO_TICKS(5000);
	bool status;
	xQueueBleData receivedBleData = { 0 };
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2221      	movs	r2, #33	; 0x21
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f008 ffa8 	bl	80095f2 <memset>
	for (;;) {

//		vTaskDelay(xDelay1000ms);

		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	4619      	mov	r1, r3
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff ffc9 	bl	8000640 <rt_dequeue>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if (status) {
 80006b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0f2      	beq.n	80006a2 <task_ble+0x16>
			if (receivedBleData.info == ble_received) {
 80006bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d179      	bne.n	80007b8 <task_ble+0x12c>
				memcpy(ble_pData, receivedBleData.value, MAX_SIZE);
 80006c4:	4b47      	ldr	r3, [pc, #284]	; (80007e4 <task_ble+0x158>)
 80006c6:	461d      	mov	r5, r3
 80006c8:	f107 040c 	add.w	r4, r7, #12
 80006cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ce:	6028      	str	r0, [r5, #0]
 80006d0:	6069      	str	r1, [r5, #4]
 80006d2:	60aa      	str	r2, [r5, #8]
 80006d4:	60eb      	str	r3, [r5, #12]
 80006d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d8:	6128      	str	r0, [r5, #16]
 80006da:	6169      	str	r1, [r5, #20]
 80006dc:	61aa      	str	r2, [r5, #24]
 80006de:	61eb      	str	r3, [r5, #28]

				switch (ble_pData[0]) {
 80006e0:	4b40      	ldr	r3, [pc, #256]	; (80007e4 <task_ble+0x158>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	2b1f      	cmp	r3, #31
 80006e8:	d860      	bhi.n	80007ac <task_ble+0x120>
 80006ea:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <task_ble+0x64>)
 80006ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f0:	08000771 	.word	0x08000771
 80006f4:	0800077b 	.word	0x0800077b
 80006f8:	080007ad 	.word	0x080007ad
 80006fc:	08000785 	.word	0x08000785
 8000700:	080007ad 	.word	0x080007ad
 8000704:	080007ad 	.word	0x080007ad
 8000708:	080007ad 	.word	0x080007ad
 800070c:	0800078f 	.word	0x0800078f
 8000710:	080007ad 	.word	0x080007ad
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007ad 	.word	0x080007ad
 800071c:	080007ad 	.word	0x080007ad
 8000720:	080007ad 	.word	0x080007ad
 8000724:	080007ad 	.word	0x080007ad
 8000728:	080007ad 	.word	0x080007ad
 800072c:	08000799 	.word	0x08000799
 8000730:	080007ad 	.word	0x080007ad
 8000734:	080007ad 	.word	0x080007ad
 8000738:	080007ad 	.word	0x080007ad
 800073c:	080007ad 	.word	0x080007ad
 8000740:	080007ad 	.word	0x080007ad
 8000744:	080007ad 	.word	0x080007ad
 8000748:	080007ad 	.word	0x080007ad
 800074c:	080007ad 	.word	0x080007ad
 8000750:	080007ad 	.word	0x080007ad
 8000754:	080007ad 	.word	0x080007ad
 8000758:	080007ad 	.word	0x080007ad
 800075c:	080007ad 	.word	0x080007ad
 8000760:	080007ad 	.word	0x080007ad
 8000764:	080007ad 	.word	0x080007ad
 8000768:	080007ad 	.word	0x080007ad
 800076c:	080007a3 	.word	0x080007a3
				case BLE_RECEIVED_DO_NOTHING:
					rt_evbit_set(rt_evgroup_state_machine,
 8000770:	2101      	movs	r1, #1
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff ff0e 	bl	8000594 <rt_evbit_set>
							evgroup_state_m_do_nothing);
					break;
 8000778:	e01f      	b.n	80007ba <task_ble+0x12e>
				case BLE_RECEIVED_AUTO_MANUAL:
					rt_evbit_set(rt_evgroup_state_machine,
 800077a:	2102      	movs	r1, #2
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff ff09 	bl	8000594 <rt_evbit_set>
							evgroup_state_m_auto_manual);
					break;
 8000782:	e01a      	b.n	80007ba <task_ble+0x12e>
				case BLE_RECEIVED_RIGHT:
					rt_evbit_set(rt_evgroup_state_machine,
 8000784:	2104      	movs	r1, #4
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff ff04 	bl	8000594 <rt_evbit_set>
							evgroup_state_m_right);
					break;
 800078c:	e015      	b.n	80007ba <task_ble+0x12e>
				case BLE_RECEIVED_FORWARD:
					rt_evbit_set(rt_evgroup_state_machine,
 800078e:	2108      	movs	r1, #8
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff feff 	bl	8000594 <rt_evbit_set>
							evgroup_state_m_forward);
					break;
 8000796:	e010      	b.n	80007ba <task_ble+0x12e>
				case BLE_RECEIVED_LEFT:
					rt_evbit_set(rt_evgroup_state_machine,
 8000798:	2110      	movs	r1, #16
 800079a:	2001      	movs	r0, #1
 800079c:	f7ff fefa 	bl	8000594 <rt_evbit_set>
							evgroup_state_m_left);
					break;
 80007a0:	e00b      	b.n	80007ba <task_ble+0x12e>
				case BLE_RECEIVED_BACK:
					rt_evbit_set(rt_evgroup_state_machine,
 80007a2:	2120      	movs	r1, #32
 80007a4:	2001      	movs	r0, #1
 80007a6:	f7ff fef5 	bl	8000594 <rt_evbit_set>
							evgroup_state_m_back);
					break;
 80007aa:	e006      	b.n	80007ba <task_ble+0x12e>
				default:
					memset(ble_pData, 0, MAX_SIZE);
 80007ac:	2220      	movs	r2, #32
 80007ae:	2100      	movs	r1, #0
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <task_ble+0x158>)
 80007b2:	f008 ff1e 	bl	80095f2 <memset>
					break;
 80007b6:	e000      	b.n	80007ba <task_ble+0x12e>
				}

			}
 80007b8:	bf00      	nop

			if (receivedBleData.info == ble_transmit) {
 80007ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007be:	2b01      	cmp	r3, #1
 80007c0:	f47f af6f 	bne.w	80006a2 <task_ble+0x16>
//				ble_pData = receivedBleData.value;
				memset(ble_pData, 0, MAX_SIZE);
 80007c4:	2220      	movs	r2, #32
 80007c6:	2100      	movs	r1, #0
 80007c8:	4806      	ldr	r0, [pc, #24]	; (80007e4 <task_ble+0x158>)
 80007ca:	f008 ff12 	bl	80095f2 <memset>
//				strncpy(receivedBleData.value, ble_pData, MAX_SIZE);
				strncpy(ble_pData, receivedBleData.value, MAX_SIZE);
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2220      	movs	r2, #32
 80007d4:	4619      	mov	r1, r3
 80007d6:	4803      	ldr	r0, [pc, #12]	; (80007e4 <task_ble+0x158>)
 80007d8:	f008 ff13 	bl	8009602 <strncpy>
				ble_send_data(ble_pData);
 80007dc:	4801      	ldr	r0, [pc, #4]	; (80007e4 <task_ble+0x158>)
 80007de:	f7ff fd23 	bl	8000228 <ble_send_data>
		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 80007e2:	e75e      	b.n	80006a2 <task_ble+0x16>
 80007e4:	2000353c 	.word	0x2000353c

080007e8 <task_eyes>:
 *      Author: Arkadiusz
 */

//#include "task_eyes.h"

void task_eyes(void *pvParameters) {
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80007f0:	e7fe      	b.n	80007f0 <task_eyes+0x8>

080007f2 <task_memory>:
 *      Author: Arkadiusz
 */

//#include "task_memory.h"

void task_memory(void *pvParameters) {
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80007fa:	e7fe      	b.n	80007fa <task_memory+0x8>

080007fc <HAL_GPIO_EXTI_Callback>:
bool ultrasound_was = false;
bool ultrasound_done = false;
extern char ble_pData[MAX_SIZE];

// interrupt pin callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
//	IRQ_ULTRASOUND_ECHO_Pin
	if (GPIO_Pin & IRQ_ULTRASOUND_ECHO_Pin) {
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	2b00      	cmp	r3, #0
 800080e:	d01e      	beq.n	800084e <HAL_GPIO_EXTI_Callback+0x52>

		if (ultrasound_was == false) {
 8000810:	4b20      	ldr	r3, [pc, #128]	; (8000894 <HAL_GPIO_EXTI_Callback+0x98>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	f083 0301 	eor.w	r3, r3, #1
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d008      	beq.n	8000830 <HAL_GPIO_EXTI_Callback+0x34>
			ultrasound_time = HAL_GetTick();
 800081e:	f000 ff83 	bl	8001728 <HAL_GetTick>
 8000822:	4602      	mov	r2, r0
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000826:	601a      	str	r2, [r3, #0]
			ultrasound_was = true;
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_GPIO_EXTI_Callback+0x98>)
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	e00e      	b.n	800084e <HAL_GPIO_EXTI_Callback+0x52>
		} else {
			ultrasound_time = HAL_GetTick() - ultrasound_time;
 8000830:	f000 ff7a 	bl	8001728 <HAL_GetTick>
 8000834:	4602      	mov	r2, r0
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	4a16      	ldr	r2, [pc, #88]	; (8000898 <HAL_GPIO_EXTI_Callback+0x9c>)
 800083e:	6013      	str	r3, [r2, #0]
			ultrasound_was = false;
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_GPIO_EXTI_Callback+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
			rt_evbit_set_from_ISR(rt_evgroup_sensors,
 8000846:	2100      	movs	r1, #0
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff febd 	bl	80005c8 <rt_evbit_set_from_ISR>
//			ultrasound_done = true;
		}
	}

//	BLE INTERRUPT -> SOMETHING IS RECEIVED
	if (GPIO_Pin & IRQ_BLE_Pin) {
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	2b00      	cmp	r3, #0
 8000856:	d019      	beq.n	800088c <HAL_GPIO_EXTI_Callback+0x90>
//		rt_evbit_set_from_ISR(rt_evgroup_ble, evgroup_ble_evbit_received);
		ble_receive_data(ble_pData);
 8000858:	4810      	ldr	r0, [pc, #64]	; (800089c <HAL_GPIO_EXTI_Callback+0xa0>)
 800085a:	f7ff fd11 	bl	8000280 <ble_receive_data>
		xQueueBleData ble_queue = { 0 };
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	2221      	movs	r2, #33	; 0x21
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f008 fec3 	bl	80095f2 <memset>
		strncpy(ble_queue.value, ble_pData, MAX_SIZE);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2220      	movs	r2, #32
 8000872:	490a      	ldr	r1, [pc, #40]	; (800089c <HAL_GPIO_EXTI_Callback+0xa0>)
 8000874:	4618      	mov	r0, r3
 8000876:	f008 fec4 	bl	8009602 <strncpy>
		ble_queue.info = ble_received;
 800087a:	2300      	movs	r3, #0
 800087c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		rt_enqueue_ISR(rt_queue_ble, &ble_queue);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff feba 	bl	8000600 <rt_enqueue_ISR>
//		memset(ble_pData, 0, MAX_SIZE);
	}
}
 800088c:	bf00      	nop
 800088e:	3730      	adds	r7, #48	; 0x30
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000030 	.word	0x20000030
 8000898:	2000002c 	.word	0x2000002c
 800089c:	2000353c 	.word	0x2000353c

080008a0 <task_sensors>:

void task_sensors(void *pvParameters) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

//	uint32_t evgroup = 0;

// TODO: delete this line!
//	magnetometer_init();
	QMC5883L_Initialize(MODE_CONTROL_CONTINUOUS, OUTPUT_DATA_RATE_200HZ,
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	2200      	movs	r2, #0
 80008ac:	210c      	movs	r1, #12
 80008ae:	2001      	movs	r0, #1
 80008b0:	f7ff fd5c 	bl	800036c <QMC5883L_Initialize>
			FULL_SCALE_2G, OVER_SAMPLE_RATIO_128);
	QMC5883L_InterruptConfig(INTERRUPT_DISABLE);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff fd7e 	bl	80003b6 <QMC5883L_InterruptConfig>
		// na podstawie na danych zareaguj :)

		// jakis tam bit do ustawienia, np skret w lewo - uzupelnic
//			rt_evbit_set(rt_evgroup_state_machine, (1 << 8));
//		}
		int16_t temperature = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	81fb      	strh	r3, [r7, #14]

//		if (NORMAL == QMC5883L_DataIsReady()) {
		temperature = QMC5883L_Read_Temperature();
 80008be:	f7ff fd3d 	bl	800033c <QMC5883L_Read_Temperature>
 80008c2:	4603      	mov	r3, r0
 80008c4:	81fb      	strh	r3, [r7, #14]
		temperature /= 10;
 80008c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <task_sensors+0x3c>)
 80008cc:	fb82 1203 	smull	r1, r2, r2, r3
 80008d0:	1092      	asrs	r2, r2, #2
 80008d2:	17db      	asrs	r3, r3, #31
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	81fb      	strh	r3, [r7, #14]
	for (;;) {
 80008d8:	e7ef      	b.n	80008ba <task_sensors+0x1a>
 80008da:	bf00      	nop
 80008dc:	66666667 	.word	0x66666667

080008e0 <task_state_machine>:

//#include "task_state_machine.h"
#include "runtime.h"
#include "state_machine.h"
#define jakis_tam_bit 12
void task_state_machine(void *pvParameters) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	uint32_t evgroup = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
	bool tasks_disabled = false;
 80008ec:	2300      	movs	r3, #0
 80008ee:	72fb      	strb	r3, [r7, #11]

	for (;;) {

		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff fe33 	bl	800055c <rt_evbitwait_any>
 80008f6:	60f8      	str	r0, [r7, #12]

		if (evgroup & (1 << evgroup_state_m_do_nothing)) {
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d005      	beq.n	800090e <task_state_machine+0x2e>
			h_bridge_set_left_duty(0);
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff fc44 	bl	8000190 <h_bridge_set_left_duty>
			h_bridge_set_right_duty(0);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fc67 	bl	80001dc <h_bridge_set_right_duty>
		}
		if (evgroup & (1 << evgroup_state_m_auto_manual)) {
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	2b00      	cmp	r3, #0
 8000916:	d021      	beq.n	800095c <task_state_machine+0x7c>
			if (tasks_disabled) {
 8000918:	7afb      	ldrb	r3, [r7, #11]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00f      	beq.n	800093e <task_state_machine+0x5e>
				vTaskResume(rt_tasks[rt_task_eyes]);
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <task_state_machine+0x94>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	4618      	mov	r0, r3
 8000924:	f007 f8ba 	bl	8007a9c <vTaskResume>
				vTaskResume(rt_tasks[rt_task_memory]);
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <task_state_machine+0x94>)
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	4618      	mov	r0, r3
 800092e:	f007 f8b5 	bl	8007a9c <vTaskResume>
				vTaskResume(rt_tasks[rt_task_sensors]);
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <task_state_machine+0x94>)
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	4618      	mov	r0, r3
 8000938:	f007 f8b0 	bl	8007a9c <vTaskResume>
 800093c:	e00e      	b.n	800095c <task_state_machine+0x7c>
			} else {
				vTaskSuspend(rt_tasks[rt_task_eyes]);
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <task_state_machine+0x94>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	4618      	mov	r0, r3
 8000944:	f006 fffc 	bl	8007940 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_memory]);
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <task_state_machine+0x94>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	4618      	mov	r0, r3
 800094e:	f006 fff7 	bl	8007940 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_sensors]);
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <task_state_machine+0x94>)
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	4618      	mov	r0, r3
 8000958:	f006 fff2 	bl	8007940 <vTaskSuspend>
			}
		}
		if (evgroup & (1 << evgroup_state_m_right)) {
			;
		}
		if (evgroup & (1 << evgroup_state_m_forward)) {
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0c4      	beq.n	80008f0 <task_state_machine+0x10>
			h_bridge_set_left_duty(100);
 8000966:	2064      	movs	r0, #100	; 0x64
 8000968:	f7ff fc12 	bl	8000190 <h_bridge_set_left_duty>
			h_bridge_set_right_duty(100);
 800096c:	2064      	movs	r0, #100	; 0x64
 800096e:	f7ff fc35 	bl	80001dc <h_bridge_set_right_duty>
		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8000972:	e7bd      	b.n	80008f0 <task_state_machine+0x10>
 8000974:	2000355c 	.word	0x2000355c

08000978 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_ADC_Init+0xa8>)
 800098a:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <MX_ADC_Init+0xac>)
 800098c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_ADC_Init+0xa8>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_ADC_Init+0xa8>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_ADC_Init+0xa8>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_ADC_Init+0xa8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009a6:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_ADC_Init+0xa8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_ADC_Init+0xa8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_ADC_Init+0xa8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_ADC_Init+0xa8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_ADC_Init+0xa8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_ADC_Init+0xa8>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_ADC_Init+0xa8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_ADC_Init+0xa8>)
 80009d6:	2210      	movs	r2, #16
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_ADC_Init+0xa8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_ADC_Init+0xa8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <MX_ADC_Init+0xa8>)
 80009ea:	f000 fea7 	bl	800173c <HAL_ADC_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80009f4:	f000 fab8 	bl	8000f68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_ADC_Init+0xa8>)
 8000a0a:	f001 f93b 	bl	8001c84 <HAL_ADC_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000a14:	f000 faa8 	bl	8000f68 <Error_Handler>
  }

}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000358c 	.word	0x2000358c
 8000a24:	40012400 	.word	0x40012400

08000a28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a2d      	ldr	r2, [pc, #180]	; (8000afc <HAL_ADC_MspInit+0xd4>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d154      	bne.n	8000af4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <HAL_ADC_MspInit+0xd8>)
 8000a4c:	6a1b      	ldr	r3, [r3, #32]
 8000a4e:	4a2c      	ldr	r2, [pc, #176]	; (8000b00 <HAL_ADC_MspInit+0xd8>)
 8000a50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a54:	6213      	str	r3, [r2, #32]
 8000a56:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <HAL_ADC_MspInit+0xd8>)
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <HAL_ADC_MspInit+0xd8>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a26      	ldr	r2, [pc, #152]	; (8000b00 <HAL_ADC_MspInit+0xd8>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <HAL_ADC_MspInit+0xd8>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <HAL_ADC_MspInit+0xd8>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	4a20      	ldr	r2, [pc, #128]	; (8000b00 <HAL_ADC_MspInit+0xd8>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	61d3      	str	r3, [r2, #28]
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <HAL_ADC_MspInit+0xd8>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <HAL_ADC_MspInit+0xd8>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a1a      	ldr	r2, [pc, #104]	; (8000b00 <HAL_ADC_MspInit+0xd8>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_ADC_MspInit+0xd8>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <HAL_ADC_MspInit+0xdc>)
 8000abe:	f001 fc89 	bl	80023d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 8000ac2:	2386      	movs	r3, #134	; 0x86
 8000ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <HAL_ADC_MspInit+0xe0>)
 8000ad6:	f001 fc7d 	bl	80023d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 8000ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4807      	ldr	r0, [pc, #28]	; (8000b0c <HAL_ADC_MspInit+0xe4>)
 8000af0:	f001 fc70 	bl	80023d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000af4:	bf00      	nop
 8000af6:	3730      	adds	r7, #48	; 0x30
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40012400 	.word	0x40012400
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020800 	.word	0x40020800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400

08000b10 <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b58:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <MX_FREERTOS_Init+0x1c>)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_FREERTOS_Init+0x20>)
 8000b5e:	f005 fcad 	bl	80064bc <osThreadNew>
 8000b62:	4602      	mov	r2, r0
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <MX_FREERTOS_Init+0x24>)
 8000b66:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 8000b68:	f7ff fc4e 	bl	8000408 <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	0800998c 	.word	0x0800998c
 8000b74:	08000b7d 	.word	0x08000b7d
 8000b78:	200035e0 	.word	0x200035e0

08000b7c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f005 fd43 	bl	8006610 <osDelay>
 8000b8a:	e7fb      	b.n	8000b84 <StartDefaultTask+0x8>

08000b8c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	4b72      	ldr	r3, [pc, #456]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a71      	ldr	r2, [pc, #452]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	61d3      	str	r3, [r2, #28]
 8000bae:	4b6f      	ldr	r3, [pc, #444]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	4b6c      	ldr	r3, [pc, #432]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	4a6b      	ldr	r2, [pc, #428]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	61d3      	str	r3, [r2, #28]
 8000bc6:	4b69      	ldr	r3, [pc, #420]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	f003 0320 	and.w	r3, r3, #32
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b66      	ldr	r3, [pc, #408]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	4a65      	ldr	r2, [pc, #404]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	61d3      	str	r3, [r2, #28]
 8000bde:	4b63      	ldr	r3, [pc, #396]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4b60      	ldr	r3, [pc, #384]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a5f      	ldr	r2, [pc, #380]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	61d3      	str	r3, [r2, #28]
 8000bf6:	4b5d      	ldr	r3, [pc, #372]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	4b5a      	ldr	r3, [pc, #360]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a59      	ldr	r2, [pc, #356]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <MX_GPIO_Init+0x1e0>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f640 616e 	movw	r1, #3694	; 0xe6e
 8000c20:	4853      	ldr	r0, [pc, #332]	; (8000d70 <MX_GPIO_Init+0x1e4>)
 8000c22:	f001 fe49 	bl	80028b8 <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000c26:	2200      	movs	r2, #0
 8000c28:	f248 7108 	movw	r1, #34568	; 0x8708
 8000c2c:	4851      	ldr	r0, [pc, #324]	; (8000d74 <MX_GPIO_Init+0x1e8>)
 8000c2e:	f001 fe43 	bl	80028b8 <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2110      	movs	r1, #16
 8000c36:	484e      	ldr	r0, [pc, #312]	; (8000d70 <MX_GPIO_Init+0x1e4>)
 8000c38:	f001 fe3e 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 8000c3c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c42:	2303      	movs	r3, #3
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4847      	ldr	r0, [pc, #284]	; (8000d70 <MX_GPIO_Init+0x1e4>)
 8000c52:	f001 fbbf 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 8000c56:	f640 637e 	movw	r3, #3710	; 0xe7e
 8000c5a:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4840      	ldr	r0, [pc, #256]	; (8000d70 <MX_GPIO_Init+0x1e4>)
 8000c70:	f001 fbb0 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000c74:	f248 7308 	movw	r3, #34568	; 0x8708
 8000c78:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4839      	ldr	r0, [pc, #228]	; (8000d74 <MX_GPIO_Init+0x1e8>)
 8000c8e:	f001 fba1 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8000c92:	f241 0370 	movw	r3, #4208	; 0x1070
 8000c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4833      	ldr	r0, [pc, #204]	; (8000d74 <MX_GPIO_Init+0x1e8>)
 8000ca8:	f001 fb94 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin|IRQ_ULTRASOUND_ECHO_Pin;
 8000cac:	2303      	movs	r3, #3
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb0:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <MX_GPIO_Init+0x1ec>)
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	482f      	ldr	r0, [pc, #188]	; (8000d7c <MX_GPIO_Init+0x1f0>)
 8000cc0:	f001 fb88 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 8000cc4:	f242 333c 	movw	r3, #9020	; 0x233c
 8000cc8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4828      	ldr	r0, [pc, #160]	; (8000d7c <MX_GPIO_Init+0x1f0>)
 8000cda:	f001 fb7b 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_LEFT_Pin;
 8000cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4822      	ldr	r0, [pc, #136]	; (8000d7c <MX_GPIO_Init+0x1f0>)
 8000cf4:	f001 fb6e 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4819      	ldr	r0, [pc, #100]	; (8000d70 <MX_GPIO_Init+0x1e4>)
 8000d0c:	f001 fb62 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 8000d10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4813      	ldr	r0, [pc, #76]	; (8000d74 <MX_GPIO_Init+0x1e8>)
 8000d26:	f001 fb55 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4810      	ldr	r0, [pc, #64]	; (8000d80 <MX_GPIO_Init+0x1f4>)
 8000d3e:	f001 fb49 	bl	80023d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2105      	movs	r1, #5
 8000d46:	2006      	movs	r0, #6
 8000d48:	f001 fb00 	bl	800234c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d4c:	2006      	movs	r0, #6
 8000d4e:	f001 fb29 	bl	80023a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2105      	movs	r1, #5
 8000d56:	2007      	movs	r0, #7
 8000d58:	f001 faf8 	bl	800234c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d5c:	2007      	movs	r0, #7
 8000d5e:	f001 fb21 	bl	80023a4 <HAL_NVIC_EnableIRQ>

}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	; 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020800 	.word	0x40020800
 8000d74:	40020000 	.word	0x40020000
 8000d78:	10110000 	.word	0x10110000
 8000d7c:	40020400 	.word	0x40020400
 8000d80:	40020c00 	.word	0x40020c00

08000d84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000d8a:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <MX_I2C1_Init+0x54>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_I2C1_Init+0x58>)
 8000d92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000da2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000da6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_I2C1_Init+0x50>)
 8000dc2:	f001 fdc3 	bl	800294c <HAL_I2C_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dcc:	f000 f8cc 	bl	8000f68 <Error_Handler>
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200035e4 	.word	0x200035e4
 8000dd8:	40005400 	.word	0x40005400
 8000ddc:	000186a0 	.word	0x000186a0

08000de0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <HAL_I2C_MspInit+0x7c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d127      	bne.n	8000e52 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_I2C_MspInit+0x80>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <HAL_I2C_MspInit+0x80>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_I2C_MspInit+0x80>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e1a:	23c0      	movs	r3, #192	; 0xc0
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1e:	2312      	movs	r3, #18
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <HAL_I2C_MspInit+0x84>)
 8000e36:	f001 facd 	bl	80023d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_I2C_MspInit+0x80>)
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_I2C_MspInit+0x80>)
 8000e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e44:	6253      	str	r3, [r2, #36]	; 0x24
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_I2C_MspInit+0x80>)
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020400 	.word	0x40020400

08000e68 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e6c:	f000 fc31 	bl	80016d2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e70:	f000 f818 	bl	8000ea4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e74:	f7ff fe8a 	bl	8000b8c <MX_GPIO_Init>
	MX_ADC_Init();
 8000e78:	f7ff fd7e 	bl	8000978 <MX_ADC_Init>
	MX_I2C1_Init();
 8000e7c:	f7ff ff82 	bl	8000d84 <MX_I2C1_Init>
	MX_TIM2_Init();
 8000e80:	f000 f970 	bl	8001164 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000e84:	f000 f9e2 	bl	800124c <MX_TIM3_Init>
	MX_TIM9_Init();
 8000e88:	f000 fa54 	bl	8001334 <MX_TIM9_Init>
	MX_USART3_UART_Init();
 8000e8c:	f000 fb8e 	bl	80015ac <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	device_init();
 8000e90:	f7ff faa6 	bl	80003e0 <device_init>
//	h_bridge_set_left_duty(100);
//	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 8000e94:	f005 faac 	bl	80063f0 <osKernelInitialize>
	MX_FREERTOS_Init();
 8000e98:	f7ff fe5c 	bl	8000b54 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8000e9c:	f005 fada 	bl	8006454 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000ea0:	e7fe      	b.n	8000ea0 <main+0x38>
	...

08000ea4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b092      	sub	sp, #72	; 0x48
 8000ea8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	2234      	movs	r2, #52	; 0x34
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f008 fb9d 	bl	80095f2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <SystemClock_Config+0x9c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <SystemClock_Config+0x9c>)
 8000ed0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ed4:	6013      	str	r3, [r2, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000ef0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000ef4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000ef6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000efa:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 fd1f 	bl	8003944 <HAL_RCC_OscConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0x6c>
		Error_Handler();
 8000f0c:	f000 f82c 	bl	8000f68 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f10:	230f      	movs	r3, #15
 8000f12:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f14:	2303      	movs	r3, #3
 8000f16:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000f24:	463b      	mov	r3, r7
 8000f26:	2101      	movs	r1, #1
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f003 f989 	bl	8004240 <HAL_RCC_ClockConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0x94>
		Error_Handler();
 8000f34:	f000 f818 	bl	8000f68 <Error_Handler>
	}
}
 8000f38:	bf00      	nop
 8000f3a:	3748      	adds	r7, #72	; 0x48
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40007000 	.word	0x40007000

08000f44 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000f56:	f000 fbd5 	bl	8001704 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40000c00 	.word	0x40000c00

08000f68 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_MspInit+0x64>)
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	4a16      	ldr	r2, [pc, #88]	; (8000fec <HAL_MspInit+0x64>)
 8000f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f98:	6253      	str	r3, [r2, #36]	; 0x24
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_MspInit+0x64>)
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_MspInit+0x64>)
 8000fa8:	6a1b      	ldr	r3, [r3, #32]
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_MspInit+0x64>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6213      	str	r3, [r2, #32]
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_MspInit+0x64>)
 8000fb4:	6a1b      	ldr	r3, [r3, #32]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_MspInit+0x64>)
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_MspInit+0x64>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	6253      	str	r3, [r2, #36]	; 0x24
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_MspInit+0x64>)
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	210f      	movs	r1, #15
 8000fda:	f06f 0001 	mvn.w	r0, #1
 8000fde:	f001 f9b5 	bl	800234c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	202e      	movs	r0, #46	; 0x2e
 8001006:	f001 f9a1 	bl	800234c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 800100a:	202e      	movs	r0, #46	; 0x2e
 800100c:	f001 f9ca 	bl	80023a4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <HAL_InitTick+0x9c>)
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_InitTick+0x9c>)
 8001016:	f043 0308 	orr.w	r3, r3, #8
 800101a:	6253      	str	r3, [r2, #36]	; 0x24
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_InitTick+0x9c>)
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001028:	f107 0210 	add.w	r2, r7, #16
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f003 fb4c 	bl	80046d0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001038:	f003 fb22 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 800103c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800103e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001040:	4a13      	ldr	r2, [pc, #76]	; (8001090 <HAL_InitTick+0xa0>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	0c9b      	lsrs	r3, r3, #18
 8001048:	3b01      	subs	r3, #1
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_InitTick+0xa4>)
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <HAL_InitTick+0xa8>)
 8001050:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_InitTick+0xa4>)
 8001054:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001058:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <HAL_InitTick+0xa4>)
 800105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <HAL_InitTick+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_InitTick+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <HAL_InitTick+0xa4>)
 800106e:	f003 fbd1 	bl	8004814 <HAL_TIM_Base_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d104      	bne.n	8001082 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001078:	4806      	ldr	r0, [pc, #24]	; (8001094 <HAL_InitTick+0xa4>)
 800107a:	f003 fc73 	bl	8004964 <HAL_TIM_Base_Start_IT>
 800107e:	4603      	mov	r3, r0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3730      	adds	r7, #48	; 0x30
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	431bde83 	.word	0x431bde83
 8001094:	20003638 	.word	0x20003638
 8001098:	40000c00 	.word	0x40000c00

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <HardFault_Handler+0x4>

080010ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <MemManage_Handler+0x4>

080010b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <BusFault_Handler+0x4>

080010ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <UsageFault_Handler+0x4>

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f001 fc23 	bl	800291c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}

080010da <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80010de:	2002      	movs	r0, #2
 80010e0:	f001 fc1c 	bl	800291c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <TIM5_IRQHandler+0x10>)
 80010ee:	f003 fd50 	bl	8004b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20003638 	.word	0x20003638

080010fc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <SystemInit+0x5c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a14      	ldr	r2, [pc, #80]	; (8001158 <SystemInit+0x5c>)
 8001106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <SystemInit+0x5c>)
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	4911      	ldr	r1, [pc, #68]	; (8001158 <SystemInit+0x5c>)
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <SystemInit+0x60>)
 8001114:	4013      	ands	r3, r2
 8001116:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <SystemInit+0x5c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <SystemInit+0x5c>)
 800111e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001122:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001126:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <SystemInit+0x5c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SystemInit+0x5c>)
 800112e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001132:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <SystemInit+0x5c>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <SystemInit+0x5c>)
 800113a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800113e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SystemInit+0x5c>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <SystemInit+0x64>)
 8001148:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800114c:	609a      	str	r2, [r3, #8]
#endif
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	88ffc00c 	.word	0x88ffc00c
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800118e:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <MX_TIM2_Init+0xe4>)
 8001190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001194:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001196:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <MX_TIM2_Init+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <MX_TIM2_Init+0xe4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <MX_TIM2_Init+0xe4>)
 80011a4:	f640 427f 	movw	r2, #3199	; 0xc7f
 80011a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b27      	ldr	r3, [pc, #156]	; (8001248 <MX_TIM2_Init+0xe4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <MX_TIM2_Init+0xe4>)
 80011b2:	2280      	movs	r2, #128	; 0x80
 80011b4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b6:	4824      	ldr	r0, [pc, #144]	; (8001248 <MX_TIM2_Init+0xe4>)
 80011b8:	f003 fb2c 	bl	8004814 <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80011c2:	f7ff fed1 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	4619      	mov	r1, r3
 80011d2:	481d      	ldr	r0, [pc, #116]	; (8001248 <MX_TIM2_Init+0xe4>)
 80011d4:	f003 ff4a 	bl	800506c <HAL_TIM_ConfigClockSource>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011de:	f7ff fec3 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011e2:	4819      	ldr	r0, [pc, #100]	; (8001248 <MX_TIM2_Init+0xe4>)
 80011e4:	f003 fc24 	bl	8004a30 <HAL_TIM_PWM_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011ee:	f7ff febb 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	4619      	mov	r1, r3
 8001200:	4811      	ldr	r0, [pc, #68]	; (8001248 <MX_TIM2_Init+0xe4>)
 8001202:	f004 fc45 	bl	8005a90 <HAL_TIMEx_MasterConfigSynchronization>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800120c:	f7ff feac 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001210:	2360      	movs	r3, #96	; 0x60
 8001212:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1599;
 8001214:	f240 633f 	movw	r3, #1599	; 0x63f
 8001218:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800121e:	2304      	movs	r3, #4
 8001220:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001222:	463b      	mov	r3, r7
 8001224:	2200      	movs	r2, #0
 8001226:	4619      	mov	r1, r3
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <MX_TIM2_Init+0xe4>)
 800122a:	f003 fd8f 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001234:	f7ff fe98 	bl	8000f68 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001238:	4803      	ldr	r0, [pc, #12]	; (8001248 <MX_TIM2_Init+0xe4>)
 800123a:	f000 f933 	bl	80014a4 <HAL_TIM_MspPostInit>

}
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200036ec 	.word	0x200036ec

0800124c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8001276:	4b2d      	ldr	r3, [pc, #180]	; (800132c <MX_TIM3_Init+0xe0>)
 8001278:	4a2d      	ldr	r2, [pc, #180]	; (8001330 <MX_TIM3_Init+0xe4>)
 800127a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800127c:	4b2b      	ldr	r3, [pc, #172]	; (800132c <MX_TIM3_Init+0xe0>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b2a      	ldr	r3, [pc, #168]	; (800132c <MX_TIM3_Init+0xe0>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <MX_TIM3_Init+0xe0>)
 800128a:	f640 427f 	movw	r2, #3199	; 0xc7f
 800128e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001290:	4b26      	ldr	r3, [pc, #152]	; (800132c <MX_TIM3_Init+0xe0>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001296:	4b25      	ldr	r3, [pc, #148]	; (800132c <MX_TIM3_Init+0xe0>)
 8001298:	2280      	movs	r2, #128	; 0x80
 800129a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800129c:	4823      	ldr	r0, [pc, #140]	; (800132c <MX_TIM3_Init+0xe0>)
 800129e:	f003 fab9 	bl	8004814 <HAL_TIM_Base_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80012a8:	f7ff fe5e 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	4619      	mov	r1, r3
 80012b8:	481c      	ldr	r0, [pc, #112]	; (800132c <MX_TIM3_Init+0xe0>)
 80012ba:	f003 fed7 	bl	800506c <HAL_TIM_ConfigClockSource>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80012c4:	f7ff fe50 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012c8:	4818      	ldr	r0, [pc, #96]	; (800132c <MX_TIM3_Init+0xe0>)
 80012ca:	f003 fbb1 	bl	8004a30 <HAL_TIM_PWM_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012d4:	f7ff fe48 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	4811      	ldr	r0, [pc, #68]	; (800132c <MX_TIM3_Init+0xe0>)
 80012e8:	f004 fbd2 	bl	8005a90 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80012f2:	f7ff fe39 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f6:	2360      	movs	r3, #96	; 0x60
 80012f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 80012fa:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80012fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001304:	2304      	movs	r3, #4
 8001306:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	2208      	movs	r2, #8
 800130c:	4619      	mov	r1, r3
 800130e:	4807      	ldr	r0, [pc, #28]	; (800132c <MX_TIM3_Init+0xe0>)
 8001310:	f003 fd1c 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800131a:	f7ff fe25 	bl	8000f68 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800131e:	4803      	ldr	r0, [pc, #12]	; (800132c <MX_TIM3_Init+0xe0>)
 8001320:	f000 f8c0 	bl	80014a4 <HAL_TIM_MspPostInit>

}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20003674 	.word	0x20003674
 8001330:	40000400 	.word	0x40000400

08001334 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001352:	463b      	mov	r3, r7
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 800135e:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <MX_TIM9_Init+0xe0>)
 8001360:	4a2d      	ldr	r2, [pc, #180]	; (8001418 <MX_TIM9_Init+0xe4>)
 8001362:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001364:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <MX_TIM9_Init+0xe0>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <MX_TIM9_Init+0xe0>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3200;
 8001370:	4b28      	ldr	r3, [pc, #160]	; (8001414 <MX_TIM9_Init+0xe0>)
 8001372:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001376:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b26      	ldr	r3, [pc, #152]	; (8001414 <MX_TIM9_Init+0xe0>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <MX_TIM9_Init+0xe0>)
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001384:	4823      	ldr	r0, [pc, #140]	; (8001414 <MX_TIM9_Init+0xe0>)
 8001386:	f003 fa45 	bl	8004814 <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8001390:	f7ff fdea 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800139a:	f107 0318 	add.w	r3, r7, #24
 800139e:	4619      	mov	r1, r3
 80013a0:	481c      	ldr	r0, [pc, #112]	; (8001414 <MX_TIM9_Init+0xe0>)
 80013a2:	f003 fe63 	bl	800506c <HAL_TIM_ConfigClockSource>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM9_Init+0x7c>
  {
    Error_Handler();
 80013ac:	f7ff fddc 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80013b0:	4818      	ldr	r0, [pc, #96]	; (8001414 <MX_TIM9_Init+0xe0>)
 80013b2:	f003 fb3d 	bl	8004a30 <HAL_TIM_PWM_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 80013bc:	f7ff fdd4 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	4619      	mov	r1, r3
 80013ce:	4811      	ldr	r0, [pc, #68]	; (8001414 <MX_TIM9_Init+0xe0>)
 80013d0:	f004 fb5e 	bl	8005a90 <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM9_Init+0xaa>
  {
    Error_Handler();
 80013da:	f7ff fdc5 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013de:	2360      	movs	r3, #96	; 0x60
 80013e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 80013e2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80013e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	2204      	movs	r2, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_TIM9_Init+0xe0>)
 80013f8:	f003 fca8 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM9_Init+0xd2>
  {
    Error_Handler();
 8001402:	f7ff fdb1 	bl	8000f68 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8001406:	4803      	ldr	r0, [pc, #12]	; (8001414 <MX_TIM9_Init+0xe0>)
 8001408:	f000 f84c 	bl	80014a4 <HAL_TIM_MspPostInit>

}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	; 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200036b0 	.word	0x200036b0
 8001418:	40010800 	.word	0x40010800

0800141c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142c:	d10c      	bne.n	8001448 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	4a19      	ldr	r2, [pc, #100]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6253      	str	r3, [r2, #36]	; 0x24
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001446:	e022      	b.n	800148e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a13      	ldr	r2, [pc, #76]	; (800149c <HAL_TIM_Base_MspInit+0x80>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d10c      	bne.n	800146c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6253      	str	r3, [r2, #36]	; 0x24
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
}
 800146a:	e010      	b.n	800148e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM9)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <HAL_TIM_Base_MspInit+0x84>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d10b      	bne.n	800148e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6213      	str	r3, [r2, #32]
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_TIM_Base_MspInit+0x7c>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
}
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40023800 	.word	0x40023800
 800149c:	40000400 	.word	0x40000400
 80014a0:	40010800 	.word	0x40010800

080014a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c4:	d11c      	bne.n	8001500 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	4b33      	ldr	r3, [pc, #204]	; (8001594 <HAL_TIM_MspPostInit+0xf0>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a32      	ldr	r2, [pc, #200]	; (8001594 <HAL_TIM_MspPostInit+0xf0>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b30      	ldr	r3, [pc, #192]	; (8001594 <HAL_TIM_MspPostInit+0xf0>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 80014de:	2301      	movs	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ee:	2301      	movs	r3, #1
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4827      	ldr	r0, [pc, #156]	; (8001598 <HAL_TIM_MspPostInit+0xf4>)
 80014fa:	f000 ff6b 	bl	80023d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80014fe:	e044      	b.n	800158a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a25      	ldr	r2, [pc, #148]	; (800159c <HAL_TIM_MspPostInit+0xf8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d11d      	bne.n	8001546 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	4b22      	ldr	r3, [pc, #136]	; (8001594 <HAL_TIM_MspPostInit+0xf0>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a21      	ldr	r2, [pc, #132]	; (8001594 <HAL_TIM_MspPostInit+0xf0>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	61d3      	str	r3, [r2, #28]
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_TIM_MspPostInit+0xf0>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 8001522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001534:	2302      	movs	r3, #2
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4818      	ldr	r0, [pc, #96]	; (80015a0 <HAL_TIM_MspPostInit+0xfc>)
 8001540:	f000 ff48 	bl	80023d4 <HAL_GPIO_Init>
}
 8001544:	e021      	b.n	800158a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a16      	ldr	r2, [pc, #88]	; (80015a4 <HAL_TIM_MspPostInit+0x100>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d11c      	bne.n	800158a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_TIM_MspPostInit+0xf0>)
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <HAL_TIM_MspPostInit+0xf0>)
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	61d3      	str	r3, [r2, #28]
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_TIM_MspPostInit+0xf0>)
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8001568:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800157a:	2303      	movs	r3, #3
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4808      	ldr	r0, [pc, #32]	; (80015a8 <HAL_TIM_MspPostInit+0x104>)
 8001586:	f000 ff25 	bl	80023d4 <HAL_GPIO_Init>
}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000
 800159c:	40000400 	.word	0x40000400
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40010800 	.word	0x40010800
 80015a8:	40020400 	.word	0x40020400

080015ac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015b2:	4a12      	ldr	r2, [pc, #72]	; (80015fc <MX_USART3_UART_Init+0x50>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015d2:	220c      	movs	r2, #12
 80015d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_USART3_UART_Init+0x4c>)
 80015e4:	f004 faee 	bl	8005bc4 <HAL_UART_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015ee:	f7ff fcbb 	bl	8000f68 <Error_Handler>
  }

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20003728 	.word	0x20003728
 80015fc:	40004800 	.word	0x40004800

08001600 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a17      	ldr	r2, [pc, #92]	; (800167c <HAL_UART_MspInit+0x7c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d128      	bne.n	8001674 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_UART_MspInit+0x80>)
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	4a16      	ldr	r2, [pc, #88]	; (8001680 <HAL_UART_MspInit+0x80>)
 8001628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800162c:	6253      	str	r3, [r2, #36]	; 0x24
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_UART_MspInit+0x80>)
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_UART_MspInit+0x80>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_UART_MspInit+0x80>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	61d3      	str	r3, [r2, #28]
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_UART_MspInit+0x80>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001652:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001664:	2307      	movs	r3, #7
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_UART_MspInit+0x84>)
 8001670:	f000 feb0 	bl	80023d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40004800 	.word	0x40004800
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400

08001688 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001688:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800168a:	e003      	b.n	8001694 <LoopCopyDataInit>

0800168c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800168e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001690:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001692:	3104      	adds	r1, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001694:	480a      	ldr	r0, [pc, #40]	; (80016c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001698:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800169a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800169c:	d3f6      	bcc.n	800168c <CopyDataInit>
  ldr r2, =_sbss
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016a0:	e002      	b.n	80016a8 <LoopFillZerobss>

080016a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016a4:	f842 3b04 	str.w	r3, [r2], #4

080016a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016ac:	d3f9      	bcc.n	80016a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ae:	f7ff fd25 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b2:	f007 ff6f 	bl	8009594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016b6:	f7ff fbd7 	bl	8000e68 <main>
  bx lr
 80016ba:	4770      	bx	lr
  ldr r3, =_sidata
 80016bc:	080099dc 	.word	0x080099dc
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016c4:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80016c8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80016cc:	200037ac 	.word	0x200037ac

080016d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC1_IRQHandler>

080016d2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016dc:	2003      	movs	r0, #3
 80016de:	f000 fe15 	bl	800230c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e2:	2000      	movs	r0, #0
 80016e4:	f7ff fc84 	bl	8000ff0 <HAL_InitTick>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	71fb      	strb	r3, [r7, #7]
 80016f2:	e001      	b.n	80016f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016f4:	f7ff fc48 	bl	8000f88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016f8:	79fb      	ldrb	r3, [r7, #7]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_IncTick+0x1c>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_IncTick+0x20>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4413      	add	r3, r2
 8001712:	4a03      	ldr	r2, [pc, #12]	; (8001720 <HAL_IncTick+0x1c>)
 8001714:	6013      	str	r3, [r2, #0]
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20003768 	.word	0x20003768
 8001724:	20000008 	.word	0x20000008

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b02      	ldr	r3, [pc, #8]	; (8001738 <HAL_GetTick+0x10>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20003768 	.word	0x20003768

0800173c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08e      	sub	sp, #56	; 0x38
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e282      	b.n	8001c62 <HAL_ADC_Init+0x526>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a9d      	ldr	r2, [pc, #628]	; (80019d8 <HAL_ADC_Init+0x29c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d004      	beq.n	8001770 <HAL_ADC_Init+0x34>
 8001766:	f240 11bd 	movw	r1, #445	; 0x1bd
 800176a:	489c      	ldr	r0, [pc, #624]	; (80019dc <HAL_ADC_Init+0x2a0>)
 800176c:	f7ff fc02 	bl	8000f74 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00e      	beq.n	8001796 <HAL_ADC_Init+0x5a>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001780:	d009      	beq.n	8001796 <HAL_ADC_Init+0x5a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800178a:	d004      	beq.n	8001796 <HAL_ADC_Init+0x5a>
 800178c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8001790:	4892      	ldr	r0, [pc, #584]	; (80019dc <HAL_ADC_Init+0x2a0>)
 8001792:	f7ff fbef 	bl	8000f74 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d013      	beq.n	80017c6 <HAL_ADC_Init+0x8a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a6:	d00e      	beq.n	80017c6 <HAL_ADC_Init+0x8a>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017b0:	d009      	beq.n	80017c6 <HAL_ADC_Init+0x8a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80017ba:	d004      	beq.n	80017c6 <HAL_ADC_Init+0x8a>
 80017bc:	f240 11bf 	movw	r1, #447	; 0x1bf
 80017c0:	4886      	ldr	r0, [pc, #536]	; (80019dc <HAL_ADC_Init+0x2a0>)
 80017c2:	f7ff fbd7 	bl	8000f74 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d009      	beq.n	80017e2 <HAL_ADC_Init+0xa6>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017d6:	d004      	beq.n	80017e2 <HAL_ADC_Init+0xa6>
 80017d8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80017dc:	487f      	ldr	r0, [pc, #508]	; (80019dc <HAL_ADC_Init+0x2a0>)
 80017de:	f7ff fbc9 	bl	8000f74 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_ADC_Init+0xc2>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017f2:	d004      	beq.n	80017fe <HAL_ADC_Init+0xc2>
 80017f4:	f240 11c1 	movw	r1, #449	; 0x1c1
 80017f8:	4878      	ldr	r0, [pc, #480]	; (80019dc <HAL_ADC_Init+0x2a0>)
 80017fa:	f7ff fbbb 	bl	8000f74 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001806:	d008      	beq.n	800181a <HAL_ADC_Init+0xde>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <HAL_ADC_Init+0xde>
 8001810:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001814:	4871      	ldr	r0, [pc, #452]	; (80019dc <HAL_ADC_Init+0x2a0>)
 8001816:	f7ff fbad 	bl	8000f74 <assert_failed>
  assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d020      	beq.n	8001864 <HAL_ADC_Init+0x128>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b10      	cmp	r3, #16
 8001828:	d01c      	beq.n	8001864 <HAL_ADC_Init+0x128>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b20      	cmp	r3, #32
 8001830:	d018      	beq.n	8001864 <HAL_ADC_Init+0x128>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b30      	cmp	r3, #48	; 0x30
 8001838:	d014      	beq.n	8001864 <HAL_ADC_Init+0x128>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b40      	cmp	r3, #64	; 0x40
 8001840:	d010      	beq.n	8001864 <HAL_ADC_Init+0x128>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b50      	cmp	r3, #80	; 0x50
 8001848:	d00c      	beq.n	8001864 <HAL_ADC_Init+0x128>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b60      	cmp	r3, #96	; 0x60
 8001850:	d008      	beq.n	8001864 <HAL_ADC_Init+0x128>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b70      	cmp	r3, #112	; 0x70
 8001858:	d004      	beq.n	8001864 <HAL_ADC_Init+0x128>
 800185a:	f240 11c3 	movw	r1, #451	; 0x1c3
 800185e:	485f      	ldr	r0, [pc, #380]	; (80019dc <HAL_ADC_Init+0x2a0>)
 8001860:	f7ff fb88 	bl	8000f74 <assert_failed>
  assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d013      	beq.n	8001894 <HAL_ADC_Init+0x158>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001874:	d00e      	beq.n	8001894 <HAL_ADC_Init+0x158>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187e:	d009      	beq.n	8001894 <HAL_ADC_Init+0x158>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001888:	d004      	beq.n	8001894 <HAL_ADC_Init+0x158>
 800188a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800188e:	4853      	ldr	r0, [pc, #332]	; (80019dc <HAL_ADC_Init+0x2a0>)
 8001890:	f7ff fb70 	bl	8000f74 <assert_failed>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_ADC_Init+0x172>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d004      	beq.n	80018ae <HAL_ADC_Init+0x172>
 80018a4:	f240 11c5 	movw	r1, #453	; 0x1c5
 80018a8:	484c      	ldr	r0, [pc, #304]	; (80019dc <HAL_ADC_Init+0x2a0>)
 80018aa:	f7ff fb63 	bl	8000f74 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d009      	beq.n	80018cc <HAL_ADC_Init+0x190>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d004      	beq.n	80018cc <HAL_ADC_Init+0x190>
 80018c2:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80018c6:	4845      	ldr	r0, [pc, #276]	; (80019dc <HAL_ADC_Init+0x2a0>)
 80018c8:	f7ff fb54 	bl	8000f74 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018d4:	d03e      	beq.n	8001954 <HAL_ADC_Init+0x218>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80018de:	d039      	beq.n	8001954 <HAL_ADC_Init+0x218>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80018e8:	d034      	beq.n	8001954 <HAL_ADC_Init+0x218>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ee:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80018f2:	d02f      	beq.n	8001954 <HAL_ADC_Init+0x218>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018fc:	d02a      	beq.n	8001954 <HAL_ADC_Init+0x218>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001902:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001906:	d025      	beq.n	8001954 <HAL_ADC_Init+0x218>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001910:	d020      	beq.n	8001954 <HAL_ADC_Init+0x218>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001916:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800191a:	d01b      	beq.n	8001954 <HAL_ADC_Init+0x218>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001924:	d016      	beq.n	8001954 <HAL_ADC_Init+0x218>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192a:	2b00      	cmp	r3, #0
 800192c:	d012      	beq.n	8001954 <HAL_ADC_Init+0x218>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001932:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001936:	d00d      	beq.n	8001954 <HAL_ADC_Init+0x218>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8001940:	d008      	beq.n	8001954 <HAL_ADC_Init+0x218>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001946:	2b10      	cmp	r3, #16
 8001948:	d004      	beq.n	8001954 <HAL_ADC_Init+0x218>
 800194a:	f240 11c7 	movw	r1, #455	; 0x1c7
 800194e:	4823      	ldr	r0, [pc, #140]	; (80019dc <HAL_ADC_Init+0x2a0>)
 8001950:	f7ff fb10 	bl	8000f74 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <HAL_ADC_Init+0x236>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001964:	2b01      	cmp	r3, #1
 8001966:	d004      	beq.n	8001972 <HAL_ADC_Init+0x236>
 8001968:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800196c:	481b      	ldr	r0, [pc, #108]	; (80019dc <HAL_ADC_Init+0x2a0>)
 800196e:	f7ff fb01 	bl	8000f74 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d032      	beq.n	80019e0 <HAL_ADC_Init+0x2a4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_ADC_Init+0x24e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	2b1c      	cmp	r3, #28
 8001988:	d904      	bls.n	8001994 <HAL_ADC_Init+0x258>
 800198a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800198e:	4813      	ldr	r0, [pc, #76]	; (80019dc <HAL_ADC_Init+0x2a0>)
 8001990:	f7ff faf0 	bl	8000f74 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_ADC_Init+0x276>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d004      	beq.n	80019b2 <HAL_ADC_Init+0x276>
 80019a8:	f240 11cd 	movw	r1, #461	; 0x1cd
 80019ac:	480b      	ldr	r0, [pc, #44]	; (80019dc <HAL_ADC_Init+0x2a0>)
 80019ae:	f7ff fae1 	bl	8000f74 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d011      	beq.n	80019e0 <HAL_ADC_Init+0x2a4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_ADC_Init+0x290>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d909      	bls.n	80019e0 <HAL_ADC_Init+0x2a4>
 80019cc:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <HAL_ADC_Init+0x2a0>)
 80019d2:	f7ff facf 	bl	8000f74 <assert_failed>
 80019d6:	e003      	b.n	80019e0 <HAL_ADC_Init+0x2a4>
 80019d8:	40012400 	.word	0x40012400
 80019dc:	08009700 	.word	0x08009700
    }
  }
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e4:	2b10      	cmp	r3, #16
 80019e6:	d017      	beq.n	8001a18 <HAL_ADC_Init+0x2dc>
  {
    assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_ADC_Init+0x2dc>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019f8:	d00e      	beq.n	8001a18 <HAL_ADC_Init+0x2dc>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a02:	d009      	beq.n	8001a18 <HAL_ADC_Init+0x2dc>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001a0c:	d004      	beq.n	8001a18 <HAL_ADC_Init+0x2dc>
 8001a0e:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8001a12:	4896      	ldr	r0, [pc, #600]	; (8001c6c <HAL_ADC_Init+0x530>)
 8001a14:	f7ff faae 	bl	8000f74 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d115      	bne.n	8001a4c <HAL_ADC_Init+0x310>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	4b90      	ldr	r3, [pc, #576]	; (8001c70 <HAL_ADC_Init+0x534>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a8f      	ldr	r2, [pc, #572]	; (8001c70 <HAL_ADC_Init+0x534>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	4b8d      	ldr	r3, [pc, #564]	; (8001c70 <HAL_ADC_Init+0x534>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7fe ffee 	bl	8000a28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f040 80ff 	bne.w	8001c58 <HAL_ADC_Init+0x51c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a62:	f023 0302 	bic.w	r3, r3, #2
 8001a66:	f043 0202 	orr.w	r2, r3, #2
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001a6e:	4b81      	ldr	r3, [pc, #516]	; (8001c74 <HAL_ADC_Init+0x538>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	497e      	ldr	r1, [pc, #504]	; (8001c74 <HAL_ADC_Init+0x538>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001a88:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a90:	4619      	mov	r1, r3
 8001a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a96:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001aac:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ab2:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aba:	4619      	mov	r1, r3
 8001abc:	2302      	movs	r3, #2
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001ad4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae0:	2b10      	cmp	r3, #16
 8001ae2:	d007      	beq.n	8001af4 <HAL_ADC_Init+0x3b8>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001aec:	4313      	orrs	r3, r2
 8001aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af0:	4313      	orrs	r3, r2
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afe:	2b40      	cmp	r3, #64	; 0x40
 8001b00:	d04f      	beq.n	8001ba2 <HAL_ADC_Init+0x466>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001b14:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6912      	ldr	r2, [r2, #16]
 8001b1a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001b1e:	d003      	beq.n	8001b28 <HAL_ADC_Init+0x3ec>
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6912      	ldr	r2, [r2, #16]
 8001b24:	2a01      	cmp	r2, #1
 8001b26:	d102      	bne.n	8001b2e <HAL_ADC_Init+0x3f2>
 8001b28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b2c:	e000      	b.n	8001b30 <HAL_ADC_Init+0x3f4>
 8001b2e:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001b30:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b34:	4313      	orrs	r3, r2
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d125      	bne.n	8001b8e <HAL_ADC_Init+0x452>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d114      	bne.n	8001b76 <HAL_ADC_Init+0x43a>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	3b01      	subs	r3, #1
 8001b52:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001b56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	fa92 f2a2 	rbit	r2, r2
 8001b5e:	617a      	str	r2, [r7, #20]
  return result;
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	fab2 f282 	clz	r2, r2
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	4093      	lsls	r3, r2
 8001b6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b70:	4313      	orrs	r3, r2
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
 8001b74:	e00b      	b.n	8001b8e <HAL_ADC_Init+0x452>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	f043 0220 	orr.w	r2, r3, #32
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <HAL_ADC_Init+0x53c>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b9e:	430b      	orrs	r3, r1
 8001ba0:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <HAL_ADC_Init+0x540>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bbe:	d003      	beq.n	8001bc8 <HAL_ADC_Init+0x48c>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d119      	bne.n	8001bfc <HAL_ADC_Init+0x4c0>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001bdc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	fa92 f2a2 	rbit	r2, r2
 8001be4:	60fa      	str	r2, [r7, #12]
  return result;
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	fab2 f282 	clz	r2, r2
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	fa03 f202 	lsl.w	r2, r3, r2
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8001bfa:	e007      	b.n	8001c0c <HAL_ADC_Init+0x4d0>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_ADC_Init+0x544>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d10b      	bne.n	8001c34 <HAL_ADC_Init+0x4f8>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	f023 0303 	bic.w	r3, r3, #3
 8001c2a:	f043 0201 	orr.w	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c32:	e014      	b.n	8001c5e <HAL_ADC_Init+0x522>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c38:	f023 0312 	bic.w	r3, r3, #18
 8001c3c:	f043 0210 	orr.w	r2, r3, #16
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c48:	f043 0201 	orr.w	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c56:	e002      	b.n	8001c5e <HAL_ADC_Init+0x522>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3738      	adds	r7, #56	; 0x38
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	08009700 	.word	0x08009700
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40012700 	.word	0x40012700
 8001c78:	fcfc16ff 	.word	0xfcfc16ff
 8001c7c:	c0fff189 	.word	0xc0fff189
 8001c80:	bf80fffe 	.word	0xbf80fffe

08001c84 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a94      	ldr	r2, [pc, #592]	; (8001eec <HAL_ADC_ConfigChannel+0x268>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_ADC_ConfigChannel+0x26>
 8001ca0:	f240 7191 	movw	r1, #1937	; 0x791
 8001ca4:	4892      	ldr	r0, [pc, #584]	; (8001ef0 <HAL_ADC_ConfigChannel+0x26c>)
 8001ca6:	f7ff f965 	bl	8000f74 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8081 	beq.w	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d07c      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d078      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d074      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d070      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d06c      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b06      	cmp	r3, #6
 8001ce2:	d068      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b07      	cmp	r3, #7
 8001cea:	d064      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d060      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b09      	cmp	r3, #9
 8001cfa:	d05c      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b0a      	cmp	r3, #10
 8001d02:	d058      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b0b      	cmp	r3, #11
 8001d0a:	d054      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b0c      	cmp	r3, #12
 8001d12:	d050      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b0d      	cmp	r3, #13
 8001d1a:	d04c      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b0e      	cmp	r3, #14
 8001d22:	d048      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b0f      	cmp	r3, #15
 8001d2a:	d044      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d040      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b11      	cmp	r3, #17
 8001d3a:	d03c      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b12      	cmp	r3, #18
 8001d42:	d038      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b13      	cmp	r3, #19
 8001d4a:	d034      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b14      	cmp	r3, #20
 8001d52:	d030      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b15      	cmp	r3, #21
 8001d5a:	d02c      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b16      	cmp	r3, #22
 8001d62:	d028      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b17      	cmp	r3, #23
 8001d6a:	d024      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b18      	cmp	r3, #24
 8001d72:	d020      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b19      	cmp	r3, #25
 8001d7a:	d01c      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b1a      	cmp	r3, #26
 8001d82:	d018      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b1b      	cmp	r3, #27
 8001d8a:	d014      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b1c      	cmp	r3, #28
 8001d92:	d010      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b1d      	cmp	r3, #29
 8001d9a:	d00c      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b1e      	cmp	r3, #30
 8001da2:	d008      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b1f      	cmp	r3, #31
 8001daa:	d004      	beq.n	8001db6 <HAL_ADC_ConfigChannel+0x132>
 8001dac:	f240 7192 	movw	r1, #1938	; 0x792
 8001db0:	484f      	ldr	r0, [pc, #316]	; (8001ef0 <HAL_ADC_ConfigChannel+0x26c>)
 8001db2:	f7ff f8df 	bl	8000f74 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d070      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d06c      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d068      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d064      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d060      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d05c      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b07      	cmp	r3, #7
 8001dec:	d058      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d054      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b09      	cmp	r3, #9
 8001dfc:	d050      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b0a      	cmp	r3, #10
 8001e04:	d04c      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b0b      	cmp	r3, #11
 8001e0c:	d048      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b0c      	cmp	r3, #12
 8001e14:	d044      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b0d      	cmp	r3, #13
 8001e1c:	d040      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b0e      	cmp	r3, #14
 8001e24:	d03c      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b0f      	cmp	r3, #15
 8001e2c:	d038      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b10      	cmp	r3, #16
 8001e34:	d034      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b11      	cmp	r3, #17
 8001e3c:	d030      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b12      	cmp	r3, #18
 8001e44:	d02c      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b13      	cmp	r3, #19
 8001e4c:	d028      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b14      	cmp	r3, #20
 8001e54:	d024      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b15      	cmp	r3, #21
 8001e5c:	d020      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b16      	cmp	r3, #22
 8001e64:	d01c      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b17      	cmp	r3, #23
 8001e6c:	d018      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b18      	cmp	r3, #24
 8001e74:	d014      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b19      	cmp	r3, #25
 8001e7c:	d010      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b1a      	cmp	r3, #26
 8001e84:	d00c      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b1b      	cmp	r3, #27
 8001e8c:	d008      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b1c      	cmp	r3, #28
 8001e94:	d004      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x21c>
 8001e96:	f240 7193 	movw	r1, #1939	; 0x793
 8001e9a:	4815      	ldr	r0, [pc, #84]	; (8001ef0 <HAL_ADC_ConfigChannel+0x26c>)
 8001e9c:	f7ff f86a 	bl	8000f74 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d025      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0x270>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d021      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0x270>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d01d      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0x270>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d019      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0x270>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d015      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0x270>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	d011      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0x270>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b06      	cmp	r3, #6
 8001ed6:	d00d      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0x270>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b07      	cmp	r3, #7
 8001ede:	d009      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0x270>
 8001ee0:	f240 7194 	movw	r1, #1940	; 0x794
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <HAL_ADC_ConfigChannel+0x26c>)
 8001ee6:	f7ff f845 	bl	8000f74 <assert_failed>
 8001eea:	e003      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x270>
 8001eec:	40012400 	.word	0x40012400
 8001ef0:	08009700 	.word	0x08009700
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x27e>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e14f      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x51e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d81c      	bhi.n	8001f4c <HAL_ADC_ConfigChannel+0x2c8>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	3b05      	subs	r3, #5
 8001f24:	221f      	movs	r2, #31
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	4019      	ands	r1, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b05      	subs	r3, #5
 8001f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40
 8001f4a:	e07e      	b.n	800204a <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b0c      	cmp	r3, #12
 8001f52:	d81c      	bhi.n	8001f8e <HAL_ADC_ConfigChannel+0x30a>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	3b23      	subs	r3, #35	; 0x23
 8001f66:	221f      	movs	r2, #31
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	4019      	ands	r1, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b23      	subs	r3, #35	; 0x23
 8001f80:	fa00 f203 	lsl.w	r2, r0, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f8c:	e05d      	b.n	800204a <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b12      	cmp	r3, #18
 8001f94:	d81c      	bhi.n	8001fd0 <HAL_ADC_ConfigChannel+0x34c>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3b41      	subs	r3, #65	; 0x41
 8001fa8:	221f      	movs	r2, #31
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	4019      	ands	r1, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b41      	subs	r3, #65	; 0x41
 8001fc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	639a      	str	r2, [r3, #56]	; 0x38
 8001fce:	e03c      	b.n	800204a <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b18      	cmp	r3, #24
 8001fd6:	d81c      	bhi.n	8002012 <HAL_ADC_ConfigChannel+0x38e>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3b5f      	subs	r3, #95	; 0x5f
 8001fea:	221f      	movs	r2, #31
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	4019      	ands	r1, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	3b5f      	subs	r3, #95	; 0x5f
 8002004:	fa00 f203 	lsl.w	r2, r0, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	635a      	str	r2, [r3, #52]	; 0x34
 8002010:	e01b      	b.n	800204a <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	3b7d      	subs	r3, #125	; 0x7d
 8002024:	221f      	movs	r2, #31
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	4019      	ands	r1, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	3b7d      	subs	r3, #125	; 0x7d
 800203e:	fa00 f203 	lsl.w	r2, r0, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b09      	cmp	r3, #9
 8002050:	d81a      	bhi.n	8002088 <HAL_ADC_ConfigChannel+0x404>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6959      	ldr	r1, [r3, #20]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	2207      	movs	r2, #7
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	4019      	ands	r1, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6898      	ldr	r0, [r3, #8]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	fa00 f203 	lsl.w	r2, r0, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	615a      	str	r2, [r3, #20]
 8002086:	e05d      	b.n	8002144 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b13      	cmp	r3, #19
 800208e:	d81c      	bhi.n	80020ca <HAL_ADC_ConfigChannel+0x446>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6919      	ldr	r1, [r3, #16]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	3b1e      	subs	r3, #30
 80020a2:	2207      	movs	r2, #7
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	4019      	ands	r1, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	6898      	ldr	r0, [r3, #8]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	4413      	add	r3, r2
 80020ba:	3b1e      	subs	r3, #30
 80020bc:	fa00 f203 	lsl.w	r2, r0, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	611a      	str	r2, [r3, #16]
 80020c8:	e03c      	b.n	8002144 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b1d      	cmp	r3, #29
 80020d0:	d81c      	bhi.n	800210c <HAL_ADC_ConfigChannel+0x488>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68d9      	ldr	r1, [r3, #12]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	3b3c      	subs	r3, #60	; 0x3c
 80020e4:	2207      	movs	r2, #7
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	4019      	ands	r1, r3
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6898      	ldr	r0, [r3, #8]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4613      	mov	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	3b3c      	subs	r3, #60	; 0x3c
 80020fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	e01b      	b.n	8002144 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	3b5a      	subs	r3, #90	; 0x5a
 800211e:	2207      	movs	r2, #7
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	4019      	ands	r1, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	6898      	ldr	r0, [r3, #8]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	3b5a      	subs	r3, #90	; 0x5a
 8002138:	fa00 f203 	lsl.w	r2, r0, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b10      	cmp	r3, #16
 800214a:	d003      	beq.n	8002154 <HAL_ADC_ConfigChannel+0x4d0>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002150:	2b11      	cmp	r3, #17
 8002152:	d121      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x514>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_ADC_ConfigChannel+0x528>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d11b      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x514>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_ADC_ConfigChannel+0x528>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a11      	ldr	r2, [pc, #68]	; (80021ac <HAL_ADC_ConfigChannel+0x528>)
 8002166:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800216a:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b10      	cmp	r3, #16
 8002172:	d111      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x514>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_ADC_ConfigChannel+0x52c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <HAL_ADC_ConfigChannel+0x530>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	0c9a      	lsrs	r2, r3, #18
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800218a:	e002      	b.n	8002192 <HAL_ADC_ConfigChannel+0x50e>
          {
            wait_loop_index--;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	3b01      	subs	r3, #1
 8002190:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f9      	bne.n	800218c <HAL_ADC_ConfigChannel+0x508>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40012700 	.word	0x40012700
 80021b0:	20000000 	.word	0x20000000
 80021b4:	431bde83 	.word	0x431bde83

080021b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4906      	ldr	r1, [pc, #24]	; (8002250 <__NVIC_EnableIRQ+0x34>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	e000e100 	.word	0xe000e100

08002254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db0a      	blt.n	800227e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	490c      	ldr	r1, [pc, #48]	; (80022a0 <__NVIC_SetPriority+0x4c>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800227c:	e00a      	b.n	8002294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <__NVIC_SetPriority+0x50>)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3b04      	subs	r3, #4
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	440b      	add	r3, r1
 8002292:	761a      	strb	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43d9      	mvns	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	4313      	orrs	r3, r2
         );
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b07      	cmp	r3, #7
 8002318:	d00f      	beq.n	800233a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b06      	cmp	r3, #6
 800231e:	d00c      	beq.n	800233a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b05      	cmp	r3, #5
 8002324:	d009      	beq.n	800233a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d006      	beq.n	800233a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b03      	cmp	r3, #3
 8002330:	d003      	beq.n	800233a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002332:	21ac      	movs	r1, #172	; 0xac
 8002334:	4804      	ldr	r0, [pc, #16]	; (8002348 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002336:	f7fe fe1d 	bl	8000f74 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ff3c 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	08009738 	.word	0x08009738

0800234c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b0f      	cmp	r3, #15
 8002362:	d903      	bls.n	800236c <HAL_NVIC_SetPriority+0x20>
 8002364:	21c4      	movs	r1, #196	; 0xc4
 8002366:	480e      	ldr	r0, [pc, #56]	; (80023a0 <HAL_NVIC_SetPriority+0x54>)
 8002368:	f7fe fe04 	bl	8000f74 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b0f      	cmp	r3, #15
 8002370:	d903      	bls.n	800237a <HAL_NVIC_SetPriority+0x2e>
 8002372:	21c5      	movs	r1, #197	; 0xc5
 8002374:	480a      	ldr	r0, [pc, #40]	; (80023a0 <HAL_NVIC_SetPriority+0x54>)
 8002376:	f7fe fdfd 	bl	8000f74 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800237a:	f7ff ff41 	bl	8002200 <__NVIC_GetPriorityGrouping>
 800237e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68b9      	ldr	r1, [r7, #8]
 8002384:	6978      	ldr	r0, [r7, #20]
 8002386:	f7ff ff8f 	bl	80022a8 <NVIC_EncodePriority>
 800238a:	4602      	mov	r2, r0
 800238c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff5e 	bl	8002254 <__NVIC_SetPriority>
}
 8002398:	bf00      	nop
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	08009738 	.word	0x08009738

080023a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	da03      	bge.n	80023be <HAL_NVIC_EnableIRQ+0x1a>
 80023b6:	21d8      	movs	r1, #216	; 0xd8
 80023b8:	4805      	ldr	r0, [pc, #20]	; (80023d0 <HAL_NVIC_EnableIRQ+0x2c>)
 80023ba:	f7fe fddb 	bl	8000f74 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff2a 	bl	800221c <__NVIC_EnableIRQ>
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	08009738 	.word	0x08009738

080023d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a3f      	ldr	r2, [pc, #252]	; (80024ec <HAL_GPIO_Init+0x118>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01f      	beq.n	8002432 <HAL_GPIO_Init+0x5e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a3e      	ldr	r2, [pc, #248]	; (80024f0 <HAL_GPIO_Init+0x11c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01b      	beq.n	8002432 <HAL_GPIO_Init+0x5e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a3d      	ldr	r2, [pc, #244]	; (80024f4 <HAL_GPIO_Init+0x120>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d017      	beq.n	8002432 <HAL_GPIO_Init+0x5e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a3c      	ldr	r2, [pc, #240]	; (80024f8 <HAL_GPIO_Init+0x124>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x5e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a3b      	ldr	r2, [pc, #236]	; (80024fc <HAL_GPIO_Init+0x128>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00f      	beq.n	8002432 <HAL_GPIO_Init+0x5e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a3a      	ldr	r2, [pc, #232]	; (8002500 <HAL_GPIO_Init+0x12c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00b      	beq.n	8002432 <HAL_GPIO_Init+0x5e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a39      	ldr	r2, [pc, #228]	; (8002504 <HAL_GPIO_Init+0x130>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x5e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a38      	ldr	r2, [pc, #224]	; (8002508 <HAL_GPIO_Init+0x134>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x5e>
 800242a:	21b9      	movs	r1, #185	; 0xb9
 800242c:	4837      	ldr	r0, [pc, #220]	; (800250c <HAL_GPIO_Init+0x138>)
 800242e:	f7fe fda1 	bl	8000f74 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_GPIO_Init+0x74>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	041b      	lsls	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x7c>
 8002448:	21ba      	movs	r1, #186	; 0xba
 800244a:	4830      	ldr	r0, [pc, #192]	; (800250c <HAL_GPIO_Init+0x138>)
 800244c:	f7fe fd92 	bl	8000f74 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d035      	beq.n	80024c4 <HAL_GPIO_Init+0xf0>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d031      	beq.n	80024c4 <HAL_GPIO_Init+0xf0>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b11      	cmp	r3, #17
 8002466:	d02d      	beq.n	80024c4 <HAL_GPIO_Init+0xf0>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d029      	beq.n	80024c4 <HAL_GPIO_Init+0xf0>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b12      	cmp	r3, #18
 8002476:	d025      	beq.n	80024c4 <HAL_GPIO_Init+0xf0>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4a24      	ldr	r2, [pc, #144]	; (8002510 <HAL_GPIO_Init+0x13c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d020      	beq.n	80024c4 <HAL_GPIO_Init+0xf0>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4a23      	ldr	r2, [pc, #140]	; (8002514 <HAL_GPIO_Init+0x140>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d01b      	beq.n	80024c4 <HAL_GPIO_Init+0xf0>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a21      	ldr	r2, [pc, #132]	; (8002518 <HAL_GPIO_Init+0x144>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d016      	beq.n	80024c4 <HAL_GPIO_Init+0xf0>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a20      	ldr	r2, [pc, #128]	; (800251c <HAL_GPIO_Init+0x148>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d011      	beq.n	80024c4 <HAL_GPIO_Init+0xf0>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_GPIO_Init+0x14c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00c      	beq.n	80024c4 <HAL_GPIO_Init+0xf0>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a1d      	ldr	r2, [pc, #116]	; (8002524 <HAL_GPIO_Init+0x150>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d007      	beq.n	80024c4 <HAL_GPIO_Init+0xf0>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0xf0>
 80024bc:	21bb      	movs	r1, #187	; 0xbb
 80024be:	4813      	ldr	r0, [pc, #76]	; (800250c <HAL_GPIO_Init+0x138>)
 80024c0:	f7fe fd58 	bl	8000f74 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 81e4 	beq.w	8002896 <HAL_GPIO_Init+0x4c2>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	f000 81df 	beq.w	8002896 <HAL_GPIO_Init+0x4c2>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	f000 81da 	beq.w	8002896 <HAL_GPIO_Init+0x4c2>
 80024e2:	21bc      	movs	r1, #188	; 0xbc
 80024e4:	4809      	ldr	r0, [pc, #36]	; (800250c <HAL_GPIO_Init+0x138>)
 80024e6:	f7fe fd45 	bl	8000f74 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80024ea:	e1d4      	b.n	8002896 <HAL_GPIO_Init+0x4c2>
 80024ec:	40020000 	.word	0x40020000
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40020800 	.word	0x40020800
 80024f8:	40020c00 	.word	0x40020c00
 80024fc:	40021000 	.word	0x40021000
 8002500:	40021800 	.word	0x40021800
 8002504:	40021c00 	.word	0x40021c00
 8002508:	40021400 	.word	0x40021400
 800250c:	08009774 	.word	0x08009774
 8002510:	10110000 	.word	0x10110000
 8002514:	10210000 	.word	0x10210000
 8002518:	10310000 	.word	0x10310000
 800251c:	10120000 	.word	0x10120000
 8002520:	10220000 	.word	0x10220000
 8002524:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 81a8 	beq.w	8002890 <HAL_GPIO_Init+0x4bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x17c>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b12      	cmp	r3, #18
 800254e:	d14f      	bne.n	80025f0 <HAL_GPIO_Init+0x21c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a92      	ldr	r2, [pc, #584]	; (800279c <HAL_GPIO_Init+0x3c8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d01f      	beq.n	8002598 <HAL_GPIO_Init+0x1c4>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a91      	ldr	r2, [pc, #580]	; (80027a0 <HAL_GPIO_Init+0x3cc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d01b      	beq.n	8002598 <HAL_GPIO_Init+0x1c4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a90      	ldr	r2, [pc, #576]	; (80027a4 <HAL_GPIO_Init+0x3d0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d017      	beq.n	8002598 <HAL_GPIO_Init+0x1c4>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a8f      	ldr	r2, [pc, #572]	; (80027a8 <HAL_GPIO_Init+0x3d4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d013      	beq.n	8002598 <HAL_GPIO_Init+0x1c4>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a8e      	ldr	r2, [pc, #568]	; (80027ac <HAL_GPIO_Init+0x3d8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00f      	beq.n	8002598 <HAL_GPIO_Init+0x1c4>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a8d      	ldr	r2, [pc, #564]	; (80027b0 <HAL_GPIO_Init+0x3dc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d00b      	beq.n	8002598 <HAL_GPIO_Init+0x1c4>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a8c      	ldr	r2, [pc, #560]	; (80027b4 <HAL_GPIO_Init+0x3e0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d007      	beq.n	8002598 <HAL_GPIO_Init+0x1c4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a8b      	ldr	r2, [pc, #556]	; (80027b8 <HAL_GPIO_Init+0x3e4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x1c4>
 8002590:	21cb      	movs	r1, #203	; 0xcb
 8002592:	488a      	ldr	r0, [pc, #552]	; (80027bc <HAL_GPIO_Init+0x3e8>)
 8002594:	f7fe fcee 	bl	8000f74 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b0f      	cmp	r3, #15
 800259e:	d903      	bls.n	80025a8 <HAL_GPIO_Init+0x1d4>
 80025a0:	21cc      	movs	r1, #204	; 0xcc
 80025a2:	4886      	ldr	r0, [pc, #536]	; (80027bc <HAL_GPIO_Init+0x3e8>)
 80025a4:	f7fe fce6 	bl	8000f74 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	08da      	lsrs	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3208      	adds	r2, #8
 80025b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	220f      	movs	r2, #15
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	08da      	lsrs	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3208      	adds	r2, #8
 80025ea:	6939      	ldr	r1, [r7, #16]
 80025ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	2203      	movs	r2, #3
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0203 	and.w	r2, r3, #3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d00b      	beq.n	8002644 <HAL_GPIO_Init+0x270>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d007      	beq.n	8002644 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002638:	2b11      	cmp	r3, #17
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b12      	cmp	r3, #18
 8002642:	d144      	bne.n	80026ce <HAL_GPIO_Init+0x2fa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00f      	beq.n	800266c <HAL_GPIO_Init+0x298>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d00b      	beq.n	800266c <HAL_GPIO_Init+0x298>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d007      	beq.n	800266c <HAL_GPIO_Init+0x298>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x298>
 8002664:	21e1      	movs	r1, #225	; 0xe1
 8002666:	4855      	ldr	r0, [pc, #340]	; (80027bc <HAL_GPIO_Init+0x3e8>)
 8002668:	f7fe fc84 	bl	8000f74 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	2203      	movs	r2, #3
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80026a2:	2201      	movs	r2, #1
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	f003 0201 	and.w	r2, r3, #1
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	2203      	movs	r2, #3
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80c2 	beq.w	8002890 <HAL_GPIO_Init+0x4bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270c:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <HAL_GPIO_Init+0x3ec>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a2b      	ldr	r2, [pc, #172]	; (80027c0 <HAL_GPIO_Init+0x3ec>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6213      	str	r3, [r2, #32]
 8002718:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <HAL_GPIO_Init+0x3ec>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8002724:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <HAL_GPIO_Init+0x3f0>)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002730:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	220f      	movs	r2, #15
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a14      	ldr	r2, [pc, #80]	; (800279c <HAL_GPIO_Init+0x3c8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d03b      	beq.n	80027c8 <HAL_GPIO_Init+0x3f4>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <HAL_GPIO_Init+0x3cc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d01f      	beq.n	8002798 <HAL_GPIO_Init+0x3c4>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <HAL_GPIO_Init+0x3d0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d019      	beq.n	8002794 <HAL_GPIO_Init+0x3c0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <HAL_GPIO_Init+0x3d4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d013      	beq.n	8002790 <HAL_GPIO_Init+0x3bc>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a10      	ldr	r2, [pc, #64]	; (80027ac <HAL_GPIO_Init+0x3d8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00d      	beq.n	800278c <HAL_GPIO_Init+0x3b8>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a11      	ldr	r2, [pc, #68]	; (80027b8 <HAL_GPIO_Init+0x3e4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d007      	beq.n	8002788 <HAL_GPIO_Init+0x3b4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <HAL_GPIO_Init+0x3dc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d101      	bne.n	8002784 <HAL_GPIO_Init+0x3b0>
 8002780:	2306      	movs	r3, #6
 8002782:	e022      	b.n	80027ca <HAL_GPIO_Init+0x3f6>
 8002784:	2307      	movs	r3, #7
 8002786:	e020      	b.n	80027ca <HAL_GPIO_Init+0x3f6>
 8002788:	2305      	movs	r3, #5
 800278a:	e01e      	b.n	80027ca <HAL_GPIO_Init+0x3f6>
 800278c:	2304      	movs	r3, #4
 800278e:	e01c      	b.n	80027ca <HAL_GPIO_Init+0x3f6>
 8002790:	2303      	movs	r3, #3
 8002792:	e01a      	b.n	80027ca <HAL_GPIO_Init+0x3f6>
 8002794:	2302      	movs	r3, #2
 8002796:	e018      	b.n	80027ca <HAL_GPIO_Init+0x3f6>
 8002798:	2301      	movs	r3, #1
 800279a:	e016      	b.n	80027ca <HAL_GPIO_Init+0x3f6>
 800279c:	40020000 	.word	0x40020000
 80027a0:	40020400 	.word	0x40020400
 80027a4:	40020800 	.word	0x40020800
 80027a8:	40020c00 	.word	0x40020c00
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40021800 	.word	0x40021800
 80027b4:	40021c00 	.word	0x40021c00
 80027b8:	40021400 	.word	0x40021400
 80027bc:	08009774 	.word	0x08009774
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40010000 	.word	0x40010000
 80027c8:	2300      	movs	r3, #0
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	f002 0203 	and.w	r2, r2, #3
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	4093      	lsls	r3, r2
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027da:	4935      	ldr	r1, [pc, #212]	; (80028b0 <HAL_GPIO_Init+0x4dc>)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e8:	4b32      	ldr	r3, [pc, #200]	; (80028b4 <HAL_GPIO_Init+0x4e0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x438>
        {
          SET_BIT(temp, iocurrent); 
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800280c:	4a29      	ldr	r2, [pc, #164]	; (80028b4 <HAL_GPIO_Init+0x4e0>)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002812:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <HAL_GPIO_Init+0x4e0>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x462>
        {
          SET_BIT(temp, iocurrent); 
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002836:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <HAL_GPIO_Init+0x4e0>)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_GPIO_Init+0x4e0>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x48c>
        {
          SET_BIT(temp, iocurrent); 
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002860:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <HAL_GPIO_Init+0x4e0>)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <HAL_GPIO_Init+0x4e0>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x4b6>
        {
          SET_BIT(temp, iocurrent); 
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800288a:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <HAL_GPIO_Init+0x4e0>)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3301      	adds	r3, #1
 8002894:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f47f ae41 	bne.w	8002528 <HAL_GPIO_Init+0x154>
  } 
}
 80028a6:	bf00      	nop
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40010000 	.word	0x40010000
 80028b4:	40010400 	.word	0x40010400

080028b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	807b      	strh	r3, [r7, #2]
 80028c4:	4613      	mov	r3, r2
 80028c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80028c8:	887b      	ldrh	r3, [r7, #2]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d004      	beq.n	80028d8 <HAL_GPIO_WritePin+0x20>
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	041b      	lsls	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <HAL_GPIO_WritePin+0x2a>
 80028d8:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80028dc:	480e      	ldr	r0, [pc, #56]	; (8002918 <HAL_GPIO_WritePin+0x60>)
 80028de:	f7fe fb49 	bl	8000f74 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80028e2:	787b      	ldrb	r3, [r7, #1]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <HAL_GPIO_WritePin+0x40>
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d004      	beq.n	80028f8 <HAL_GPIO_WritePin+0x40>
 80028ee:	f240 11a5 	movw	r1, #421	; 0x1a5
 80028f2:	4809      	ldr	r0, [pc, #36]	; (8002918 <HAL_GPIO_WritePin+0x60>)
 80028f4:	f7fe fb3e 	bl	8000f74 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80028f8:	787b      	ldrb	r3, [r7, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002904:	e003      	b.n	800290e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	041a      	lsls	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	08009774 	.word	0x08009774

0800291c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d006      	beq.n	8002940 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002932:	4a05      	ldr	r2, [pc, #20]	; (8002948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fd ff5e 	bl	80007fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40010400 	.word	0x40010400

0800294c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e19b      	b.n	8002c96 <HAL_I2C_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a98      	ldr	r2, [pc, #608]	; (8002bc4 <HAL_I2C_Init+0x278>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_I2C_Init+0x30>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a96      	ldr	r2, [pc, #600]	; (8002bc8 <HAL_I2C_Init+0x27c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_I2C_Init+0x30>
 8002972:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002976:	4895      	ldr	r0, [pc, #596]	; (8002bcc <HAL_I2C_Init+0x280>)
 8002978:	f7fe fafc 	bl	8000f74 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d004      	beq.n	800298e <HAL_I2C_Init+0x42>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a91      	ldr	r2, [pc, #580]	; (8002bd0 <HAL_I2C_Init+0x284>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d904      	bls.n	8002998 <HAL_I2C_Init+0x4c>
 800298e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002992:	488e      	ldr	r0, [pc, #568]	; (8002bcc <HAL_I2C_Init+0x280>)
 8002994:	f7fe faee 	bl	8000f74 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d009      	beq.n	80029b4 <HAL_I2C_Init+0x68>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a8:	d004      	beq.n	80029b4 <HAL_I2C_Init+0x68>
 80029aa:	f240 11bd 	movw	r1, #445	; 0x1bd
 80029ae:	4887      	ldr	r0, [pc, #540]	; (8002bcc <HAL_I2C_Init+0x280>)
 80029b0:	f7fe fae0 	bl	8000f74 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029bc:	f023 0303 	bic.w	r3, r3, #3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <HAL_I2C_Init+0x82>
 80029c4:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80029c8:	4880      	ldr	r0, [pc, #512]	; (8002bcc <HAL_I2C_Init+0x280>)
 80029ca:	f7fe fad3 	bl	8000f74 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029d6:	d009      	beq.n	80029ec <HAL_I2C_Init+0xa0>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80029e0:	d004      	beq.n	80029ec <HAL_I2C_Init+0xa0>
 80029e2:	f240 11bf 	movw	r1, #447	; 0x1bf
 80029e6:	4879      	ldr	r0, [pc, #484]	; (8002bcc <HAL_I2C_Init+0x280>)
 80029e8:	f7fe fac4 	bl	8000f74 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_I2C_Init+0xba>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d004      	beq.n	8002a06 <HAL_I2C_Init+0xba>
 80029fc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002a00:	4872      	ldr	r0, [pc, #456]	; (8002bcc <HAL_I2C_Init+0x280>)
 8002a02:	f7fe fab7 	bl	8000f74 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <HAL_I2C_Init+0xd0>
 8002a12:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002a16:	486d      	ldr	r0, [pc, #436]	; (8002bcc <HAL_I2C_Init+0x280>)
 8002a18:	f7fe faac 	bl	8000f74 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_I2C_Init+0xea>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d004      	beq.n	8002a36 <HAL_I2C_Init+0xea>
 8002a2c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002a30:	4866      	ldr	r0, [pc, #408]	; (8002bcc <HAL_I2C_Init+0x280>)
 8002a32:	f7fe fa9f 	bl	8000f74 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_I2C_Init+0x104>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	2b80      	cmp	r3, #128	; 0x80
 8002a44:	d004      	beq.n	8002a50 <HAL_I2C_Init+0x104>
 8002a46:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002a4a:	4860      	ldr	r0, [pc, #384]	; (8002bcc <HAL_I2C_Init+0x280>)
 8002a4c:	f7fe fa92 	bl	8000f74 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d106      	bne.n	8002a6a <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7fe f9bb 	bl	8000de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2224      	movs	r2, #36	; 0x24
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a82:	f001 fdfd 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 8002a86:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a51      	ldr	r2, [pc, #324]	; (8002bd4 <HAL_I2C_Init+0x288>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d807      	bhi.n	8002aa2 <HAL_I2C_Init+0x156>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4a50      	ldr	r2, [pc, #320]	; (8002bd8 <HAL_I2C_Init+0x28c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	bf94      	ite	ls
 8002a9a:	2301      	movls	r3, #1
 8002a9c:	2300      	movhi	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	e006      	b.n	8002ab0 <HAL_I2C_Init+0x164>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a4d      	ldr	r2, [pc, #308]	; (8002bdc <HAL_I2C_Init+0x290>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	bf94      	ite	ls
 8002aaa:	2301      	movls	r3, #1
 8002aac:	2300      	movhi	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_Init+0x16c>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0ee      	b.n	8002c96 <HAL_I2C_Init+0x34a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a49      	ldr	r2, [pc, #292]	; (8002be0 <HAL_I2C_Init+0x294>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	0c9b      	lsrs	r3, r3, #18
 8002ac2:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a3b      	ldr	r2, [pc, #236]	; (8002bd4 <HAL_I2C_Init+0x288>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d802      	bhi.n	8002af2 <HAL_I2C_Init+0x1a6>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	3301      	adds	r3, #1
 8002af0:	e009      	b.n	8002b06 <HAL_I2C_Init+0x1ba>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	4a39      	ldr	r2, [pc, #228]	; (8002be4 <HAL_I2C_Init+0x298>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	3301      	adds	r3, #1
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b18:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	492c      	ldr	r1, [pc, #176]	; (8002bd4 <HAL_I2C_Init+0x288>)
 8002b22:	428b      	cmp	r3, r1
 8002b24:	d80d      	bhi.n	8002b42 <HAL_I2C_Init+0x1f6>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1e59      	subs	r1, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	bf38      	it	cc
 8002b3e:	2304      	movcc	r3, #4
 8002b40:	e062      	b.n	8002c08 <HAL_I2C_Init+0x2bc>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d111      	bne.n	8002b6e <HAL_I2C_Init+0x222>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1e58      	subs	r0, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	440b      	add	r3, r1
 8002b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bf0c      	ite	eq
 8002b66:	2301      	moveq	r3, #1
 8002b68:	2300      	movne	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	e012      	b.n	8002b94 <HAL_I2C_Init+0x248>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1e58      	subs	r0, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6859      	ldr	r1, [r3, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	0099      	lsls	r1, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf0c      	ite	eq
 8002b8e:	2301      	moveq	r3, #1
 8002b90:	2300      	movne	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_I2C_Init+0x250>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e035      	b.n	8002c08 <HAL_I2C_Init+0x2bc>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d121      	bne.n	8002be8 <HAL_I2C_Init+0x29c>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e58      	subs	r0, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	440b      	add	r3, r1
 8002bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc0:	e022      	b.n	8002c08 <HAL_I2C_Init+0x2bc>
 8002bc2:	bf00      	nop
 8002bc4:	40005400 	.word	0x40005400
 8002bc8:	40005800 	.word	0x40005800
 8002bcc:	080097b0 	.word	0x080097b0
 8002bd0:	00061a80 	.word	0x00061a80
 8002bd4:	000186a0 	.word	0x000186a0
 8002bd8:	001e847f 	.word	0x001e847f
 8002bdc:	003d08ff 	.word	0x003d08ff
 8002be0:	431bde83 	.word	0x431bde83
 8002be4:	10624dd3 	.word	0x10624dd3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e58      	subs	r0, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	0099      	lsls	r1, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	6809      	ldr	r1, [r1, #0]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69da      	ldr	r2, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6911      	ldr	r1, [r2, #16]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68d2      	ldr	r2, [r2, #12]
 8002c42:	4311      	orrs	r1, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop

08002ca0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	461a      	mov	r2, r3
 8002cac:	460b      	mov	r3, r1
 8002cae:	817b      	strh	r3, [r7, #10]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7fe fd38 	bl	8001728 <HAL_GetTick>
 8002cb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	f040 80e0 	bne.w	8002e88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2319      	movs	r3, #25
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4970      	ldr	r1, [pc, #448]	; (8002e94 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 fc5a 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e0d3      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_I2C_Master_Transmit+0x50>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e0cc      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d007      	beq.n	8002d16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2221      	movs	r2, #33	; 0x21
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2210      	movs	r2, #16
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	893a      	ldrh	r2, [r7, #8]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a50      	ldr	r2, [pc, #320]	; (8002e98 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d58:	8979      	ldrh	r1, [r7, #10]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	6a3a      	ldr	r2, [r7, #32]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 face 	bl	8003300 <I2C_MasterRequestWrite>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e08d      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d84:	e066      	b.n	8002e54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	6a39      	ldr	r1, [r7, #32]
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 fcd4 	bl	8003738 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00d      	beq.n	8002db2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d107      	bne.n	8002dae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e06b      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d11b      	bne.n	8002e28 <HAL_I2C_Master_Transmit+0x188>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d017      	beq.n	8002e28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	781a      	ldrb	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	6a39      	ldr	r1, [r7, #32]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fcc4 	bl	80037ba <I2C_WaitOnBTFFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00d      	beq.n	8002e54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d107      	bne.n	8002e50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e01a      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d194      	bne.n	8002d86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e000      	b.n	8002e8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
  }
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	00100002 	.word	0x00100002
 8002e98:	ffff0000 	.word	0xffff0000

08002e9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08c      	sub	sp, #48	; 0x30
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	817b      	strh	r3, [r7, #10]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	813b      	strh	r3, [r7, #8]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eb6:	f7fe fc37 	bl	8001728 <HAL_GetTick>
 8002eba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d007      	beq.n	8002ed2 <HAL_I2C_Mem_Read+0x36>
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	2b10      	cmp	r3, #16
 8002ec6:	d004      	beq.n	8002ed2 <HAL_I2C_Mem_Read+0x36>
 8002ec8:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8002ecc:	4881      	ldr	r0, [pc, #516]	; (80030d4 <HAL_I2C_Mem_Read+0x238>)
 8002ece:	f7fe f851 	bl	8000f74 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	f040 8209 	bne.w	80032f2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	497b      	ldr	r1, [pc, #492]	; (80030d8 <HAL_I2C_Mem_Read+0x23c>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fb4e 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e1fc      	b.n	80032f4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_I2C_Mem_Read+0x6c>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e1f5      	b.n	80032f4 <HAL_I2C_Mem_Read+0x458>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d007      	beq.n	8002f2e <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0201 	orr.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2222      	movs	r2, #34	; 0x22
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2240      	movs	r2, #64	; 0x40
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a5b      	ldr	r2, [pc, #364]	; (80030dc <HAL_I2C_Mem_Read+0x240>)
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f70:	88f8      	ldrh	r0, [r7, #6]
 8002f72:	893a      	ldrh	r2, [r7, #8]
 8002f74:	8979      	ldrh	r1, [r7, #10]
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	4603      	mov	r3, r0
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fa33 	bl	80033ec <I2C_RequestMemoryRead>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e1b1      	b.n	80032f4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d113      	bne.n	8002fc0 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f98:	2300      	movs	r3, #0
 8002f9a:	623b      	str	r3, [r7, #32]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	623b      	str	r3, [r7, #32]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	623b      	str	r3, [r7, #32]
 8002fac:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	e185      	b.n	80032cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d11b      	bne.n	8003000 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd6:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	61fb      	str	r3, [r7, #28]
 8002fec:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e165      	b.n	80032cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	2b02      	cmp	r3, #2
 8003006:	d11b      	bne.n	8003040 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003016:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003026:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	61bb      	str	r3, [r7, #24]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	61bb      	str	r3, [r7, #24]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	e145      	b.n	80032cc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003056:	e139      	b.n	80032cc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	2b03      	cmp	r3, #3
 800305e:	f200 80f2 	bhi.w	8003246 <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	2b01      	cmp	r3, #1
 8003068:	d123      	bne.n	80030b2 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 fbe4 	bl	800383c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e13a      	b.n	80032f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b0:	e10c      	b.n	80032cc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d14f      	bne.n	800315a <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	2200      	movs	r2, #0
 80030c2:	4907      	ldr	r1, [pc, #28]	; (80030e0 <HAL_I2C_Mem_Read+0x244>)
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 fa61 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d009      	beq.n	80030e4 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e10f      	b.n	80032f4 <HAL_I2C_Mem_Read+0x458>
 80030d4:	080097b0 	.word	0x080097b0
 80030d8:	00100002 	.word	0x00100002
 80030dc:	ffff0000 	.word	0xffff0000
 80030e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003158:	e0b8      	b.n	80032cc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	2200      	movs	r2, #0
 8003162:	4966      	ldr	r1, [pc, #408]	; (80032fc <HAL_I2C_Mem_Read+0x460>)
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fa11 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0bf      	b.n	80032f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031bc:	2200      	movs	r2, #0
 80031be:	494f      	ldr	r1, [pc, #316]	; (80032fc <HAL_I2C_Mem_Read+0x460>)
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f9e3 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e091      	b.n	80032f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003244:	e042      	b.n	80032cc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003248:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 faf6 	bl	800383c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e04c      	b.n	80032f4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b04      	cmp	r3, #4
 8003298:	d118      	bne.n	80032cc <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f47f aec1 	bne.w	8003058 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e000      	b.n	80032f4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80032f2:	2302      	movs	r3, #2
  }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3728      	adds	r7, #40	; 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	00010004 	.word	0x00010004

08003300 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	460b      	mov	r3, r1
 800330e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d006      	beq.n	800332a <I2C_MasterRequestWrite+0x2a>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d003      	beq.n	800332a <I2C_MasterRequestWrite+0x2a>
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003328:	d108      	bne.n	800333c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e00b      	b.n	8003354 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	2b12      	cmp	r3, #18
 8003342:	d107      	bne.n	8003354 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003352:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f913 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e035      	b.n	80033dc <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003378:	d108      	bne.n	800338c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800337a:	897b      	ldrh	r3, [r7, #10]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003388:	611a      	str	r2, [r3, #16]
 800338a:	e01b      	b.n	80033c4 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800338c:	897b      	ldrh	r3, [r7, #10]
 800338e:	11db      	asrs	r3, r3, #7
 8003390:	b2db      	uxtb	r3, r3
 8003392:	f003 0306 	and.w	r3, r3, #6
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f063 030f 	orn	r3, r3, #15
 800339c:	b2da      	uxtb	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	490e      	ldr	r1, [pc, #56]	; (80033e4 <I2C_MasterRequestWrite+0xe4>)
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f945 	bl	800363a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e010      	b.n	80033dc <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033ba:	897b      	ldrh	r3, [r7, #10]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4907      	ldr	r1, [pc, #28]	; (80033e8 <I2C_MasterRequestWrite+0xe8>)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f935 	bl	800363a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	00010008 	.word	0x00010008
 80033e8:	00010002 	.word	0x00010002

080033ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	4608      	mov	r0, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	461a      	mov	r2, r3
 80033fa:	4603      	mov	r3, r0
 80033fc:	817b      	strh	r3, [r7, #10]
 80033fe:	460b      	mov	r3, r1
 8003400:	813b      	strh	r3, [r7, #8]
 8003402:	4613      	mov	r3, r2
 8003404:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003414:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003424:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	2200      	movs	r2, #0
 800342e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f8aa 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e09e      	b.n	8003580 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003442:	897b      	ldrh	r3, [r7, #10]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003450:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	6a3a      	ldr	r2, [r7, #32]
 8003456:	494c      	ldr	r1, [pc, #304]	; (8003588 <I2C_RequestMemoryRead+0x19c>)
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f8ee 	bl	800363a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e08b      	b.n	8003580 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800347e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003480:	6a39      	ldr	r1, [r7, #32]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f958 	bl	8003738 <I2C_WaitOnTXEFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00d      	beq.n	80034aa <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b04      	cmp	r3, #4
 8003494:	d107      	bne.n	80034a6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e06a      	b.n	8003580 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d105      	bne.n	80034bc <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034b0:	893b      	ldrh	r3, [r7, #8]
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	611a      	str	r2, [r3, #16]
 80034ba:	e021      	b.n	8003500 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034bc:	893b      	ldrh	r3, [r7, #8]
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034cc:	6a39      	ldr	r1, [r7, #32]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f932 	bl	8003738 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00d      	beq.n	80034f6 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d107      	bne.n	80034f2 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e044      	b.n	8003580 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034f6:	893b      	ldrh	r3, [r7, #8]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003502:	6a39      	ldr	r1, [r7, #32]
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f917 	bl	8003738 <I2C_WaitOnTXEFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00d      	beq.n	800352c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	2b04      	cmp	r3, #4
 8003516:	d107      	bne.n	8003528 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003526:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e029      	b.n	8003580 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800353a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	2200      	movs	r2, #0
 8003544:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f81f 	bl	800358c <I2C_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e013      	b.n	8003580 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003558:	897b      	ldrh	r3, [r7, #10]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	b2da      	uxtb	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	6a3a      	ldr	r2, [r7, #32]
 800356c:	4906      	ldr	r1, [pc, #24]	; (8003588 <I2C_RequestMemoryRead+0x19c>)
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f863 	bl	800363a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	00010002 	.word	0x00010002

0800358c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800359c:	e025      	b.n	80035ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d021      	beq.n	80035ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a6:	f7fe f8bf 	bl	8001728 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d302      	bcc.n	80035bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d116      	bne.n	80035ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f043 0220 	orr.w	r2, r3, #32
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e023      	b.n	8003632 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d10d      	bne.n	8003610 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	43da      	mvns	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4013      	ands	r3, r2
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	bf0c      	ite	eq
 8003606:	2301      	moveq	r3, #1
 8003608:	2300      	movne	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	e00c      	b.n	800362a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	43da      	mvns	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4013      	ands	r3, r2
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf0c      	ite	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	2300      	movne	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	429a      	cmp	r2, r3
 800362e:	d0b6      	beq.n	800359e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003648:	e051      	b.n	80036ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003658:	d123      	bne.n	80036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003668:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003672:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f043 0204 	orr.w	r2, r3, #4
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e046      	b.n	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d021      	beq.n	80036ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7fe f83d 	bl	8001728 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d116      	bne.n	80036ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e020      	b.n	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d10c      	bne.n	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	43da      	mvns	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	bf14      	ite	ne
 800370a:	2301      	movne	r3, #1
 800370c:	2300      	moveq	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	e00b      	b.n	800372a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	43da      	mvns	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf14      	ite	ne
 8003724:	2301      	movne	r3, #1
 8003726:	2300      	moveq	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d18d      	bne.n	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003744:	e02d      	b.n	80037a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f8ce 	bl	80038e8 <I2C_IsAcknowledgeFailed>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e02d      	b.n	80037b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375c:	d021      	beq.n	80037a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375e:	f7fd ffe3 	bl	8001728 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	429a      	cmp	r2, r3
 800376c:	d302      	bcc.n	8003774 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d116      	bne.n	80037a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f043 0220 	orr.w	r2, r3, #32
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e007      	b.n	80037b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ac:	2b80      	cmp	r3, #128	; 0x80
 80037ae:	d1ca      	bne.n	8003746 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037c6:	e02d      	b.n	8003824 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f88d 	bl	80038e8 <I2C_IsAcknowledgeFailed>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e02d      	b.n	8003834 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037de:	d021      	beq.n	8003824 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e0:	f7fd ffa2 	bl	8001728 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d302      	bcc.n	80037f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d116      	bne.n	8003824 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	f043 0220 	orr.w	r2, r3, #32
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e007      	b.n	8003834 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b04      	cmp	r3, #4
 8003830:	d1ca      	bne.n	80037c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003848:	e042      	b.n	80038d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b10      	cmp	r3, #16
 8003856:	d119      	bne.n	800388c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0210 	mvn.w	r2, #16
 8003860:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e029      	b.n	80038e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388c:	f7fd ff4c 	bl	8001728 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	429a      	cmp	r2, r3
 800389a:	d302      	bcc.n	80038a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d116      	bne.n	80038d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f043 0220 	orr.w	r2, r3, #32
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e007      	b.n	80038e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b40      	cmp	r3, #64	; 0x40
 80038dc:	d1b5      	bne.n	800384a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fe:	d11b      	bne.n	8003938 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003908:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	f043 0204 	orr.w	r2, r3, #4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f000 bc6c 	b.w	8004230 <HAL_RCC_OscConfig+0x8ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d022      	beq.n	80039a6 <HAL_RCC_OscConfig+0x62>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d11c      	bne.n	80039a6 <HAL_RCC_OscConfig+0x62>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d116      	bne.n	80039a6 <HAL_RCC_OscConfig+0x62>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d110      	bne.n	80039a6 <HAL_RCC_OscConfig+0x62>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <HAL_RCC_OscConfig+0x62>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	d104      	bne.n	80039a6 <HAL_RCC_OscConfig+0x62>
 800399c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80039a0:	4897      	ldr	r0, [pc, #604]	; (8003c00 <HAL_RCC_OscConfig+0x2bc>)
 80039a2:	f7fd fae7 	bl	8000f74 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a6:	4b97      	ldr	r3, [pc, #604]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b0:	4b94      	ldr	r3, [pc, #592]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 808e 	beq.w	8003ae4 <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00c      	beq.n	80039ea <HAL_RCC_OscConfig+0xa6>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d008      	beq.n	80039ea <HAL_RCC_OscConfig+0xa6>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b05      	cmp	r3, #5
 80039de:	d004      	beq.n	80039ea <HAL_RCC_OscConfig+0xa6>
 80039e0:	f240 1159 	movw	r1, #345	; 0x159
 80039e4:	4886      	ldr	r0, [pc, #536]	; (8003c00 <HAL_RCC_OscConfig+0x2bc>)
 80039e6:	f7fd fac5 	bl	8000f74 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d006      	beq.n	80039fe <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d110      	bne.n	8003a18 <HAL_RCC_OscConfig+0xd4>
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fe:	4b81      	ldr	r3, [pc, #516]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d06b      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x19e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d167      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	f000 bc0c 	b.w	8004230 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_OscConfig+0xea>
 8003a20:	4b78      	ldr	r3, [pc, #480]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a77      	ldr	r2, [pc, #476]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	e02d      	b.n	8003a8a <HAL_RCC_OscConfig+0x146>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x10c>
 8003a36:	4b73      	ldr	r3, [pc, #460]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a72      	ldr	r2, [pc, #456]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b70      	ldr	r3, [pc, #448]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6f      	ldr	r2, [pc, #444]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e01c      	b.n	8003a8a <HAL_RCC_OscConfig+0x146>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b05      	cmp	r3, #5
 8003a56:	d10c      	bne.n	8003a72 <HAL_RCC_OscConfig+0x12e>
 8003a58:	4b6a      	ldr	r3, [pc, #424]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a69      	ldr	r2, [pc, #420]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b67      	ldr	r3, [pc, #412]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a66      	ldr	r2, [pc, #408]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	e00b      	b.n	8003a8a <HAL_RCC_OscConfig+0x146>
 8003a72:	4b64      	ldr	r3, [pc, #400]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a63      	ldr	r2, [pc, #396]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a60      	ldr	r2, [pc, #384]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d013      	beq.n	8003aba <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fd fe49 	bl	8001728 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a9a:	f7fd fe45 	bl	8001728 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b64      	cmp	r3, #100	; 0x64
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e3c1      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003aac:	4b55      	ldr	r3, [pc, #340]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x156>
 8003ab8:	e014      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fd fe35 	bl	8001728 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac2:	f7fd fe31 	bl	8001728 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b64      	cmp	r3, #100	; 0x64
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e3ad      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ad4:	4b4b      	ldr	r3, [pc, #300]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x17e>
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d070      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_RCC_OscConfig+0x1c6>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d004      	beq.n	8003b0a <HAL_RCC_OscConfig+0x1c6>
 8003b00:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003b04:	483e      	ldr	r0, [pc, #248]	; (8003c00 <HAL_RCC_OscConfig+0x2bc>)
 8003b06:	f7fd fa35 	bl	8000f74 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b1f      	cmp	r3, #31
 8003b10:	d904      	bls.n	8003b1c <HAL_RCC_OscConfig+0x1d8>
 8003b12:	f240 118d 	movw	r1, #397	; 0x18d
 8003b16:	483a      	ldr	r0, [pc, #232]	; (8003c00 <HAL_RCC_OscConfig+0x2bc>)
 8003b18:	f7fd fa2c 	bl	8000f74 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d005      	beq.n	8003b2e <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	d119      	bne.n	8003b5c <HAL_RCC_OscConfig+0x218>
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d116      	bne.n	8003b5c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2e:	4b35      	ldr	r3, [pc, #212]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_RCC_OscConfig+0x202>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d001      	beq.n	8003b46 <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e374      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b46:	4b2f      	ldr	r3, [pc, #188]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	492b      	ldr	r1, [pc, #172]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b5a:	e03a      	b.n	8003bd2 <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b64:	4b28      	ldr	r3, [pc, #160]	; (8003c08 <HAL_RCC_OscConfig+0x2c4>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6a:	f7fd fddd 	bl	8001728 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b72:	f7fd fdd9 	bl	8001728 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e355      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b84:	4b1f      	ldr	r3, [pc, #124]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b90:	4b1c      	ldr	r3, [pc, #112]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	4919      	ldr	r1, [pc, #100]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]
 8003ba4:	e015      	b.n	8003bd2 <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba6:	4b18      	ldr	r3, [pc, #96]	; (8003c08 <HAL_RCC_OscConfig+0x2c4>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fd fdbc 	bl	8001728 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb4:	f7fd fdb8 	bl	8001728 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e334      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bc6:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8129 	beq.w	8003e32 <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f040 80a4 	bne.w	8003d30 <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_RCC_OscConfig+0x2c0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00b      	beq.n	8003c0c <HAL_RCC_OscConfig+0x2c8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d107      	bne.n	8003c0c <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e317      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
 8003c00:	080097e8 	.word	0x080097e8
 8003c04:	40023800 	.word	0x40023800
 8003c08:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	2bff      	cmp	r3, #255	; 0xff
 8003c12:	d904      	bls.n	8003c1e <HAL_RCC_OscConfig+0x2da>
 8003c14:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003c18:	48a5      	ldr	r0, [pc, #660]	; (8003eb0 <HAL_RCC_OscConfig+0x56c>)
 8003c1a:	f7fd f9ab 	bl	8000f74 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d022      	beq.n	8003c6c <HAL_RCC_OscConfig+0x328>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2e:	d01d      	beq.n	8003c6c <HAL_RCC_OscConfig+0x328>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c38:	d018      	beq.n	8003c6c <HAL_RCC_OscConfig+0x328>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c42:	d013      	beq.n	8003c6c <HAL_RCC_OscConfig+0x328>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c4c:	d00e      	beq.n	8003c6c <HAL_RCC_OscConfig+0x328>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c56:	d009      	beq.n	8003c6c <HAL_RCC_OscConfig+0x328>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c60:	d004      	beq.n	8003c6c <HAL_RCC_OscConfig+0x328>
 8003c62:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003c66:	4892      	ldr	r0, [pc, #584]	; (8003eb0 <HAL_RCC_OscConfig+0x56c>)
 8003c68:	f7fd f984 	bl	8000f74 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1a      	ldr	r2, [r3, #32]
 8003c70:	4b90      	ldr	r3, [pc, #576]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d91d      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fd67 	bl	8004754 <RCC_SetFlashLatencyFromMSIRange>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e2cf      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c90:	4b88      	ldr	r3, [pc, #544]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	4985      	ldr	r1, [pc, #532]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca2:	4b84      	ldr	r3, [pc, #528]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	061b      	lsls	r3, r3, #24
 8003cb0:	4980      	ldr	r1, [pc, #512]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
 8003cb6:	e01c      	b.n	8003cf2 <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cb8:	4b7e      	ldr	r3, [pc, #504]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	497b      	ldr	r1, [pc, #492]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cca:	4b7a      	ldr	r3, [pc, #488]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	061b      	lsls	r3, r3, #24
 8003cd8:	4976      	ldr	r1, [pc, #472]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fd36 	bl	8004754 <RCC_SetFlashLatencyFromMSIRange>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e29e      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	0b5b      	lsrs	r3, r3, #13
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003d02:	4a6c      	ldr	r2, [pc, #432]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003d04:	6892      	ldr	r2, [r2, #8]
 8003d06:	0912      	lsrs	r2, r2, #4
 8003d08:	f002 020f 	and.w	r2, r2, #15
 8003d0c:	496a      	ldr	r1, [pc, #424]	; (8003eb8 <HAL_RCC_OscConfig+0x574>)
 8003d0e:	5c8a      	ldrb	r2, [r1, r2]
 8003d10:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003d12:	4a6a      	ldr	r2, [pc, #424]	; (8003ebc <HAL_RCC_OscConfig+0x578>)
 8003d14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d16:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <HAL_RCC_OscConfig+0x57c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fd f968 	bl	8000ff0 <HAL_InitTick>
 8003d20:	4603      	mov	r3, r0
 8003d22:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8083 	beq.w	8003e32 <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	e27f      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_RCC_OscConfig+0x406>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d004      	beq.n	8003d4a <HAL_RCC_OscConfig+0x406>
 8003d40:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003d44:	485a      	ldr	r0, [pc, #360]	; (8003eb0 <HAL_RCC_OscConfig+0x56c>)
 8003d46:	f7fd f915 	bl	8000f74 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d059      	beq.n	8003e06 <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d52:	4b5c      	ldr	r3, [pc, #368]	; (8003ec4 <HAL_RCC_OscConfig+0x580>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fd fce6 	bl	8001728 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d60:	f7fd fce2 	bl	8001728 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e25e      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d72:	4b50      	ldr	r3, [pc, #320]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	2bff      	cmp	r3, #255	; 0xff
 8003d84:	d904      	bls.n	8003d90 <HAL_RCC_OscConfig+0x44c>
 8003d86:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8003d8a:	4849      	ldr	r0, [pc, #292]	; (8003eb0 <HAL_RCC_OscConfig+0x56c>)
 8003d8c:	f7fd f8f2 	bl	8000f74 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d022      	beq.n	8003dde <HAL_RCC_OscConfig+0x49a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da0:	d01d      	beq.n	8003dde <HAL_RCC_OscConfig+0x49a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003daa:	d018      	beq.n	8003dde <HAL_RCC_OscConfig+0x49a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003db4:	d013      	beq.n	8003dde <HAL_RCC_OscConfig+0x49a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbe:	d00e      	beq.n	8003dde <HAL_RCC_OscConfig+0x49a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003dc8:	d009      	beq.n	8003dde <HAL_RCC_OscConfig+0x49a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dd2:	d004      	beq.n	8003dde <HAL_RCC_OscConfig+0x49a>
 8003dd4:	f240 211d 	movw	r1, #541	; 0x21d
 8003dd8:	4835      	ldr	r0, [pc, #212]	; (8003eb0 <HAL_RCC_OscConfig+0x56c>)
 8003dda:	f7fd f8cb 	bl	8000f74 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dde:	4b35      	ldr	r3, [pc, #212]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	4932      	ldr	r1, [pc, #200]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003df0:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	492d      	ldr	r1, [pc, #180]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
 8003e04:	e015      	b.n	8003e32 <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e06:	4b2f      	ldr	r3, [pc, #188]	; (8003ec4 <HAL_RCC_OscConfig+0x580>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fd fc8c 	bl	8001728 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e14:	f7fd fc88 	bl	8001728 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e204      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003e26:	4b23      	ldr	r3, [pc, #140]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d04c      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_RCC_OscConfig+0x514>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d004      	beq.n	8003e58 <HAL_RCC_OscConfig+0x514>
 8003e4e:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8003e52:	4817      	ldr	r0, [pc, #92]	; (8003eb0 <HAL_RCC_OscConfig+0x56c>)
 8003e54:	f7fd f88e 	bl	8000f74 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d016      	beq.n	8003e8e <HAL_RCC_OscConfig+0x54a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e60:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <HAL_RCC_OscConfig+0x584>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e66:	f7fd fc5f 	bl	8001728 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e6e:	f7fd fc5b 	bl	8001728 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e1d7      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <HAL_RCC_OscConfig+0x570>)
 8003e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x52a>
 8003e8c:	e024      	b.n	8003ed8 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ec8 <HAL_RCC_OscConfig+0x584>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e94:	f7fd fc48 	bl	8001728 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e9a:	e017      	b.n	8003ecc <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e9c:	f7fd fc44 	bl	8001728 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d910      	bls.n	8003ecc <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e1c0      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
 8003eae:	bf00      	nop
 8003eb0:	080097e8 	.word	0x080097e8
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	080099bc 	.word	0x080099bc
 8003ebc:	20000000 	.word	0x20000000
 8003ec0:	20000004 	.word	0x20000004
 8003ec4:	42470020 	.word	0x42470020
 8003ec8:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ecc:	4ba2      	ldr	r3, [pc, #648]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e1      	bne.n	8003e9c <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 80b7 	beq.w	8004054 <HAL_RCC_OscConfig+0x710>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00c      	beq.n	8003f0c <HAL_RCC_OscConfig+0x5c8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCC_OscConfig+0x5c8>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b05      	cmp	r3, #5
 8003f00:	d004      	beq.n	8003f0c <HAL_RCC_OscConfig+0x5c8>
 8003f02:	f44f 711a 	mov.w	r1, #616	; 0x268
 8003f06:	4895      	ldr	r0, [pc, #596]	; (800415c <HAL_RCC_OscConfig+0x818>)
 8003f08:	f7fd f834 	bl	8000f74 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0c:	4b92      	ldr	r3, [pc, #584]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10d      	bne.n	8003f34 <HAL_RCC_OscConfig+0x5f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f18:	4b8f      	ldr	r3, [pc, #572]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	4a8e      	ldr	r2, [pc, #568]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f22:	6253      	str	r3, [r2, #36]	; 0x24
 8003f24:	4b8c      	ldr	r3, [pc, #560]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f30:	2301      	movs	r3, #1
 8003f32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f34:	4b8a      	ldr	r3, [pc, #552]	; (8004160 <HAL_RCC_OscConfig+0x81c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d118      	bne.n	8003f72 <HAL_RCC_OscConfig+0x62e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f40:	4b87      	ldr	r3, [pc, #540]	; (8004160 <HAL_RCC_OscConfig+0x81c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a86      	ldr	r2, [pc, #536]	; (8004160 <HAL_RCC_OscConfig+0x81c>)
 8003f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f4c:	f7fd fbec 	bl	8001728 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f54:	f7fd fbe8 	bl	8001728 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e164      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f66:	4b7e      	ldr	r3, [pc, #504]	; (8004160 <HAL_RCC_OscConfig+0x81c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x610>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d106      	bne.n	8003f88 <HAL_RCC_OscConfig+0x644>
 8003f7a:	4b77      	ldr	r3, [pc, #476]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7e:	4a76      	ldr	r2, [pc, #472]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f84:	6353      	str	r3, [r2, #52]	; 0x34
 8003f86:	e02d      	b.n	8003fe4 <HAL_RCC_OscConfig+0x6a0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10c      	bne.n	8003faa <HAL_RCC_OscConfig+0x666>
 8003f90:	4b71      	ldr	r3, [pc, #452]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	4a70      	ldr	r2, [pc, #448]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f9a:	6353      	str	r3, [r2, #52]	; 0x34
 8003f9c:	4b6e      	ldr	r3, [pc, #440]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa0:	4a6d      	ldr	r2, [pc, #436]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003fa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fa6:	6353      	str	r3, [r2, #52]	; 0x34
 8003fa8:	e01c      	b.n	8003fe4 <HAL_RCC_OscConfig+0x6a0>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x688>
 8003fb2:	4b69      	ldr	r3, [pc, #420]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	4a68      	ldr	r2, [pc, #416]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003fb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fbc:	6353      	str	r3, [r2, #52]	; 0x34
 8003fbe:	4b66      	ldr	r3, [pc, #408]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc2:	4a65      	ldr	r2, [pc, #404]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc8:	6353      	str	r3, [r2, #52]	; 0x34
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0x6a0>
 8003fcc:	4b62      	ldr	r3, [pc, #392]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd0:	4a61      	ldr	r2, [pc, #388]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd6:	6353      	str	r3, [r2, #52]	; 0x34
 8003fd8:	4b5f      	ldr	r3, [pc, #380]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fdc:	4a5e      	ldr	r2, [pc, #376]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8003fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe2:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d015      	beq.n	8004018 <HAL_RCC_OscConfig+0x6d4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fec:	f7fd fb9c 	bl	8001728 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fd fb98 	bl	8001728 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e112      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800400a:	4b53      	ldr	r3, [pc, #332]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 800400c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0ee      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x6b0>
 8004016:	e014      	b.n	8004042 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004018:	f7fd fb86 	bl	8001728 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800401e:	e00a      	b.n	8004036 <HAL_RCC_OscConfig+0x6f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004020:	f7fd fb82 	bl	8001728 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	; 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e0fc      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004036:	4b48      	ldr	r3, [pc, #288]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 8004038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1ee      	bne.n	8004020 <HAL_RCC_OscConfig+0x6dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004042:	7ffb      	ldrb	r3, [r7, #31]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <HAL_RCC_OscConfig+0x710>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004048:	4b43      	ldr	r3, [pc, #268]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	4a42      	ldr	r2, [pc, #264]	; (8004158 <HAL_RCC_OscConfig+0x814>)
 800404e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004052:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00c      	beq.n	8004076 <HAL_RCC_OscConfig+0x732>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	2b01      	cmp	r3, #1
 8004062:	d008      	beq.n	8004076 <HAL_RCC_OscConfig+0x732>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	2b02      	cmp	r3, #2
 800406a:	d004      	beq.n	8004076 <HAL_RCC_OscConfig+0x732>
 800406c:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8004070:	483a      	ldr	r0, [pc, #232]	; (800415c <HAL_RCC_OscConfig+0x818>)
 8004072:	f7fc ff7f 	bl	8000f74 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80d7 	beq.w	800422e <HAL_RCC_OscConfig+0x8ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	2b0c      	cmp	r3, #12
 8004084:	f000 80b3 	beq.w	80041ee <HAL_RCC_OscConfig+0x8aa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	2b02      	cmp	r3, #2
 800408e:	f040 8097 	bne.w	80041c0 <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	d009      	beq.n	80040ae <HAL_RCC_OscConfig+0x76a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a2:	d004      	beq.n	80040ae <HAL_RCC_OscConfig+0x76a>
 80040a4:	f240 21b5 	movw	r1, #693	; 0x2b5
 80040a8:	482c      	ldr	r0, [pc, #176]	; (800415c <HAL_RCC_OscConfig+0x818>)
 80040aa:	f7fc ff63 	bl	8000f74 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d02c      	beq.n	8004110 <HAL_RCC_OscConfig+0x7cc>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040be:	d027      	beq.n	8004110 <HAL_RCC_OscConfig+0x7cc>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040c8:	d022      	beq.n	8004110 <HAL_RCC_OscConfig+0x7cc>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80040d2:	d01d      	beq.n	8004110 <HAL_RCC_OscConfig+0x7cc>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040dc:	d018      	beq.n	8004110 <HAL_RCC_OscConfig+0x7cc>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80040e6:	d013      	beq.n	8004110 <HAL_RCC_OscConfig+0x7cc>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80040f0:	d00e      	beq.n	8004110 <HAL_RCC_OscConfig+0x7cc>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80040fa:	d009      	beq.n	8004110 <HAL_RCC_OscConfig+0x7cc>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004104:	d004      	beq.n	8004110 <HAL_RCC_OscConfig+0x7cc>
 8004106:	f240 21b6 	movw	r1, #694	; 0x2b6
 800410a:	4814      	ldr	r0, [pc, #80]	; (800415c <HAL_RCC_OscConfig+0x818>)
 800410c:	f7fc ff32 	bl	8000f74 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004118:	d00e      	beq.n	8004138 <HAL_RCC_OscConfig+0x7f4>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004122:	d009      	beq.n	8004138 <HAL_RCC_OscConfig+0x7f4>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800412c:	d004      	beq.n	8004138 <HAL_RCC_OscConfig+0x7f4>
 800412e:	f240 21b7 	movw	r1, #695	; 0x2b7
 8004132:	480a      	ldr	r0, [pc, #40]	; (800415c <HAL_RCC_OscConfig+0x818>)
 8004134:	f7fc ff1e 	bl	8000f74 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <HAL_RCC_OscConfig+0x820>)
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413e:	f7fd faf3 	bl	8001728 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004144:	e010      	b.n	8004168 <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004146:	f7fd faef 	bl	8001728 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d909      	bls.n	8004168 <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e06b      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
 8004158:	40023800 	.word	0x40023800
 800415c:	080097e8 	.word	0x080097e8
 8004160:	40007000 	.word	0x40007000
 8004164:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004168:	4b33      	ldr	r3, [pc, #204]	; (8004238 <HAL_RCC_OscConfig+0x8f4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e8      	bne.n	8004146 <HAL_RCC_OscConfig+0x802>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004174:	4b30      	ldr	r3, [pc, #192]	; (8004238 <HAL_RCC_OscConfig+0x8f4>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	4319      	orrs	r1, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	430b      	orrs	r3, r1
 800418c:	492a      	ldr	r1, [pc, #168]	; (8004238 <HAL_RCC_OscConfig+0x8f4>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004192:	4b2a      	ldr	r3, [pc, #168]	; (800423c <HAL_RCC_OscConfig+0x8f8>)
 8004194:	2201      	movs	r2, #1
 8004196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004198:	f7fd fac6 	bl	8001728 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a0:	f7fd fac2 	bl	8001728 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e03e      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041b2:	4b21      	ldr	r3, [pc, #132]	; (8004238 <HAL_RCC_OscConfig+0x8f4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0x85c>
 80041be:	e036      	b.n	800422e <HAL_RCC_OscConfig+0x8ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c0:	4b1e      	ldr	r3, [pc, #120]	; (800423c <HAL_RCC_OscConfig+0x8f8>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c6:	f7fd faaf 	bl	8001728 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x89c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ce:	f7fd faab 	bl	8001728 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x89c>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e027      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041e0:	4b15      	ldr	r3, [pc, #84]	; (8004238 <HAL_RCC_OscConfig+0x8f4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f0      	bne.n	80041ce <HAL_RCC_OscConfig+0x88a>
 80041ec:	e01f      	b.n	800422e <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_OscConfig+0x8b6>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e01a      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041fa:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <HAL_RCC_OscConfig+0x8f4>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	429a      	cmp	r2, r3
 800420c:	d10d      	bne.n	800422a <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d106      	bne.n	800422a <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x8ea>
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_RCC_OscConfig+0x8ec>
        }
      }
    }
  }

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40023800 	.word	0x40023800
 800423c:	42470060 	.word	0x42470060

08004240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e1a4      	b.n	800459e <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <HAL_RCC_ClockConfig+0x2a>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d004      	beq.n	800426a <HAL_RCC_ClockConfig+0x2a>
 8004260:	f240 312a 	movw	r1, #810	; 0x32a
 8004264:	4893      	ldr	r0, [pc, #588]	; (80044b4 <HAL_RCC_ClockConfig+0x274>)
 8004266:	f7fc fe85 	bl	8000f74 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800426a:	4b93      	ldr	r3, [pc, #588]	; (80044b8 <HAL_RCC_ClockConfig+0x278>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d919      	bls.n	80042ac <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d105      	bne.n	800428a <HAL_RCC_ClockConfig+0x4a>
 800427e:	4b8e      	ldr	r3, [pc, #568]	; (80044b8 <HAL_RCC_ClockConfig+0x278>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a8d      	ldr	r2, [pc, #564]	; (80044b8 <HAL_RCC_ClockConfig+0x278>)
 8004284:	f043 0304 	orr.w	r3, r3, #4
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	4b8b      	ldr	r3, [pc, #556]	; (80044b8 <HAL_RCC_ClockConfig+0x278>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f023 0201 	bic.w	r2, r3, #1
 8004292:	4989      	ldr	r1, [pc, #548]	; (80044b8 <HAL_RCC_ClockConfig+0x278>)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	4313      	orrs	r3, r2
 8004298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800429a:	4b87      	ldr	r3, [pc, #540]	; (80044b8 <HAL_RCC_ClockConfig+0x278>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e178      	b.n	800459e <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d031      	beq.n	800431c <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d024      	beq.n	800430a <HAL_RCC_ClockConfig+0xca>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	d020      	beq.n	800430a <HAL_RCC_ClockConfig+0xca>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b90      	cmp	r3, #144	; 0x90
 80042ce:	d01c      	beq.n	800430a <HAL_RCC_ClockConfig+0xca>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2ba0      	cmp	r3, #160	; 0xa0
 80042d6:	d018      	beq.n	800430a <HAL_RCC_ClockConfig+0xca>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2bb0      	cmp	r3, #176	; 0xb0
 80042de:	d014      	beq.n	800430a <HAL_RCC_ClockConfig+0xca>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2bc0      	cmp	r3, #192	; 0xc0
 80042e6:	d010      	beq.n	800430a <HAL_RCC_ClockConfig+0xca>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2bd0      	cmp	r3, #208	; 0xd0
 80042ee:	d00c      	beq.n	800430a <HAL_RCC_ClockConfig+0xca>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2be0      	cmp	r3, #224	; 0xe0
 80042f6:	d008      	beq.n	800430a <HAL_RCC_ClockConfig+0xca>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2bf0      	cmp	r3, #240	; 0xf0
 80042fe:	d004      	beq.n	800430a <HAL_RCC_ClockConfig+0xca>
 8004300:	f240 3141 	movw	r1, #833	; 0x341
 8004304:	486b      	ldr	r0, [pc, #428]	; (80044b4 <HAL_RCC_ClockConfig+0x274>)
 8004306:	f7fc fe35 	bl	8000f74 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800430a:	4b6c      	ldr	r3, [pc, #432]	; (80044bc <HAL_RCC_ClockConfig+0x27c>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	4969      	ldr	r1, [pc, #420]	; (80044bc <HAL_RCC_ClockConfig+0x27c>)
 8004318:	4313      	orrs	r3, r2
 800431a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80a3 	beq.w	8004470 <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d010      	beq.n	8004354 <HAL_RCC_ClockConfig+0x114>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d00c      	beq.n	8004354 <HAL_RCC_ClockConfig+0x114>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d008      	beq.n	8004354 <HAL_RCC_ClockConfig+0x114>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b03      	cmp	r3, #3
 8004348:	d004      	beq.n	8004354 <HAL_RCC_ClockConfig+0x114>
 800434a:	f44f 7152 	mov.w	r1, #840	; 0x348
 800434e:	4859      	ldr	r0, [pc, #356]	; (80044b4 <HAL_RCC_ClockConfig+0x274>)
 8004350:	f7fc fe10 	bl	8000f74 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d107      	bne.n	800436c <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800435c:	4b57      	ldr	r3, [pc, #348]	; (80044bc <HAL_RCC_ClockConfig+0x27c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d121      	bne.n	80043ac <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e118      	b.n	800459e <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b03      	cmp	r3, #3
 8004372:	d107      	bne.n	8004384 <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004374:	4b51      	ldr	r3, [pc, #324]	; (80044bc <HAL_RCC_ClockConfig+0x27c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d115      	bne.n	80043ac <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e10c      	b.n	800459e <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d107      	bne.n	800439c <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800438c:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <HAL_RCC_ClockConfig+0x27c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d109      	bne.n	80043ac <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e100      	b.n	800459e <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800439c:	4b47      	ldr	r3, [pc, #284]	; (80044bc <HAL_RCC_ClockConfig+0x27c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0f8      	b.n	800459e <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ac:	4b43      	ldr	r3, [pc, #268]	; (80044bc <HAL_RCC_ClockConfig+0x27c>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f023 0203 	bic.w	r2, r3, #3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4940      	ldr	r1, [pc, #256]	; (80044bc <HAL_RCC_ClockConfig+0x27c>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043be:	f7fd f9b3 	bl	8001728 <HAL_GetTick>
 80043c2:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d112      	bne.n	80043f2 <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ce:	f7fd f9ab 	bl	8001728 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043dc:	4293      	cmp	r3, r2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e0dc      	b.n	800459e <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80043e4:	4b35      	ldr	r3, [pc, #212]	; (80044bc <HAL_RCC_ClockConfig+0x27c>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 030c 	and.w	r3, r3, #12
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d1ee      	bne.n	80043ce <HAL_RCC_ClockConfig+0x18e>
 80043f0:	e03e      	b.n	8004470 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d112      	bne.n	8004420 <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043fc:	f7fd f994 	bl	8001728 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	; 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e0c5      	b.n	800459e <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004412:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <HAL_RCC_ClockConfig+0x27c>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b0c      	cmp	r3, #12
 800441c:	d1ee      	bne.n	80043fc <HAL_RCC_ClockConfig+0x1bc>
 800441e:	e027      	b.n	8004470 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d11d      	bne.n	8004464 <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004428:	e00a      	b.n	8004440 <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800442a:	f7fd f97d 	bl	8001728 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f241 3288 	movw	r2, #5000	; 0x1388
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e0ae      	b.n	800459e <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004440:	4b1e      	ldr	r3, [pc, #120]	; (80044bc <HAL_RCC_ClockConfig+0x27c>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	2b04      	cmp	r3, #4
 800444a:	d1ee      	bne.n	800442a <HAL_RCC_ClockConfig+0x1ea>
 800444c:	e010      	b.n	8004470 <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444e:	f7fd f96b 	bl	8001728 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e09c      	b.n	800459e <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004464:	4b15      	ldr	r3, [pc, #84]	; (80044bc <HAL_RCC_ClockConfig+0x27c>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1ee      	bne.n	800444e <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004470:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <HAL_RCC_ClockConfig+0x278>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d220      	bcs.n	80044c0 <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d105      	bne.n	8004490 <HAL_RCC_ClockConfig+0x250>
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <HAL_RCC_ClockConfig+0x278>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a0b      	ldr	r2, [pc, #44]	; (80044b8 <HAL_RCC_ClockConfig+0x278>)
 800448a:	f043 0304 	orr.w	r3, r3, #4
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HAL_RCC_ClockConfig+0x278>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f023 0201 	bic.w	r2, r3, #1
 8004498:	4907      	ldr	r1, [pc, #28]	; (80044b8 <HAL_RCC_ClockConfig+0x278>)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	4313      	orrs	r3, r2
 800449e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_ClockConfig+0x278>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d008      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e075      	b.n	800459e <HAL_RCC_ClockConfig+0x35e>
 80044b2:	bf00      	nop
 80044b4:	080097e8 	.word	0x080097e8
 80044b8:	40023c00 	.word	0x40023c00
 80044bc:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d025      	beq.n	8004518 <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d018      	beq.n	8004506 <HAL_RCC_ClockConfig+0x2c6>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044dc:	d013      	beq.n	8004506 <HAL_RCC_ClockConfig+0x2c6>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80044e6:	d00e      	beq.n	8004506 <HAL_RCC_ClockConfig+0x2c6>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80044f0:	d009      	beq.n	8004506 <HAL_RCC_ClockConfig+0x2c6>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044fa:	d004      	beq.n	8004506 <HAL_RCC_ClockConfig+0x2c6>
 80044fc:	f240 31ad 	movw	r1, #941	; 0x3ad
 8004500:	4829      	ldr	r0, [pc, #164]	; (80045a8 <HAL_RCC_ClockConfig+0x368>)
 8004502:	f7fc fd37 	bl	8000f74 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004506:	4b29      	ldr	r3, [pc, #164]	; (80045ac <HAL_RCC_ClockConfig+0x36c>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	4926      	ldr	r1, [pc, #152]	; (80045ac <HAL_RCC_ClockConfig+0x36c>)
 8004514:	4313      	orrs	r3, r2
 8004516:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d026      	beq.n	8004572 <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d018      	beq.n	800455e <HAL_RCC_ClockConfig+0x31e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004534:	d013      	beq.n	800455e <HAL_RCC_ClockConfig+0x31e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800453e:	d00e      	beq.n	800455e <HAL_RCC_ClockConfig+0x31e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004548:	d009      	beq.n	800455e <HAL_RCC_ClockConfig+0x31e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004552:	d004      	beq.n	800455e <HAL_RCC_ClockConfig+0x31e>
 8004554:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 8004558:	4813      	ldr	r0, [pc, #76]	; (80045a8 <HAL_RCC_ClockConfig+0x368>)
 800455a:	f7fc fd0b 	bl	8000f74 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800455e:	4b13      	ldr	r3, [pc, #76]	; (80045ac <HAL_RCC_ClockConfig+0x36c>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	490f      	ldr	r1, [pc, #60]	; (80045ac <HAL_RCC_ClockConfig+0x36c>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004572:	f000 f823 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 8004576:	4601      	mov	r1, r0
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <HAL_RCC_ClockConfig+0x36c>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <HAL_RCC_ClockConfig+0x370>)
 8004584:	5cd3      	ldrb	r3, [r2, r3]
 8004586:	fa21 f303 	lsr.w	r3, r1, r3
 800458a:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <HAL_RCC_ClockConfig+0x374>)
 800458c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <HAL_RCC_ClockConfig+0x378>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fc fd2c 	bl	8000ff0 <HAL_InitTick>
 8004598:	4603      	mov	r3, r0
 800459a:	72fb      	strb	r3, [r7, #11]

  return status;
 800459c:	7afb      	ldrb	r3, [r7, #11]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	080097e8 	.word	0x080097e8
 80045ac:	40023800 	.word	0x40023800
 80045b0:	080099bc 	.word	0x080099bc
 80045b4:	20000000 	.word	0x20000000
 80045b8:	20000004 	.word	0x20000004

080045bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80045c2:	4b26      	ldr	r3, [pc, #152]	; (800465c <HAL_RCC_GetSysClockFreq+0xa0>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d006      	beq.n	80045e0 <HAL_RCC_GetSysClockFreq+0x24>
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d007      	beq.n	80045e6 <HAL_RCC_GetSysClockFreq+0x2a>
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d12c      	bne.n	8004634 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045da:	4b21      	ldr	r3, [pc, #132]	; (8004660 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045dc:	613b      	str	r3, [r7, #16]
      break;
 80045de:	e037      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045e0:	4b20      	ldr	r3, [pc, #128]	; (8004664 <HAL_RCC_GetSysClockFreq+0xa8>)
 80045e2:	613b      	str	r3, [r7, #16]
      break;
 80045e4:	e034      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	0c9b      	lsrs	r3, r3, #18
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <HAL_RCC_GetSysClockFreq+0xac>)
 80045f0:	5cd3      	ldrb	r3, [r2, r3]
 80045f2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	0d9b      	lsrs	r3, r3, #22
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	3301      	adds	r3, #1
 80045fe:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004600:	4b16      	ldr	r3, [pc, #88]	; (800465c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4a15      	ldr	r2, [pc, #84]	; (8004664 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004610:	fb02 f203 	mul.w	r2, r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	fbb2 f3f3 	udiv	r3, r2, r3
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e007      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4a0f      	ldr	r2, [pc, #60]	; (8004660 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004622:	fb02 f203 	mul.w	r2, r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	613b      	str	r3, [r7, #16]
      break;
 8004632:	e00d      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	0b5b      	lsrs	r3, r3, #13
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	3301      	adds	r3, #1
 8004644:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	613b      	str	r3, [r7, #16]
      break;
 800464e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004650:	693b      	ldr	r3, [r7, #16]
}
 8004652:	4618      	mov	r0, r3
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr
 800465c:	40023800 	.word	0x40023800
 8004660:	00f42400 	.word	0x00f42400
 8004664:	007a1200 	.word	0x007a1200
 8004668:	080099b0 	.word	0x080099b0

0800466c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004670:	4b02      	ldr	r3, [pc, #8]	; (800467c <HAL_RCC_GetHCLKFreq+0x10>)
 8004672:	681b      	ldr	r3, [r3, #0]
}
 8004674:	4618      	mov	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr
 800467c:	20000000 	.word	0x20000000

08004680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004684:	f7ff fff2 	bl	800466c <HAL_RCC_GetHCLKFreq>
 8004688:	4601      	mov	r1, r0
 800468a:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	4a03      	ldr	r2, [pc, #12]	; (80046a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004696:	5cd3      	ldrb	r3, [r2, r3]
 8004698:	fa21 f303 	lsr.w	r3, r1, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40023800 	.word	0x40023800
 80046a4:	080099cc 	.word	0x080099cc

080046a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046ac:	f7ff ffde 	bl	800466c <HAL_RCC_GetHCLKFreq>
 80046b0:	4601      	mov	r1, r0
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	0adb      	lsrs	r3, r3, #11
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	4a03      	ldr	r2, [pc, #12]	; (80046cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046be:	5cd3      	ldrb	r3, [r2, r3]
 80046c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40023800 	.word	0x40023800
 80046cc:	080099cc 	.word	0x080099cc

080046d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <HAL_RCC_GetClockConfig+0x1a>
 80046e0:	f240 41fa 	movw	r1, #1274	; 0x4fa
 80046e4:	4818      	ldr	r0, [pc, #96]	; (8004748 <HAL_RCC_GetClockConfig+0x78>)
 80046e6:	f7fc fc45 	bl	8000f74 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d104      	bne.n	80046fa <HAL_RCC_GetClockConfig+0x2a>
 80046f0:	f240 41fb 	movw	r1, #1275	; 0x4fb
 80046f4:	4814      	ldr	r0, [pc, #80]	; (8004748 <HAL_RCC_GetClockConfig+0x78>)
 80046f6:	f7fc fc3d 	bl	8000f74 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	220f      	movs	r2, #15
 80046fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004700:	4b12      	ldr	r3, [pc, #72]	; (800474c <HAL_RCC_GetClockConfig+0x7c>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0203 	and.w	r2, r3, #3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <HAL_RCC_GetClockConfig+0x7c>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <HAL_RCC_GetClockConfig+0x7c>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_GetClockConfig+0x7c>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	08db      	lsrs	r3, r3, #3
 800472a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004732:	4b07      	ldr	r3, [pc, #28]	; (8004750 <HAL_RCC_GetClockConfig+0x80>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0201 	and.w	r2, r3, #1
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	601a      	str	r2, [r3, #0]
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	080097e8 	.word	0x080097e8
 800474c:	40023800 	.word	0x40023800
 8004750:	40023c00 	.word	0x40023c00

08004754 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004760:	4b29      	ldr	r3, [pc, #164]	; (8004808 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d12c      	bne.n	80047c6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800476c:	4b26      	ldr	r3, [pc, #152]	; (8004808 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004778:	4b24      	ldr	r3, [pc, #144]	; (800480c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	e016      	b.n	80047b2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004784:	4b20      	ldr	r3, [pc, #128]	; (8004808 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	4a1f      	ldr	r2, [pc, #124]	; (8004808 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800478a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478e:	6253      	str	r3, [r2, #36]	; 0x24
 8004790:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800479c:	4b1b      	ldr	r3, [pc, #108]	; (800480c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80047a4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a6:	4b18      	ldr	r3, [pc, #96]	; (8004808 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	4a17      	ldr	r2, [pc, #92]	; (8004808 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80047ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80047b8:	d105      	bne.n	80047c6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047c0:	d101      	bne.n	80047c6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80047c2:	2301      	movs	r3, #1
 80047c4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d105      	bne.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80047cc:	4b10      	ldr	r3, [pc, #64]	; (8004810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a0f      	ldr	r2, [pc, #60]	; (8004810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047d2:	f043 0304 	orr.w	r3, r3, #4
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f023 0201 	bic.w	r2, r3, #1
 80047e0:	490b      	ldr	r1, [pc, #44]	; (8004810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d001      	beq.n	80047fa <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800
 800480c:	40007000 	.word	0x40007000
 8004810:	40023c00 	.word	0x40023c00

08004814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e088      	b.n	8004938 <HAL_TIM_Base_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482e:	d02c      	beq.n	800488a <HAL_TIM_Base_Init+0x76>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a42      	ldr	r2, [pc, #264]	; (8004940 <HAL_TIM_Base_Init+0x12c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d027      	beq.n	800488a <HAL_TIM_Base_Init+0x76>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a41      	ldr	r2, [pc, #260]	; (8004944 <HAL_TIM_Base_Init+0x130>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d022      	beq.n	800488a <HAL_TIM_Base_Init+0x76>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a3f      	ldr	r2, [pc, #252]	; (8004948 <HAL_TIM_Base_Init+0x134>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01d      	beq.n	800488a <HAL_TIM_Base_Init+0x76>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a3e      	ldr	r2, [pc, #248]	; (800494c <HAL_TIM_Base_Init+0x138>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d018      	beq.n	800488a <HAL_TIM_Base_Init+0x76>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a3c      	ldr	r2, [pc, #240]	; (8004950 <HAL_TIM_Base_Init+0x13c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_TIM_Base_Init+0x76>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a3b      	ldr	r2, [pc, #236]	; (8004954 <HAL_TIM_Base_Init+0x140>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00e      	beq.n	800488a <HAL_TIM_Base_Init+0x76>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a39      	ldr	r2, [pc, #228]	; (8004958 <HAL_TIM_Base_Init+0x144>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d009      	beq.n	800488a <HAL_TIM_Base_Init+0x76>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a38      	ldr	r2, [pc, #224]	; (800495c <HAL_TIM_Base_Init+0x148>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_TIM_Base_Init+0x76>
 8004880:	f240 110b 	movw	r1, #267	; 0x10b
 8004884:	4836      	ldr	r0, [pc, #216]	; (8004960 <HAL_TIM_Base_Init+0x14c>)
 8004886:	f7fc fb75 	bl	8000f74 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d014      	beq.n	80048bc <HAL_TIM_Base_Init+0xa8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b10      	cmp	r3, #16
 8004898:	d010      	beq.n	80048bc <HAL_TIM_Base_Init+0xa8>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b20      	cmp	r3, #32
 80048a0:	d00c      	beq.n	80048bc <HAL_TIM_Base_Init+0xa8>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b40      	cmp	r3, #64	; 0x40
 80048a8:	d008      	beq.n	80048bc <HAL_TIM_Base_Init+0xa8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b60      	cmp	r3, #96	; 0x60
 80048b0:	d004      	beq.n	80048bc <HAL_TIM_Base_Init+0xa8>
 80048b2:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80048b6:	482a      	ldr	r0, [pc, #168]	; (8004960 <HAL_TIM_Base_Init+0x14c>)
 80048b8:	f7fc fb5c 	bl	8000f74 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00e      	beq.n	80048e2 <HAL_TIM_Base_Init+0xce>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048cc:	d009      	beq.n	80048e2 <HAL_TIM_Base_Init+0xce>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d6:	d004      	beq.n	80048e2 <HAL_TIM_Base_Init+0xce>
 80048d8:	f240 110d 	movw	r1, #269	; 0x10d
 80048dc:	4820      	ldr	r0, [pc, #128]	; (8004960 <HAL_TIM_Base_Init+0x14c>)
 80048de:	f7fc fb49 	bl	8000f74 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HAL_TIM_Base_Init+0xe8>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	2b80      	cmp	r3, #128	; 0x80
 80048f0:	d004      	beq.n	80048fc <HAL_TIM_Base_Init+0xe8>
 80048f2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80048f6:	481a      	ldr	r0, [pc, #104]	; (8004960 <HAL_TIM_Base_Init+0x14c>)
 80048f8:	f7fc fb3c 	bl	8000f74 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7fc fd83 	bl	800141c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2202      	movs	r2, #2
 800491a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3304      	adds	r3, #4
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f000 feb5 	bl	8005698 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800
 8004948:	40000c00 	.word	0x40000c00
 800494c:	40001000 	.word	0x40001000
 8004950:	40001400 	.word	0x40001400
 8004954:	40010800 	.word	0x40010800
 8004958:	40010c00 	.word	0x40010c00
 800495c:	40011000 	.word	0x40011000
 8004960:	08009820 	.word	0x08009820

08004964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004974:	d02c      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x6c>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <HAL_TIM_Base_Start_IT+0xa8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d027      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x6c>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a22      	ldr	r2, [pc, #136]	; (8004a10 <HAL_TIM_Base_Start_IT+0xac>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d022      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x6c>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a21      	ldr	r2, [pc, #132]	; (8004a14 <HAL_TIM_Base_Start_IT+0xb0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d01d      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x6c>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1f      	ldr	r2, [pc, #124]	; (8004a18 <HAL_TIM_Base_Start_IT+0xb4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d018      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x6c>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1e      	ldr	r2, [pc, #120]	; (8004a1c <HAL_TIM_Base_Start_IT+0xb8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x6c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1c      	ldr	r2, [pc, #112]	; (8004a20 <HAL_TIM_Base_Start_IT+0xbc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00e      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x6c>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <HAL_TIM_Base_Start_IT+0xc0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x6c>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <HAL_TIM_Base_Start_IT+0xc4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x6c>
 80049c6:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 80049ca:	4818      	ldr	r0, [pc, #96]	; (8004a2c <HAL_TIM_Base_Start_IT+0xc8>)
 80049cc:	f7fc fad2 	bl	8000f74 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b06      	cmp	r3, #6
 80049f0:	d007      	beq.n	8004a02 <HAL_TIM_Base_Start_IT+0x9e>
  {
    __HAL_TIM_ENABLE(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0201 	orr.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40001000 	.word	0x40001000
 8004a1c:	40001400 	.word	0x40001400
 8004a20:	40010800 	.word	0x40010800
 8004a24:	40010c00 	.word	0x40010c00
 8004a28:	40011000 	.word	0x40011000
 8004a2c:	08009820 	.word	0x08009820

08004a30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e088      	b.n	8004b54 <HAL_TIM_PWM_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4a:	d02c      	beq.n	8004aa6 <HAL_TIM_PWM_Init+0x76>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a42      	ldr	r2, [pc, #264]	; (8004b5c <HAL_TIM_PWM_Init+0x12c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d027      	beq.n	8004aa6 <HAL_TIM_PWM_Init+0x76>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a41      	ldr	r2, [pc, #260]	; (8004b60 <HAL_TIM_PWM_Init+0x130>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d022      	beq.n	8004aa6 <HAL_TIM_PWM_Init+0x76>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a3f      	ldr	r2, [pc, #252]	; (8004b64 <HAL_TIM_PWM_Init+0x134>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01d      	beq.n	8004aa6 <HAL_TIM_PWM_Init+0x76>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a3e      	ldr	r2, [pc, #248]	; (8004b68 <HAL_TIM_PWM_Init+0x138>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d018      	beq.n	8004aa6 <HAL_TIM_PWM_Init+0x76>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a3c      	ldr	r2, [pc, #240]	; (8004b6c <HAL_TIM_PWM_Init+0x13c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_TIM_PWM_Init+0x76>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a3b      	ldr	r2, [pc, #236]	; (8004b70 <HAL_TIM_PWM_Init+0x140>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00e      	beq.n	8004aa6 <HAL_TIM_PWM_Init+0x76>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a39      	ldr	r2, [pc, #228]	; (8004b74 <HAL_TIM_PWM_Init+0x144>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d009      	beq.n	8004aa6 <HAL_TIM_PWM_Init+0x76>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a38      	ldr	r2, [pc, #224]	; (8004b78 <HAL_TIM_PWM_Init+0x148>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_TIM_PWM_Init+0x76>
 8004a9c:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8004aa0:	4836      	ldr	r0, [pc, #216]	; (8004b7c <HAL_TIM_PWM_Init+0x14c>)
 8004aa2:	f7fc fa67 	bl	8000f74 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d014      	beq.n	8004ad8 <HAL_TIM_PWM_Init+0xa8>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b10      	cmp	r3, #16
 8004ab4:	d010      	beq.n	8004ad8 <HAL_TIM_PWM_Init+0xa8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d00c      	beq.n	8004ad8 <HAL_TIM_PWM_Init+0xa8>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b40      	cmp	r3, #64	; 0x40
 8004ac4:	d008      	beq.n	8004ad8 <HAL_TIM_PWM_Init+0xa8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b60      	cmp	r3, #96	; 0x60
 8004acc:	d004      	beq.n	8004ad8 <HAL_TIM_PWM_Init+0xa8>
 8004ace:	f240 4171 	movw	r1, #1137	; 0x471
 8004ad2:	482a      	ldr	r0, [pc, #168]	; (8004b7c <HAL_TIM_PWM_Init+0x14c>)
 8004ad4:	f7fc fa4e 	bl	8000f74 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00e      	beq.n	8004afe <HAL_TIM_PWM_Init+0xce>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae8:	d009      	beq.n	8004afe <HAL_TIM_PWM_Init+0xce>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af2:	d004      	beq.n	8004afe <HAL_TIM_PWM_Init+0xce>
 8004af4:	f240 4172 	movw	r1, #1138	; 0x472
 8004af8:	4820      	ldr	r0, [pc, #128]	; (8004b7c <HAL_TIM_PWM_Init+0x14c>)
 8004afa:	f7fc fa3b 	bl	8000f74 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d008      	beq.n	8004b18 <HAL_TIM_PWM_Init+0xe8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	2b80      	cmp	r3, #128	; 0x80
 8004b0c:	d004      	beq.n	8004b18 <HAL_TIM_PWM_Init+0xe8>
 8004b0e:	f240 4173 	movw	r1, #1139	; 0x473
 8004b12:	481a      	ldr	r0, [pc, #104]	; (8004b7c <HAL_TIM_PWM_Init+0x14c>)
 8004b14:	f7fc fa2e 	bl	8000f74 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <HAL_TIM_PWM_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f827 	bl	8004b80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	4619      	mov	r1, r3
 8004b44:	4610      	mov	r0, r2
 8004b46:	f000 fda7 	bl	8005698 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800
 8004b64:	40000c00 	.word	0x40000c00
 8004b68:	40001000 	.word	0x40001000
 8004b6c:	40001400 	.word	0x40001400
 8004b70:	40010800 	.word	0x40010800
 8004b74:	40010c00 	.word	0x40010c00
 8004b78:	40011000 	.word	0x40011000
 8004b7c:	08009820 	.word	0x08009820

08004b80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d122      	bne.n	8004bee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d11b      	bne.n	8004bee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f06f 0202 	mvn.w	r2, #2
 8004bbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fd44 	bl	8005662 <HAL_TIM_IC_CaptureCallback>
 8004bda:	e005      	b.n	8004be8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fd37 	bl	8005650 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fd46 	bl	8005674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d122      	bne.n	8004c42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0304 	and.w	r3, r3, #4
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d11b      	bne.n	8004c42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f06f 0204 	mvn.w	r2, #4
 8004c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fd1a 	bl	8005662 <HAL_TIM_IC_CaptureCallback>
 8004c2e:	e005      	b.n	8004c3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fd0d 	bl	8005650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fd1c 	bl	8005674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d122      	bne.n	8004c96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d11b      	bne.n	8004c96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f06f 0208 	mvn.w	r2, #8
 8004c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fcf0 	bl	8005662 <HAL_TIM_IC_CaptureCallback>
 8004c82:	e005      	b.n	8004c90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 fce3 	bl	8005650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fcf2 	bl	8005674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b10      	cmp	r3, #16
 8004ca2:	d122      	bne.n	8004cea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	2b10      	cmp	r3, #16
 8004cb0:	d11b      	bne.n	8004cea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f06f 0210 	mvn.w	r2, #16
 8004cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2208      	movs	r2, #8
 8004cc0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fcc6 	bl	8005662 <HAL_TIM_IC_CaptureCallback>
 8004cd6:	e005      	b.n	8004ce4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fcb9 	bl	8005650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fcc8 	bl	8005674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d10e      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d107      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f06f 0201 	mvn.w	r2, #1
 8004d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7fc f917 	bl	8000f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b40      	cmp	r3, #64	; 0x40
 8004d22:	d10e      	bne.n	8004d42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b40      	cmp	r3, #64	; 0x40
 8004d30:	d107      	bne.n	8004d42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fca2 	bl	8005686 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d010      	beq.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d00d      	beq.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d00a      	beq.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b0c      	cmp	r3, #12
 8004d6e:	d007      	beq.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b3c      	cmp	r3, #60	; 0x3c
 8004d74:	d004      	beq.n	8004d80 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004d76:	f640 5169 	movw	r1, #3433	; 0xd69
 8004d7a:	488d      	ldr	r0, [pc, #564]	; (8004fb0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004d7c:	f7fc f8fa 	bl	8000f74 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b60      	cmp	r3, #96	; 0x60
 8004d86:	d008      	beq.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b70      	cmp	r3, #112	; 0x70
 8004d8e:	d004      	beq.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8004d90:	f640 516a 	movw	r1, #3434	; 0xd6a
 8004d94:	4886      	ldr	r0, [pc, #536]	; (8004fb0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004d96:	f7fc f8ed 	bl	8000f74 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <HAL_TIM_PWM_ConfigChannel+0x68>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d004      	beq.n	8004db4 <HAL_TIM_PWM_ConfigChannel+0x68>
 8004daa:	f640 516b 	movw	r1, #3435	; 0xd6b
 8004dae:	4880      	ldr	r0, [pc, #512]	; (8004fb0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004db0:	f7fc f8e0 	bl	8000f74 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x82>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d004      	beq.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x82>
 8004dc4:	f640 516c 	movw	r1, #3436	; 0xd6c
 8004dc8:	4879      	ldr	r0, [pc, #484]	; (8004fb0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004dca:	f7fc f8d3 	bl	8000f74 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_TIM_PWM_ConfigChannel+0x90>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e13b      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x308>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b0c      	cmp	r3, #12
 8004df0:	f200 8126 	bhi.w	8005040 <HAL_TIM_PWM_ConfigChannel+0x2f4>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08005041 	.word	0x08005041
 8004e04:	08005041 	.word	0x08005041
 8004e08:	08005041 	.word	0x08005041
 8004e0c:	08004ec1 	.word	0x08004ec1
 8004e10:	08005041 	.word	0x08005041
 8004e14:	08005041 	.word	0x08005041
 8004e18:	08005041 	.word	0x08005041
 8004e1c:	08004f3f 	.word	0x08004f3f
 8004e20:	08005041 	.word	0x08005041
 8004e24:	08005041 	.word	0x08005041
 8004e28:	08005041 	.word	0x08005041
 8004e2c:	08004fcd 	.word	0x08004fcd
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e38:	d022      	beq.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a5d      	ldr	r2, [pc, #372]	; (8004fb4 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d01d      	beq.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a5b      	ldr	r2, [pc, #364]	; (8004fb8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d018      	beq.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a5a      	ldr	r2, [pc, #360]	; (8004fbc <HAL_TIM_PWM_ConfigChannel+0x270>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d013      	beq.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a58      	ldr	r2, [pc, #352]	; (8004fc0 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00e      	beq.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a57      	ldr	r2, [pc, #348]	; (8004fc4 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d009      	beq.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a55      	ldr	r2, [pc, #340]	; (8004fc8 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d004      	beq.n	8004e80 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004e76:	f640 5178 	movw	r1, #3448	; 0xd78
 8004e7a:	484d      	ldr	r0, [pc, #308]	; (8004fb0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004e7c:	f7fc f87a 	bl	8000f74 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fc76 	bl	8005778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0208 	orr.w	r2, r2, #8
 8004e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0204 	bic.w	r2, r2, #4
 8004eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6999      	ldr	r1, [r3, #24]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	619a      	str	r2, [r3, #24]
      break;
 8004ebe:	e0c0      	b.n	8005042 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec8:	d018      	beq.n	8004efc <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a39      	ldr	r2, [pc, #228]	; (8004fb4 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a37      	ldr	r2, [pc, #220]	; (8004fb8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a36      	ldr	r2, [pc, #216]	; (8004fbc <HAL_TIM_PWM_ConfigChannel+0x270>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a34      	ldr	r2, [pc, #208]	; (8004fc0 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8004ef2:	f640 5189 	movw	r1, #3465	; 0xd89
 8004ef6:	482e      	ldr	r0, [pc, #184]	; (8004fb0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004ef8:	f7fc f83c 	bl	8000f74 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fc74 	bl	80057f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6999      	ldr	r1, [r3, #24]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	021a      	lsls	r2, r3, #8
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	619a      	str	r2, [r3, #24]
      break;
 8004f3c:	e081      	b.n	8005042 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f46:	d013      	beq.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x224>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00e      	beq.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x224>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a18      	ldr	r2, [pc, #96]	; (8004fb8 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d009      	beq.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x224>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a16      	ldr	r2, [pc, #88]	; (8004fbc <HAL_TIM_PWM_ConfigChannel+0x270>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <HAL_TIM_PWM_ConfigChannel+0x224>
 8004f66:	f640 519a 	movw	r1, #3482	; 0xd9a
 8004f6a:	4811      	ldr	r0, [pc, #68]	; (8004fb0 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004f6c:	f7fc f802 	bl	8000f74 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fc78 	bl	800586c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69da      	ldr	r2, [r3, #28]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0208 	orr.w	r2, r2, #8
 8004f8a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69da      	ldr	r2, [r3, #28]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0204 	bic.w	r2, r2, #4
 8004f9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69d9      	ldr	r1, [r3, #28]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	61da      	str	r2, [r3, #28]
      break;
 8004fae:	e048      	b.n	8005042 <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8004fb0:	08009820 	.word	0x08009820
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	40000800 	.word	0x40000800
 8004fbc:	40000c00 	.word	0x40000c00
 8004fc0:	40010800 	.word	0x40010800
 8004fc4:	40010c00 	.word	0x40010c00
 8004fc8:	40011000 	.word	0x40011000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd4:	d013      	beq.n	8004ffe <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a20      	ldr	r2, [pc, #128]	; (800505c <HAL_TIM_PWM_ConfigChannel+0x310>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00e      	beq.n	8004ffe <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <HAL_TIM_PWM_ConfigChannel+0x314>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1d      	ldr	r2, [pc, #116]	; (8005064 <HAL_TIM_PWM_ConfigChannel+0x318>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8004ff4:	f640 51ab 	movw	r1, #3499	; 0xdab
 8004ff8:	481b      	ldr	r0, [pc, #108]	; (8005068 <HAL_TIM_PWM_ConfigChannel+0x31c>)
 8004ffa:	f7fb ffbb 	bl	8000f74 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fc6e 	bl	80058e6 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69d9      	ldr	r1, [r3, #28]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	021a      	lsls	r2, r3, #8
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	61da      	str	r2, [r3, #28]
      break;
 800503e:	e000      	b.n	8005042 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    default:
      break;
 8005040:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40000c00 	.word	0x40000c00
 8005068:	08009820 	.word	0x08009820

0800506c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_TIM_ConfigClockSource+0x18>
 8005080:	2302      	movs	r3, #2
 8005082:	e2d7      	b.n	8005634 <HAL_TIM_ConfigClockSource+0x5c8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509c:	d029      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x86>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a6:	d024      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x86>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d020      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x86>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d01c      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x86>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d018      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x86>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b30      	cmp	r3, #48	; 0x30
 80050c6:	d014      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x86>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b40      	cmp	r3, #64	; 0x40
 80050ce:	d010      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x86>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b50      	cmp	r3, #80	; 0x50
 80050d6:	d00c      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x86>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b60      	cmp	r3, #96	; 0x60
 80050de:	d008      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x86>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b70      	cmp	r3, #112	; 0x70
 80050e6:	d004      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x86>
 80050e8:	f241 01d0 	movw	r1, #4304	; 0x10d0
 80050ec:	4874      	ldr	r0, [pc, #464]	; (80052c0 <HAL_TIM_ConfigClockSource+0x254>)
 80050ee:	f7fb ff41 	bl	8000f74 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005100:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005108:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b40      	cmp	r3, #64	; 0x40
 8005118:	f000 820a 	beq.w	8005530 <HAL_TIM_ConfigClockSource+0x4c4>
 800511c:	2b40      	cmp	r3, #64	; 0x40
 800511e:	d80f      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0xd4>
 8005120:	2b10      	cmp	r3, #16
 8005122:	f000 8256 	beq.w	80055d2 <HAL_TIM_ConfigClockSource+0x566>
 8005126:	2b10      	cmp	r3, #16
 8005128:	d803      	bhi.n	8005132 <HAL_TIM_ConfigClockSource+0xc6>
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 8251 	beq.w	80055d2 <HAL_TIM_ConfigClockSource+0x566>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005130:	e277      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8005132:	2b20      	cmp	r3, #32
 8005134:	f000 824d 	beq.w	80055d2 <HAL_TIM_ConfigClockSource+0x566>
 8005138:	2b30      	cmp	r3, #48	; 0x30
 800513a:	f000 824a 	beq.w	80055d2 <HAL_TIM_ConfigClockSource+0x566>
      break;
 800513e:	e270      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8005140:	2b70      	cmp	r3, #112	; 0x70
 8005142:	d04c      	beq.n	80051de <HAL_TIM_ConfigClockSource+0x172>
 8005144:	2b70      	cmp	r3, #112	; 0x70
 8005146:	d806      	bhi.n	8005156 <HAL_TIM_ConfigClockSource+0xea>
 8005148:	2b50      	cmp	r3, #80	; 0x50
 800514a:	f000 8141 	beq.w	80053d0 <HAL_TIM_ConfigClockSource+0x364>
 800514e:	2b60      	cmp	r3, #96	; 0x60
 8005150:	f000 818f 	beq.w	8005472 <HAL_TIM_ConfigClockSource+0x406>
      break;
 8005154:	e265      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8005156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515a:	d004      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0xfa>
 800515c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005160:	f000 80c0 	beq.w	80052e4 <HAL_TIM_ConfigClockSource+0x278>
      break;
 8005164:	e25d      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516e:	f000 8257 	beq.w	8005620 <HAL_TIM_ConfigClockSource+0x5b4>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a53      	ldr	r2, [pc, #332]	; (80052c4 <HAL_TIM_ConfigClockSource+0x258>)
 8005178:	4293      	cmp	r3, r2
 800517a:	f000 8251 	beq.w	8005620 <HAL_TIM_ConfigClockSource+0x5b4>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a51      	ldr	r2, [pc, #324]	; (80052c8 <HAL_TIM_ConfigClockSource+0x25c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	f000 824b 	beq.w	8005620 <HAL_TIM_ConfigClockSource+0x5b4>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a4f      	ldr	r2, [pc, #316]	; (80052cc <HAL_TIM_ConfigClockSource+0x260>)
 8005190:	4293      	cmp	r3, r2
 8005192:	f000 8245 	beq.w	8005620 <HAL_TIM_ConfigClockSource+0x5b4>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a4d      	ldr	r2, [pc, #308]	; (80052d0 <HAL_TIM_ConfigClockSource+0x264>)
 800519c:	4293      	cmp	r3, r2
 800519e:	f000 823f 	beq.w	8005620 <HAL_TIM_ConfigClockSource+0x5b4>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a4b      	ldr	r2, [pc, #300]	; (80052d4 <HAL_TIM_ConfigClockSource+0x268>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	f000 8239 	beq.w	8005620 <HAL_TIM_ConfigClockSource+0x5b4>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a49      	ldr	r2, [pc, #292]	; (80052d8 <HAL_TIM_ConfigClockSource+0x26c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	f000 8233 	beq.w	8005620 <HAL_TIM_ConfigClockSource+0x5b4>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a47      	ldr	r2, [pc, #284]	; (80052dc <HAL_TIM_ConfigClockSource+0x270>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	f000 822d 	beq.w	8005620 <HAL_TIM_ConfigClockSource+0x5b4>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a45      	ldr	r2, [pc, #276]	; (80052e0 <HAL_TIM_ConfigClockSource+0x274>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	f000 8227 	beq.w	8005620 <HAL_TIM_ConfigClockSource+0x5b4>
 80051d2:	f241 01dc 	movw	r1, #4316	; 0x10dc
 80051d6:	483a      	ldr	r0, [pc, #232]	; (80052c0 <HAL_TIM_ConfigClockSource+0x254>)
 80051d8:	f7fb fecc 	bl	8000f74 <assert_failed>
      break;
 80051dc:	e220      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x5b4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e6:	d018      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x1ae>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a35      	ldr	r2, [pc, #212]	; (80052c4 <HAL_TIM_ConfigClockSource+0x258>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d013      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x1ae>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a34      	ldr	r2, [pc, #208]	; (80052c8 <HAL_TIM_ConfigClockSource+0x25c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00e      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x1ae>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a32      	ldr	r2, [pc, #200]	; (80052cc <HAL_TIM_ConfigClockSource+0x260>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d009      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x1ae>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a33      	ldr	r2, [pc, #204]	; (80052d8 <HAL_TIM_ConfigClockSource+0x26c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d004      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x1ae>
 8005210:	f241 01e3 	movw	r1, #4323	; 0x10e3
 8005214:	482a      	ldr	r0, [pc, #168]	; (80052c0 <HAL_TIM_ConfigClockSource+0x254>)
 8005216:	f7fb fead 	bl	8000f74 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d013      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x1de>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522a:	d00e      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x1de>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005234:	d009      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x1de>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800523e:	d004      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x1de>
 8005240:	f241 01e6 	movw	r1, #4326	; 0x10e6
 8005244:	481e      	ldr	r0, [pc, #120]	; (80052c0 <HAL_TIM_ConfigClockSource+0x254>)
 8005246:	f7fb fe95 	bl	8000f74 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005252:	d014      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x212>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d010      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x212>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00c      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x212>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2b02      	cmp	r3, #2
 800526a:	d008      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x212>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b0a      	cmp	r3, #10
 8005272:	d004      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x212>
 8005274:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8005278:	4811      	ldr	r0, [pc, #68]	; (80052c0 <HAL_TIM_ConfigClockSource+0x254>)
 800527a:	f7fb fe7b 	bl	8000f74 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	2b0f      	cmp	r3, #15
 8005284:	d904      	bls.n	8005290 <HAL_TIM_ConfigClockSource+0x224>
 8005286:	f241 01e8 	movw	r1, #4328	; 0x10e8
 800528a:	480d      	ldr	r0, [pc, #52]	; (80052c0 <HAL_TIM_ConfigClockSource+0x254>)
 800528c:	f7fb fe72 	bl	8000f74 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	6899      	ldr	r1, [r3, #8]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f000 fbd6 	bl	8005a50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	609a      	str	r2, [r3, #8]
      break;
 80052bc:	e1b1      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x5b6>
 80052be:	bf00      	nop
 80052c0:	08009820 	.word	0x08009820
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	40001000 	.word	0x40001000
 80052d4:	40001400 	.word	0x40001400
 80052d8:	40010800 	.word	0x40010800
 80052dc:	40010c00 	.word	0x40010c00
 80052e0:	40011000 	.word	0x40011000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ec:	d022      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0x2c8>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a88      	ldr	r2, [pc, #544]	; (8005514 <HAL_TIM_ConfigClockSource+0x4a8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d01d      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0x2c8>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a86      	ldr	r2, [pc, #536]	; (8005518 <HAL_TIM_ConfigClockSource+0x4ac>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d018      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0x2c8>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a85      	ldr	r2, [pc, #532]	; (800551c <HAL_TIM_ConfigClockSource+0x4b0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d013      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0x2c8>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a83      	ldr	r2, [pc, #524]	; (8005520 <HAL_TIM_ConfigClockSource+0x4b4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00e      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0x2c8>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a82      	ldr	r2, [pc, #520]	; (8005524 <HAL_TIM_ConfigClockSource+0x4b8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d009      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0x2c8>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a80      	ldr	r2, [pc, #512]	; (8005528 <HAL_TIM_ConfigClockSource+0x4bc>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d004      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0x2c8>
 800532a:	f241 01fb 	movw	r1, #4347	; 0x10fb
 800532e:	487f      	ldr	r0, [pc, #508]	; (800552c <HAL_TIM_ConfigClockSource+0x4c0>)
 8005330:	f7fb fe20 	bl	8000f74 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d013      	beq.n	8005364 <HAL_TIM_ConfigClockSource+0x2f8>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005344:	d00e      	beq.n	8005364 <HAL_TIM_ConfigClockSource+0x2f8>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800534e:	d009      	beq.n	8005364 <HAL_TIM_ConfigClockSource+0x2f8>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005358:	d004      	beq.n	8005364 <HAL_TIM_ConfigClockSource+0x2f8>
 800535a:	f241 01fe 	movw	r1, #4350	; 0x10fe
 800535e:	4873      	ldr	r0, [pc, #460]	; (800552c <HAL_TIM_ConfigClockSource+0x4c0>)
 8005360:	f7fb fe08 	bl	8000f74 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800536c:	d014      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0x32c>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d010      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0x32c>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00c      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0x32c>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d008      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0x32c>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b0a      	cmp	r3, #10
 800538c:	d004      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0x32c>
 800538e:	f241 01ff 	movw	r1, #4351	; 0x10ff
 8005392:	4866      	ldr	r0, [pc, #408]	; (800552c <HAL_TIM_ConfigClockSource+0x4c0>)
 8005394:	f7fb fdee 	bl	8000f74 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b0f      	cmp	r3, #15
 800539e:	d904      	bls.n	80053aa <HAL_TIM_ConfigClockSource+0x33e>
 80053a0:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 80053a4:	4861      	ldr	r0, [pc, #388]	; (800552c <HAL_TIM_ConfigClockSource+0x4c0>)
 80053a6:	f7fb fde5 	bl	8000f74 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6899      	ldr	r1, [r3, #8]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f000 fb49 	bl	8005a50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053cc:	609a      	str	r2, [r3, #8]
      break;
 80053ce:	e128      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d8:	d018      	beq.n	800540c <HAL_TIM_ConfigClockSource+0x3a0>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a4d      	ldr	r2, [pc, #308]	; (8005514 <HAL_TIM_ConfigClockSource+0x4a8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d013      	beq.n	800540c <HAL_TIM_ConfigClockSource+0x3a0>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a4b      	ldr	r2, [pc, #300]	; (8005518 <HAL_TIM_ConfigClockSource+0x4ac>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00e      	beq.n	800540c <HAL_TIM_ConfigClockSource+0x3a0>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a4a      	ldr	r2, [pc, #296]	; (800551c <HAL_TIM_ConfigClockSource+0x4b0>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d009      	beq.n	800540c <HAL_TIM_ConfigClockSource+0x3a0>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a48      	ldr	r2, [pc, #288]	; (8005520 <HAL_TIM_ConfigClockSource+0x4b4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <HAL_TIM_ConfigClockSource+0x3a0>
 8005402:	f241 110f 	movw	r1, #4367	; 0x110f
 8005406:	4849      	ldr	r0, [pc, #292]	; (800552c <HAL_TIM_ConfigClockSource+0x4c0>)
 8005408:	f7fb fdb4 	bl	8000f74 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005414:	d014      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0x3d4>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d010      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0x3d4>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0x3d4>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d008      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0x3d4>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b0a      	cmp	r3, #10
 8005434:	d004      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0x3d4>
 8005436:	f241 1112 	movw	r1, #4370	; 0x1112
 800543a:	483c      	ldr	r0, [pc, #240]	; (800552c <HAL_TIM_ConfigClockSource+0x4c0>)
 800543c:	f7fb fd9a 	bl	8000f74 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	2b0f      	cmp	r3, #15
 8005446:	d904      	bls.n	8005452 <HAL_TIM_ConfigClockSource+0x3e6>
 8005448:	f241 1113 	movw	r1, #4371	; 0x1113
 800544c:	4837      	ldr	r0, [pc, #220]	; (800552c <HAL_TIM_ConfigClockSource+0x4c0>)
 800544e:	f7fb fd91 	bl	8000f74 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6859      	ldr	r1, [r3, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	461a      	mov	r2, r3
 8005460:	f000 fa7f 	bl	8005962 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2150      	movs	r1, #80	; 0x50
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fad6 	bl	8005a1c <TIM_ITRx_SetConfig>
      break;
 8005470:	e0d7      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547a:	d018      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x442>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a24      	ldr	r2, [pc, #144]	; (8005514 <HAL_TIM_ConfigClockSource+0x4a8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d013      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x442>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a23      	ldr	r2, [pc, #140]	; (8005518 <HAL_TIM_ConfigClockSource+0x4ac>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00e      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x442>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a21      	ldr	r2, [pc, #132]	; (800551c <HAL_TIM_ConfigClockSource+0x4b0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d009      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x442>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a20      	ldr	r2, [pc, #128]	; (8005520 <HAL_TIM_ConfigClockSource+0x4b4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d004      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x442>
 80054a4:	f241 111f 	movw	r1, #4383	; 0x111f
 80054a8:	4820      	ldr	r0, [pc, #128]	; (800552c <HAL_TIM_ConfigClockSource+0x4c0>)
 80054aa:	f7fb fd63 	bl	8000f74 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b6:	d014      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x476>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d010      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x476>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00c      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x476>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d008      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x476>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	2b0a      	cmp	r3, #10
 80054d6:	d004      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0x476>
 80054d8:	f241 1122 	movw	r1, #4386	; 0x1122
 80054dc:	4813      	ldr	r0, [pc, #76]	; (800552c <HAL_TIM_ConfigClockSource+0x4c0>)
 80054de:	f7fb fd49 	bl	8000f74 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	2b0f      	cmp	r3, #15
 80054e8:	d904      	bls.n	80054f4 <HAL_TIM_ConfigClockSource+0x488>
 80054ea:	f241 1123 	movw	r1, #4387	; 0x1123
 80054ee:	480f      	ldr	r0, [pc, #60]	; (800552c <HAL_TIM_ConfigClockSource+0x4c0>)
 80054f0:	f7fb fd40 	bl	8000f74 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	6859      	ldr	r1, [r3, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	461a      	mov	r2, r3
 8005502:	f000 fa5c 	bl	80059be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2160      	movs	r1, #96	; 0x60
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fa85 	bl	8005a1c <TIM_ITRx_SetConfig>
      break;
 8005512:	e086      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x5b6>
 8005514:	40000400 	.word	0x40000400
 8005518:	40000800 	.word	0x40000800
 800551c:	40000c00 	.word	0x40000c00
 8005520:	40010800 	.word	0x40010800
 8005524:	40010c00 	.word	0x40010c00
 8005528:	40011000 	.word	0x40011000
 800552c:	08009820 	.word	0x08009820
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005538:	d018      	beq.n	800556c <HAL_TIM_ConfigClockSource+0x500>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a3f      	ldr	r2, [pc, #252]	; (800563c <HAL_TIM_ConfigClockSource+0x5d0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d013      	beq.n	800556c <HAL_TIM_ConfigClockSource+0x500>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a3d      	ldr	r2, [pc, #244]	; (8005640 <HAL_TIM_ConfigClockSource+0x5d4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00e      	beq.n	800556c <HAL_TIM_ConfigClockSource+0x500>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a3c      	ldr	r2, [pc, #240]	; (8005644 <HAL_TIM_ConfigClockSource+0x5d8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d009      	beq.n	800556c <HAL_TIM_ConfigClockSource+0x500>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a3a      	ldr	r2, [pc, #232]	; (8005648 <HAL_TIM_ConfigClockSource+0x5dc>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <HAL_TIM_ConfigClockSource+0x500>
 8005562:	f241 112f 	movw	r1, #4399	; 0x112f
 8005566:	4839      	ldr	r0, [pc, #228]	; (800564c <HAL_TIM_ConfigClockSource+0x5e0>)
 8005568:	f7fb fd04 	bl	8000f74 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005574:	d014      	beq.n	80055a0 <HAL_TIM_ConfigClockSource+0x534>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d010      	beq.n	80055a0 <HAL_TIM_ConfigClockSource+0x534>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00c      	beq.n	80055a0 <HAL_TIM_ConfigClockSource+0x534>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d008      	beq.n	80055a0 <HAL_TIM_ConfigClockSource+0x534>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b0a      	cmp	r3, #10
 8005594:	d004      	beq.n	80055a0 <HAL_TIM_ConfigClockSource+0x534>
 8005596:	f241 1132 	movw	r1, #4402	; 0x1132
 800559a:	482c      	ldr	r0, [pc, #176]	; (800564c <HAL_TIM_ConfigClockSource+0x5e0>)
 800559c:	f7fb fcea 	bl	8000f74 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2b0f      	cmp	r3, #15
 80055a6:	d904      	bls.n	80055b2 <HAL_TIM_ConfigClockSource+0x546>
 80055a8:	f241 1133 	movw	r1, #4403	; 0x1133
 80055ac:	4827      	ldr	r0, [pc, #156]	; (800564c <HAL_TIM_ConfigClockSource+0x5e0>)
 80055ae:	f7fb fce1 	bl	8000f74 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	6859      	ldr	r1, [r3, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	461a      	mov	r2, r3
 80055c0:	f000 f9cf 	bl	8005962 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2140      	movs	r1, #64	; 0x40
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fa26 	bl	8005a1c <TIM_ITRx_SetConfig>
      break;
 80055d0:	e027      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055da:	d018      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x5a2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a16      	ldr	r2, [pc, #88]	; (800563c <HAL_TIM_ConfigClockSource+0x5d0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x5a2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a15      	ldr	r2, [pc, #84]	; (8005640 <HAL_TIM_ConfigClockSource+0x5d4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x5a2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a13      	ldr	r2, [pc, #76]	; (8005644 <HAL_TIM_ConfigClockSource+0x5d8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x5a2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a12      	ldr	r2, [pc, #72]	; (8005648 <HAL_TIM_ConfigClockSource+0x5dc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x5a2>
 8005604:	f241 1142 	movw	r1, #4418	; 0x1142
 8005608:	4810      	ldr	r0, [pc, #64]	; (800564c <HAL_TIM_ConfigClockSource+0x5e0>)
 800560a:	f7fb fcb3 	bl	8000f74 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f000 f9ff 	bl	8005a1c <TIM_ITRx_SetConfig>
      break;
 800561e:	e000      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x5b6>
      break;
 8005620:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	40000400 	.word	0x40000400
 8005640:	40000800 	.word	0x40000800
 8005644:	40000c00 	.word	0x40000c00
 8005648:	40010800 	.word	0x40010800
 800564c:	08009820 	.word	0x08009820

08005650 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr

08005662 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr

08005674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr

08005686 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr

08005698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ae:	d00f      	beq.n	80056d0 <TIM_Base_SetConfig+0x38>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a2b      	ldr	r2, [pc, #172]	; (8005760 <TIM_Base_SetConfig+0xc8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00b      	beq.n	80056d0 <TIM_Base_SetConfig+0x38>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a2a      	ldr	r2, [pc, #168]	; (8005764 <TIM_Base_SetConfig+0xcc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d007      	beq.n	80056d0 <TIM_Base_SetConfig+0x38>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a29      	ldr	r2, [pc, #164]	; (8005768 <TIM_Base_SetConfig+0xd0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_Base_SetConfig+0x38>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a28      	ldr	r2, [pc, #160]	; (800576c <TIM_Base_SetConfig+0xd4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d108      	bne.n	80056e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e8:	d017      	beq.n	800571a <TIM_Base_SetConfig+0x82>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a1c      	ldr	r2, [pc, #112]	; (8005760 <TIM_Base_SetConfig+0xc8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <TIM_Base_SetConfig+0x82>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a1b      	ldr	r2, [pc, #108]	; (8005764 <TIM_Base_SetConfig+0xcc>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00f      	beq.n	800571a <TIM_Base_SetConfig+0x82>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1a      	ldr	r2, [pc, #104]	; (8005768 <TIM_Base_SetConfig+0xd0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00b      	beq.n	800571a <TIM_Base_SetConfig+0x82>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a19      	ldr	r2, [pc, #100]	; (800576c <TIM_Base_SetConfig+0xd4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d007      	beq.n	800571a <TIM_Base_SetConfig+0x82>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a18      	ldr	r2, [pc, #96]	; (8005770 <TIM_Base_SetConfig+0xd8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d003      	beq.n	800571a <TIM_Base_SetConfig+0x82>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a17      	ldr	r2, [pc, #92]	; (8005774 <TIM_Base_SetConfig+0xdc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d108      	bne.n	800572c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	615a      	str	r2, [r3, #20]
}
 8005756:	bf00      	nop
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40000c00 	.word	0x40000c00
 800576c:	40010800 	.word	0x40010800
 8005770:	40010c00 	.word	0x40010c00
 8005774:	40011000 	.word	0x40011000

08005778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f023 0201 	bic.w	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 0302 	bic.w	r3, r3, #2
 80057c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f023 0210 	bic.w	r2, r3, #16
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f023 0320 	bic.w	r3, r3, #32
 800583a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0303 	bic.w	r3, r3, #3
 80058a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	621a      	str	r2, [r3, #32]
}
 80058dc:	bf00      	nop
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bc80      	pop	{r7}
 80058e4:	4770      	bx	lr

080058e6 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b087      	sub	sp, #28
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005914:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	021b      	lsls	r3, r3, #8
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	031b      	lsls	r3, r3, #12
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	621a      	str	r2, [r3, #32]
}
 8005958:	bf00      	nop
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005962:	b480      	push	{r7}
 8005964:	b087      	sub	sp, #28
 8005966:	af00      	add	r7, sp, #0
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	60b9      	str	r1, [r7, #8]
 800596c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	f023 0201 	bic.w	r2, r3, #1
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800598c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	4313      	orrs	r3, r2
 8005996:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 030a 	bic.w	r3, r3, #10
 800599e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	621a      	str	r2, [r3, #32]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr

080059be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059be:	b480      	push	{r7}
 80059c0:	b087      	sub	sp, #28
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	f023 0210 	bic.w	r2, r3, #16
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	031b      	lsls	r3, r3, #12
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f043 0307 	orr.w	r3, r3, #7
 8005a3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	609a      	str	r2, [r3, #8]
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr

08005a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	021a      	lsls	r2, r3, #8
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	609a      	str	r2, [r3, #8]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr
	...

08005a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa2:	d017      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a41      	ldr	r2, [pc, #260]	; (8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d012      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a40      	ldr	r2, [pc, #256]	; (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00d      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a3e      	ldr	r2, [pc, #248]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d008      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a3d      	ldr	r2, [pc, #244]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005acc:	215a      	movs	r1, #90	; 0x5a
 8005ace:	483c      	ldr	r0, [pc, #240]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8005ad0:	f7fb fa50 	bl	8000f74 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01f      	beq.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b10      	cmp	r3, #16
 8005ae2:	d01b      	beq.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d017      	beq.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b30      	cmp	r3, #48	; 0x30
 8005af2:	d013      	beq.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b40      	cmp	r3, #64	; 0x40
 8005afa:	d00f      	beq.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b50      	cmp	r3, #80	; 0x50
 8005b02:	d00b      	beq.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b60      	cmp	r3, #96	; 0x60
 8005b0a:	d007      	beq.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b70      	cmp	r3, #112	; 0x70
 8005b12:	d003      	beq.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005b14:	215b      	movs	r1, #91	; 0x5b
 8005b16:	482a      	ldr	r0, [pc, #168]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8005b18:	f7fb fa2c 	bl	8000f74 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b80      	cmp	r3, #128	; 0x80
 8005b22:	d007      	beq.n	8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005b2c:	215c      	movs	r1, #92	; 0x5c
 8005b2e:	4824      	ldr	r0, [pc, #144]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8005b30:	f7fb fa20 	bl	8000f74 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e032      	b.n	8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0x118>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b7a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40000400 	.word	0x40000400
 8005bb4:	40000800 	.word	0x40000800
 8005bb8:	40000c00 	.word	0x40000c00
 8005bbc:	40010800 	.word	0x40010800
 8005bc0:	08009858 	.word	0x08009858

08005bc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e0aa      	b.n	8005d2c <HAL_UART_Init+0x168>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d02c      	beq.n	8005c38 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a54      	ldr	r2, [pc, #336]	; (8005d34 <HAL_UART_Init+0x170>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00e      	beq.n	8005c06 <HAL_UART_Init+0x42>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a52      	ldr	r2, [pc, #328]	; (8005d38 <HAL_UART_Init+0x174>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d009      	beq.n	8005c06 <HAL_UART_Init+0x42>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a51      	ldr	r2, [pc, #324]	; (8005d3c <HAL_UART_Init+0x178>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d004      	beq.n	8005c06 <HAL_UART_Init+0x42>
 8005bfc:	f240 1145 	movw	r1, #325	; 0x145
 8005c00:	484f      	ldr	r0, [pc, #316]	; (8005d40 <HAL_UART_Init+0x17c>)
 8005c02:	f7fb f9b7 	bl	8000f74 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d032      	beq.n	8005c74 <HAL_UART_Init+0xb0>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c16:	d02d      	beq.n	8005c74 <HAL_UART_Init+0xb0>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c20:	d028      	beq.n	8005c74 <HAL_UART_Init+0xb0>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c2a:	d023      	beq.n	8005c74 <HAL_UART_Init+0xb0>
 8005c2c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005c30:	4843      	ldr	r0, [pc, #268]	; (8005d40 <HAL_UART_Init+0x17c>)
 8005c32:	f7fb f99f 	bl	8000f74 <assert_failed>
 8005c36:	e01d      	b.n	8005c74 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a3d      	ldr	r2, [pc, #244]	; (8005d34 <HAL_UART_Init+0x170>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d018      	beq.n	8005c74 <HAL_UART_Init+0xb0>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a3c      	ldr	r2, [pc, #240]	; (8005d38 <HAL_UART_Init+0x174>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d013      	beq.n	8005c74 <HAL_UART_Init+0xb0>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a3a      	ldr	r2, [pc, #232]	; (8005d3c <HAL_UART_Init+0x178>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00e      	beq.n	8005c74 <HAL_UART_Init+0xb0>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a3a      	ldr	r2, [pc, #232]	; (8005d44 <HAL_UART_Init+0x180>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d009      	beq.n	8005c74 <HAL_UART_Init+0xb0>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a38      	ldr	r2, [pc, #224]	; (8005d48 <HAL_UART_Init+0x184>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d004      	beq.n	8005c74 <HAL_UART_Init+0xb0>
 8005c6a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005c6e:	4834      	ldr	r0, [pc, #208]	; (8005d40 <HAL_UART_Init+0x17c>)
 8005c70:	f7fb f980 	bl	8000f74 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d009      	beq.n	8005c90 <HAL_UART_Init+0xcc>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c84:	d004      	beq.n	8005c90 <HAL_UART_Init+0xcc>
 8005c86:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005c8a:	482d      	ldr	r0, [pc, #180]	; (8005d40 <HAL_UART_Init+0x17c>)
 8005c8c:	f7fb f972 	bl	8000f74 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <HAL_UART_Init+0xe8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca0:	d004      	beq.n	8005cac <HAL_UART_Init+0xe8>
 8005ca2:	f240 114d 	movw	r1, #333	; 0x14d
 8005ca6:	4826      	ldr	r0, [pc, #152]	; (8005d40 <HAL_UART_Init+0x17c>)
 8005ca8:	f7fb f964 	bl	8000f74 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d106      	bne.n	8005cc6 <HAL_UART_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7fb fc9d 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2224      	movs	r2, #36	; 0x24
 8005cca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cdc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f9be 	bl	8006060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cf2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695a      	ldr	r2, [r3, #20]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d02:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d12:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40013800 	.word	0x40013800
 8005d38:	40004400 	.word	0x40004400
 8005d3c:	40004800 	.word	0x40004800
 8005d40:	08009894 	.word	0x08009894
 8005d44:	40004c00 	.word	0x40004c00
 8005d48:	40005000 	.word	0x40005000

08005d4c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	603b      	str	r3, [r7, #0]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	f040 8083 	bne.w	8005e74 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <HAL_UART_Transmit+0x2e>
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e07b      	b.n	8005e76 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_UART_Transmit+0x40>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e074      	b.n	8005e76 <HAL_UART_Transmit+0x12a>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2221      	movs	r2, #33	; 0x21
 8005d9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005da2:	f7fb fcc1 	bl	8001728 <HAL_GetTick>
 8005da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	88fa      	ldrh	r2, [r7, #6]
 8005dac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	88fa      	ldrh	r2, [r7, #6]
 8005db2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005db4:	e042      	b.n	8005e3c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dcc:	d122      	bne.n	8005e14 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2180      	movs	r1, #128	; 0x80
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f8f6 	bl	8005fca <UART_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e046      	b.n	8005e76 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dfa:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d103      	bne.n	8005e0c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	3302      	adds	r3, #2
 8005e08:	60bb      	str	r3, [r7, #8]
 8005e0a:	e017      	b.n	8005e3c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	e013      	b.n	8005e3c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2180      	movs	r1, #128	; 0x80
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 f8d3 	bl	8005fca <UART_WaitOnFlagUntilTimeout>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e023      	b.n	8005e76 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	60ba      	str	r2, [r7, #8]
 8005e34:	781a      	ldrb	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1b7      	bne.n	8005db6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2140      	movs	r1, #64	; 0x40
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f8ba 	bl	8005fca <UART_WaitOnFlagUntilTimeout>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e00a      	b.n	8005e76 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	e000      	b.n	8005e76 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005e74:	2302      	movs	r3, #2
  }
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b088      	sub	sp, #32
 8005e82:	af02      	add	r7, sp, #8
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	603b      	str	r3, [r7, #0]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	f040 8090 	bne.w	8005fc0 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_UART_Receive+0x2e>
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e088      	b.n	8005fc2 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <HAL_UART_Receive+0x40>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e081      	b.n	8005fc2 <HAL_UART_Receive+0x144>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2222      	movs	r2, #34	; 0x22
 8005ed0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005ed4:	f7fb fc28 	bl	8001728 <HAL_GetTick>
 8005ed8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	88fa      	ldrh	r2, [r7, #6]
 8005ede:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	88fa      	ldrh	r2, [r7, #6]
 8005ee4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005ee6:	e05c      	b.n	8005fa2 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efe:	d12b      	bne.n	8005f58 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2200      	movs	r2, #0
 8005f08:	2120      	movs	r1, #32
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f85d 	bl	8005fca <UART_WaitOnFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e053      	b.n	8005fc2 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10c      	bne.n	8005f40 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	60bb      	str	r3, [r7, #8]
 8005f3e:	e030      	b.n	8005fa2 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	3301      	adds	r3, #1
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	e024      	b.n	8005fa2 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2120      	movs	r1, #32
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f831 	bl	8005fca <UART_WaitOnFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e027      	b.n	8005fc2 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d108      	bne.n	8005f8c <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6859      	ldr	r1, [r3, #4]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	60ba      	str	r2, [r7, #8]
 8005f86:	b2ca      	uxtb	r2, r1
 8005f88:	701a      	strb	r2, [r3, #0]
 8005f8a:	e00a      	b.n	8005fa2 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	1c59      	adds	r1, r3, #1
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d19d      	bne.n	8005ee8 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	e000      	b.n	8005fc2 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005fc0:	2302      	movs	r3, #2
  }
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	603b      	str	r3, [r7, #0]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fda:	e02c      	b.n	8006036 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe2:	d028      	beq.n	8006036 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d007      	beq.n	8005ffa <UART_WaitOnFlagUntilTimeout+0x30>
 8005fea:	f7fb fb9d 	bl	8001728 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d21d      	bcs.n	8006036 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006008:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	695a      	ldr	r2, [r3, #20]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0201 	bic.w	r2, r2, #1
 8006018:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e00f      	b.n	8006056 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	4013      	ands	r3, r2
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	429a      	cmp	r2, r3
 8006044:	bf0c      	ite	eq
 8006046:	2301      	moveq	r3, #1
 8006048:	2300      	movne	r3, #0
 800604a:	b2db      	uxtb	r3, r3
 800604c:	461a      	mov	r2, r3
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	429a      	cmp	r2, r3
 8006052:	d0c3      	beq.n	8005fdc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4ab2      	ldr	r2, [pc, #712]	; (8006338 <UART_SetConfig+0x2d8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d904      	bls.n	800607c <UART_SetConfig+0x1c>
 8006072:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8006076:	48b1      	ldr	r0, [pc, #708]	; (800633c <UART_SetConfig+0x2dc>)
 8006078:	f7fa ff7c 	bl	8000f74 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d009      	beq.n	8006098 <UART_SetConfig+0x38>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800608c:	d004      	beq.n	8006098 <UART_SetConfig+0x38>
 800608e:	f640 31e3 	movw	r1, #3043	; 0xbe3
 8006092:	48aa      	ldr	r0, [pc, #680]	; (800633c <UART_SetConfig+0x2dc>)
 8006094:	f7fa ff6e 	bl	8000f74 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00e      	beq.n	80060be <UART_SetConfig+0x5e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a8:	d009      	beq.n	80060be <UART_SetConfig+0x5e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80060b2:	d004      	beq.n	80060be <UART_SetConfig+0x5e>
 80060b4:	f640 31e4 	movw	r1, #3044	; 0xbe4
 80060b8:	48a0      	ldr	r0, [pc, #640]	; (800633c <UART_SetConfig+0x2dc>)
 80060ba:	f7fa ff5b 	bl	8000f74 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695a      	ldr	r2, [r3, #20]
 80060c2:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80060c6:	4013      	ands	r3, r2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d103      	bne.n	80060d4 <UART_SetConfig+0x74>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d104      	bne.n	80060de <UART_SetConfig+0x7e>
 80060d4:	f640 31e5 	movw	r1, #3045	; 0xbe5
 80060d8:	4898      	ldr	r0, [pc, #608]	; (800633c <UART_SetConfig+0x2dc>)
 80060da:	f7fa ff4b 	bl	8000f74 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006116:	f023 030c 	bic.w	r3, r3, #12
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	68f9      	ldr	r1, [r7, #12]
 8006120:	430b      	orrs	r3, r1
 8006122:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006142:	f040 80a5 	bne.w	8006290 <UART_SetConfig+0x230>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a7d      	ldr	r2, [pc, #500]	; (8006340 <UART_SetConfig+0x2e0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d14f      	bne.n	80061f0 <UART_SetConfig+0x190>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006150:	f7fe faaa 	bl	80046a8 <HAL_RCC_GetPCLK2Freq>
 8006154:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009a      	lsls	r2, r3, #2
 8006160:	441a      	add	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	fbb2 f3f3 	udiv	r3, r2, r3
 800616c:	4a75      	ldr	r2, [pc, #468]	; (8006344 <UART_SetConfig+0x2e4>)
 800616e:	fba2 2303 	umull	r2, r3, r2, r3
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	0119      	lsls	r1, r3, #4
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009a      	lsls	r2, r3, #2
 8006180:	441a      	add	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	fbb2 f2f3 	udiv	r2, r2, r3
 800618c:	4b6d      	ldr	r3, [pc, #436]	; (8006344 <UART_SetConfig+0x2e4>)
 800618e:	fba3 0302 	umull	r0, r3, r3, r2
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2064      	movs	r0, #100	; 0x64
 8006196:	fb00 f303 	mul.w	r3, r0, r3
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	3332      	adds	r3, #50	; 0x32
 80061a0:	4a68      	ldr	r2, [pc, #416]	; (8006344 <UART_SetConfig+0x2e4>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061ae:	4419      	add	r1, r3
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	009a      	lsls	r2, r3, #2
 80061ba:	441a      	add	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80061c6:	4b5f      	ldr	r3, [pc, #380]	; (8006344 <UART_SetConfig+0x2e4>)
 80061c8:	fba3 0302 	umull	r0, r3, r3, r2
 80061cc:	095b      	lsrs	r3, r3, #5
 80061ce:	2064      	movs	r0, #100	; 0x64
 80061d0:	fb00 f303 	mul.w	r3, r0, r3
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	3332      	adds	r3, #50	; 0x32
 80061da:	4a5a      	ldr	r2, [pc, #360]	; (8006344 <UART_SetConfig+0x2e4>)
 80061dc:	fba2 2303 	umull	r2, r3, r2, r3
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	f003 0207 	and.w	r2, r3, #7
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	440a      	add	r2, r1
 80061ec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80061ee:	e0f9      	b.n	80063e4 <UART_SetConfig+0x384>
      pclk = HAL_RCC_GetPCLK1Freq();
 80061f0:	f7fe fa46 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 80061f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	009a      	lsls	r2, r3, #2
 8006200:	441a      	add	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	fbb2 f3f3 	udiv	r3, r2, r3
 800620c:	4a4d      	ldr	r2, [pc, #308]	; (8006344 <UART_SetConfig+0x2e4>)
 800620e:	fba2 2303 	umull	r2, r3, r2, r3
 8006212:	095b      	lsrs	r3, r3, #5
 8006214:	0119      	lsls	r1, r3, #4
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	009a      	lsls	r2, r3, #2
 8006220:	441a      	add	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	fbb2 f2f3 	udiv	r2, r2, r3
 800622c:	4b45      	ldr	r3, [pc, #276]	; (8006344 <UART_SetConfig+0x2e4>)
 800622e:	fba3 0302 	umull	r0, r3, r3, r2
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	2064      	movs	r0, #100	; 0x64
 8006236:	fb00 f303 	mul.w	r3, r0, r3
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	3332      	adds	r3, #50	; 0x32
 8006240:	4a40      	ldr	r2, [pc, #256]	; (8006344 <UART_SetConfig+0x2e4>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800624e:	4419      	add	r1, r3
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009a      	lsls	r2, r3, #2
 800625a:	441a      	add	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	fbb2 f2f3 	udiv	r2, r2, r3
 8006266:	4b37      	ldr	r3, [pc, #220]	; (8006344 <UART_SetConfig+0x2e4>)
 8006268:	fba3 0302 	umull	r0, r3, r3, r2
 800626c:	095b      	lsrs	r3, r3, #5
 800626e:	2064      	movs	r0, #100	; 0x64
 8006270:	fb00 f303 	mul.w	r3, r0, r3
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	3332      	adds	r3, #50	; 0x32
 800627a:	4a32      	ldr	r2, [pc, #200]	; (8006344 <UART_SetConfig+0x2e4>)
 800627c:	fba2 2303 	umull	r2, r3, r2, r3
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	f003 0207 	and.w	r2, r3, #7
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	440a      	add	r2, r1
 800628c:	609a      	str	r2, [r3, #8]
}
 800628e:	e0a9      	b.n	80063e4 <UART_SetConfig+0x384>
    if((huart->Instance == USART1))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a2a      	ldr	r2, [pc, #168]	; (8006340 <UART_SetConfig+0x2e0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d156      	bne.n	8006348 <UART_SetConfig+0x2e8>
      pclk = HAL_RCC_GetPCLK2Freq();
 800629a:	f7fe fa05 	bl	80046a8 <HAL_RCC_GetPCLK2Freq>
 800629e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009a      	lsls	r2, r3, #2
 80062aa:	441a      	add	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b6:	4a23      	ldr	r2, [pc, #140]	; (8006344 <UART_SetConfig+0x2e4>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	0119      	lsls	r1, r3, #4
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009a      	lsls	r2, r3, #2
 80062ca:	441a      	add	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80062d6:	4b1b      	ldr	r3, [pc, #108]	; (8006344 <UART_SetConfig+0x2e4>)
 80062d8:	fba3 0302 	umull	r0, r3, r3, r2
 80062dc:	095b      	lsrs	r3, r3, #5
 80062de:	2064      	movs	r0, #100	; 0x64
 80062e0:	fb00 f303 	mul.w	r3, r0, r3
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	3332      	adds	r3, #50	; 0x32
 80062ea:	4a16      	ldr	r2, [pc, #88]	; (8006344 <UART_SetConfig+0x2e4>)
 80062ec:	fba2 2303 	umull	r2, r3, r2, r3
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062f6:	4419      	add	r1, r3
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	4613      	mov	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	009a      	lsls	r2, r3, #2
 8006302:	441a      	add	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	fbb2 f2f3 	udiv	r2, r2, r3
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <UART_SetConfig+0x2e4>)
 8006310:	fba3 0302 	umull	r0, r3, r3, r2
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	2064      	movs	r0, #100	; 0x64
 8006318:	fb00 f303 	mul.w	r3, r0, r3
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	3332      	adds	r3, #50	; 0x32
 8006322:	4a08      	ldr	r2, [pc, #32]	; (8006344 <UART_SetConfig+0x2e4>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	f003 020f 	and.w	r2, r3, #15
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	440a      	add	r2, r1
 8006334:	609a      	str	r2, [r3, #8]
}
 8006336:	e055      	b.n	80063e4 <UART_SetConfig+0x384>
 8006338:	003d0900 	.word	0x003d0900
 800633c:	08009894 	.word	0x08009894
 8006340:	40013800 	.word	0x40013800
 8006344:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8006348:	f7fe f99a 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 800634c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	009a      	lsls	r2, r3, #2
 8006358:	441a      	add	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	fbb2 f3f3 	udiv	r3, r2, r3
 8006364:	4a21      	ldr	r2, [pc, #132]	; (80063ec <UART_SetConfig+0x38c>)
 8006366:	fba2 2303 	umull	r2, r3, r2, r3
 800636a:	095b      	lsrs	r3, r3, #5
 800636c:	0119      	lsls	r1, r3, #4
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	009a      	lsls	r2, r3, #2
 8006378:	441a      	add	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	fbb2 f2f3 	udiv	r2, r2, r3
 8006384:	4b19      	ldr	r3, [pc, #100]	; (80063ec <UART_SetConfig+0x38c>)
 8006386:	fba3 0302 	umull	r0, r3, r3, r2
 800638a:	095b      	lsrs	r3, r3, #5
 800638c:	2064      	movs	r0, #100	; 0x64
 800638e:	fb00 f303 	mul.w	r3, r0, r3
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	011b      	lsls	r3, r3, #4
 8006396:	3332      	adds	r3, #50	; 0x32
 8006398:	4a14      	ldr	r2, [pc, #80]	; (80063ec <UART_SetConfig+0x38c>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	095b      	lsrs	r3, r3, #5
 80063a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063a4:	4419      	add	r1, r3
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009a      	lsls	r2, r3, #2
 80063b0:	441a      	add	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <UART_SetConfig+0x38c>)
 80063be:	fba3 0302 	umull	r0, r3, r3, r2
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	2064      	movs	r0, #100	; 0x64
 80063c6:	fb00 f303 	mul.w	r3, r0, r3
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	3332      	adds	r3, #50	; 0x32
 80063d0:	4a06      	ldr	r2, [pc, #24]	; (80063ec <UART_SetConfig+0x38c>)
 80063d2:	fba2 2303 	umull	r2, r3, r2, r3
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	f003 020f 	and.w	r2, r3, #15
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	440a      	add	r2, r1
 80063e2:	609a      	str	r2, [r3, #8]
}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	51eb851f 	.word	0x51eb851f

080063f0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063f6:	f3ef 8305 	mrs	r3, IPSR
 80063fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80063fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10f      	bne.n	8006422 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006402:	f3ef 8310 	mrs	r3, PRIMASK
 8006406:	607b      	str	r3, [r7, #4]
  return(result);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d109      	bne.n	8006422 <osKernelInitialize+0x32>
 800640e:	4b10      	ldr	r3, [pc, #64]	; (8006450 <osKernelInitialize+0x60>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d109      	bne.n	800642a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006416:	f3ef 8311 	mrs	r3, BASEPRI
 800641a:	603b      	str	r3, [r7, #0]
  return(result);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006422:	f06f 0305 	mvn.w	r3, #5
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	e00c      	b.n	8006444 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800642a:	4b09      	ldr	r3, [pc, #36]	; (8006450 <osKernelInitialize+0x60>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d105      	bne.n	800643e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006432:	4b07      	ldr	r3, [pc, #28]	; (8006450 <osKernelInitialize+0x60>)
 8006434:	2201      	movs	r2, #1
 8006436:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	e002      	b.n	8006444 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800643e:	f04f 33ff 	mov.w	r3, #4294967295
 8006442:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006444:	68fb      	ldr	r3, [r7, #12]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	bc80      	pop	{r7}
 800644e:	4770      	bx	lr
 8006450:	20000034 	.word	0x20000034

08006454 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800645a:	f3ef 8305 	mrs	r3, IPSR
 800645e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006460:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10f      	bne.n	8006486 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006466:	f3ef 8310 	mrs	r3, PRIMASK
 800646a:	607b      	str	r3, [r7, #4]
  return(result);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d109      	bne.n	8006486 <osKernelStart+0x32>
 8006472:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <osKernelStart+0x64>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d109      	bne.n	800648e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800647a:	f3ef 8311 	mrs	r3, BASEPRI
 800647e:	603b      	str	r3, [r7, #0]
  return(result);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006486:	f06f 0305 	mvn.w	r3, #5
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	e00e      	b.n	80064ac <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800648e:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <osKernelStart+0x64>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d107      	bne.n	80064a6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006496:	4b08      	ldr	r3, [pc, #32]	; (80064b8 <osKernelStart+0x64>)
 8006498:	2202      	movs	r2, #2
 800649a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800649c:	f001 fb5c 	bl	8007b58 <vTaskStartScheduler>
      stat = osOK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	e002      	b.n	80064ac <osKernelStart+0x58>
    } else {
      stat = osError;
 80064a6:	f04f 33ff 	mov.w	r3, #4294967295
 80064aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80064ac:	68fb      	ldr	r3, [r7, #12]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000034 	.word	0x20000034

080064bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b092      	sub	sp, #72	; 0x48
 80064c0:	af04      	add	r7, sp, #16
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064c8:	2300      	movs	r3, #0
 80064ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064cc:	f3ef 8305 	mrs	r3, IPSR
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f040 8094 	bne.w	8006602 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064da:	f3ef 8310 	mrs	r3, PRIMASK
 80064de:	623b      	str	r3, [r7, #32]
  return(result);
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f040 808d 	bne.w	8006602 <osThreadNew+0x146>
 80064e8:	4b48      	ldr	r3, [pc, #288]	; (800660c <osThreadNew+0x150>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d106      	bne.n	80064fe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064f0:	f3ef 8311 	mrs	r3, BASEPRI
 80064f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f040 8082 	bne.w	8006602 <osThreadNew+0x146>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d07e      	beq.n	8006602 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006504:	2380      	movs	r3, #128	; 0x80
 8006506:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006508:	2318      	movs	r3, #24
 800650a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800650c:	2300      	movs	r3, #0
 800650e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006510:	f107 031b 	add.w	r3, r7, #27
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006516:	f04f 33ff 	mov.w	r3, #4294967295
 800651a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d045      	beq.n	80065ae <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <osThreadNew+0x74>
        name = attr->name;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <osThreadNew+0x9a>
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006546:	2b38      	cmp	r3, #56	; 0x38
 8006548:	d805      	bhi.n	8006556 <osThreadNew+0x9a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <osThreadNew+0x9e>
        return (NULL);
 8006556:	2300      	movs	r3, #0
 8006558:	e054      	b.n	8006604 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	089b      	lsrs	r3, r3, #2
 8006568:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00e      	beq.n	8006590 <osThreadNew+0xd4>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	2b5b      	cmp	r3, #91	; 0x5b
 8006578:	d90a      	bls.n	8006590 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800657e:	2b00      	cmp	r3, #0
 8006580:	d006      	beq.n	8006590 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <osThreadNew+0xd4>
        mem = 1;
 800658a:	2301      	movs	r3, #1
 800658c:	62bb      	str	r3, [r7, #40]	; 0x28
 800658e:	e010      	b.n	80065b2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10c      	bne.n	80065b2 <osThreadNew+0xf6>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d108      	bne.n	80065b2 <osThreadNew+0xf6>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d104      	bne.n	80065b2 <osThreadNew+0xf6>
          mem = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ac:	e001      	b.n	80065b2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80065ae:	2300      	movs	r3, #0
 80065b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d110      	bne.n	80065da <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065c0:	9202      	str	r2, [sp, #8]
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 ffee 	bl	80075b0 <xTaskCreateStatic>
 80065d4:	4603      	mov	r3, r0
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	e013      	b.n	8006602 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d110      	bne.n	8006602 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	f107 0314 	add.w	r3, r7, #20
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f001 f835 	bl	8007662 <xTaskCreate>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d001      	beq.n	8006602 <osThreadNew+0x146>
          hTask = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006602:	697b      	ldr	r3, [r7, #20]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3738      	adds	r7, #56	; 0x38
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20000034 	.word	0x20000034

08006610 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006618:	f3ef 8305 	mrs	r3, IPSR
 800661c:	613b      	str	r3, [r7, #16]
  return(result);
 800661e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10f      	bne.n	8006644 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006624:	f3ef 8310 	mrs	r3, PRIMASK
 8006628:	60fb      	str	r3, [r7, #12]
  return(result);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d109      	bne.n	8006644 <osDelay+0x34>
 8006630:	4b0d      	ldr	r3, [pc, #52]	; (8006668 <osDelay+0x58>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b02      	cmp	r3, #2
 8006636:	d109      	bne.n	800664c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006638:	f3ef 8311 	mrs	r3, BASEPRI
 800663c:	60bb      	str	r3, [r7, #8]
  return(result);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d003      	beq.n	800664c <osDelay+0x3c>
    stat = osErrorISR;
 8006644:	f06f 0305 	mvn.w	r3, #5
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	e007      	b.n	800665c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800664c:	2300      	movs	r3, #0
 800664e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d002      	beq.n	800665c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 f93e 	bl	80078d8 <vTaskDelay>
    }
  }

  return (stat);
 800665c:	697b      	ldr	r3, [r7, #20]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000034 	.word	0x20000034

0800666c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4a06      	ldr	r2, [pc, #24]	; (8006694 <vApplicationGetIdleTaskMemory+0x28>)
 800667c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	4a05      	ldr	r2, [pc, #20]	; (8006698 <vApplicationGetIdleTaskMemory+0x2c>)
 8006682:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2280      	movs	r2, #128	; 0x80
 8006688:	601a      	str	r2, [r3, #0]
}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	bc80      	pop	{r7}
 8006692:	4770      	bx	lr
 8006694:	20000038 	.word	0x20000038
 8006698:	20000094 	.word	0x20000094

0800669c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4a07      	ldr	r2, [pc, #28]	; (80066c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80066ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	4a06      	ldr	r2, [pc, #24]	; (80066cc <vApplicationGetTimerTaskMemory+0x30>)
 80066b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066ba:	601a      	str	r2, [r3, #0]
}
 80066bc:	bf00      	nop
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20000294 	.word	0x20000294
 80066cc:	200002f0 	.word	0x200002f0

080066d0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80066d6:	2020      	movs	r0, #32
 80066d8:	f002 fd84 	bl	80091e4 <pvPortMalloc>
 80066dc:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00a      	beq.n	80066fa <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3304      	adds	r3, #4
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 f99e 	bl	8006a30 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80066fa:	687b      	ldr	r3, [r7, #4]
	}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b090      	sub	sp, #64	; 0x40
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800671a:	2300      	movs	r3, #0
 800671c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d109      	bne.n	8006738 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	623b      	str	r3, [r7, #32]
 8006736:	e7fe      	b.n	8006736 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d009      	beq.n	8006756 <xEventGroupWaitBits+0x52>
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	61fb      	str	r3, [r7, #28]
 8006754:	e7fe      	b.n	8006754 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d109      	bne.n	8006770 <xEventGroupWaitBits+0x6c>
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	61bb      	str	r3, [r7, #24]
 800676e:	e7fe      	b.n	800676e <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006770:	f001 fee4 	bl	800853c <xTaskGetSchedulerState>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <xEventGroupWaitBits+0x7c>
 800677a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <xEventGroupWaitBits+0x80>
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <xEventGroupWaitBits+0x82>
 8006784:	2300      	movs	r3, #0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <xEventGroupWaitBits+0x9a>
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	e7fe      	b.n	800679c <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 800679e:	f001 fa3f 	bl	8007c20 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80067a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067ae:	f000 f909 	bl	80069c4 <prvTestWaitCondition>
 80067b2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00e      	beq.n	80067d8 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d028      	beq.n	800681a <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80067c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	43db      	mvns	r3, r3
 80067d0:	401a      	ands	r2, r3
 80067d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	e020      	b.n	800681a <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80067d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d104      	bne.n	80067e8 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80067e2:	2301      	movs	r3, #1
 80067e4:	633b      	str	r3, [r7, #48]	; 0x30
 80067e6:	e018      	b.n	800681a <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80067ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067f4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006802:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006806:	1d18      	adds	r0, r3, #4
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680c:	4313      	orrs	r3, r2
 800680e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006810:	4619      	mov	r1, r3
 8006812:	f001 fc13 	bl	800803c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800681a:	f001 fa0f 	bl	8007c3c <xTaskResumeAll>
 800681e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006822:	2b00      	cmp	r3, #0
 8006824:	d031      	beq.n	800688a <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d107      	bne.n	800683c <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 800682c:	4b19      	ldr	r3, [pc, #100]	; (8006894 <xEventGroupWaitBits+0x190>)
 800682e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800683c:	f001 ff08 	bl	8008650 <uxTaskResetEventItemValue>
 8006840:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d11a      	bne.n	8006882 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 800684c:	f002 fbd4 	bl	8008ff8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800685c:	f000 f8b2 	bl	80069c4 <prvTestWaitCondition>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d009      	beq.n	800687a <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d006      	beq.n	800687a <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800686c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	43db      	mvns	r3, r3
 8006874:	401a      	ands	r2, r3
 8006876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006878:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800687a:	2301      	movs	r3, #1
 800687c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800687e:	f002 fbe9 	bl	8009054 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006884:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006888:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800688a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800688c:	4618      	mov	r0, r3
 800688e:	3740      	adds	r7, #64	; 0x40
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	e000ed04 	.word	0xe000ed04

08006898 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08e      	sub	sp, #56	; 0x38
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80068a2:	2300      	movs	r3, #0
 80068a4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80068aa:	2300      	movs	r3, #0
 80068ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d109      	bne.n	80068c8 <xEventGroupSetBits+0x30>
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	e7fe      	b.n	80068c6 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d009      	beq.n	80068e6 <xEventGroupSetBits+0x4e>
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e7fe      	b.n	80068e4 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80068e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e8:	3304      	adds	r3, #4
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	3308      	adds	r3, #8
 80068f0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80068f2:	f001 f995 	bl	8007c20 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	431a      	orrs	r2, r3
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006908:	e03c      	b.n	8006984 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800690a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006916:	2300      	movs	r3, #0
 8006918:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006920:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006928:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d108      	bne.n	8006946 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	4013      	ands	r3, r2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00b      	beq.n	8006958 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8006940:	2301      	movs	r3, #1
 8006942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006944:	e008      	b.n	8006958 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	4013      	ands	r3, r2
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	429a      	cmp	r2, r3
 8006952:	d101      	bne.n	8006958 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006954:	2301      	movs	r3, #1
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d010      	beq.n	8006980 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	4313      	orrs	r3, r2
 800696e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006978:	4619      	mov	r1, r3
 800697a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800697c:	f001 fc24 	bl	80081c8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	429a      	cmp	r2, r3
 800698a:	d1be      	bne.n	800690a <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006992:	43db      	mvns	r3, r3
 8006994:	401a      	ands	r2, r3
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800699a:	f001 f94f 	bl	8007c3c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	681b      	ldr	r3, [r3, #0]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3738      	adds	r7, #56	; 0x38
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b082      	sub	sp, #8
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff ff6e 	bl	8006898 <xEventGroupSetBits>
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80069d0:	2300      	movs	r3, #0
 80069d2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d107      	bne.n	80069ea <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4013      	ands	r3, r2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00a      	beq.n	80069fa <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80069e4:	2301      	movs	r3, #1
 80069e6:	617b      	str	r3, [r7, #20]
 80069e8:	e007      	b.n	80069fa <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4013      	ands	r3, r2
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d101      	bne.n	80069fa <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80069f6:	2301      	movs	r3, #1
 80069f8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80069fa:	697b      	ldr	r3, [r7, #20]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr
	...

08006a08 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	68f9      	ldr	r1, [r7, #12]
 8006a1a:	4804      	ldr	r0, [pc, #16]	; (8006a2c <xEventGroupSetBitsFromISR+0x24>)
 8006a1c:	f002 f9e2 	bl	8008de4 <xTimerPendFunctionCallFromISR>
 8006a20:	6178      	str	r0, [r7, #20]

		return xReturn;
 8006a22:	697b      	ldr	r3, [r7, #20]
	}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	080069ab 	.word	0x080069ab

08006a30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f103 0208 	add.w	r2, r3, #8
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f04f 32ff 	mov.w	r2, #4294967295
 8006a48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f103 0208 	add.w	r2, r3, #8
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f103 0208 	add.w	r2, r3, #8
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr

08006a6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr

08006a86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	601a      	str	r2, [r3, #0]
}
 8006ac2:	bf00      	nop
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr

08006acc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae2:	d103      	bne.n	8006aec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	e00c      	b.n	8006b06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3308      	adds	r3, #8
 8006af0:	60fb      	str	r3, [r7, #12]
 8006af2:	e002      	b.n	8006afa <vListInsert+0x2e>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d2f6      	bcs.n	8006af4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	601a      	str	r2, [r3, #0]
}
 8006b32:	bf00      	nop
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr

08006b3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6892      	ldr	r2, [r2, #8]
 8006b52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6852      	ldr	r2, [r2, #4]
 8006b5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d103      	bne.n	8006b70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	1e5a      	subs	r2, r3, #1
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr
	...

08006b90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d109      	bne.n	8006bb8 <xQueueGenericReset+0x28>
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	e7fe      	b.n	8006bb6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006bb8:	f002 fa1e 	bl	8008ff8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc4:	68f9      	ldr	r1, [r7, #12]
 8006bc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006bc8:	fb01 f303 	mul.w	r3, r1, r3
 8006bcc:	441a      	add	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be8:	3b01      	subs	r3, #1
 8006bea:	68f9      	ldr	r1, [r7, #12]
 8006bec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006bee:	fb01 f303 	mul.w	r3, r1, r3
 8006bf2:	441a      	add	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	22ff      	movs	r2, #255	; 0xff
 8006bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	22ff      	movs	r2, #255	; 0xff
 8006c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d114      	bne.n	8006c38 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d01a      	beq.n	8006c4c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3310      	adds	r3, #16
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 fa72 	bl	8008104 <xTaskRemoveFromEventList>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d012      	beq.n	8006c4c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c26:	4b0d      	ldr	r3, [pc, #52]	; (8006c5c <xQueueGenericReset+0xcc>)
 8006c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	e009      	b.n	8006c4c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3310      	adds	r3, #16
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff fef7 	bl	8006a30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3324      	adds	r3, #36	; 0x24
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff fef2 	bl	8006a30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c4c:	f002 fa02 	bl	8009054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c50:	2301      	movs	r3, #1
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	e000ed04 	.word	0xe000ed04

08006c60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08e      	sub	sp, #56	; 0x38
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d109      	bne.n	8006c88 <xQueueGenericCreateStatic+0x28>
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c86:	e7fe      	b.n	8006c86 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <xQueueGenericCreateStatic+0x42>
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca0:	e7fe      	b.n	8006ca0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <xQueueGenericCreateStatic+0x4e>
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <xQueueGenericCreateStatic+0x52>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <xQueueGenericCreateStatic+0x54>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d109      	bne.n	8006ccc <xQueueGenericCreateStatic+0x6c>
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	623b      	str	r3, [r7, #32]
 8006cca:	e7fe      	b.n	8006cca <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d102      	bne.n	8006cd8 <xQueueGenericCreateStatic+0x78>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <xQueueGenericCreateStatic+0x7c>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <xQueueGenericCreateStatic+0x7e>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <xQueueGenericCreateStatic+0x96>
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	e7fe      	b.n	8006cf4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006cf6:	2350      	movs	r3, #80	; 0x50
 8006cf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b50      	cmp	r3, #80	; 0x50
 8006cfe:	d009      	beq.n	8006d14 <xQueueGenericCreateStatic+0xb4>
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	61bb      	str	r3, [r7, #24]
 8006d12:	e7fe      	b.n	8006d12 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00d      	beq.n	8006d3a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 f842 	bl	8006dbe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3730      	adds	r7, #48	; 0x30
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	; 0x28
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <xQueueGenericCreate+0x28>
 8006d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	e7fe      	b.n	8006d6a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d102      	bne.n	8006d78 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006d72:	2300      	movs	r3, #0
 8006d74:	61fb      	str	r3, [r7, #28]
 8006d76:	e004      	b.n	8006d82 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	fb02 f303 	mul.w	r3, r2, r3
 8006d80:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	3350      	adds	r3, #80	; 0x50
 8006d86:	4618      	mov	r0, r3
 8006d88:	f002 fa2c 	bl	80091e4 <pvPortMalloc>
 8006d8c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00f      	beq.n	8006db4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	3350      	adds	r3, #80	; 0x50
 8006d98:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006da2:	79fa      	ldrb	r2, [r7, #7]
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	68b9      	ldr	r1, [r7, #8]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 f805 	bl	8006dbe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006db4:	69bb      	ldr	r3, [r7, #24]
	}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3720      	adds	r7, #32
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d103      	bne.n	8006dda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	e002      	b.n	8006de0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dec:	2101      	movs	r1, #1
 8006dee:	69b8      	ldr	r0, [r7, #24]
 8006df0:	f7ff fece 	bl	8006b90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	78fa      	ldrb	r2, [r7, #3]
 8006df8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08e      	sub	sp, #56	; 0x38
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e12:	2300      	movs	r3, #0
 8006e14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d109      	bne.n	8006e34 <xQueueGenericSend+0x30>
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e32:	e7fe      	b.n	8006e32 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d103      	bne.n	8006e42 <xQueueGenericSend+0x3e>
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <xQueueGenericSend+0x42>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e000      	b.n	8006e48 <xQueueGenericSend+0x44>
 8006e46:	2300      	movs	r3, #0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d109      	bne.n	8006e60 <xQueueGenericSend+0x5c>
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e5e:	e7fe      	b.n	8006e5e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d103      	bne.n	8006e6e <xQueueGenericSend+0x6a>
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d101      	bne.n	8006e72 <xQueueGenericSend+0x6e>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <xQueueGenericSend+0x70>
 8006e72:	2300      	movs	r3, #0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d109      	bne.n	8006e8c <xQueueGenericSend+0x88>
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	623b      	str	r3, [r7, #32]
 8006e8a:	e7fe      	b.n	8006e8a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e8c:	f001 fb56 	bl	800853c <xTaskGetSchedulerState>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d102      	bne.n	8006e9c <xQueueGenericSend+0x98>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <xQueueGenericSend+0x9c>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e000      	b.n	8006ea2 <xQueueGenericSend+0x9e>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d109      	bne.n	8006eba <xQueueGenericSend+0xb6>
 8006ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	61fb      	str	r3, [r7, #28]
 8006eb8:	e7fe      	b.n	8006eb8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006eba:	f002 f89d 	bl	8008ff8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d302      	bcc.n	8006ed0 <xQueueGenericSend+0xcc>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d129      	bne.n	8006f24 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ed6:	f000 f9ff 	bl	80072d8 <prvCopyDataToQueue>
 8006eda:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d010      	beq.n	8006f06 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	3324      	adds	r3, #36	; 0x24
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f001 f90b 	bl	8008104 <xTaskRemoveFromEventList>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d013      	beq.n	8006f1c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ef4:	4b3f      	ldr	r3, [pc, #252]	; (8006ff4 <xQueueGenericSend+0x1f0>)
 8006ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	e00a      	b.n	8006f1c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f0c:	4b39      	ldr	r3, [pc, #228]	; (8006ff4 <xQueueGenericSend+0x1f0>)
 8006f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f1c:	f002 f89a 	bl	8009054 <vPortExitCritical>
				return pdPASS;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e063      	b.n	8006fec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d103      	bne.n	8006f32 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f2a:	f002 f893 	bl	8009054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e05c      	b.n	8006fec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d106      	bne.n	8006f46 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f38:	f107 0314 	add.w	r3, r7, #20
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f001 f9a3 	bl	8008288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f42:	2301      	movs	r3, #1
 8006f44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f46:	f002 f885 	bl	8009054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f4a:	f000 fe69 	bl	8007c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f4e:	f002 f853 	bl	8008ff8 <vPortEnterCritical>
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f58:	b25b      	sxtb	r3, r3
 8006f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5e:	d103      	bne.n	8006f68 <xQueueGenericSend+0x164>
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f6e:	b25b      	sxtb	r3, r3
 8006f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f74:	d103      	bne.n	8006f7e <xQueueGenericSend+0x17a>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f7e:	f002 f869 	bl	8009054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f82:	1d3a      	adds	r2, r7, #4
 8006f84:	f107 0314 	add.w	r3, r7, #20
 8006f88:	4611      	mov	r1, r2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f001 f992 	bl	80082b4 <xTaskCheckForTimeOut>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d124      	bne.n	8006fe0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f98:	f000 fa96 	bl	80074c8 <prvIsQueueFull>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d018      	beq.n	8006fd4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	3310      	adds	r3, #16
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	4611      	mov	r1, r2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f001 f822 	bl	8007ff4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fb2:	f000 fa21 	bl	80073f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006fb6:	f000 fe41 	bl	8007c3c <xTaskResumeAll>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f47f af7c 	bne.w	8006eba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006fc2:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <xQueueGenericSend+0x1f0>)
 8006fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	e772      	b.n	8006eba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fd6:	f000 fa0f 	bl	80073f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fda:	f000 fe2f 	bl	8007c3c <xTaskResumeAll>
 8006fde:	e76c      	b.n	8006eba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fe2:	f000 fa09 	bl	80073f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fe6:	f000 fe29 	bl	8007c3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006fea:	2300      	movs	r3, #0
		}
	}
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3738      	adds	r7, #56	; 0x38
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	e000ed04 	.word	0xe000ed04

08006ff8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08e      	sub	sp, #56	; 0x38
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	2b00      	cmp	r3, #0
 800700e:	d109      	bne.n	8007024 <xQueueGenericSendFromISR+0x2c>
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
 8007022:	e7fe      	b.n	8007022 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d103      	bne.n	8007032 <xQueueGenericSendFromISR+0x3a>
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <xQueueGenericSendFromISR+0x3e>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <xQueueGenericSendFromISR+0x40>
 8007036:	2300      	movs	r3, #0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d109      	bne.n	8007050 <xQueueGenericSendFromISR+0x58>
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	623b      	str	r3, [r7, #32]
 800704e:	e7fe      	b.n	800704e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	2b02      	cmp	r3, #2
 8007054:	d103      	bne.n	800705e <xQueueGenericSendFromISR+0x66>
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705a:	2b01      	cmp	r3, #1
 800705c:	d101      	bne.n	8007062 <xQueueGenericSendFromISR+0x6a>
 800705e:	2301      	movs	r3, #1
 8007060:	e000      	b.n	8007064 <xQueueGenericSendFromISR+0x6c>
 8007062:	2300      	movs	r3, #0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d109      	bne.n	800707c <xQueueGenericSendFromISR+0x84>
 8007068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	61fb      	str	r3, [r7, #28]
 800707a:	e7fe      	b.n	800707a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800707c:	f002 f876 	bl	800916c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007080:	f3ef 8211 	mrs	r2, BASEPRI
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	61ba      	str	r2, [r7, #24]
 8007096:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007098:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800709a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d302      	bcc.n	80070ae <xQueueGenericSendFromISR+0xb6>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d12c      	bne.n	8007108 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	68b9      	ldr	r1, [r7, #8]
 80070bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070be:	f000 f90b 	bl	80072d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070c2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80070c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ca:	d112      	bne.n	80070f2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d016      	beq.n	8007102 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	3324      	adds	r3, #36	; 0x24
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 f813 	bl	8008104 <xTaskRemoveFromEventList>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00e      	beq.n	8007102 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00b      	beq.n	8007102 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	e007      	b.n	8007102 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070f6:	3301      	adds	r3, #1
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	b25a      	sxtb	r2, r3
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007102:	2301      	movs	r3, #1
 8007104:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007106:	e001      	b.n	800710c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007108:	2300      	movs	r3, #0
 800710a:	637b      	str	r3, [r7, #52]	; 0x34
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007118:	4618      	mov	r0, r3
 800711a:	3738      	adds	r7, #56	; 0x38
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b08c      	sub	sp, #48	; 0x30
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800712c:	2300      	movs	r3, #0
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	2b00      	cmp	r3, #0
 8007138:	d109      	bne.n	800714e <xQueueReceive+0x2e>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	623b      	str	r3, [r7, #32]
 800714c:	e7fe      	b.n	800714c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d103      	bne.n	800715c <xQueueReceive+0x3c>
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <xQueueReceive+0x40>
 800715c:	2301      	movs	r3, #1
 800715e:	e000      	b.n	8007162 <xQueueReceive+0x42>
 8007160:	2300      	movs	r3, #0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d109      	bne.n	800717a <xQueueReceive+0x5a>
 8007166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	61fb      	str	r3, [r7, #28]
 8007178:	e7fe      	b.n	8007178 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800717a:	f001 f9df 	bl	800853c <xTaskGetSchedulerState>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d102      	bne.n	800718a <xQueueReceive+0x6a>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <xQueueReceive+0x6e>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <xQueueReceive+0x70>
 800718e:	2300      	movs	r3, #0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d109      	bne.n	80071a8 <xQueueReceive+0x88>
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	61bb      	str	r3, [r7, #24]
 80071a6:	e7fe      	b.n	80071a6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80071a8:	f001 ff26 	bl	8008ff8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01f      	beq.n	80071f8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071bc:	f000 f8f6 	bl	80073ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	1e5a      	subs	r2, r3, #1
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00f      	beq.n	80071f0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	3310      	adds	r3, #16
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 ff95 	bl	8008104 <xTaskRemoveFromEventList>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071e0:	4b3c      	ldr	r3, [pc, #240]	; (80072d4 <xQueueReceive+0x1b4>)
 80071e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071f0:	f001 ff30 	bl	8009054 <vPortExitCritical>
				return pdPASS;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e069      	b.n	80072cc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d103      	bne.n	8007206 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071fe:	f001 ff29 	bl	8009054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007202:	2300      	movs	r3, #0
 8007204:	e062      	b.n	80072cc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d106      	bne.n	800721a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800720c:	f107 0310 	add.w	r3, r7, #16
 8007210:	4618      	mov	r0, r3
 8007212:	f001 f839 	bl	8008288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007216:	2301      	movs	r3, #1
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800721a:	f001 ff1b 	bl	8009054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800721e:	f000 fcff 	bl	8007c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007222:	f001 fee9 	bl	8008ff8 <vPortEnterCritical>
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800722c:	b25b      	sxtb	r3, r3
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007232:	d103      	bne.n	800723c <xQueueReceive+0x11c>
 8007234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007242:	b25b      	sxtb	r3, r3
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007248:	d103      	bne.n	8007252 <xQueueReceive+0x132>
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007252:	f001 feff 	bl	8009054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007256:	1d3a      	adds	r2, r7, #4
 8007258:	f107 0310 	add.w	r3, r7, #16
 800725c:	4611      	mov	r1, r2
 800725e:	4618      	mov	r0, r3
 8007260:	f001 f828 	bl	80082b4 <xTaskCheckForTimeOut>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d123      	bne.n	80072b2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800726a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800726c:	f000 f916 	bl	800749c <prvIsQueueEmpty>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d017      	beq.n	80072a6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	3324      	adds	r3, #36	; 0x24
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	4611      	mov	r1, r2
 800727e:	4618      	mov	r0, r3
 8007280:	f000 feb8 	bl	8007ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007286:	f000 f8b7 	bl	80073f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800728a:	f000 fcd7 	bl	8007c3c <xTaskResumeAll>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d189      	bne.n	80071a8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007294:	4b0f      	ldr	r3, [pc, #60]	; (80072d4 <xQueueReceive+0x1b4>)
 8007296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	e780      	b.n	80071a8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80072a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072a8:	f000 f8a6 	bl	80073f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072ac:	f000 fcc6 	bl	8007c3c <xTaskResumeAll>
 80072b0:	e77a      	b.n	80071a8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80072b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072b4:	f000 f8a0 	bl	80073f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072b8:	f000 fcc0 	bl	8007c3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072be:	f000 f8ed 	bl	800749c <prvIsQueueEmpty>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f43f af6f 	beq.w	80071a8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3730      	adds	r7, #48	; 0x30
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	e000ed04 	.word	0xe000ed04

080072d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072e4:	2300      	movs	r3, #0
 80072e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10d      	bne.n	8007312 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d14d      	bne.n	800739a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	4618      	mov	r0, r3
 8007304:	f001 f938 	bl	8008578 <xTaskPriorityDisinherit>
 8007308:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	605a      	str	r2, [r3, #4]
 8007310:	e043      	b.n	800739a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d119      	bne.n	800734c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6898      	ldr	r0, [r3, #8]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	461a      	mov	r2, r3
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	f002 f95a 	bl	80095dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007330:	441a      	add	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689a      	ldr	r2, [r3, #8]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	429a      	cmp	r2, r3
 8007340:	d32b      	bcc.n	800739a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	609a      	str	r2, [r3, #8]
 800734a:	e026      	b.n	800739a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	68d8      	ldr	r0, [r3, #12]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007354:	461a      	mov	r2, r3
 8007356:	68b9      	ldr	r1, [r7, #8]
 8007358:	f002 f940 	bl	80095dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	425b      	negs	r3, r3
 8007366:	441a      	add	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d207      	bcs.n	8007388 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	425b      	negs	r3, r3
 8007382:	441a      	add	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b02      	cmp	r3, #2
 800738c:	d105      	bne.n	800739a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	3b01      	subs	r3, #1
 8007398:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80073a2:	697b      	ldr	r3, [r7, #20]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d018      	beq.n	80073f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	441a      	add	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68da      	ldr	r2, [r3, #12]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d303      	bcc.n	80073e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68d9      	ldr	r1, [r3, #12]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e8:	461a      	mov	r2, r3
 80073ea:	6838      	ldr	r0, [r7, #0]
 80073ec:	f002 f8f6 	bl	80095dc <memcpy>
	}
}
 80073f0:	bf00      	nop
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007400:	f001 fdfa 	bl	8008ff8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800740a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800740c:	e011      	b.n	8007432 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	2b00      	cmp	r3, #0
 8007414:	d012      	beq.n	800743c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3324      	adds	r3, #36	; 0x24
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fe72 	bl	8008104 <xTaskRemoveFromEventList>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007426:	f000 ffa5 	bl	8008374 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	3b01      	subs	r3, #1
 800742e:	b2db      	uxtb	r3, r3
 8007430:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007436:	2b00      	cmp	r3, #0
 8007438:	dce9      	bgt.n	800740e <prvUnlockQueue+0x16>
 800743a:	e000      	b.n	800743e <prvUnlockQueue+0x46>
					break;
 800743c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	22ff      	movs	r2, #255	; 0xff
 8007442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007446:	f001 fe05 	bl	8009054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800744a:	f001 fdd5 	bl	8008ff8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007454:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007456:	e011      	b.n	800747c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d012      	beq.n	8007486 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3310      	adds	r3, #16
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fe4d 	bl	8008104 <xTaskRemoveFromEventList>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007470:	f000 ff80 	bl	8008374 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	3b01      	subs	r3, #1
 8007478:	b2db      	uxtb	r3, r3
 800747a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800747c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007480:	2b00      	cmp	r3, #0
 8007482:	dce9      	bgt.n	8007458 <prvUnlockQueue+0x60>
 8007484:	e000      	b.n	8007488 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007486:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	22ff      	movs	r2, #255	; 0xff
 800748c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007490:	f001 fde0 	bl	8009054 <vPortExitCritical>
}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074a4:	f001 fda8 	bl	8008ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d102      	bne.n	80074b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074b0:	2301      	movs	r3, #1
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e001      	b.n	80074ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074ba:	f001 fdcb 	bl	8009054 <vPortExitCritical>

	return xReturn;
 80074be:	68fb      	ldr	r3, [r7, #12]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074d0:	f001 fd92 	bl	8008ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074dc:	429a      	cmp	r2, r3
 80074de:	d102      	bne.n	80074e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074e0:	2301      	movs	r3, #1
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e001      	b.n	80074ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074ea:	f001 fdb3 	bl	8009054 <vPortExitCritical>

	return xReturn;
 80074ee:	68fb      	ldr	r3, [r7, #12]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007502:	2300      	movs	r3, #0
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	e014      	b.n	8007532 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007508:	4a0e      	ldr	r2, [pc, #56]	; (8007544 <vQueueAddToRegistry+0x4c>)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10b      	bne.n	800752c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007514:	490b      	ldr	r1, [pc, #44]	; (8007544 <vQueueAddToRegistry+0x4c>)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800751e:	4a09      	ldr	r2, [pc, #36]	; (8007544 <vQueueAddToRegistry+0x4c>)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	4413      	add	r3, r2
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800752a:	e005      	b.n	8007538 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3301      	adds	r3, #1
 8007530:	60fb      	str	r3, [r7, #12]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b07      	cmp	r3, #7
 8007536:	d9e7      	bls.n	8007508 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007538:	bf00      	nop
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	bc80      	pop	{r7}
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	2000376c 	.word	0x2000376c

08007548 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007558:	f001 fd4e 	bl	8008ff8 <vPortEnterCritical>
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007562:	b25b      	sxtb	r3, r3
 8007564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007568:	d103      	bne.n	8007572 <vQueueWaitForMessageRestricted+0x2a>
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007578:	b25b      	sxtb	r3, r3
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757e:	d103      	bne.n	8007588 <vQueueWaitForMessageRestricted+0x40>
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007588:	f001 fd64 	bl	8009054 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	2b00      	cmp	r3, #0
 8007592:	d106      	bne.n	80075a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	3324      	adds	r3, #36	; 0x24
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	68b9      	ldr	r1, [r7, #8]
 800759c:	4618      	mov	r0, r3
 800759e:	f000 fd87 	bl	80080b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075a2:	6978      	ldr	r0, [r7, #20]
 80075a4:	f7ff ff28 	bl	80073f8 <prvUnlockQueue>
	}
 80075a8:	bf00      	nop
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b08e      	sub	sp, #56	; 0x38
 80075b4:	af04      	add	r7, sp, #16
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d109      	bne.n	80075d8 <xTaskCreateStatic+0x28>
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	623b      	str	r3, [r7, #32]
 80075d6:	e7fe      	b.n	80075d6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d109      	bne.n	80075f2 <xTaskCreateStatic+0x42>
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	61fb      	str	r3, [r7, #28]
 80075f0:	e7fe      	b.n	80075f0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075f2:	235c      	movs	r3, #92	; 0x5c
 80075f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b5c      	cmp	r3, #92	; 0x5c
 80075fa:	d009      	beq.n	8007610 <xTaskCreateStatic+0x60>
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	61bb      	str	r3, [r7, #24]
 800760e:	e7fe      	b.n	800760e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007612:	2b00      	cmp	r3, #0
 8007614:	d01e      	beq.n	8007654 <xTaskCreateStatic+0xa4>
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	2b00      	cmp	r3, #0
 800761a:	d01b      	beq.n	8007654 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007624:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	2202      	movs	r2, #2
 800762a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800762e:	2300      	movs	r3, #0
 8007630:	9303      	str	r3, [sp, #12]
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	9302      	str	r3, [sp, #8]
 8007636:	f107 0314 	add.w	r3, r7, #20
 800763a:	9301      	str	r3, [sp, #4]
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	68b9      	ldr	r1, [r7, #8]
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 f850 	bl	80076ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800764c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800764e:	f000 f8d3 	bl	80077f8 <prvAddNewTaskToReadyList>
 8007652:	e001      	b.n	8007658 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007658:	697b      	ldr	r3, [r7, #20]
	}
 800765a:	4618      	mov	r0, r3
 800765c:	3728      	adds	r7, #40	; 0x28
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007662:	b580      	push	{r7, lr}
 8007664:	b08c      	sub	sp, #48	; 0x30
 8007666:	af04      	add	r7, sp, #16
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	4613      	mov	r3, r2
 8007670:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007672:	88fb      	ldrh	r3, [r7, #6]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4618      	mov	r0, r3
 8007678:	f001 fdb4 	bl	80091e4 <pvPortMalloc>
 800767c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00e      	beq.n	80076a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007684:	205c      	movs	r0, #92	; 0x5c
 8007686:	f001 fdad 	bl	80091e4 <pvPortMalloc>
 800768a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
 8007698:	e005      	b.n	80076a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800769a:	6978      	ldr	r0, [r7, #20]
 800769c:	f001 fe68 	bl	8009370 <vPortFree>
 80076a0:	e001      	b.n	80076a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d017      	beq.n	80076dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076b4:	88fa      	ldrh	r2, [r7, #6]
 80076b6:	2300      	movs	r3, #0
 80076b8:	9303      	str	r3, [sp, #12]
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	9302      	str	r3, [sp, #8]
 80076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 f80e 	bl	80076ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076d0:	69f8      	ldr	r0, [r7, #28]
 80076d2:	f000 f891 	bl	80077f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076d6:	2301      	movs	r3, #1
 80076d8:	61bb      	str	r3, [r7, #24]
 80076da:	e002      	b.n	80076e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076dc:	f04f 33ff 	mov.w	r3, #4294967295
 80076e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076e2:	69bb      	ldr	r3, [r7, #24]
	}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3720      	adds	r7, #32
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	461a      	mov	r2, r3
 8007704:	21a5      	movs	r1, #165	; 0xa5
 8007706:	f001 ff74 	bl	80095f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007714:	3b01      	subs	r3, #1
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	f023 0307 	bic.w	r3, r3, #7
 8007722:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	2b00      	cmp	r3, #0
 800772c:	d009      	beq.n	8007742 <prvInitialiseNewTask+0x56>
 800772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	617b      	str	r3, [r7, #20]
 8007740:	e7fe      	b.n	8007740 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007742:	2300      	movs	r3, #0
 8007744:	61fb      	str	r3, [r7, #28]
 8007746:	e012      	b.n	800776e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	4413      	add	r3, r2
 800774e:	7819      	ldrb	r1, [r3, #0]
 8007750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	4413      	add	r3, r2
 8007756:	3334      	adds	r3, #52	; 0x34
 8007758:	460a      	mov	r2, r1
 800775a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	4413      	add	r3, r2
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d006      	beq.n	8007776 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	3301      	adds	r3, #1
 800776c:	61fb      	str	r3, [r7, #28]
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	2b0f      	cmp	r3, #15
 8007772:	d9e9      	bls.n	8007748 <prvInitialiseNewTask+0x5c>
 8007774:	e000      	b.n	8007778 <prvInitialiseNewTask+0x8c>
		{
			break;
 8007776:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	2b37      	cmp	r3, #55	; 0x37
 8007784:	d901      	bls.n	800778a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007786:	2337      	movs	r3, #55	; 0x37
 8007788:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800778e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007794:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	2200      	movs	r2, #0
 800779a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	3304      	adds	r3, #4
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff f964 	bl	8006a6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	3318      	adds	r3, #24
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7ff f95f 	bl	8006a6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c8:	2200      	movs	r2, #0
 80077ca:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	68f9      	ldr	r1, [r7, #12]
 80077d8:	69b8      	ldr	r0, [r7, #24]
 80077da:	f001 fb23 	bl	8008e24 <pxPortInitialiseStack>
 80077de:	4602      	mov	r2, r0
 80077e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80077e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077f0:	bf00      	nop
 80077f2:	3720      	adds	r7, #32
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007800:	f001 fbfa 	bl	8008ff8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007804:	4b2d      	ldr	r3, [pc, #180]	; (80078bc <prvAddNewTaskToReadyList+0xc4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3301      	adds	r3, #1
 800780a:	4a2c      	ldr	r2, [pc, #176]	; (80078bc <prvAddNewTaskToReadyList+0xc4>)
 800780c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800780e:	4b2c      	ldr	r3, [pc, #176]	; (80078c0 <prvAddNewTaskToReadyList+0xc8>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d109      	bne.n	800782a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007816:	4a2a      	ldr	r2, [pc, #168]	; (80078c0 <prvAddNewTaskToReadyList+0xc8>)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800781c:	4b27      	ldr	r3, [pc, #156]	; (80078bc <prvAddNewTaskToReadyList+0xc4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d110      	bne.n	8007846 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007824:	f000 fdcc 	bl	80083c0 <prvInitialiseTaskLists>
 8007828:	e00d      	b.n	8007846 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800782a:	4b26      	ldr	r3, [pc, #152]	; (80078c4 <prvAddNewTaskToReadyList+0xcc>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d109      	bne.n	8007846 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007832:	4b23      	ldr	r3, [pc, #140]	; (80078c0 <prvAddNewTaskToReadyList+0xc8>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	429a      	cmp	r2, r3
 800783e:	d802      	bhi.n	8007846 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007840:	4a1f      	ldr	r2, [pc, #124]	; (80078c0 <prvAddNewTaskToReadyList+0xc8>)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007846:	4b20      	ldr	r3, [pc, #128]	; (80078c8 <prvAddNewTaskToReadyList+0xd0>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3301      	adds	r3, #1
 800784c:	4a1e      	ldr	r2, [pc, #120]	; (80078c8 <prvAddNewTaskToReadyList+0xd0>)
 800784e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007850:	4b1d      	ldr	r3, [pc, #116]	; (80078c8 <prvAddNewTaskToReadyList+0xd0>)
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785c:	4b1b      	ldr	r3, [pc, #108]	; (80078cc <prvAddNewTaskToReadyList+0xd4>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d903      	bls.n	800786c <prvAddNewTaskToReadyList+0x74>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	4a18      	ldr	r2, [pc, #96]	; (80078cc <prvAddNewTaskToReadyList+0xd4>)
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007870:	4613      	mov	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4a15      	ldr	r2, [pc, #84]	; (80078d0 <prvAddNewTaskToReadyList+0xd8>)
 800787a:	441a      	add	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	3304      	adds	r3, #4
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f7ff f8ff 	bl	8006a86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007888:	f001 fbe4 	bl	8009054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800788c:	4b0d      	ldr	r3, [pc, #52]	; (80078c4 <prvAddNewTaskToReadyList+0xcc>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00e      	beq.n	80078b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007894:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <prvAddNewTaskToReadyList+0xc8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789e:	429a      	cmp	r2, r3
 80078a0:	d207      	bcs.n	80078b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80078a2:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <prvAddNewTaskToReadyList+0xdc>)
 80078a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078b2:	bf00      	nop
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	20000bc4 	.word	0x20000bc4
 80078c0:	200006f0 	.word	0x200006f0
 80078c4:	20000bd0 	.word	0x20000bd0
 80078c8:	20000be0 	.word	0x20000be0
 80078cc:	20000bcc 	.word	0x20000bcc
 80078d0:	200006f4 	.word	0x200006f4
 80078d4:	e000ed04 	.word	0xe000ed04

080078d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d016      	beq.n	8007918 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078ea:	4b13      	ldr	r3, [pc, #76]	; (8007938 <vTaskDelay+0x60>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d009      	beq.n	8007906 <vTaskDelay+0x2e>
 80078f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	60bb      	str	r3, [r7, #8]
 8007904:	e7fe      	b.n	8007904 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007906:	f000 f98b 	bl	8007c20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800790a:	2100      	movs	r1, #0
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 feb7 	bl	8008680 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007912:	f000 f993 	bl	8007c3c <xTaskResumeAll>
 8007916:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d107      	bne.n	800792e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800791e:	4b07      	ldr	r3, [pc, #28]	; (800793c <vTaskDelay+0x64>)
 8007920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20000bec 	.word	0x20000bec
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007948:	f001 fb56 	bl	8008ff8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d102      	bne.n	8007958 <vTaskSuspend+0x18>
 8007952:	4b2f      	ldr	r3, [pc, #188]	; (8007a10 <vTaskSuspend+0xd0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	e000      	b.n	800795a <vTaskSuspend+0x1a>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3304      	adds	r3, #4
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff f8eb 	bl	8006b3c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796a:	2b00      	cmp	r3, #0
 800796c:	d004      	beq.n	8007978 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3318      	adds	r3, #24
 8007972:	4618      	mov	r0, r3
 8007974:	f7ff f8e2 	bl	8006b3c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3304      	adds	r3, #4
 800797c:	4619      	mov	r1, r3
 800797e:	4825      	ldr	r0, [pc, #148]	; (8007a14 <vTaskSuspend+0xd4>)
 8007980:	f7ff f881 	bl	8006a86 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b01      	cmp	r3, #1
 800798e:	d103      	bne.n	8007998 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007998:	f001 fb5c 	bl	8009054 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800799c:	4b1e      	ldr	r3, [pc, #120]	; (8007a18 <vTaskSuspend+0xd8>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d005      	beq.n	80079b0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80079a4:	f001 fb28 	bl	8008ff8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80079a8:	f000 fda4 	bl	80084f4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80079ac:	f001 fb52 	bl	8009054 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80079b0:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <vTaskSuspend+0xd0>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d126      	bne.n	8007a08 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 80079ba:	4b17      	ldr	r3, [pc, #92]	; (8007a18 <vTaskSuspend+0xd8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d016      	beq.n	80079f0 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80079c2:	4b16      	ldr	r3, [pc, #88]	; (8007a1c <vTaskSuspend+0xdc>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d009      	beq.n	80079de <vTaskSuspend+0x9e>
 80079ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	60bb      	str	r3, [r7, #8]
 80079dc:	e7fe      	b.n	80079dc <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 80079de:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <vTaskSuspend+0xe0>)
 80079e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079ee:	e00b      	b.n	8007a08 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80079f0:	4b08      	ldr	r3, [pc, #32]	; (8007a14 <vTaskSuspend+0xd4>)
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <vTaskSuspend+0xe4>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d103      	bne.n	8007a04 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 80079fc:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <vTaskSuspend+0xd0>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
	}
 8007a02:	e001      	b.n	8007a08 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8007a04:	f000 fa8a 	bl	8007f1c <vTaskSwitchContext>
	}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	200006f0 	.word	0x200006f0
 8007a14:	20000bb0 	.word	0x20000bb0
 8007a18:	20000bd0 	.word	0x20000bd0
 8007a1c:	20000bec 	.word	0x20000bec
 8007a20:	e000ed04 	.word	0xe000ed04
 8007a24:	20000bc4 	.word	0x20000bc4

08007a28 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d109      	bne.n	8007a52 <prvTaskIsTaskSuspended+0x2a>
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	e7fe      	b.n	8007a50 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	4a0f      	ldr	r2, [pc, #60]	; (8007a94 <prvTaskIsTaskSuspended+0x6c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d101      	bne.n	8007a60 <prvTaskIsTaskSuspended+0x38>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e000      	b.n	8007a62 <prvTaskIsTaskSuspended+0x3a>
 8007a60:	2300      	movs	r3, #0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00f      	beq.n	8007a86 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	4a0b      	ldr	r2, [pc, #44]	; (8007a98 <prvTaskIsTaskSuspended+0x70>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00a      	beq.n	8007a86 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <prvTaskIsTaskSuspended+0x54>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e000      	b.n	8007a7e <prvTaskIsTaskSuspended+0x56>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8007a82:	2301      	movs	r3, #1
 8007a84:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a86:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007a88:	4618      	mov	r0, r3
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bc80      	pop	{r7}
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	20000bb0 	.word	0x20000bb0
 8007a98:	20000b84 	.word	0x20000b84

08007a9c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d109      	bne.n	8007ac2 <vTaskResume+0x26>
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	60bb      	str	r3, [r7, #8]
 8007ac0:	e7fe      	b.n	8007ac0 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d03a      	beq.n	8007b3e <vTaskResume+0xa2>
 8007ac8:	4b1f      	ldr	r3, [pc, #124]	; (8007b48 <vTaskResume+0xac>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d035      	beq.n	8007b3e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8007ad2:	f001 fa91 	bl	8008ff8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f7ff ffa6 	bl	8007a28 <prvTaskIsTaskSuspended>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d02b      	beq.n	8007b3a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff f828 	bl	8006b3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af0:	4b16      	ldr	r3, [pc, #88]	; (8007b4c <vTaskResume+0xb0>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d903      	bls.n	8007b00 <vTaskResume+0x64>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afc:	4a13      	ldr	r2, [pc, #76]	; (8007b4c <vTaskResume+0xb0>)
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b04:	4613      	mov	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4413      	add	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4a10      	ldr	r2, [pc, #64]	; (8007b50 <vTaskResume+0xb4>)
 8007b0e:	441a      	add	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3304      	adds	r3, #4
 8007b14:	4619      	mov	r1, r3
 8007b16:	4610      	mov	r0, r2
 8007b18:	f7fe ffb5 	bl	8006a86 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b20:	4b09      	ldr	r3, [pc, #36]	; (8007b48 <vTaskResume+0xac>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d307      	bcc.n	8007b3a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007b2a:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <vTaskResume+0xb8>)
 8007b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007b3a:	f001 fa8b 	bl	8009054 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b3e:	bf00      	nop
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	200006f0 	.word	0x200006f0
 8007b4c:	20000bcc 	.word	0x20000bcc
 8007b50:	200006f4 	.word	0x200006f4
 8007b54:	e000ed04 	.word	0xe000ed04

08007b58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08a      	sub	sp, #40	; 0x28
 8007b5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b62:	2300      	movs	r3, #0
 8007b64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b66:	463a      	mov	r2, r7
 8007b68:	1d39      	adds	r1, r7, #4
 8007b6a:	f107 0308 	add.w	r3, r7, #8
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe fd7c 	bl	800666c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	9202      	str	r2, [sp, #8]
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	2300      	movs	r3, #0
 8007b84:	460a      	mov	r2, r1
 8007b86:	4920      	ldr	r1, [pc, #128]	; (8007c08 <vTaskStartScheduler+0xb0>)
 8007b88:	4820      	ldr	r0, [pc, #128]	; (8007c0c <vTaskStartScheduler+0xb4>)
 8007b8a:	f7ff fd11 	bl	80075b0 <xTaskCreateStatic>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	4b1f      	ldr	r3, [pc, #124]	; (8007c10 <vTaskStartScheduler+0xb8>)
 8007b92:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b94:	4b1e      	ldr	r3, [pc, #120]	; (8007c10 <vTaskStartScheduler+0xb8>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	e001      	b.n	8007ba6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d102      	bne.n	8007bb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007bac:	f000 fdbc 	bl	8008728 <xTimerCreateTimerTask>
 8007bb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d115      	bne.n	8007be4 <vTaskStartScheduler+0x8c>
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007bca:	4b12      	ldr	r3, [pc, #72]	; (8007c14 <vTaskStartScheduler+0xbc>)
 8007bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007bd2:	4b11      	ldr	r3, [pc, #68]	; (8007c18 <vTaskStartScheduler+0xc0>)
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007bd8:	4b10      	ldr	r3, [pc, #64]	; (8007c1c <vTaskStartScheduler+0xc4>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007bde:	f001 f99b 	bl	8008f18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007be2:	e00d      	b.n	8007c00 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bea:	d109      	bne.n	8007c00 <vTaskStartScheduler+0xa8>
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	e7fe      	b.n	8007bfe <vTaskStartScheduler+0xa6>
}
 8007c00:	bf00      	nop
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	080098d0 	.word	0x080098d0
 8007c0c:	0800838d 	.word	0x0800838d
 8007c10:	20000be8 	.word	0x20000be8
 8007c14:	20000be4 	.word	0x20000be4
 8007c18:	20000bd0 	.word	0x20000bd0
 8007c1c:	20000bc8 	.word	0x20000bc8

08007c20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c20:	b480      	push	{r7}
 8007c22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c24:	4b04      	ldr	r3, [pc, #16]	; (8007c38 <vTaskSuspendAll+0x18>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	4a03      	ldr	r2, [pc, #12]	; (8007c38 <vTaskSuspendAll+0x18>)
 8007c2c:	6013      	str	r3, [r2, #0]
}
 8007c2e:	bf00      	nop
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bc80      	pop	{r7}
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	20000bec 	.word	0x20000bec

08007c3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c4a:	4b41      	ldr	r3, [pc, #260]	; (8007d50 <xTaskResumeAll+0x114>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <xTaskResumeAll+0x2a>
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	603b      	str	r3, [r7, #0]
 8007c64:	e7fe      	b.n	8007c64 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c66:	f001 f9c7 	bl	8008ff8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c6a:	4b39      	ldr	r3, [pc, #228]	; (8007d50 <xTaskResumeAll+0x114>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	4a37      	ldr	r2, [pc, #220]	; (8007d50 <xTaskResumeAll+0x114>)
 8007c72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c74:	4b36      	ldr	r3, [pc, #216]	; (8007d50 <xTaskResumeAll+0x114>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d162      	bne.n	8007d42 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c7c:	4b35      	ldr	r3, [pc, #212]	; (8007d54 <xTaskResumeAll+0x118>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d05e      	beq.n	8007d42 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c84:	e02f      	b.n	8007ce6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007c86:	4b34      	ldr	r3, [pc, #208]	; (8007d58 <xTaskResumeAll+0x11c>)
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3318      	adds	r3, #24
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe ff52 	bl	8006b3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fe ff4d 	bl	8006b3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca6:	4b2d      	ldr	r3, [pc, #180]	; (8007d5c <xTaskResumeAll+0x120>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d903      	bls.n	8007cb6 <xTaskResumeAll+0x7a>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb2:	4a2a      	ldr	r2, [pc, #168]	; (8007d5c <xTaskResumeAll+0x120>)
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cba:	4613      	mov	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4a27      	ldr	r2, [pc, #156]	; (8007d60 <xTaskResumeAll+0x124>)
 8007cc4:	441a      	add	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	3304      	adds	r3, #4
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4610      	mov	r0, r2
 8007cce:	f7fe feda 	bl	8006a86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd6:	4b23      	ldr	r3, [pc, #140]	; (8007d64 <xTaskResumeAll+0x128>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d302      	bcc.n	8007ce6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007ce0:	4b21      	ldr	r3, [pc, #132]	; (8007d68 <xTaskResumeAll+0x12c>)
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ce6:	4b1c      	ldr	r3, [pc, #112]	; (8007d58 <xTaskResumeAll+0x11c>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1cb      	bne.n	8007c86 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cf4:	f000 fbfe 	bl	80084f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007cf8:	4b1c      	ldr	r3, [pc, #112]	; (8007d6c <xTaskResumeAll+0x130>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d010      	beq.n	8007d26 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d04:	f000 f844 	bl	8007d90 <xTaskIncrementTick>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d002      	beq.n	8007d14 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007d0e:	4b16      	ldr	r3, [pc, #88]	; (8007d68 <xTaskResumeAll+0x12c>)
 8007d10:	2201      	movs	r2, #1
 8007d12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1f1      	bne.n	8007d04 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007d20:	4b12      	ldr	r3, [pc, #72]	; (8007d6c <xTaskResumeAll+0x130>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d26:	4b10      	ldr	r3, [pc, #64]	; (8007d68 <xTaskResumeAll+0x12c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d009      	beq.n	8007d42 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d32:	4b0f      	ldr	r3, [pc, #60]	; (8007d70 <xTaskResumeAll+0x134>)
 8007d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d42:	f001 f987 	bl	8009054 <vPortExitCritical>

	return xAlreadyYielded;
 8007d46:	68bb      	ldr	r3, [r7, #8]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20000bec 	.word	0x20000bec
 8007d54:	20000bc4 	.word	0x20000bc4
 8007d58:	20000b84 	.word	0x20000b84
 8007d5c:	20000bcc 	.word	0x20000bcc
 8007d60:	200006f4 	.word	0x200006f4
 8007d64:	200006f0 	.word	0x200006f0
 8007d68:	20000bd8 	.word	0x20000bd8
 8007d6c:	20000bd4 	.word	0x20000bd4
 8007d70:	e000ed04 	.word	0xe000ed04

08007d74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d7a:	4b04      	ldr	r3, [pc, #16]	; (8007d8c <xTaskGetTickCount+0x18>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d80:	687b      	ldr	r3, [r7, #4]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bc80      	pop	{r7}
 8007d8a:	4770      	bx	lr
 8007d8c:	20000bc8 	.word	0x20000bc8

08007d90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d96:	2300      	movs	r3, #0
 8007d98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d9a:	4b55      	ldr	r3, [pc, #340]	; (8007ef0 <xTaskIncrementTick+0x160>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f040 8093 	bne.w	8007eca <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007da4:	4b53      	ldr	r3, [pc, #332]	; (8007ef4 <xTaskIncrementTick+0x164>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3301      	adds	r3, #1
 8007daa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007dac:	4a51      	ldr	r2, [pc, #324]	; (8007ef4 <xTaskIncrementTick+0x164>)
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d11f      	bne.n	8007df8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007db8:	4b4f      	ldr	r3, [pc, #316]	; (8007ef8 <xTaskIncrementTick+0x168>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d009      	beq.n	8007dd6 <xTaskIncrementTick+0x46>
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	e7fe      	b.n	8007dd4 <xTaskIncrementTick+0x44>
 8007dd6:	4b48      	ldr	r3, [pc, #288]	; (8007ef8 <xTaskIncrementTick+0x168>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	4b47      	ldr	r3, [pc, #284]	; (8007efc <xTaskIncrementTick+0x16c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a45      	ldr	r2, [pc, #276]	; (8007ef8 <xTaskIncrementTick+0x168>)
 8007de2:	6013      	str	r3, [r2, #0]
 8007de4:	4a45      	ldr	r2, [pc, #276]	; (8007efc <xTaskIncrementTick+0x16c>)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6013      	str	r3, [r2, #0]
 8007dea:	4b45      	ldr	r3, [pc, #276]	; (8007f00 <xTaskIncrementTick+0x170>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3301      	adds	r3, #1
 8007df0:	4a43      	ldr	r2, [pc, #268]	; (8007f00 <xTaskIncrementTick+0x170>)
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	f000 fb7e 	bl	80084f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007df8:	4b42      	ldr	r3, [pc, #264]	; (8007f04 <xTaskIncrementTick+0x174>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d34e      	bcc.n	8007ea0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e02:	4b3d      	ldr	r3, [pc, #244]	; (8007ef8 <xTaskIncrementTick+0x168>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <xTaskIncrementTick+0x80>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e000      	b.n	8007e12 <xTaskIncrementTick+0x82>
 8007e10:	2300      	movs	r3, #0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d004      	beq.n	8007e20 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e16:	4b3b      	ldr	r3, [pc, #236]	; (8007f04 <xTaskIncrementTick+0x174>)
 8007e18:	f04f 32ff 	mov.w	r2, #4294967295
 8007e1c:	601a      	str	r2, [r3, #0]
					break;
 8007e1e:	e03f      	b.n	8007ea0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e20:	4b35      	ldr	r3, [pc, #212]	; (8007ef8 <xTaskIncrementTick+0x168>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d203      	bcs.n	8007e40 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e38:	4a32      	ldr	r2, [pc, #200]	; (8007f04 <xTaskIncrementTick+0x174>)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6013      	str	r3, [r2, #0]
						break;
 8007e3e:	e02f      	b.n	8007ea0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	3304      	adds	r3, #4
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fe fe79 	bl	8006b3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d004      	beq.n	8007e5c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	3318      	adds	r3, #24
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fe70 	bl	8006b3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e60:	4b29      	ldr	r3, [pc, #164]	; (8007f08 <xTaskIncrementTick+0x178>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d903      	bls.n	8007e70 <xTaskIncrementTick+0xe0>
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6c:	4a26      	ldr	r2, [pc, #152]	; (8007f08 <xTaskIncrementTick+0x178>)
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e74:	4613      	mov	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4a23      	ldr	r2, [pc, #140]	; (8007f0c <xTaskIncrementTick+0x17c>)
 8007e7e:	441a      	add	r2, r3
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	3304      	adds	r3, #4
 8007e84:	4619      	mov	r1, r3
 8007e86:	4610      	mov	r0, r2
 8007e88:	f7fe fdfd 	bl	8006a86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e90:	4b1f      	ldr	r3, [pc, #124]	; (8007f10 <xTaskIncrementTick+0x180>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d3b3      	bcc.n	8007e02 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e9e:	e7b0      	b.n	8007e02 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ea0:	4b1b      	ldr	r3, [pc, #108]	; (8007f10 <xTaskIncrementTick+0x180>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea6:	4919      	ldr	r1, [pc, #100]	; (8007f0c <xTaskIncrementTick+0x17c>)
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	440b      	add	r3, r1
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d901      	bls.n	8007ebc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8007ebc:	4b15      	ldr	r3, [pc, #84]	; (8007f14 <xTaskIncrementTick+0x184>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d109      	bne.n	8007ed8 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8007ec4:	f7f8 fe2a 	bl	8000b1c <vApplicationTickHook>
 8007ec8:	e006      	b.n	8007ed8 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007eca:	4b12      	ldr	r3, [pc, #72]	; (8007f14 <xTaskIncrementTick+0x184>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	4a10      	ldr	r2, [pc, #64]	; (8007f14 <xTaskIncrementTick+0x184>)
 8007ed2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8007ed4:	f7f8 fe22 	bl	8000b1c <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ed8:	4b0f      	ldr	r3, [pc, #60]	; (8007f18 <xTaskIncrementTick+0x188>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ee4:	697b      	ldr	r3, [r7, #20]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000bec 	.word	0x20000bec
 8007ef4:	20000bc8 	.word	0x20000bc8
 8007ef8:	20000b7c 	.word	0x20000b7c
 8007efc:	20000b80 	.word	0x20000b80
 8007f00:	20000bdc 	.word	0x20000bdc
 8007f04:	20000be4 	.word	0x20000be4
 8007f08:	20000bcc 	.word	0x20000bcc
 8007f0c:	200006f4 	.word	0x200006f4
 8007f10:	200006f0 	.word	0x200006f0
 8007f14:	20000bd4 	.word	0x20000bd4
 8007f18:	20000bd8 	.word	0x20000bd8

08007f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f22:	4b2f      	ldr	r3, [pc, #188]	; (8007fe0 <vTaskSwitchContext+0xc4>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f2a:	4b2e      	ldr	r3, [pc, #184]	; (8007fe4 <vTaskSwitchContext+0xc8>)
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f30:	e051      	b.n	8007fd6 <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 8007f32:	4b2c      	ldr	r3, [pc, #176]	; (8007fe4 <vTaskSwitchContext+0xc8>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007f38:	4b2b      	ldr	r3, [pc, #172]	; (8007fe8 <vTaskSwitchContext+0xcc>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	4b2a      	ldr	r3, [pc, #168]	; (8007fe8 <vTaskSwitchContext+0xcc>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d808      	bhi.n	8007f5a <vTaskSwitchContext+0x3e>
 8007f48:	4b27      	ldr	r3, [pc, #156]	; (8007fe8 <vTaskSwitchContext+0xcc>)
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	4b26      	ldr	r3, [pc, #152]	; (8007fe8 <vTaskSwitchContext+0xcc>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3334      	adds	r3, #52	; 0x34
 8007f52:	4619      	mov	r1, r3
 8007f54:	4610      	mov	r0, r2
 8007f56:	f7f8 fde7 	bl	8000b28 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007f5a:	4b24      	ldr	r3, [pc, #144]	; (8007fec <vTaskSwitchContext+0xd0>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	e00f      	b.n	8007f82 <vTaskSwitchContext+0x66>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d109      	bne.n	8007f7c <vTaskSwitchContext+0x60>
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	607b      	str	r3, [r7, #4]
 8007f7a:	e7fe      	b.n	8007f7a <vTaskSwitchContext+0x5e>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	491b      	ldr	r1, [pc, #108]	; (8007ff0 <vTaskSwitchContext+0xd4>)
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	4613      	mov	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	440b      	add	r3, r1
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0e5      	beq.n	8007f62 <vTaskSwitchContext+0x46>
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4a13      	ldr	r2, [pc, #76]	; (8007ff0 <vTaskSwitchContext+0xd4>)
 8007fa2:	4413      	add	r3, r2
 8007fa4:	60bb      	str	r3, [r7, #8]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	605a      	str	r2, [r3, #4]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	3308      	adds	r3, #8
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d104      	bne.n	8007fc6 <vTaskSwitchContext+0xaa>
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	605a      	str	r2, [r3, #4]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	4a06      	ldr	r2, [pc, #24]	; (8007fe8 <vTaskSwitchContext+0xcc>)
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	4a06      	ldr	r2, [pc, #24]	; (8007fec <vTaskSwitchContext+0xd0>)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6013      	str	r3, [r2, #0]
}
 8007fd6:	bf00      	nop
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000bec 	.word	0x20000bec
 8007fe4:	20000bd8 	.word	0x20000bd8
 8007fe8:	200006f0 	.word	0x200006f0
 8007fec:	20000bcc 	.word	0x20000bcc
 8007ff0:	200006f4 	.word	0x200006f4

08007ff4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d109      	bne.n	8008018 <vTaskPlaceOnEventList+0x24>
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	e7fe      	b.n	8008016 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008018:	4b07      	ldr	r3, [pc, #28]	; (8008038 <vTaskPlaceOnEventList+0x44>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3318      	adds	r3, #24
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7fe fd53 	bl	8006acc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008026:	2101      	movs	r1, #1
 8008028:	6838      	ldr	r0, [r7, #0]
 800802a:	f000 fb29 	bl	8008680 <prvAddCurrentTaskToDelayedList>
}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	200006f0 	.word	0x200006f0

0800803c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d109      	bne.n	8008062 <vTaskPlaceOnUnorderedEventList+0x26>
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	e7fe      	b.n	8008060 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008062:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d109      	bne.n	800807e <vTaskPlaceOnUnorderedEventList+0x42>
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	e7fe      	b.n	800807c <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800807e:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <vTaskPlaceOnUnorderedEventList+0x70>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008088:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800808a:	4b08      	ldr	r3, [pc, #32]	; (80080ac <vTaskPlaceOnUnorderedEventList+0x70>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3318      	adds	r3, #24
 8008090:	4619      	mov	r1, r3
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7fe fcf7 	bl	8006a86 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008098:	2101      	movs	r1, #1
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 faf0 	bl	8008680 <prvAddCurrentTaskToDelayedList>
}
 80080a0:	bf00      	nop
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	20000bec 	.word	0x20000bec
 80080ac:	200006f0 	.word	0x200006f0

080080b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d109      	bne.n	80080d6 <vTaskPlaceOnEventListRestricted+0x26>
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	e7fe      	b.n	80080d4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080d6:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <vTaskPlaceOnEventListRestricted+0x50>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3318      	adds	r3, #24
 80080dc:	4619      	mov	r1, r3
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f7fe fcd1 	bl	8006a86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80080ea:	f04f 33ff 	mov.w	r3, #4294967295
 80080ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	68b8      	ldr	r0, [r7, #8]
 80080f4:	f000 fac4 	bl	8008680 <prvAddCurrentTaskToDelayedList>
	}
 80080f8:	bf00      	nop
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	200006f0 	.word	0x200006f0

08008104 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d109      	bne.n	800812e <xTaskRemoveFromEventList+0x2a>
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	e7fe      	b.n	800812c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	3318      	adds	r3, #24
 8008132:	4618      	mov	r0, r3
 8008134:	f7fe fd02 	bl	8006b3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008138:	4b1d      	ldr	r3, [pc, #116]	; (80081b0 <xTaskRemoveFromEventList+0xac>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d11d      	bne.n	800817c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	3304      	adds	r3, #4
 8008144:	4618      	mov	r0, r3
 8008146:	f7fe fcf9 	bl	8006b3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814e:	4b19      	ldr	r3, [pc, #100]	; (80081b4 <xTaskRemoveFromEventList+0xb0>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	429a      	cmp	r2, r3
 8008154:	d903      	bls.n	800815e <xTaskRemoveFromEventList+0x5a>
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815a:	4a16      	ldr	r2, [pc, #88]	; (80081b4 <xTaskRemoveFromEventList+0xb0>)
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008162:	4613      	mov	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4a13      	ldr	r2, [pc, #76]	; (80081b8 <xTaskRemoveFromEventList+0xb4>)
 800816c:	441a      	add	r2, r3
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	3304      	adds	r3, #4
 8008172:	4619      	mov	r1, r3
 8008174:	4610      	mov	r0, r2
 8008176:	f7fe fc86 	bl	8006a86 <vListInsertEnd>
 800817a:	e005      	b.n	8008188 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	3318      	adds	r3, #24
 8008180:	4619      	mov	r1, r3
 8008182:	480e      	ldr	r0, [pc, #56]	; (80081bc <xTaskRemoveFromEventList+0xb8>)
 8008184:	f7fe fc7f 	bl	8006a86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818c:	4b0c      	ldr	r3, [pc, #48]	; (80081c0 <xTaskRemoveFromEventList+0xbc>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008192:	429a      	cmp	r2, r3
 8008194:	d905      	bls.n	80081a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008196:	2301      	movs	r3, #1
 8008198:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800819a:	4b0a      	ldr	r3, [pc, #40]	; (80081c4 <xTaskRemoveFromEventList+0xc0>)
 800819c:	2201      	movs	r2, #1
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	e001      	b.n	80081a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80081a2:	2300      	movs	r3, #0
 80081a4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80081a6:	697b      	ldr	r3, [r7, #20]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3718      	adds	r7, #24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20000bec 	.word	0x20000bec
 80081b4:	20000bcc 	.word	0x20000bcc
 80081b8:	200006f4 	.word	0x200006f4
 80081bc:	20000b84 	.word	0x20000b84
 80081c0:	200006f0 	.word	0x200006f0
 80081c4:	20000bd8 	.word	0x20000bd8

080081c8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80081d2:	4b28      	ldr	r3, [pc, #160]	; (8008274 <vTaskRemoveFromUnorderedEventList+0xac>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d109      	bne.n	80081ee <vTaskRemoveFromUnorderedEventList+0x26>
 80081da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	613b      	str	r3, [r7, #16]
 80081ec:	e7fe      	b.n	80081ec <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d109      	bne.n	8008218 <vTaskRemoveFromUnorderedEventList+0x50>
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	e7fe      	b.n	8008216 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7fe fc8f 	bl	8006b3c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	3304      	adds	r3, #4
 8008222:	4618      	mov	r0, r3
 8008224:	f7fe fc8a 	bl	8006b3c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822c:	4b12      	ldr	r3, [pc, #72]	; (8008278 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	429a      	cmp	r2, r3
 8008232:	d903      	bls.n	800823c <vTaskRemoveFromUnorderedEventList+0x74>
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008238:	4a0f      	ldr	r2, [pc, #60]	; (8008278 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800823a:	6013      	str	r3, [r2, #0]
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008240:	4613      	mov	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4a0c      	ldr	r2, [pc, #48]	; (800827c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800824a:	441a      	add	r2, r3
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	3304      	adds	r3, #4
 8008250:	4619      	mov	r1, r3
 8008252:	4610      	mov	r0, r2
 8008254:	f7fe fc17 	bl	8006a86 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825c:	4b08      	ldr	r3, [pc, #32]	; (8008280 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	429a      	cmp	r2, r3
 8008264:	d902      	bls.n	800826c <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008266:	4b07      	ldr	r3, [pc, #28]	; (8008284 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008268:	2201      	movs	r2, #1
 800826a:	601a      	str	r2, [r3, #0]
	}
}
 800826c:	bf00      	nop
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	20000bec 	.word	0x20000bec
 8008278:	20000bcc 	.word	0x20000bcc
 800827c:	200006f4 	.word	0x200006f4
 8008280:	200006f0 	.word	0x200006f0
 8008284:	20000bd8 	.word	0x20000bd8

08008288 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008290:	4b06      	ldr	r3, [pc, #24]	; (80082ac <vTaskInternalSetTimeOutState+0x24>)
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008298:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <vTaskInternalSetTimeOutState+0x28>)
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	605a      	str	r2, [r3, #4]
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bc80      	pop	{r7}
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	20000bdc 	.word	0x20000bdc
 80082b0:	20000bc8 	.word	0x20000bc8

080082b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b088      	sub	sp, #32
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d109      	bne.n	80082d8 <xTaskCheckForTimeOut+0x24>
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	613b      	str	r3, [r7, #16]
 80082d6:	e7fe      	b.n	80082d6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d109      	bne.n	80082f2 <xTaskCheckForTimeOut+0x3e>
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	e7fe      	b.n	80082f0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80082f2:	f000 fe81 	bl	8008ff8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082f6:	4b1d      	ldr	r3, [pc, #116]	; (800836c <xTaskCheckForTimeOut+0xb8>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830e:	d102      	bne.n	8008316 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008310:	2300      	movs	r3, #0
 8008312:	61fb      	str	r3, [r7, #28]
 8008314:	e023      	b.n	800835e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	4b15      	ldr	r3, [pc, #84]	; (8008370 <xTaskCheckForTimeOut+0xbc>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	429a      	cmp	r2, r3
 8008320:	d007      	beq.n	8008332 <xTaskCheckForTimeOut+0x7e>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	429a      	cmp	r2, r3
 800832a:	d302      	bcc.n	8008332 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800832c:	2301      	movs	r3, #1
 800832e:	61fb      	str	r3, [r7, #28]
 8008330:	e015      	b.n	800835e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	429a      	cmp	r2, r3
 800833a:	d20b      	bcs.n	8008354 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff ff9d 	bl	8008288 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800834e:	2300      	movs	r3, #0
 8008350:	61fb      	str	r3, [r7, #28]
 8008352:	e004      	b.n	800835e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	2200      	movs	r2, #0
 8008358:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800835a:	2301      	movs	r3, #1
 800835c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800835e:	f000 fe79 	bl	8009054 <vPortExitCritical>

	return xReturn;
 8008362:	69fb      	ldr	r3, [r7, #28]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3720      	adds	r7, #32
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20000bc8 	.word	0x20000bc8
 8008370:	20000bdc 	.word	0x20000bdc

08008374 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008378:	4b03      	ldr	r3, [pc, #12]	; (8008388 <vTaskMissedYield+0x14>)
 800837a:	2201      	movs	r2, #1
 800837c:	601a      	str	r2, [r3, #0]
}
 800837e:	bf00      	nop
 8008380:	46bd      	mov	sp, r7
 8008382:	bc80      	pop	{r7}
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	20000bd8 	.word	0x20000bd8

0800838c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008394:	f000 f854 	bl	8008440 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008398:	4b07      	ldr	r3, [pc, #28]	; (80083b8 <prvIdleTask+0x2c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d907      	bls.n	80083b0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80083a0:	4b06      	ldr	r3, [pc, #24]	; (80083bc <prvIdleTask+0x30>)
 80083a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80083b0:	f7f8 fbae 	bl	8000b10 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80083b4:	e7ee      	b.n	8008394 <prvIdleTask+0x8>
 80083b6:	bf00      	nop
 80083b8:	200006f4 	.word	0x200006f4
 80083bc:	e000ed04 	.word	0xe000ed04

080083c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083c6:	2300      	movs	r3, #0
 80083c8:	607b      	str	r3, [r7, #4]
 80083ca:	e00c      	b.n	80083e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	4613      	mov	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4a12      	ldr	r2, [pc, #72]	; (8008420 <prvInitialiseTaskLists+0x60>)
 80083d8:	4413      	add	r3, r2
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fb28 	bl	8006a30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3301      	adds	r3, #1
 80083e4:	607b      	str	r3, [r7, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b37      	cmp	r3, #55	; 0x37
 80083ea:	d9ef      	bls.n	80083cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083ec:	480d      	ldr	r0, [pc, #52]	; (8008424 <prvInitialiseTaskLists+0x64>)
 80083ee:	f7fe fb1f 	bl	8006a30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083f2:	480d      	ldr	r0, [pc, #52]	; (8008428 <prvInitialiseTaskLists+0x68>)
 80083f4:	f7fe fb1c 	bl	8006a30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083f8:	480c      	ldr	r0, [pc, #48]	; (800842c <prvInitialiseTaskLists+0x6c>)
 80083fa:	f7fe fb19 	bl	8006a30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083fe:	480c      	ldr	r0, [pc, #48]	; (8008430 <prvInitialiseTaskLists+0x70>)
 8008400:	f7fe fb16 	bl	8006a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008404:	480b      	ldr	r0, [pc, #44]	; (8008434 <prvInitialiseTaskLists+0x74>)
 8008406:	f7fe fb13 	bl	8006a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800840a:	4b0b      	ldr	r3, [pc, #44]	; (8008438 <prvInitialiseTaskLists+0x78>)
 800840c:	4a05      	ldr	r2, [pc, #20]	; (8008424 <prvInitialiseTaskLists+0x64>)
 800840e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008410:	4b0a      	ldr	r3, [pc, #40]	; (800843c <prvInitialiseTaskLists+0x7c>)
 8008412:	4a05      	ldr	r2, [pc, #20]	; (8008428 <prvInitialiseTaskLists+0x68>)
 8008414:	601a      	str	r2, [r3, #0]
}
 8008416:	bf00      	nop
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	200006f4 	.word	0x200006f4
 8008424:	20000b54 	.word	0x20000b54
 8008428:	20000b68 	.word	0x20000b68
 800842c:	20000b84 	.word	0x20000b84
 8008430:	20000b98 	.word	0x20000b98
 8008434:	20000bb0 	.word	0x20000bb0
 8008438:	20000b7c 	.word	0x20000b7c
 800843c:	20000b80 	.word	0x20000b80

08008440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008446:	e019      	b.n	800847c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008448:	f000 fdd6 	bl	8008ff8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800844c:	4b0f      	ldr	r3, [pc, #60]	; (800848c <prvCheckTasksWaitingTermination+0x4c>)
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3304      	adds	r3, #4
 8008458:	4618      	mov	r0, r3
 800845a:	f7fe fb6f 	bl	8006b3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800845e:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <prvCheckTasksWaitingTermination+0x50>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3b01      	subs	r3, #1
 8008464:	4a0a      	ldr	r2, [pc, #40]	; (8008490 <prvCheckTasksWaitingTermination+0x50>)
 8008466:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008468:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <prvCheckTasksWaitingTermination+0x54>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3b01      	subs	r3, #1
 800846e:	4a09      	ldr	r2, [pc, #36]	; (8008494 <prvCheckTasksWaitingTermination+0x54>)
 8008470:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008472:	f000 fdef 	bl	8009054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f80e 	bl	8008498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800847c:	4b05      	ldr	r3, [pc, #20]	; (8008494 <prvCheckTasksWaitingTermination+0x54>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e1      	bne.n	8008448 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	20000b98 	.word	0x20000b98
 8008490:	20000bc4 	.word	0x20000bc4
 8008494:	20000bac 	.word	0x20000bac

08008498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d108      	bne.n	80084bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 ff5e 	bl	8009370 <vPortFree>
				vPortFree( pxTCB );
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 ff5b 	bl	8009370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084ba:	e017      	b.n	80084ec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d103      	bne.n	80084ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 ff52 	bl	8009370 <vPortFree>
	}
 80084cc:	e00e      	b.n	80084ec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d009      	beq.n	80084ec <prvDeleteTCB+0x54>
 80084d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	e7fe      	b.n	80084ea <prvDeleteTCB+0x52>
	}
 80084ec:	bf00      	nop
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084fa:	4b0e      	ldr	r3, [pc, #56]	; (8008534 <prvResetNextTaskUnblockTime+0x40>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <prvResetNextTaskUnblockTime+0x14>
 8008504:	2301      	movs	r3, #1
 8008506:	e000      	b.n	800850a <prvResetNextTaskUnblockTime+0x16>
 8008508:	2300      	movs	r3, #0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d004      	beq.n	8008518 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800850e:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <prvResetNextTaskUnblockTime+0x44>)
 8008510:	f04f 32ff 	mov.w	r2, #4294967295
 8008514:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008516:	e008      	b.n	800852a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008518:	4b06      	ldr	r3, [pc, #24]	; (8008534 <prvResetNextTaskUnblockTime+0x40>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	4a04      	ldr	r2, [pc, #16]	; (8008538 <prvResetNextTaskUnblockTime+0x44>)
 8008528:	6013      	str	r3, [r2, #0]
}
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr
 8008534:	20000b7c 	.word	0x20000b7c
 8008538:	20000be4 	.word	0x20000be4

0800853c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008542:	4b0b      	ldr	r3, [pc, #44]	; (8008570 <xTaskGetSchedulerState+0x34>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d102      	bne.n	8008550 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800854a:	2301      	movs	r3, #1
 800854c:	607b      	str	r3, [r7, #4]
 800854e:	e008      	b.n	8008562 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008550:	4b08      	ldr	r3, [pc, #32]	; (8008574 <xTaskGetSchedulerState+0x38>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d102      	bne.n	800855e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008558:	2302      	movs	r3, #2
 800855a:	607b      	str	r3, [r7, #4]
 800855c:	e001      	b.n	8008562 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800855e:	2300      	movs	r3, #0
 8008560:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008562:	687b      	ldr	r3, [r7, #4]
	}
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	20000bd0 	.word	0x20000bd0
 8008574:	20000bec 	.word	0x20000bec

08008578 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008584:	2300      	movs	r3, #0
 8008586:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d054      	beq.n	8008638 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800858e:	4b2d      	ldr	r3, [pc, #180]	; (8008644 <xTaskPriorityDisinherit+0xcc>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	429a      	cmp	r2, r3
 8008596:	d009      	beq.n	80085ac <xTaskPriorityDisinherit+0x34>
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	e7fe      	b.n	80085aa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d109      	bne.n	80085c8 <xTaskPriorityDisinherit+0x50>
 80085b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	60bb      	str	r3, [r7, #8]
 80085c6:	e7fe      	b.n	80085c6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085cc:	1e5a      	subs	r2, r3, #1
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085da:	429a      	cmp	r2, r3
 80085dc:	d02c      	beq.n	8008638 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d128      	bne.n	8008638 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	3304      	adds	r3, #4
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe faa6 	bl	8006b3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008608:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <xTaskPriorityDisinherit+0xd0>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d903      	bls.n	8008618 <xTaskPriorityDisinherit+0xa0>
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008614:	4a0c      	ldr	r2, [pc, #48]	; (8008648 <xTaskPriorityDisinherit+0xd0>)
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861c:	4613      	mov	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4a09      	ldr	r2, [pc, #36]	; (800864c <xTaskPriorityDisinherit+0xd4>)
 8008626:	441a      	add	r2, r3
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	3304      	adds	r3, #4
 800862c:	4619      	mov	r1, r3
 800862e:	4610      	mov	r0, r2
 8008630:	f7fe fa29 	bl	8006a86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008634:	2301      	movs	r3, #1
 8008636:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008638:	697b      	ldr	r3, [r7, #20]
	}
 800863a:	4618      	mov	r0, r3
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	200006f0 	.word	0x200006f0
 8008648:	20000bcc 	.word	0x20000bcc
 800864c:	200006f4 	.word	0x200006f4

08008650 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8008656:	4b09      	ldr	r3, [pc, #36]	; (800867c <uxTaskResetEventItemValue+0x2c>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800865e:	4b07      	ldr	r3, [pc, #28]	; (800867c <uxTaskResetEventItemValue+0x2c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008664:	4b05      	ldr	r3, [pc, #20]	; (800867c <uxTaskResetEventItemValue+0x2c>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800866c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800866e:	687b      	ldr	r3, [r7, #4]
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	bc80      	pop	{r7}
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	200006f0 	.word	0x200006f0

08008680 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800868a:	4b21      	ldr	r3, [pc, #132]	; (8008710 <prvAddCurrentTaskToDelayedList+0x90>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008690:	4b20      	ldr	r3, [pc, #128]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3304      	adds	r3, #4
 8008696:	4618      	mov	r0, r3
 8008698:	f7fe fa50 	bl	8006b3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a2:	d10a      	bne.n	80086ba <prvAddCurrentTaskToDelayedList+0x3a>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d007      	beq.n	80086ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086aa:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3304      	adds	r3, #4
 80086b0:	4619      	mov	r1, r3
 80086b2:	4819      	ldr	r0, [pc, #100]	; (8008718 <prvAddCurrentTaskToDelayedList+0x98>)
 80086b4:	f7fe f9e7 	bl	8006a86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086b8:	e026      	b.n	8008708 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4413      	add	r3, r2
 80086c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086c2:	4b14      	ldr	r3, [pc, #80]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d209      	bcs.n	80086e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086d2:	4b12      	ldr	r3, [pc, #72]	; (800871c <prvAddCurrentTaskToDelayedList+0x9c>)
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	4b0f      	ldr	r3, [pc, #60]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3304      	adds	r3, #4
 80086dc:	4619      	mov	r1, r3
 80086de:	4610      	mov	r0, r2
 80086e0:	f7fe f9f4 	bl	8006acc <vListInsert>
}
 80086e4:	e010      	b.n	8008708 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086e6:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <prvAddCurrentTaskToDelayedList+0xa0>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <prvAddCurrentTaskToDelayedList+0x94>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3304      	adds	r3, #4
 80086f0:	4619      	mov	r1, r3
 80086f2:	4610      	mov	r0, r2
 80086f4:	f7fe f9ea 	bl	8006acc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086f8:	4b0a      	ldr	r3, [pc, #40]	; (8008724 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d202      	bcs.n	8008708 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008702:	4a08      	ldr	r2, [pc, #32]	; (8008724 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	6013      	str	r3, [r2, #0]
}
 8008708:	bf00      	nop
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20000bc8 	.word	0x20000bc8
 8008714:	200006f0 	.word	0x200006f0
 8008718:	20000bb0 	.word	0x20000bb0
 800871c:	20000b80 	.word	0x20000b80
 8008720:	20000b7c 	.word	0x20000b7c
 8008724:	20000be4 	.word	0x20000be4

08008728 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	; 0x28
 800872c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800872e:	2300      	movs	r3, #0
 8008730:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008732:	f000 fb17 	bl	8008d64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008736:	4b1c      	ldr	r3, [pc, #112]	; (80087a8 <xTimerCreateTimerTask+0x80>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d021      	beq.n	8008782 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008742:	2300      	movs	r3, #0
 8008744:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008746:	1d3a      	adds	r2, r7, #4
 8008748:	f107 0108 	add.w	r1, r7, #8
 800874c:	f107 030c 	add.w	r3, r7, #12
 8008750:	4618      	mov	r0, r3
 8008752:	f7fd ffa3 	bl	800669c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008756:	6879      	ldr	r1, [r7, #4]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	9202      	str	r2, [sp, #8]
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	2302      	movs	r3, #2
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	2300      	movs	r3, #0
 8008766:	460a      	mov	r2, r1
 8008768:	4910      	ldr	r1, [pc, #64]	; (80087ac <xTimerCreateTimerTask+0x84>)
 800876a:	4811      	ldr	r0, [pc, #68]	; (80087b0 <xTimerCreateTimerTask+0x88>)
 800876c:	f7fe ff20 	bl	80075b0 <xTaskCreateStatic>
 8008770:	4602      	mov	r2, r0
 8008772:	4b10      	ldr	r3, [pc, #64]	; (80087b4 <xTimerCreateTimerTask+0x8c>)
 8008774:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008776:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <xTimerCreateTimerTask+0x8c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800877e:	2301      	movs	r3, #1
 8008780:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d109      	bne.n	800879c <xTimerCreateTimerTask+0x74>
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	613b      	str	r3, [r7, #16]
 800879a:	e7fe      	b.n	800879a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800879c:	697b      	ldr	r3, [r7, #20]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20000c20 	.word	0x20000c20
 80087ac:	080098d8 	.word	0x080098d8
 80087b0:	08008975 	.word	0x08008975
 80087b4:	20000c24 	.word	0x20000c24

080087b8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af02      	add	r7, sp, #8
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80087c6:	2030      	movs	r0, #48	; 0x30
 80087c8:	f000 fd0c 	bl	80091e4 <pvPortMalloc>
 80087cc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00d      	beq.n	80087f0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	68b9      	ldr	r1, [r7, #8]
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f000 f809 	bl	80087fa <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80087f0:	697b      	ldr	r3, [r7, #20]
	}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3718      	adds	r7, #24
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b086      	sub	sp, #24
 80087fe:	af00      	add	r7, sp, #0
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	60b9      	str	r1, [r7, #8]
 8008804:	607a      	str	r2, [r7, #4]
 8008806:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <prvInitialiseNewTimer+0x28>
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	e7fe      	b.n	8008820 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	d015      	beq.n	8008854 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008828:	f000 fa9c 	bl	8008d64 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	6a3a      	ldr	r2, [r7, #32]
 8008848:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	3304      	adds	r3, #4
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe f90d 	bl	8006a6e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008854:	bf00      	nop
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08a      	sub	sp, #40	; 0x28
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800886a:	2300      	movs	r3, #0
 800886c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d109      	bne.n	8008888 <xTimerGenericCommand+0x2c>
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	623b      	str	r3, [r7, #32]
 8008886:	e7fe      	b.n	8008886 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008888:	4b19      	ldr	r3, [pc, #100]	; (80088f0 <xTimerGenericCommand+0x94>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d02a      	beq.n	80088e6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	2b05      	cmp	r3, #5
 80088a0:	dc18      	bgt.n	80088d4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80088a2:	f7ff fe4b 	bl	800853c <xTaskGetSchedulerState>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d109      	bne.n	80088c0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80088ac:	4b10      	ldr	r3, [pc, #64]	; (80088f0 <xTimerGenericCommand+0x94>)
 80088ae:	6818      	ldr	r0, [r3, #0]
 80088b0:	f107 0110 	add.w	r1, r7, #16
 80088b4:	2300      	movs	r3, #0
 80088b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b8:	f7fe faa4 	bl	8006e04 <xQueueGenericSend>
 80088bc:	6278      	str	r0, [r7, #36]	; 0x24
 80088be:	e012      	b.n	80088e6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80088c0:	4b0b      	ldr	r3, [pc, #44]	; (80088f0 <xTimerGenericCommand+0x94>)
 80088c2:	6818      	ldr	r0, [r3, #0]
 80088c4:	f107 0110 	add.w	r1, r7, #16
 80088c8:	2300      	movs	r3, #0
 80088ca:	2200      	movs	r2, #0
 80088cc:	f7fe fa9a 	bl	8006e04 <xQueueGenericSend>
 80088d0:	6278      	str	r0, [r7, #36]	; 0x24
 80088d2:	e008      	b.n	80088e6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088d4:	4b06      	ldr	r3, [pc, #24]	; (80088f0 <xTimerGenericCommand+0x94>)
 80088d6:	6818      	ldr	r0, [r3, #0]
 80088d8:	f107 0110 	add.w	r1, r7, #16
 80088dc:	2300      	movs	r3, #0
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	f7fe fb8a 	bl	8006ff8 <xQueueGenericSendFromISR>
 80088e4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3728      	adds	r7, #40	; 0x28
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	20000c20 	.word	0x20000c20

080088f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af02      	add	r7, sp, #8
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088fe:	4b1c      	ldr	r3, [pc, #112]	; (8008970 <prvProcessExpiredTimer+0x7c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	3304      	adds	r3, #4
 800890c:	4618      	mov	r0, r3
 800890e:	f7fe f915 	bl	8006b3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d121      	bne.n	800895e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	699a      	ldr	r2, [r3, #24]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	18d1      	adds	r1, r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	6978      	ldr	r0, [r7, #20]
 8008928:	f000 f8ca 	bl	8008ac0 <prvInsertTimerInActiveList>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d015      	beq.n	800895e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008932:	2300      	movs	r3, #0
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	2300      	movs	r3, #0
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	2100      	movs	r1, #0
 800893c:	6978      	ldr	r0, [r7, #20]
 800893e:	f7ff ff8d 	bl	800885c <xTimerGenericCommand>
 8008942:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d109      	bne.n	800895e <prvProcessExpiredTimer+0x6a>
 800894a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	e7fe      	b.n	800895c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008962:	6978      	ldr	r0, [r7, #20]
 8008964:	4798      	blx	r3
}
 8008966:	bf00      	nop
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20000c18 	.word	0x20000c18

08008974 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800897c:	f7f8 f8e4 	bl	8000b48 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008980:	f107 0308 	add.w	r3, r7, #8
 8008984:	4618      	mov	r0, r3
 8008986:	f000 f857 	bl	8008a38 <prvGetNextExpireTime>
 800898a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	4619      	mov	r1, r3
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 f803 	bl	800899c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008996:	f000 f8d5 	bl	8008b44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800899a:	e7f1      	b.n	8008980 <prvTimerTask+0xc>

0800899c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80089a6:	f7ff f93b 	bl	8007c20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089aa:	f107 0308 	add.w	r3, r7, #8
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 f866 	bl	8008a80 <prvSampleTimeNow>
 80089b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d130      	bne.n	8008a1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10a      	bne.n	80089d8 <prvProcessTimerOrBlockTask+0x3c>
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d806      	bhi.n	80089d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80089ca:	f7ff f937 	bl	8007c3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80089ce:	68f9      	ldr	r1, [r7, #12]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff ff8f 	bl	80088f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80089d6:	e024      	b.n	8008a22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d008      	beq.n	80089f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80089de:	4b13      	ldr	r3, [pc, #76]	; (8008a2c <prvProcessTimerOrBlockTask+0x90>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	bf0c      	ite	eq
 80089e8:	2301      	moveq	r3, #1
 80089ea:	2300      	movne	r3, #0
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089f0:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <prvProcessTimerOrBlockTask+0x94>)
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	4619      	mov	r1, r3
 80089fe:	f7fe fda3 	bl	8007548 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a02:	f7ff f91b 	bl	8007c3c <xTaskResumeAll>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10a      	bne.n	8008a22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a0c:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <prvProcessTimerOrBlockTask+0x98>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	f3bf 8f6f 	isb	sy
}
 8008a1c:	e001      	b.n	8008a22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a1e:	f7ff f90d 	bl	8007c3c <xTaskResumeAll>
}
 8008a22:	bf00      	nop
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20000c1c 	.word	0x20000c1c
 8008a30:	20000c20 	.word	0x20000c20
 8008a34:	e000ed04 	.word	0xe000ed04

08008a38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a40:	4b0e      	ldr	r3, [pc, #56]	; (8008a7c <prvGetNextExpireTime+0x44>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	bf0c      	ite	eq
 8008a4a:	2301      	moveq	r3, #1
 8008a4c:	2300      	movne	r3, #0
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	461a      	mov	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d105      	bne.n	8008a6a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a5e:	4b07      	ldr	r3, [pc, #28]	; (8008a7c <prvGetNextExpireTime+0x44>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	e001      	b.n	8008a6e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bc80      	pop	{r7}
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	20000c18 	.word	0x20000c18

08008a80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a88:	f7ff f974 	bl	8007d74 <xTaskGetTickCount>
 8008a8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a8e:	4b0b      	ldr	r3, [pc, #44]	; (8008abc <prvSampleTimeNow+0x3c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d205      	bcs.n	8008aa4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a98:	f000 f904 	bl	8008ca4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	e002      	b.n	8008aaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008aaa:	4a04      	ldr	r2, [pc, #16]	; (8008abc <prvSampleTimeNow+0x3c>)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20000c28 	.word	0x20000c28

08008ac0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d812      	bhi.n	8008b0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	1ad2      	subs	r2, r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d302      	bcc.n	8008afa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008af4:	2301      	movs	r3, #1
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	e01b      	b.n	8008b32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008afa:	4b10      	ldr	r3, [pc, #64]	; (8008b3c <prvInsertTimerInActiveList+0x7c>)
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3304      	adds	r3, #4
 8008b02:	4619      	mov	r1, r3
 8008b04:	4610      	mov	r0, r2
 8008b06:	f7fd ffe1 	bl	8006acc <vListInsert>
 8008b0a:	e012      	b.n	8008b32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d206      	bcs.n	8008b22 <prvInsertTimerInActiveList+0x62>
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d302      	bcc.n	8008b22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	617b      	str	r3, [r7, #20]
 8008b20:	e007      	b.n	8008b32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b22:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <prvInsertTimerInActiveList+0x80>)
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3304      	adds	r3, #4
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	f7fd ffcd 	bl	8006acc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b32:	697b      	ldr	r3, [r7, #20]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	20000c1c 	.word	0x20000c1c
 8008b40:	20000c18 	.word	0x20000c18

08008b44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b08e      	sub	sp, #56	; 0x38
 8008b48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b4a:	e099      	b.n	8008c80 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	da17      	bge.n	8008b82 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b52:	1d3b      	adds	r3, r7, #4
 8008b54:	3304      	adds	r3, #4
 8008b56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d109      	bne.n	8008b72 <prvProcessReceivedCommands+0x2e>
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	61fb      	str	r3, [r7, #28]
 8008b70:	e7fe      	b.n	8008b70 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b78:	6850      	ldr	r0, [r2, #4]
 8008b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b7c:	6892      	ldr	r2, [r2, #8]
 8008b7e:	4611      	mov	r1, r2
 8008b80:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	db7a      	blt.n	8008c7e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d004      	beq.n	8008b9e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	3304      	adds	r3, #4
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fd ffcf 	bl	8006b3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b9e:	463b      	mov	r3, r7
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7ff ff6d 	bl	8008a80 <prvSampleTimeNow>
 8008ba6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b09      	cmp	r3, #9
 8008bac:	d868      	bhi.n	8008c80 <prvProcessReceivedCommands+0x13c>
 8008bae:	a201      	add	r2, pc, #4	; (adr r2, 8008bb4 <prvProcessReceivedCommands+0x70>)
 8008bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb4:	08008bdd 	.word	0x08008bdd
 8008bb8:	08008bdd 	.word	0x08008bdd
 8008bbc:	08008bdd 	.word	0x08008bdd
 8008bc0:	08008c81 	.word	0x08008c81
 8008bc4:	08008c37 	.word	0x08008c37
 8008bc8:	08008c6d 	.word	0x08008c6d
 8008bcc:	08008bdd 	.word	0x08008bdd
 8008bd0:	08008bdd 	.word	0x08008bdd
 8008bd4:	08008c81 	.word	0x08008c81
 8008bd8:	08008c37 	.word	0x08008c37
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	18d1      	adds	r1, r2, r3
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bea:	f7ff ff69 	bl	8008ac0 <prvInsertTimerInActiveList>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d045      	beq.n	8008c80 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bfa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	69db      	ldr	r3, [r3, #28]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d13d      	bne.n	8008c80 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	441a      	add	r2, r3
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	2300      	movs	r3, #0
 8008c12:	2100      	movs	r1, #0
 8008c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c16:	f7ff fe21 	bl	800885c <xTimerGenericCommand>
 8008c1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d12e      	bne.n	8008c80 <prvProcessReceivedCommands+0x13c>
 8008c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	61bb      	str	r3, [r7, #24]
 8008c34:	e7fe      	b.n	8008c34 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d109      	bne.n	8008c58 <prvProcessReceivedCommands+0x114>
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	e7fe      	b.n	8008c56 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	699a      	ldr	r2, [r3, #24]
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5e:	18d1      	adds	r1, r2, r3
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c66:	f7ff ff2b 	bl	8008ac0 <prvInsertTimerInActiveList>
					break;
 8008c6a:	e009      	b.n	8008c80 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d104      	bne.n	8008c80 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c78:	f000 fb7a 	bl	8009370 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c7c:	e000      	b.n	8008c80 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c7e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c80:	4b07      	ldr	r3, [pc, #28]	; (8008ca0 <prvProcessReceivedCommands+0x15c>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	1d39      	adds	r1, r7, #4
 8008c86:	2200      	movs	r2, #0
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fe fa49 	bl	8007120 <xQueueReceive>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f47f af5b 	bne.w	8008b4c <prvProcessReceivedCommands+0x8>
	}
}
 8008c96:	bf00      	nop
 8008c98:	3730      	adds	r7, #48	; 0x30
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20000c20 	.word	0x20000c20

08008ca4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b088      	sub	sp, #32
 8008ca8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008caa:	e044      	b.n	8008d36 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cac:	4b2b      	ldr	r3, [pc, #172]	; (8008d5c <prvSwitchTimerLists+0xb8>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cb6:	4b29      	ldr	r3, [pc, #164]	; (8008d5c <prvSwitchTimerLists+0xb8>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fd ff39 	bl	8006b3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d12d      	bne.n	8008d36 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d90e      	bls.n	8008d0a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cf8:	4b18      	ldr	r3, [pc, #96]	; (8008d5c <prvSwitchTimerLists+0xb8>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7fd fee2 	bl	8006acc <vListInsert>
 8008d08:	e015      	b.n	8008d36 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	2100      	movs	r1, #0
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f7ff fda1 	bl	800885c <xTimerGenericCommand>
 8008d1a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d109      	bne.n	8008d36 <prvSwitchTimerLists+0x92>
 8008d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	e7fe      	b.n	8008d34 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d36:	4b09      	ldr	r3, [pc, #36]	; (8008d5c <prvSwitchTimerLists+0xb8>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1b5      	bne.n	8008cac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d40:	4b06      	ldr	r3, [pc, #24]	; (8008d5c <prvSwitchTimerLists+0xb8>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d46:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <prvSwitchTimerLists+0xbc>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a04      	ldr	r2, [pc, #16]	; (8008d5c <prvSwitchTimerLists+0xb8>)
 8008d4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d4e:	4a04      	ldr	r2, [pc, #16]	; (8008d60 <prvSwitchTimerLists+0xbc>)
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	6013      	str	r3, [r2, #0]
}
 8008d54:	bf00      	nop
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20000c18 	.word	0x20000c18
 8008d60:	20000c1c 	.word	0x20000c1c

08008d64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d6a:	f000 f945 	bl	8008ff8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d6e:	4b15      	ldr	r3, [pc, #84]	; (8008dc4 <prvCheckForValidListAndQueue+0x60>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d120      	bne.n	8008db8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d76:	4814      	ldr	r0, [pc, #80]	; (8008dc8 <prvCheckForValidListAndQueue+0x64>)
 8008d78:	f7fd fe5a 	bl	8006a30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d7c:	4813      	ldr	r0, [pc, #76]	; (8008dcc <prvCheckForValidListAndQueue+0x68>)
 8008d7e:	f7fd fe57 	bl	8006a30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d82:	4b13      	ldr	r3, [pc, #76]	; (8008dd0 <prvCheckForValidListAndQueue+0x6c>)
 8008d84:	4a10      	ldr	r2, [pc, #64]	; (8008dc8 <prvCheckForValidListAndQueue+0x64>)
 8008d86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d88:	4b12      	ldr	r3, [pc, #72]	; (8008dd4 <prvCheckForValidListAndQueue+0x70>)
 8008d8a:	4a10      	ldr	r2, [pc, #64]	; (8008dcc <prvCheckForValidListAndQueue+0x68>)
 8008d8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	4b11      	ldr	r3, [pc, #68]	; (8008dd8 <prvCheckForValidListAndQueue+0x74>)
 8008d94:	4a11      	ldr	r2, [pc, #68]	; (8008ddc <prvCheckForValidListAndQueue+0x78>)
 8008d96:	2110      	movs	r1, #16
 8008d98:	200a      	movs	r0, #10
 8008d9a:	f7fd ff61 	bl	8006c60 <xQueueGenericCreateStatic>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	4b08      	ldr	r3, [pc, #32]	; (8008dc4 <prvCheckForValidListAndQueue+0x60>)
 8008da2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008da4:	4b07      	ldr	r3, [pc, #28]	; (8008dc4 <prvCheckForValidListAndQueue+0x60>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d005      	beq.n	8008db8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008dac:	4b05      	ldr	r3, [pc, #20]	; (8008dc4 <prvCheckForValidListAndQueue+0x60>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	490b      	ldr	r1, [pc, #44]	; (8008de0 <prvCheckForValidListAndQueue+0x7c>)
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fe fba0 	bl	80074f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008db8:	f000 f94c 	bl	8009054 <vPortExitCritical>
}
 8008dbc:	bf00      	nop
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000c20 	.word	0x20000c20
 8008dc8:	20000bf0 	.word	0x20000bf0
 8008dcc:	20000c04 	.word	0x20000c04
 8008dd0:	20000c18 	.word	0x20000c18
 8008dd4:	20000c1c 	.word	0x20000c1c
 8008dd8:	20000ccc 	.word	0x20000ccc
 8008ddc:	20000c2c 	.word	0x20000c2c
 8008de0:	080098e0 	.word	0x080098e0

08008de4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08a      	sub	sp, #40	; 0x28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008df2:	f06f 0301 	mvn.w	r3, #1
 8008df6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e04:	4b06      	ldr	r3, [pc, #24]	; (8008e20 <xTimerPendFunctionCallFromISR+0x3c>)
 8008e06:	6818      	ldr	r0, [r3, #0]
 8008e08:	f107 0114 	add.w	r1, r7, #20
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	f7fe f8f2 	bl	8006ff8 <xQueueGenericSendFromISR>
 8008e14:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3728      	adds	r7, #40	; 0x28
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20000c20 	.word	0x20000c20

08008e24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3b04      	subs	r3, #4
 8008e34:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3b04      	subs	r3, #4
 8008e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f023 0201 	bic.w	r2, r3, #1
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3b04      	subs	r3, #4
 8008e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e54:	4a08      	ldr	r2, [pc, #32]	; (8008e78 <pxPortInitialiseStack+0x54>)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3b14      	subs	r3, #20
 8008e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3b20      	subs	r3, #32
 8008e6a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr
 8008e78:	08008e7d 	.word	0x08008e7d

08008e7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008e82:	2300      	movs	r3, #0
 8008e84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e86:	4b10      	ldr	r3, [pc, #64]	; (8008ec8 <prvTaskExitError+0x4c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8e:	d009      	beq.n	8008ea4 <prvTaskExitError+0x28>
 8008e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	60fb      	str	r3, [r7, #12]
 8008ea2:	e7fe      	b.n	8008ea2 <prvTaskExitError+0x26>
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008eb6:	bf00      	nop
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0fc      	beq.n	8008eb8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ebe:	bf00      	nop
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bc80      	pop	{r7}
 8008ec6:	4770      	bx	lr
 8008ec8:	2000000c 	.word	0x2000000c
 8008ecc:	00000000 	.word	0x00000000

08008ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <pxCurrentTCBConst2>)
 8008ed2:	6819      	ldr	r1, [r3, #0]
 8008ed4:	6808      	ldr	r0, [r1, #0]
 8008ed6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008eda:	f380 8809 	msr	PSP, r0
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f04f 0000 	mov.w	r0, #0
 8008ee6:	f380 8811 	msr	BASEPRI, r0
 8008eea:	f04e 0e0d 	orr.w	lr, lr, #13
 8008eee:	4770      	bx	lr

08008ef0 <pxCurrentTCBConst2>:
 8008ef0:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop

08008ef8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008ef8:	4806      	ldr	r0, [pc, #24]	; (8008f14 <prvPortStartFirstTask+0x1c>)
 8008efa:	6800      	ldr	r0, [r0, #0]
 8008efc:	6800      	ldr	r0, [r0, #0]
 8008efe:	f380 8808 	msr	MSP, r0
 8008f02:	b662      	cpsie	i
 8008f04:	b661      	cpsie	f
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	df00      	svc	0
 8008f10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f12:	bf00      	nop
 8008f14:	e000ed08 	.word	0xe000ed08

08008f18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f1e:	4b31      	ldr	r3, [pc, #196]	; (8008fe4 <xPortStartScheduler+0xcc>)
 8008f20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	22ff      	movs	r2, #255	; 0xff
 8008f2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f38:	78fb      	ldrb	r3, [r7, #3]
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	4b29      	ldr	r3, [pc, #164]	; (8008fe8 <xPortStartScheduler+0xd0>)
 8008f44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f46:	4b29      	ldr	r3, [pc, #164]	; (8008fec <xPortStartScheduler+0xd4>)
 8008f48:	2207      	movs	r2, #7
 8008f4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f4c:	e009      	b.n	8008f62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f4e:	4b27      	ldr	r3, [pc, #156]	; (8008fec <xPortStartScheduler+0xd4>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	4a25      	ldr	r2, [pc, #148]	; (8008fec <xPortStartScheduler+0xd4>)
 8008f56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f58:	78fb      	ldrb	r3, [r7, #3]
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f62:	78fb      	ldrb	r3, [r7, #3]
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f6a:	2b80      	cmp	r3, #128	; 0x80
 8008f6c:	d0ef      	beq.n	8008f4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f6e:	4b1f      	ldr	r3, [pc, #124]	; (8008fec <xPortStartScheduler+0xd4>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f1c3 0307 	rsb	r3, r3, #7
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d009      	beq.n	8008f8e <xPortStartScheduler+0x76>
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	60bb      	str	r3, [r7, #8]
 8008f8c:	e7fe      	b.n	8008f8c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f8e:	4b17      	ldr	r3, [pc, #92]	; (8008fec <xPortStartScheduler+0xd4>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	021b      	lsls	r3, r3, #8
 8008f94:	4a15      	ldr	r2, [pc, #84]	; (8008fec <xPortStartScheduler+0xd4>)
 8008f96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f98:	4b14      	ldr	r3, [pc, #80]	; (8008fec <xPortStartScheduler+0xd4>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fa0:	4a12      	ldr	r2, [pc, #72]	; (8008fec <xPortStartScheduler+0xd4>)
 8008fa2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fac:	4b10      	ldr	r3, [pc, #64]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a0f      	ldr	r2, [pc, #60]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008fb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fb8:	4b0d      	ldr	r3, [pc, #52]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a0c      	ldr	r2, [pc, #48]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008fbe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fc4:	f000 f8b0 	bl	8009128 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fc8:	4b0a      	ldr	r3, [pc, #40]	; (8008ff4 <xPortStartScheduler+0xdc>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fce:	f7ff ff93 	bl	8008ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fd2:	f7fe ffa3 	bl	8007f1c <vTaskSwitchContext>
	prvTaskExitError();
 8008fd6:	f7ff ff51 	bl	8008e7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	e000e400 	.word	0xe000e400
 8008fe8:	20000d1c 	.word	0x20000d1c
 8008fec:	20000d20 	.word	0x20000d20
 8008ff0:	e000ed20 	.word	0xe000ed20
 8008ff4:	2000000c 	.word	0x2000000c

08008ff8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009010:	4b0e      	ldr	r3, [pc, #56]	; (800904c <vPortEnterCritical+0x54>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3301      	adds	r3, #1
 8009016:	4a0d      	ldr	r2, [pc, #52]	; (800904c <vPortEnterCritical+0x54>)
 8009018:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800901a:	4b0c      	ldr	r3, [pc, #48]	; (800904c <vPortEnterCritical+0x54>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d10e      	bne.n	8009040 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009022:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <vPortEnterCritical+0x58>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b00      	cmp	r3, #0
 800902a:	d009      	beq.n	8009040 <vPortEnterCritical+0x48>
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	603b      	str	r3, [r7, #0]
 800903e:	e7fe      	b.n	800903e <vPortEnterCritical+0x46>
	}
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	bc80      	pop	{r7}
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	2000000c 	.word	0x2000000c
 8009050:	e000ed04 	.word	0xe000ed04

08009054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800905a:	4b10      	ldr	r3, [pc, #64]	; (800909c <vPortExitCritical+0x48>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d109      	bne.n	8009076 <vPortExitCritical+0x22>
 8009062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	607b      	str	r3, [r7, #4]
 8009074:	e7fe      	b.n	8009074 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009076:	4b09      	ldr	r3, [pc, #36]	; (800909c <vPortExitCritical+0x48>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3b01      	subs	r3, #1
 800907c:	4a07      	ldr	r2, [pc, #28]	; (800909c <vPortExitCritical+0x48>)
 800907e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009080:	4b06      	ldr	r3, [pc, #24]	; (800909c <vPortExitCritical+0x48>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d104      	bne.n	8009092 <vPortExitCritical+0x3e>
 8009088:	2300      	movs	r3, #0
 800908a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009092:	bf00      	nop
 8009094:	370c      	adds	r7, #12
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr
 800909c:	2000000c 	.word	0x2000000c

080090a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090a0:	f3ef 8009 	mrs	r0, PSP
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	4b0d      	ldr	r3, [pc, #52]	; (80090e0 <pxCurrentTCBConst>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090b0:	6010      	str	r0, [r2, #0]
 80090b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80090b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090ba:	f380 8811 	msr	BASEPRI, r0
 80090be:	f7fe ff2d 	bl	8007f1c <vTaskSwitchContext>
 80090c2:	f04f 0000 	mov.w	r0, #0
 80090c6:	f380 8811 	msr	BASEPRI, r0
 80090ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80090ce:	6819      	ldr	r1, [r3, #0]
 80090d0:	6808      	ldr	r0, [r1, #0]
 80090d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090d6:	f380 8809 	msr	PSP, r0
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	4770      	bx	lr

080090e0 <pxCurrentTCBConst>:
 80090e0:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop

080090e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009100:	f7fe fe46 	bl	8007d90 <xTaskIncrementTick>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d003      	beq.n	8009112 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800910a:	4b06      	ldr	r3, [pc, #24]	; (8009124 <SysTick_Handler+0x3c>)
 800910c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	2300      	movs	r3, #0
 8009114:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800911c:	bf00      	nop
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	e000ed04 	.word	0xe000ed04

08009128 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009128:	b480      	push	{r7}
 800912a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800912c:	4b0a      	ldr	r3, [pc, #40]	; (8009158 <vPortSetupTimerInterrupt+0x30>)
 800912e:	2200      	movs	r2, #0
 8009130:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009132:	4b0a      	ldr	r3, [pc, #40]	; (800915c <vPortSetupTimerInterrupt+0x34>)
 8009134:	2200      	movs	r2, #0
 8009136:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009138:	4b09      	ldr	r3, [pc, #36]	; (8009160 <vPortSetupTimerInterrupt+0x38>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a09      	ldr	r2, [pc, #36]	; (8009164 <vPortSetupTimerInterrupt+0x3c>)
 800913e:	fba2 2303 	umull	r2, r3, r2, r3
 8009142:	099b      	lsrs	r3, r3, #6
 8009144:	4a08      	ldr	r2, [pc, #32]	; (8009168 <vPortSetupTimerInterrupt+0x40>)
 8009146:	3b01      	subs	r3, #1
 8009148:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800914a:	4b03      	ldr	r3, [pc, #12]	; (8009158 <vPortSetupTimerInterrupt+0x30>)
 800914c:	2207      	movs	r2, #7
 800914e:	601a      	str	r2, [r3, #0]
}
 8009150:	bf00      	nop
 8009152:	46bd      	mov	sp, r7
 8009154:	bc80      	pop	{r7}
 8009156:	4770      	bx	lr
 8009158:	e000e010 	.word	0xe000e010
 800915c:	e000e018 	.word	0xe000e018
 8009160:	20000000 	.word	0x20000000
 8009164:	10624dd3 	.word	0x10624dd3
 8009168:	e000e014 	.word	0xe000e014

0800916c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009172:	f3ef 8305 	mrs	r3, IPSR
 8009176:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2b0f      	cmp	r3, #15
 800917c:	d913      	bls.n	80091a6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800917e:	4a15      	ldr	r2, [pc, #84]	; (80091d4 <vPortValidateInterruptPriority+0x68>)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4413      	add	r3, r2
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009188:	4b13      	ldr	r3, [pc, #76]	; (80091d8 <vPortValidateInterruptPriority+0x6c>)
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	7afa      	ldrb	r2, [r7, #11]
 800918e:	429a      	cmp	r2, r3
 8009190:	d209      	bcs.n	80091a6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	607b      	str	r3, [r7, #4]
 80091a4:	e7fe      	b.n	80091a4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091a6:	4b0d      	ldr	r3, [pc, #52]	; (80091dc <vPortValidateInterruptPriority+0x70>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80091ae:	4b0c      	ldr	r3, [pc, #48]	; (80091e0 <vPortValidateInterruptPriority+0x74>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d909      	bls.n	80091ca <vPortValidateInterruptPriority+0x5e>
 80091b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	603b      	str	r3, [r7, #0]
 80091c8:	e7fe      	b.n	80091c8 <vPortValidateInterruptPriority+0x5c>
	}
 80091ca:	bf00      	nop
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bc80      	pop	{r7}
 80091d2:	4770      	bx	lr
 80091d4:	e000e3f0 	.word	0xe000e3f0
 80091d8:	20000d1c 	.word	0x20000d1c
 80091dc:	e000ed0c 	.word	0xe000ed0c
 80091e0:	20000d20 	.word	0x20000d20

080091e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b08a      	sub	sp, #40	; 0x28
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091ec:	2300      	movs	r3, #0
 80091ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091f0:	f7fe fd16 	bl	8007c20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091f4:	4b59      	ldr	r3, [pc, #356]	; (800935c <pvPortMalloc+0x178>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d101      	bne.n	8009200 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80091fc:	f000 f910 	bl	8009420 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009200:	4b57      	ldr	r3, [pc, #348]	; (8009360 <pvPortMalloc+0x17c>)
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4013      	ands	r3, r2
 8009208:	2b00      	cmp	r3, #0
 800920a:	f040 808c 	bne.w	8009326 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d01c      	beq.n	800924e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009214:	2208      	movs	r2, #8
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4413      	add	r3, r2
 800921a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f003 0307 	and.w	r3, r3, #7
 8009222:	2b00      	cmp	r3, #0
 8009224:	d013      	beq.n	800924e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f023 0307 	bic.w	r3, r3, #7
 800922c:	3308      	adds	r3, #8
 800922e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f003 0307 	and.w	r3, r3, #7
 8009236:	2b00      	cmp	r3, #0
 8009238:	d009      	beq.n	800924e <pvPortMalloc+0x6a>
 800923a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923e:	f383 8811 	msr	BASEPRI, r3
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	617b      	str	r3, [r7, #20]
 800924c:	e7fe      	b.n	800924c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d068      	beq.n	8009326 <pvPortMalloc+0x142>
 8009254:	4b43      	ldr	r3, [pc, #268]	; (8009364 <pvPortMalloc+0x180>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	429a      	cmp	r2, r3
 800925c:	d863      	bhi.n	8009326 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800925e:	4b42      	ldr	r3, [pc, #264]	; (8009368 <pvPortMalloc+0x184>)
 8009260:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009262:	4b41      	ldr	r3, [pc, #260]	; (8009368 <pvPortMalloc+0x184>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009268:	e004      	b.n	8009274 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	429a      	cmp	r2, r3
 800927c:	d903      	bls.n	8009286 <pvPortMalloc+0xa2>
 800927e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1f1      	bne.n	800926a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009286:	4b35      	ldr	r3, [pc, #212]	; (800935c <pvPortMalloc+0x178>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800928c:	429a      	cmp	r2, r3
 800928e:	d04a      	beq.n	8009326 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2208      	movs	r2, #8
 8009296:	4413      	add	r3, r2
 8009298:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	1ad2      	subs	r2, r2, r3
 80092aa:	2308      	movs	r3, #8
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d91e      	bls.n	80092f0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80092b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4413      	add	r3, r2
 80092b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	f003 0307 	and.w	r3, r3, #7
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d009      	beq.n	80092d8 <pvPortMalloc+0xf4>
 80092c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c8:	f383 8811 	msr	BASEPRI, r3
 80092cc:	f3bf 8f6f 	isb	sy
 80092d0:	f3bf 8f4f 	dsb	sy
 80092d4:	613b      	str	r3, [r7, #16]
 80092d6:	e7fe      	b.n	80092d6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	1ad2      	subs	r2, r2, r3
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092ea:	69b8      	ldr	r0, [r7, #24]
 80092ec:	f000 f8fa 	bl	80094e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092f0:	4b1c      	ldr	r3, [pc, #112]	; (8009364 <pvPortMalloc+0x180>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	4a1a      	ldr	r2, [pc, #104]	; (8009364 <pvPortMalloc+0x180>)
 80092fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092fe:	4b19      	ldr	r3, [pc, #100]	; (8009364 <pvPortMalloc+0x180>)
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	4b1a      	ldr	r3, [pc, #104]	; (800936c <pvPortMalloc+0x188>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	429a      	cmp	r2, r3
 8009308:	d203      	bcs.n	8009312 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800930a:	4b16      	ldr	r3, [pc, #88]	; (8009364 <pvPortMalloc+0x180>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a17      	ldr	r2, [pc, #92]	; (800936c <pvPortMalloc+0x188>)
 8009310:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	4b12      	ldr	r3, [pc, #72]	; (8009360 <pvPortMalloc+0x17c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	431a      	orrs	r2, r3
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	2200      	movs	r2, #0
 8009324:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009326:	f7fe fc89 	bl	8007c3c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d101      	bne.n	8009334 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009330:	f7f7 fc04 	bl	8000b3c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	f003 0307 	and.w	r3, r3, #7
 800933a:	2b00      	cmp	r3, #0
 800933c:	d009      	beq.n	8009352 <pvPortMalloc+0x16e>
 800933e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009342:	f383 8811 	msr	BASEPRI, r3
 8009346:	f3bf 8f6f 	isb	sy
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	e7fe      	b.n	8009350 <pvPortMalloc+0x16c>
	return pvReturn;
 8009352:	69fb      	ldr	r3, [r7, #28]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3728      	adds	r7, #40	; 0x28
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	2000352c 	.word	0x2000352c
 8009360:	20003538 	.word	0x20003538
 8009364:	20003530 	.word	0x20003530
 8009368:	20003524 	.word	0x20003524
 800936c:	20003534 	.word	0x20003534

08009370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d046      	beq.n	8009410 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009382:	2308      	movs	r3, #8
 8009384:	425b      	negs	r3, r3
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	4413      	add	r3, r2
 800938a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	4b20      	ldr	r3, [pc, #128]	; (8009418 <vPortFree+0xa8>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4013      	ands	r3, r2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d109      	bne.n	80093b2 <vPortFree+0x42>
 800939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	e7fe      	b.n	80093b0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d009      	beq.n	80093ce <vPortFree+0x5e>
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	60bb      	str	r3, [r7, #8]
 80093cc:	e7fe      	b.n	80093cc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	4b11      	ldr	r3, [pc, #68]	; (8009418 <vPortFree+0xa8>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4013      	ands	r3, r2
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d019      	beq.n	8009410 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d115      	bne.n	8009410 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	4b0b      	ldr	r3, [pc, #44]	; (8009418 <vPortFree+0xa8>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	43db      	mvns	r3, r3
 80093ee:	401a      	ands	r2, r3
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093f4:	f7fe fc14 	bl	8007c20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	4b07      	ldr	r3, [pc, #28]	; (800941c <vPortFree+0xac>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4413      	add	r3, r2
 8009402:	4a06      	ldr	r2, [pc, #24]	; (800941c <vPortFree+0xac>)
 8009404:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009406:	6938      	ldr	r0, [r7, #16]
 8009408:	f000 f86c 	bl	80094e4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800940c:	f7fe fc16 	bl	8007c3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009410:	bf00      	nop
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	20003538 	.word	0x20003538
 800941c:	20003530 	.word	0x20003530

08009420 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009426:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800942a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800942c:	4b27      	ldr	r3, [pc, #156]	; (80094cc <prvHeapInit+0xac>)
 800942e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00c      	beq.n	8009454 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3307      	adds	r3, #7
 800943e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f023 0307 	bic.w	r3, r3, #7
 8009446:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	4a1f      	ldr	r2, [pc, #124]	; (80094cc <prvHeapInit+0xac>)
 8009450:	4413      	add	r3, r2
 8009452:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009458:	4a1d      	ldr	r2, [pc, #116]	; (80094d0 <prvHeapInit+0xb0>)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800945e:	4b1c      	ldr	r3, [pc, #112]	; (80094d0 <prvHeapInit+0xb0>)
 8009460:	2200      	movs	r2, #0
 8009462:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	4413      	add	r3, r2
 800946a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800946c:	2208      	movs	r2, #8
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	1a9b      	subs	r3, r3, r2
 8009472:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f023 0307 	bic.w	r3, r3, #7
 800947a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4a15      	ldr	r2, [pc, #84]	; (80094d4 <prvHeapInit+0xb4>)
 8009480:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009482:	4b14      	ldr	r3, [pc, #80]	; (80094d4 <prvHeapInit+0xb4>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2200      	movs	r2, #0
 8009488:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800948a:	4b12      	ldr	r3, [pc, #72]	; (80094d4 <prvHeapInit+0xb4>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	1ad2      	subs	r2, r2, r3
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094a0:	4b0c      	ldr	r3, [pc, #48]	; (80094d4 <prvHeapInit+0xb4>)
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	4a0a      	ldr	r2, [pc, #40]	; (80094d8 <prvHeapInit+0xb8>)
 80094ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	4a09      	ldr	r2, [pc, #36]	; (80094dc <prvHeapInit+0xbc>)
 80094b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094b8:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <prvHeapInit+0xc0>)
 80094ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094be:	601a      	str	r2, [r3, #0]
}
 80094c0:	bf00      	nop
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bc80      	pop	{r7}
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	20000d24 	.word	0x20000d24
 80094d0:	20003524 	.word	0x20003524
 80094d4:	2000352c 	.word	0x2000352c
 80094d8:	20003534 	.word	0x20003534
 80094dc:	20003530 	.word	0x20003530
 80094e0:	20003538 	.word	0x20003538

080094e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094ec:	4b27      	ldr	r3, [pc, #156]	; (800958c <prvInsertBlockIntoFreeList+0xa8>)
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	e002      	b.n	80094f8 <prvInsertBlockIntoFreeList+0x14>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	60fb      	str	r3, [r7, #12]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d8f7      	bhi.n	80094f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	4413      	add	r3, r2
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	429a      	cmp	r2, r3
 8009512:	d108      	bne.n	8009526 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	441a      	add	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	441a      	add	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	429a      	cmp	r2, r3
 8009538:	d118      	bne.n	800956c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	4b14      	ldr	r3, [pc, #80]	; (8009590 <prvInsertBlockIntoFreeList+0xac>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	429a      	cmp	r2, r3
 8009544:	d00d      	beq.n	8009562 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	685a      	ldr	r2, [r3, #4]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	441a      	add	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	e008      	b.n	8009574 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009562:	4b0b      	ldr	r3, [pc, #44]	; (8009590 <prvInsertBlockIntoFreeList+0xac>)
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	601a      	str	r2, [r3, #0]
 800956a:	e003      	b.n	8009574 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	429a      	cmp	r2, r3
 800957a:	d002      	beq.n	8009582 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009582:	bf00      	nop
 8009584:	3714      	adds	r7, #20
 8009586:	46bd      	mov	sp, r7
 8009588:	bc80      	pop	{r7}
 800958a:	4770      	bx	lr
 800958c:	20003524 	.word	0x20003524
 8009590:	2000352c 	.word	0x2000352c

08009594 <__libc_init_array>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	2500      	movs	r5, #0
 8009598:	4e0c      	ldr	r6, [pc, #48]	; (80095cc <__libc_init_array+0x38>)
 800959a:	4c0d      	ldr	r4, [pc, #52]	; (80095d0 <__libc_init_array+0x3c>)
 800959c:	1ba4      	subs	r4, r4, r6
 800959e:	10a4      	asrs	r4, r4, #2
 80095a0:	42a5      	cmp	r5, r4
 80095a2:	d109      	bne.n	80095b8 <__libc_init_array+0x24>
 80095a4:	f000 f842 	bl	800962c <_init>
 80095a8:	2500      	movs	r5, #0
 80095aa:	4e0a      	ldr	r6, [pc, #40]	; (80095d4 <__libc_init_array+0x40>)
 80095ac:	4c0a      	ldr	r4, [pc, #40]	; (80095d8 <__libc_init_array+0x44>)
 80095ae:	1ba4      	subs	r4, r4, r6
 80095b0:	10a4      	asrs	r4, r4, #2
 80095b2:	42a5      	cmp	r5, r4
 80095b4:	d105      	bne.n	80095c2 <__libc_init_array+0x2e>
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
 80095b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095bc:	4798      	blx	r3
 80095be:	3501      	adds	r5, #1
 80095c0:	e7ee      	b.n	80095a0 <__libc_init_array+0xc>
 80095c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095c6:	4798      	blx	r3
 80095c8:	3501      	adds	r5, #1
 80095ca:	e7f2      	b.n	80095b2 <__libc_init_array+0x1e>
 80095cc:	080099d4 	.word	0x080099d4
 80095d0:	080099d4 	.word	0x080099d4
 80095d4:	080099d4 	.word	0x080099d4
 80095d8:	080099d8 	.word	0x080099d8

080095dc <memcpy>:
 80095dc:	b510      	push	{r4, lr}
 80095de:	1e43      	subs	r3, r0, #1
 80095e0:	440a      	add	r2, r1
 80095e2:	4291      	cmp	r1, r2
 80095e4:	d100      	bne.n	80095e8 <memcpy+0xc>
 80095e6:	bd10      	pop	{r4, pc}
 80095e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095f0:	e7f7      	b.n	80095e2 <memcpy+0x6>

080095f2 <memset>:
 80095f2:	4603      	mov	r3, r0
 80095f4:	4402      	add	r2, r0
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d100      	bne.n	80095fc <memset+0xa>
 80095fa:	4770      	bx	lr
 80095fc:	f803 1b01 	strb.w	r1, [r3], #1
 8009600:	e7f9      	b.n	80095f6 <memset+0x4>

08009602 <strncpy>:
 8009602:	b570      	push	{r4, r5, r6, lr}
 8009604:	4604      	mov	r4, r0
 8009606:	3901      	subs	r1, #1
 8009608:	b902      	cbnz	r2, 800960c <strncpy+0xa>
 800960a:	bd70      	pop	{r4, r5, r6, pc}
 800960c:	4623      	mov	r3, r4
 800960e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009612:	1e56      	subs	r6, r2, #1
 8009614:	f803 5b01 	strb.w	r5, [r3], #1
 8009618:	b92d      	cbnz	r5, 8009626 <strncpy+0x24>
 800961a:	4414      	add	r4, r2
 800961c:	42a3      	cmp	r3, r4
 800961e:	d0f4      	beq.n	800960a <strncpy+0x8>
 8009620:	f803 5b01 	strb.w	r5, [r3], #1
 8009624:	e7fa      	b.n	800961c <strncpy+0x1a>
 8009626:	461c      	mov	r4, r3
 8009628:	4632      	mov	r2, r6
 800962a:	e7ed      	b.n	8009608 <strncpy+0x6>

0800962c <_init>:
 800962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962e:	bf00      	nop
 8009630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009632:	bc08      	pop	{r3}
 8009634:	469e      	mov	lr, r3
 8009636:	4770      	bx	lr

08009638 <_fini>:
 8009638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963a:	bf00      	nop
 800963c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963e:	bc08      	pop	{r3}
 8009640:	469e      	mov	lr, r3
 8009642:	4770      	bx	lr
