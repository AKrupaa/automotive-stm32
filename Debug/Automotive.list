
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007804  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08007944  08007944  00017944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b78  08007b78  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08007b78  08007b78  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b78  08007b78  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b78  08007b78  00017b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b7c  08007b7c  00017b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b70  20000064  08007be4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bd4  08007be4  00021bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e1d6  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000426f  00000000  00000000  0003e263  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b8  00000000  00000000  000424d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015f0  00000000  00000000  00043d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b405  00000000  00000000  00045380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000176ac  00000000  00000000  00060785  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a7daa  00000000  00000000  00077e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011fbdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c8  00000000  00000000  0011fc58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000064 	.word	0x20000064
 800015c:	00000000 	.word	0x00000000
 8000160:	0800792c 	.word	0x0800792c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000068 	.word	0x20000068
 800017c:	0800792c 	.word	0x0800792c

08000180 <h_bridge_init>:
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */
#include "h_bridge.h"

bool h_bridge_init(void) {
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
	;
	return true;
 8000184:	2301      	movs	r3, #1
}
 8000186:	4618      	mov	r0, r3
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr

0800018e <bluetooth_le_init>:
 *      Author: Arkadiusz
 */

#include "bluetooth_le.h"

bool bluetooth_le_init(void) {
 800018e:	b480      	push	{r7}
 8000190:	af00      	add	r7, sp, #0
	;
	return true;
 8000192:	2301      	movs	r3, #1
}
 8000194:	4618      	mov	r0, r3
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <eeprom_init>:
 *      Author: Arkadiusz
 */

#include "eeprom.h"

bool eeprom_init(void) {
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	;
	return true;
 80001a0:	2301      	movs	r3, #1
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr

080001aa <hall_init>:
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */

#include "hall.h"
bool hall_init(void) {
 80001aa:	b480      	push	{r7}
 80001ac:	af00      	add	r7, sp, #0
	;
	return true;
 80001ae:	2301      	movs	r3, #1
}
 80001b0:	4618      	mov	r0, r3
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr

080001b8 <magnetometer_init>:
 *
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */
#include "magnetometer.h"
bool magnetometer_init(void) {
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	;
	return true;
 80001bc:	2301      	movs	r3, #1
}
 80001be:	4618      	mov	r0, r3
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <proximity_init>:
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */

#include "proximity.h"
bool proximity_init(void) {
 80001c6:	b480      	push	{r7}
 80001c8:	af00      	add	r7, sp, #0
	;
	return true;
 80001ca:	2301      	movs	r3, #1
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <optocoupler_init>:
 *  Created on: Mar 28, 2021
 *      Author: Arkadiusz
 */

#include "optocoupler.h"
bool optocoupler_init(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	;
	return true;
 80001d8:	2301      	movs	r3, #1
}
 80001da:	4618      	mov	r0, r3
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
	...

080001e4 <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < mod_N; i++) {
 80001f2:	2300      	movs	r3, #0
 80001f4:	807b      	strh	r3, [r7, #2]
 80001f6:	e01f      	b.n	8000238 <device_init+0x54>
		if (modules_cfg[i].active == true) {
 80001f8:	887a      	ldrh	r2, [r7, #2]
 80001fa:	4915      	ldr	r1, [pc, #84]	; (8000250 <device_init+0x6c>)
 80001fc:	4613      	mov	r3, r2
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	4413      	add	r3, r2
 8000202:	009b      	lsls	r3, r3, #2
 8000204:	440b      	add	r3, r1
 8000206:	3308      	adds	r3, #8
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d00e      	beq.n	800022c <device_init+0x48>

			if (modules_cfg[i].init_function() == true) {
 800020e:	887a      	ldrh	r2, [r7, #2]
 8000210:	490f      	ldr	r1, [pc, #60]	; (8000250 <device_init+0x6c>)
 8000212:	4613      	mov	r3, r2
 8000214:	005b      	lsls	r3, r3, #1
 8000216:	4413      	add	r3, r2
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	440b      	add	r3, r1
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4798      	blx	r3
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d002      	beq.n	800022c <device_init+0x48>
				successCnt++;
 8000226:	88fb      	ldrh	r3, [r7, #6]
 8000228:	3301      	adds	r3, #1
 800022a:	80fb      	strh	r3, [r7, #6]
			}
		}

		modsToInit++;
 800022c:	88bb      	ldrh	r3, [r7, #4]
 800022e:	3301      	adds	r3, #1
 8000230:	80bb      	strh	r3, [r7, #4]
	for (uint16_t i = 0; i < mod_N; i++) {
 8000232:	887b      	ldrh	r3, [r7, #2]
 8000234:	3301      	adds	r3, #1
 8000236:	807b      	strh	r3, [r7, #2]
 8000238:	887b      	ldrh	r3, [r7, #2]
 800023a:	2b06      	cmp	r3, #6
 800023c:	d9dc      	bls.n	80001f8 <device_init+0x14>
	}

	if (modsToInit != successCnt) {
 800023e:	88ba      	ldrh	r2, [r7, #4]
 8000240:	88fb      	ldrh	r3, [r7, #6]
 8000242:	429a      	cmp	r2, r3
 8000244:	d000      	beq.n	8000248 <device_init+0x64>
		// some kind of error
		while (1)
 8000246:	e7fe      	b.n	8000246 <device_init+0x62>
			; //TODO: call some error handler
	}

}
 8000248:	bf00      	nop
 800024a:	3708      	adds	r7, #8
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000000 	.word	0x20000000

08000254 <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 8000254:	b5b0      	push	{r4, r5, r7, lr}
 8000256:	b08a      	sub	sp, #40	; 0x28
 8000258:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 800025a:	2300      	movs	r3, #0
 800025c:	77fb      	strb	r3, [r7, #31]
 800025e:	e02c      	b.n	80002ba <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 8000260:	7ffa      	ldrb	r2, [r7, #31]
 8000262:	4613      	mov	r3, r2
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	4413      	add	r3, r2
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	461a      	mov	r2, r3
 800026c:	4b47      	ldr	r3, [pc, #284]	; (800038c <rt_init+0x138>)
 800026e:	4413      	add	r3, r2
 8000270:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 8000272:	7ffb      	ldrb	r3, [r7, #31]
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	4a46      	ldr	r2, [pc, #280]	; (8000390 <rt_init+0x13c>)
 8000278:	4413      	add	r3, r2
 800027a:	603b      	str	r3, [r7, #0]
		if (def->active) {
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	7c9b      	ldrb	r3, [r3, #18]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d014      	beq.n	80002ae <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	6818      	ldr	r0, [r3, #0]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	6859      	ldr	r1, [r3, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	8a1c      	ldrh	r4, [r3, #16]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	689d      	ldr	r5, [r3, #8]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	68db      	ldr	r3, [r3, #12]
 8000298:	683a      	ldr	r2, [r7, #0]
 800029a:	9201      	str	r2, [sp, #4]
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	462b      	mov	r3, r5
 80002a0:	4622      	mov	r2, r4
 80002a2:	f005 fd6e 	bl	8005d82 <xTaskCreate>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d003      	beq.n	80002b4 <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 80002ac:	e7fe      	b.n	80002ac <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 80002b4:	7ffb      	ldrb	r3, [r7, #31]
 80002b6:	3301      	adds	r3, #1
 80002b8:	77fb      	strb	r3, [r7, #31]
 80002ba:	7ffb      	ldrb	r3, [r7, #31]
 80002bc:	2b04      	cmp	r3, #4
 80002be:	d9cf      	bls.n	8000260 <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 80002c0:	2300      	movs	r3, #0
 80002c2:	77bb      	strb	r3, [r7, #30]
 80002c4:	e01c      	b.n	8000300 <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 80002c6:	7fbb      	ldrb	r3, [r7, #30]
 80002c8:	00db      	lsls	r3, r3, #3
 80002ca:	4a32      	ldr	r2, [pc, #200]	; (8000394 <rt_init+0x140>)
 80002cc:	4413      	add	r3, r2
 80002ce:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 80002d0:	7fbb      	ldrb	r3, [r7, #30]
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	4a30      	ldr	r2, [pc, #192]	; (8000398 <rt_init+0x144>)
 80002d6:	4413      	add	r3, r2
 80002d8:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	6818      	ldr	r0, [r3, #0]
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	4619      	mov	r1, r3
 80002e6:	f005 f8bd 	bl	8005464 <xQueueGenericCreate>
 80002ea:	4602      	mov	r2, r0
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d100      	bne.n	80002fa <rt_init+0xa6>
				== 0) {
			while (1)
 80002f8:	e7fe      	b.n	80002f8 <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 80002fa:	7fbb      	ldrb	r3, [r7, #30]
 80002fc:	3301      	adds	r3, #1
 80002fe:	77bb      	strb	r3, [r7, #30]
 8000300:	7fbb      	ldrb	r3, [r7, #30]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d9df      	bls.n	80002c6 <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000306:	2300      	movs	r3, #0
 8000308:	777b      	strb	r3, [r7, #29]
 800030a:	e020      	b.n	800034e <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 800030c:	7f7b      	ldrb	r3, [r7, #29]
 800030e:	011b      	lsls	r3, r3, #4
 8000310:	4a22      	ldr	r2, [pc, #136]	; (800039c <rt_init+0x148>)
 8000312:	4413      	add	r3, r2
 8000314:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 8000316:	7f7b      	ldrb	r3, [r7, #29]
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	4a21      	ldr	r2, [pc, #132]	; (80003a0 <rt_init+0x14c>)
 800031c:	4413      	add	r3, r2
 800031e:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	6818      	ldr	r0, [r3, #0]
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	6859      	ldr	r1, [r3, #4]
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	689a      	ldr	r2, [r3, #8]
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2300      	movs	r3, #0
 8000334:	f006 fbf8 	bl	8006b28 <xTimerCreate>
 8000338:	4602      	mov	r2, r0
 800033a:	693b      	ldr	r3, [r7, #16]
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	693b      	ldr	r3, [r7, #16]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d100      	bne.n	8000348 <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 8000346:	e7fe      	b.n	8000346 <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000348:	7f7b      	ldrb	r3, [r7, #29]
 800034a:	3301      	adds	r3, #1
 800034c:	777b      	strb	r3, [r7, #29]
 800034e:	7f7b      	ldrb	r3, [r7, #29]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d9db      	bls.n	800030c <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000354:	2300      	movs	r3, #0
 8000356:	773b      	strb	r3, [r7, #28]
 8000358:	e011      	b.n	800037e <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 800035a:	7f3b      	ldrb	r3, [r7, #28]
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <rt_init+0x150>)
 8000360:	4413      	add	r3, r2
 8000362:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 8000364:	f004 feda 	bl	800511c <xEventGroupCreate>
 8000368:	4602      	mov	r2, r0
 800036a:	69bb      	ldr	r3, [r7, #24]
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	69bb      	ldr	r3, [r7, #24]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d100      	bne.n	8000378 <rt_init+0x124>
			while (1)
 8000376:	e7fe      	b.n	8000376 <rt_init+0x122>
			evgroup++) {
 8000378:	7f3b      	ldrb	r3, [r7, #28]
 800037a:	3301      	adds	r3, #1
 800037c:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 800037e:	7f3b      	ldrb	r3, [r7, #28]
 8000380:	2b01      	cmp	r3, #1
 8000382:	d9ea      	bls.n	800035a <rt_init+0x106>
				;
		}
	}

}
 8000384:	bf00      	nop
 8000386:	3720      	adds	r7, #32
 8000388:	46bd      	mov	sp, r7
 800038a:	bdb0      	pop	{r4, r5, r7, pc}
 800038c:	08007a9c 	.word	0x08007a9c
 8000390:	20001988 	.word	0x20001988
 8000394:	08007b00 	.word	0x08007b00
 8000398:	200019ac 	.word	0x200019ac
 800039c:	08007b10 	.word	0x08007b10
 80003a0:	2000199c 	.word	0x2000199c
 80003a4:	200019a4 	.word	0x200019a4

080003a8 <task_ble>:
 *      Author: Arkadiusz
 */

//#include "task_ble.h"

void task_ble(void *pvParameters) {
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80003b0:	e7fe      	b.n	80003b0 <task_ble+0x8>

080003b2 <task_eyes>:
 *      Author: Arkadiusz
 */

//#include "task_eyes.h"

void task_eyes(void *pvParameters) {
 80003b2:	b480      	push	{r7}
 80003b4:	b083      	sub	sp, #12
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80003ba:	e7fe      	b.n	80003ba <task_eyes+0x8>

080003bc <task_memory>:
 *      Author: Arkadiusz
 */

//#include "task_memory.h"

void task_memory(void *pvParameters) {
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80003c4:	e7fe      	b.n	80003c4 <task_memory+0x8>

080003c6 <task_sensors>:
 *      Author: Arkadiusz
 */

//#include "task_sensors.h"

void task_sensors(void *pvParameters) {
 80003c6:	b480      	push	{r7}
 80003c8:	b083      	sub	sp, #12
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80003ce:	e7fe      	b.n	80003ce <task_sensors+0x8>

080003d0 <task_state_machine>:
 *      Author: Arkadiusz
 */

//#include "task_state_machine.h"

void task_state_machine(void *pvParameters) {
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80003d8:	e7fe      	b.n	80003d8 <task_state_machine+0x8>
	...

080003dc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80003ec:	4b25      	ldr	r3, [pc, #148]	; (8000484 <MX_ADC_Init+0xa8>)
 80003ee:	4a26      	ldr	r2, [pc, #152]	; (8000488 <MX_ADC_Init+0xac>)
 80003f0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003f2:	4b24      	ldr	r3, [pc, #144]	; (8000484 <MX_ADC_Init+0xa8>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003f8:	4b22      	ldr	r3, [pc, #136]	; (8000484 <MX_ADC_Init+0xa8>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003fe:	4b21      	ldr	r3, [pc, #132]	; (8000484 <MX_ADC_Init+0xa8>)
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000404:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <MX_ADC_Init+0xa8>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800040a:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <MX_ADC_Init+0xa8>)
 800040c:	2200      	movs	r2, #0
 800040e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000410:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <MX_ADC_Init+0xa8>)
 8000412:	2200      	movs	r2, #0
 8000414:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000416:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <MX_ADC_Init+0xa8>)
 8000418:	2200      	movs	r2, #0
 800041a:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <MX_ADC_Init+0xa8>)
 800041e:	2200      	movs	r2, #0
 8000420:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000422:	4b18      	ldr	r3, [pc, #96]	; (8000484 <MX_ADC_Init+0xa8>)
 8000424:	2200      	movs	r2, #0
 8000426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800042a:	4b16      	ldr	r3, [pc, #88]	; (8000484 <MX_ADC_Init+0xa8>)
 800042c:	2201      	movs	r2, #1
 800042e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_ADC_Init+0xa8>)
 8000432:	2200      	movs	r2, #0
 8000434:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <MX_ADC_Init+0xa8>)
 800043a:	2210      	movs	r2, #16
 800043c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_ADC_Init+0xa8>)
 8000440:	2200      	movs	r2, #0
 8000442:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_ADC_Init+0xa8>)
 8000446:	2200      	movs	r2, #0
 8000448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800044c:	480d      	ldr	r0, [pc, #52]	; (8000484 <MX_ADC_Init+0xa8>)
 800044e:	f000 fe1f 	bl	8001090 <HAL_ADC_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000458:	f000 fa88 	bl	800096c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800045c:	2301      	movs	r3, #1
 800045e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000460:	2301      	movs	r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	4619      	mov	r1, r3
 800046c:	4805      	ldr	r0, [pc, #20]	; (8000484 <MX_ADC_Init+0xa8>)
 800046e:	f000 ff55 	bl	800131c <HAL_ADC_ConfigChannel>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000478:	f000 fa78 	bl	800096c <Error_Handler>
  }

}
 800047c:	bf00      	nop
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200019b4 	.word	0x200019b4
 8000488:	40012400 	.word	0x40012400

0800048c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08c      	sub	sp, #48	; 0x30
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	f107 031c 	add.w	r3, r7, #28
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
 80004a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a2d      	ldr	r2, [pc, #180]	; (8000560 <HAL_ADC_MspInit+0xd4>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d154      	bne.n	8000558 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004ae:	4b2d      	ldr	r3, [pc, #180]	; (8000564 <HAL_ADC_MspInit+0xd8>)
 80004b0:	6a1b      	ldr	r3, [r3, #32]
 80004b2:	4a2c      	ldr	r2, [pc, #176]	; (8000564 <HAL_ADC_MspInit+0xd8>)
 80004b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004b8:	6213      	str	r3, [r2, #32]
 80004ba:	4b2a      	ldr	r3, [pc, #168]	; (8000564 <HAL_ADC_MspInit+0xd8>)
 80004bc:	6a1b      	ldr	r3, [r3, #32]
 80004be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004c2:	61bb      	str	r3, [r7, #24]
 80004c4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c6:	4b27      	ldr	r3, [pc, #156]	; (8000564 <HAL_ADC_MspInit+0xd8>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	4a26      	ldr	r2, [pc, #152]	; (8000564 <HAL_ADC_MspInit+0xd8>)
 80004cc:	f043 0304 	orr.w	r3, r3, #4
 80004d0:	61d3      	str	r3, [r2, #28]
 80004d2:	4b24      	ldr	r3, [pc, #144]	; (8000564 <HAL_ADC_MspInit+0xd8>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f003 0304 	and.w	r3, r3, #4
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b21      	ldr	r3, [pc, #132]	; (8000564 <HAL_ADC_MspInit+0xd8>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a20      	ldr	r2, [pc, #128]	; (8000564 <HAL_ADC_MspInit+0xd8>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <HAL_ADC_MspInit+0xd8>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f6:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <HAL_ADC_MspInit+0xd8>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	4a1a      	ldr	r2, [pc, #104]	; (8000564 <HAL_ADC_MspInit+0xd8>)
 80004fc:	f043 0302 	orr.w	r3, r3, #2
 8000500:	61d3      	str	r3, [r2, #28]
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <HAL_ADC_MspInit+0xd8>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 800050e:	2301      	movs	r3, #1
 8000510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000512:	2303      	movs	r3, #3
 8000514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	4619      	mov	r1, r3
 8000520:	4811      	ldr	r0, [pc, #68]	; (8000568 <HAL_ADC_MspInit+0xdc>)
 8000522:	f001 f995 	bl	8001850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 8000526:	2386      	movs	r3, #134	; 0x86
 8000528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052a:	2303      	movs	r3, #3
 800052c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	f107 031c 	add.w	r3, r7, #28
 8000536:	4619      	mov	r1, r3
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <HAL_ADC_MspInit+0xe0>)
 800053a:	f001 f989 	bl	8001850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 800053e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000544:	2303      	movs	r3, #3
 8000546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800054c:	f107 031c 	add.w	r3, r7, #28
 8000550:	4619      	mov	r1, r3
 8000552:	4807      	ldr	r0, [pc, #28]	; (8000570 <HAL_ADC_MspInit+0xe4>)
 8000554:	f001 f97c 	bl	8001850 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000558:	bf00      	nop
 800055a:	3730      	adds	r7, #48	; 0x30
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40012400 	.word	0x40012400
 8000564:	40023800 	.word	0x40023800
 8000568:	40020800 	.word	0x40020800
 800056c:	40020000 	.word	0x40020000
 8000570:	40020400 	.word	0x40020400

08000574 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000578:	4a05      	ldr	r2, [pc, #20]	; (8000590 <MX_FREERTOS_Init+0x1c>)
 800057a:	2100      	movs	r1, #0
 800057c:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_FREERTOS_Init+0x20>)
 800057e:	f004 fcc3 	bl	8004f08 <osThreadNew>
 8000582:	4602      	mov	r2, r0
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <MX_FREERTOS_Init+0x24>)
 8000586:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 8000588:	f7ff fe64 	bl	8000254 <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	08007b30 	.word	0x08007b30
 8000594:	0800059d 	.word	0x0800059d
 8000598:	20001a08 	.word	0x20001a08

0800059c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f004 fd59 	bl	800505c <osDelay>
 80005aa:	e7fb      	b.n	80005a4 <StartDefaultTask+0x8>

080005ac <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	4b67      	ldr	r3, [pc, #412]	; (8000760 <MX_GPIO_Init+0x1b4>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	4a66      	ldr	r2, [pc, #408]	; (8000760 <MX_GPIO_Init+0x1b4>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	61d3      	str	r3, [r2, #28]
 80005ce:	4b64      	ldr	r3, [pc, #400]	; (8000760 <MX_GPIO_Init+0x1b4>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	4b61      	ldr	r3, [pc, #388]	; (8000760 <MX_GPIO_Init+0x1b4>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a60      	ldr	r2, [pc, #384]	; (8000760 <MX_GPIO_Init+0x1b4>)
 80005e0:	f043 0320 	orr.w	r3, r3, #32
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	4b5e      	ldr	r3, [pc, #376]	; (8000760 <MX_GPIO_Init+0x1b4>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f003 0320 	and.w	r3, r3, #32
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b5b      	ldr	r3, [pc, #364]	; (8000760 <MX_GPIO_Init+0x1b4>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	4a5a      	ldr	r2, [pc, #360]	; (8000760 <MX_GPIO_Init+0x1b4>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	61d3      	str	r3, [r2, #28]
 80005fe:	4b58      	ldr	r3, [pc, #352]	; (8000760 <MX_GPIO_Init+0x1b4>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b55      	ldr	r3, [pc, #340]	; (8000760 <MX_GPIO_Init+0x1b4>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a54      	ldr	r2, [pc, #336]	; (8000760 <MX_GPIO_Init+0x1b4>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b52      	ldr	r3, [pc, #328]	; (8000760 <MX_GPIO_Init+0x1b4>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000622:	4b4f      	ldr	r3, [pc, #316]	; (8000760 <MX_GPIO_Init+0x1b4>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a4e      	ldr	r2, [pc, #312]	; (8000760 <MX_GPIO_Init+0x1b4>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	4b4c      	ldr	r3, [pc, #304]	; (8000760 <MX_GPIO_Init+0x1b4>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 800063a:	2200      	movs	r2, #0
 800063c:	f640 617e 	movw	r1, #3710	; 0xe7e
 8000640:	4848      	ldr	r0, [pc, #288]	; (8000764 <MX_GPIO_Init+0x1b8>)
 8000642:	f001 fa93 	bl	8001b6c <HAL_GPIO_WritePin>
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000646:	2200      	movs	r2, #0
 8000648:	f248 7108 	movw	r1, #34568	; 0x8708
 800064c:	4846      	ldr	r0, [pc, #280]	; (8000768 <MX_GPIO_Init+0x1bc>)
 800064e:	f001 fa8d 	bl	8001b6c <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 8000652:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000658:	2303      	movs	r3, #3
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	483f      	ldr	r0, [pc, #252]	; (8000764 <MX_GPIO_Init+0x1b8>)
 8000668:	f001 f8f2 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 800066c:	f640 637e 	movw	r3, #3710	; 0xe7e
 8000670:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	4837      	ldr	r0, [pc, #220]	; (8000764 <MX_GPIO_Init+0x1b8>)
 8000686:	f001 f8e3 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 800068a:	f248 7308 	movw	r3, #34568	; 0x8708
 800068e:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	4831      	ldr	r0, [pc, #196]	; (8000768 <MX_GPIO_Init+0x1bc>)
 80006a4:	f001 f8d4 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 80006a8:	f241 0370 	movw	r3, #4208	; 0x1070
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ae:	2303      	movs	r3, #3
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	482a      	ldr	r0, [pc, #168]	; (8000768 <MX_GPIO_Init+0x1bc>)
 80006be:	f001 f8c7 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin|IRQ_ULTRASOUND_ECHO_Pin;
 80006c2:	2303      	movs	r3, #3
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c6:	4b29      	ldr	r3, [pc, #164]	; (800076c <MX_GPIO_Init+0x1c0>)
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4826      	ldr	r0, [pc, #152]	; (8000770 <MX_GPIO_Init+0x1c4>)
 80006d6:	f001 f8bb 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 80006da:	f242 333c 	movw	r3, #9020	; 0x233c
 80006de:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e0:	2303      	movs	r3, #3
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	4820      	ldr	r0, [pc, #128]	; (8000770 <MX_GPIO_Init+0x1c4>)
 80006f0:	f001 f8ae 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4819      	ldr	r0, [pc, #100]	; (8000770 <MX_GPIO_Init+0x1c4>)
 800070a:	f001 f8a1 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 800070e:	2380      	movs	r3, #128	; 0x80
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	4810      	ldr	r0, [pc, #64]	; (8000764 <MX_GPIO_Init+0x1b8>)
 8000722:	f001 f895 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHTA11_Pin;
 8000726:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHTA11_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	480b      	ldr	r0, [pc, #44]	; (8000768 <MX_GPIO_Init+0x1bc>)
 800073c:	f001 f888 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000740:	2304      	movs	r3, #4
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000744:	2303      	movs	r3, #3
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	4808      	ldr	r0, [pc, #32]	; (8000774 <MX_GPIO_Init+0x1c8>)
 8000754:	f001 f87c 	bl	8001850 <HAL_GPIO_Init>

}
 8000758:	bf00      	nop
 800075a:	3728      	adds	r7, #40	; 0x28
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40020800 	.word	0x40020800
 8000768:	40020000 	.word	0x40020000
 800076c:	10110000 	.word	0x10110000
 8000770:	40020400 	.word	0x40020400
 8000774:	40020c00 	.word	0x40020c00

08000778 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2C1_Init+0x50>)
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <MX_I2C1_Init+0x54>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2C1_Init+0x50>)
 8000784:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_I2C1_Init+0x58>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_I2C1_Init+0x50>)
 8000796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007b6:	f001 f9f1 	bl	8001b9c <HAL_I2C_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c0:	f000 f8d4 	bl	800096c <Error_Handler>
  }

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20001a0c 	.word	0x20001a0c
 80007cc:	40005400 	.word	0x40005400
 80007d0:	000186a0 	.word	0x000186a0

080007d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <HAL_I2C_MspInit+0x8c>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d12f      	bne.n	8000856 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <HAL_I2C_MspInit+0x90>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <HAL_I2C_MspInit+0x90>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_I2C_MspInit+0x90>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800080e:	23c0      	movs	r3, #192	; 0xc0
 8000810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000812:	2312      	movs	r3, #18
 8000814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800081e:	2304      	movs	r3, #4
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <HAL_I2C_MspInit+0x94>)
 800082a:	f001 f811 	bl	8001850 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <HAL_I2C_MspInit+0x90>)
 8000830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000832:	4a0c      	ldr	r2, [pc, #48]	; (8000864 <HAL_I2C_MspInit+0x90>)
 8000834:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000838:	6253      	str	r3, [r2, #36]	; 0x24
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_I2C_MspInit+0x90>)
 800083c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800083e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2105      	movs	r1, #5
 800084a:	201f      	movs	r0, #31
 800084c:	f000 ff87 	bl	800175e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000850:	201f      	movs	r0, #31
 8000852:	f000 ffa0 	bl	8001796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	; 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40005400 	.word	0x40005400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400

0800086c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000870:	f000 fbd9 	bl	8001026 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000874:	f000 f818 	bl	80008a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000878:	f7ff fe98 	bl	80005ac <MX_GPIO_Init>
	MX_ADC_Init();
 800087c:	f7ff fdae 	bl	80003dc <MX_ADC_Init>
	MX_I2C1_Init();
 8000880:	f7ff ff7a 	bl	8000778 <MX_I2C1_Init>
	MX_TIM2_Init();
 8000884:	f000 f96c 	bl	8000b60 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000888:	f000 f9be 	bl	8000c08 <MX_TIM3_Init>
	MX_TIM9_Init();
 800088c:	f000 fa12 	bl	8000cb4 <MX_TIM9_Init>
	MX_USART3_UART_Init();
 8000890:	f000 fb2e 	bl	8000ef0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	device_init();
 8000894:	f7ff fca6 	bl	80001e4 <device_init>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 8000898:	f004 fad0 	bl	8004e3c <osKernelInitialize>
	MX_FREERTOS_Init();
 800089c:	f7ff fe6a 	bl	8000574 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 80008a0:	f004 fafe 	bl	8004ea0 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80008a4:	e7fe      	b.n	80008a4 <main+0x38>
	...

080008a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b092      	sub	sp, #72	; 0x48
 80008ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2234      	movs	r2, #52	; 0x34
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f007 f82f 	bl	800791a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008bc:	463b      	mov	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <SystemClock_Config+0x9c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <SystemClock_Config+0x9c>)
 80008d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008d8:	6013      	str	r3, [r2, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80008da:	2303      	movs	r3, #3
 80008dc:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e6:	2310      	movs	r3, #16
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80008f4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80008f8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80008fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008fe:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4618      	mov	r0, r3
 8000906:	f002 fd1f 	bl	8003348 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x6c>
		Error_Handler();
 8000910:	f000 f82c 	bl	800096c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000918:	2303      	movs	r3, #3
 800091a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000928:	463b      	mov	r3, r7
 800092a:	2101      	movs	r1, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f003 f83b 	bl	80039a8 <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x94>
		Error_Handler();
 8000938:	f000 f818 	bl	800096c <Error_Handler>
	}
}
 800093c:	bf00      	nop
 800093e:	3748      	adds	r7, #72	; 0x48
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40007000 	.word	0x40007000

08000948 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800095a:	f000 fb7d 	bl	8001058 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40000c00 	.word	0x40000c00

0800096c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <HAL_MspInit+0x64>)
 8000980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000982:	4a16      	ldr	r2, [pc, #88]	; (80009dc <HAL_MspInit+0x64>)
 8000984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000988:	6253      	str	r3, [r2, #36]	; 0x24
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_MspInit+0x64>)
 800098c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_MspInit+0x64>)
 8000998:	6a1b      	ldr	r3, [r3, #32]
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <HAL_MspInit+0x64>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6213      	str	r3, [r2, #32]
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_MspInit+0x64>)
 80009a4:	6a1b      	ldr	r3, [r3, #32]
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_MspInit+0x64>)
 80009b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <HAL_MspInit+0x64>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6253      	str	r3, [r2, #36]	; 0x24
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_MspInit+0x64>)
 80009bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	210f      	movs	r1, #15
 80009ca:	f06f 0001 	mvn.w	r0, #1
 80009ce:	f000 fec6 	bl	800175e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	202e      	movs	r0, #46	; 0x2e
 80009f6:	f000 feb2 	bl	800175e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 80009fa:	202e      	movs	r0, #46	; 0x2e
 80009fc:	f000 fecb 	bl	8001796 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <HAL_InitTick+0x9c>)
 8000a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a04:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <HAL_InitTick+0x9c>)
 8000a06:	f043 0308 	orr.w	r3, r3, #8
 8000a0a:	6253      	str	r3, [r2, #36]	; 0x24
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_InitTick+0x9c>)
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a10:	f003 0308 	and.w	r3, r3, #8
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a18:	f107 0210 	add.w	r2, r7, #16
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 f97e 	bl	8003d24 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a28:	f003 f954 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 8000a2c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <HAL_InitTick+0xa0>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	0c9b      	lsrs	r3, r3, #18
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_InitTick+0xa4>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <HAL_InitTick+0xa8>)
 8000a40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_InitTick+0xa4>)
 8000a44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a48:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <HAL_InitTick+0xa4>)
 8000a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_InitTick+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_InitTick+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <HAL_InitTick+0xa4>)
 8000a5e:	f003 f9f1 	bl	8003e44 <HAL_TIM_Base_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d104      	bne.n	8000a72 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000a68:	4806      	ldr	r0, [pc, #24]	; (8000a84 <HAL_InitTick+0xa4>)
 8000a6a:	f003 fa1f 	bl	8003eac <HAL_TIM_Base_Start_IT>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3730      	adds	r7, #48	; 0x30
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	20001a60 	.word	0x20001a60
 8000a88:	40000c00 	.word	0x40000c00

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <HardFault_Handler+0x4>

08000a9e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <MemManage_Handler+0x4>

08000aa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <BusFault_Handler+0x4>

08000aaa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <UsageFault_Handler+0x4>

08000ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <I2C1_EV_IRQHandler+0x10>)
 8000ac2:	f001 f993 	bl	8001dec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20001a0c 	.word	0x20001a0c

08000ad0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <USART3_IRQHandler+0x10>)
 8000ad6:	f003 fdf3 	bl	80046c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20001b50 	.word	0x20001b50

08000ae4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <TIM5_IRQHandler+0x10>)
 8000aea:	f003 fa2d 	bl	8003f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20001a60 	.word	0x20001a60

08000af8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <SystemInit+0x5c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <SystemInit+0x5c>)
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <SystemInit+0x5c>)
 8000b0a:	689a      	ldr	r2, [r3, #8]
 8000b0c:	4911      	ldr	r1, [pc, #68]	; (8000b54 <SystemInit+0x5c>)
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <SystemInit+0x60>)
 8000b10:	4013      	ands	r3, r2
 8000b12:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <SystemInit+0x5c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <SystemInit+0x5c>)
 8000b1a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000b1e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000b22:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <SystemInit+0x5c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <SystemInit+0x5c>)
 8000b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b2e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <SystemInit+0x5c>)
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <SystemInit+0x5c>)
 8000b36:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000b3a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <SystemInit+0x5c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x64>)
 8000b44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b48:	609a      	str	r2, [r3, #8]
#endif
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	88ffc00c 	.word	0x88ffc00c
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b70:	463b      	mov	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000b7c:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_TIM2_Init+0xa4>)
 8000b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_TIM2_Init+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <MX_TIM2_Init+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_TIM2_Init+0xa4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_TIM2_Init+0xa4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_TIM2_Init+0xa4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ba2:	4818      	ldr	r0, [pc, #96]	; (8000c04 <MX_TIM2_Init+0xa4>)
 8000ba4:	f003 f9a5 	bl	8003ef2 <HAL_TIM_PWM_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000bae:	f7ff fedd 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4810      	ldr	r0, [pc, #64]	; (8000c04 <MX_TIM2_Init+0xa4>)
 8000bc2:	f003 fcec 	bl	800459e <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bcc:	f7ff fece 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd0:	2360      	movs	r3, #96	; 0x60
 8000bd2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	4619      	mov	r1, r3
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <MX_TIM2_Init+0xa4>)
 8000be8:	f003 fa8a 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000bf2:	f7ff febb 	bl	800096c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <MX_TIM2_Init+0xa4>)
 8000bf8:	f000 f8f6 	bl	8000de8 <HAL_TIM_MspPostInit>

}
 8000bfc:	bf00      	nop
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20001b14 	.word	0x20001b14

08000c08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8000c24:	4b21      	ldr	r3, [pc, #132]	; (8000cac <MX_TIM3_Init+0xa4>)
 8000c26:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <MX_TIM3_Init+0xa8>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <MX_TIM3_Init+0xa4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <MX_TIM3_Init+0xa4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_TIM3_Init+0xa4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_TIM3_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_TIM3_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c48:	4818      	ldr	r0, [pc, #96]	; (8000cac <MX_TIM3_Init+0xa4>)
 8000c4a:	f003 f952 	bl	8003ef2 <HAL_TIM_PWM_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000c54:	f7ff fe8a 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4619      	mov	r1, r3
 8000c66:	4811      	ldr	r0, [pc, #68]	; (8000cac <MX_TIM3_Init+0xa4>)
 8000c68:	f003 fc99 	bl	800459e <HAL_TIMEx_MasterConfigSynchronization>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c72:	f7ff fe7b 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c76:	2360      	movs	r3, #96	; 0x60
 8000c78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c86:	463b      	mov	r3, r7
 8000c88:	2208      	movs	r2, #8
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4807      	ldr	r0, [pc, #28]	; (8000cac <MX_TIM3_Init+0xa4>)
 8000c8e:	f003 fa37 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c98:	f7ff fe68 	bl	800096c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <MX_TIM3_Init+0xa4>)
 8000c9e:	f000 f8a3 	bl	8000de8 <HAL_TIM_MspPostInit>

}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20001a9c 	.word	0x20001a9c
 8000cb0:	40000400 	.word	0x40000400

08000cb4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8000cd0:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <MX_TIM9_Init+0xa4>)
 8000cd2:	4a22      	ldr	r2, [pc, #136]	; (8000d5c <MX_TIM9_Init+0xa8>)
 8000cd4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000cd6:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <MX_TIM9_Init+0xa4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <MX_TIM9_Init+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 0;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <MX_TIM9_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <MX_TIM9_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <MX_TIM9_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000cf4:	4818      	ldr	r0, [pc, #96]	; (8000d58 <MX_TIM9_Init+0xa4>)
 8000cf6:	f003 f8fc 	bl	8003ef2 <HAL_TIM_PWM_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8000d00:	f7ff fe34 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	4619      	mov	r1, r3
 8000d12:	4811      	ldr	r0, [pc, #68]	; (8000d58 <MX_TIM9_Init+0xa4>)
 8000d14:	f003 fc43 	bl	800459e <HAL_TIMEx_MasterConfigSynchronization>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM9_Init+0x6e>
  {
    Error_Handler();
 8000d1e:	f7ff fe25 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d22:	2360      	movs	r3, #96	; 0x60
 8000d24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d32:	463b      	mov	r3, r7
 8000d34:	2204      	movs	r2, #4
 8000d36:	4619      	mov	r1, r3
 8000d38:	4807      	ldr	r0, [pc, #28]	; (8000d58 <MX_TIM9_Init+0xa4>)
 8000d3a:	f003 f9e1 	bl	8004100 <HAL_TIM_PWM_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM9_Init+0x94>
  {
    Error_Handler();
 8000d44:	f7ff fe12 	bl	800096c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8000d48:	4803      	ldr	r0, [pc, #12]	; (8000d58 <MX_TIM9_Init+0xa4>)
 8000d4a:	f000 f84d 	bl	8000de8 <HAL_TIM_MspPostInit>

}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20001ad8 	.word	0x20001ad8
 8000d5c:	40010800 	.word	0x40010800

08000d60 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d70:	d10c      	bne.n	8000d8c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_TIM_PWM_MspInit+0x7c>)
 8000d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d76:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_TIM_PWM_MspInit+0x7c>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6253      	str	r3, [r2, #36]	; 0x24
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_TIM_PWM_MspInit+0x7c>)
 8000d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8000d8a:	e022      	b.n	8000dd2 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <HAL_TIM_PWM_MspInit+0x80>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d10c      	bne.n	8000db0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_TIM_PWM_MspInit+0x7c>)
 8000d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <HAL_TIM_PWM_MspInit+0x7c>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6253      	str	r3, [r2, #36]	; 0x24
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_TIM_PWM_MspInit+0x7c>)
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
}
 8000dae:	e010      	b.n	8000dd2 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM9)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <HAL_TIM_PWM_MspInit+0x84>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d10b      	bne.n	8000dd2 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_TIM_PWM_MspInit+0x7c>)
 8000dbc:	6a1b      	ldr	r3, [r3, #32]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_TIM_PWM_MspInit+0x7c>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	6213      	str	r3, [r2, #32]
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_TIM_PWM_MspInit+0x7c>)
 8000dc8:	6a1b      	ldr	r3, [r3, #32]
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
}
 8000dd2:	bf00      	nop
 8000dd4:	371c      	adds	r7, #28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40000400 	.word	0x40000400
 8000de4:	40010800 	.word	0x40010800

08000de8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e08:	d11c      	bne.n	8000e44 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b33      	ldr	r3, [pc, #204]	; (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a32      	ldr	r2, [pc, #200]	; (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	61d3      	str	r3, [r2, #28]
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 8000e22:	2301      	movs	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e32:	2301      	movs	r3, #1
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <HAL_TIM_MspPostInit+0xf4>)
 8000e3e:	f000 fd07 	bl	8001850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8000e42:	e044      	b.n	8000ece <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <HAL_TIM_MspPostInit+0xf8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d11d      	bne.n	8000e8a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	61d3      	str	r3, [r2, #28]
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 8000e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4818      	ldr	r0, [pc, #96]	; (8000ee4 <HAL_TIM_MspPostInit+0xfc>)
 8000e84:	f000 fce4 	bl	8001850 <HAL_GPIO_Init>
}
 8000e88:	e021      	b.n	8000ece <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <HAL_TIM_MspPostInit+0x100>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d11c      	bne.n	8000ece <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	61d3      	str	r3, [r2, #28]
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <HAL_TIM_MspPostInit+0xf0>)
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 8000eac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <HAL_TIM_MspPostInit+0x104>)
 8000eca:	f000 fcc1 	bl	8001850 <HAL_GPIO_Init>
}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	; 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40000400 	.word	0x40000400
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40010800 	.word	0x40010800
 8000eec:	40020400 	.word	0x40020400

08000ef0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_USART3_UART_Init+0x4c>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <MX_USART3_UART_Init+0x50>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <MX_USART3_UART_Init+0x4c>)
 8000efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_USART3_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_USART3_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_USART3_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_USART3_UART_Init+0x4c>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_USART3_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_USART3_UART_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_USART3_UART_Init+0x4c>)
 8000f28:	f003 fb7d 	bl	8004626 <HAL_UART_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f32:	f7ff fd1b 	bl	800096c <Error_Handler>
  }

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20001b50 	.word	0x20001b50
 8000f40:	40004800 	.word	0x40004800

08000f44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a1b      	ldr	r2, [pc, #108]	; (8000fd0 <HAL_UART_MspInit+0x8c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d130      	bne.n	8000fc8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_UART_MspInit+0x90>)
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <HAL_UART_MspInit+0x90>)
 8000f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f70:	6253      	str	r3, [r2, #36]	; 0x24
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_UART_MspInit+0x90>)
 8000f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_UART_MspInit+0x90>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <HAL_UART_MspInit+0x90>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_UART_MspInit+0x90>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <HAL_UART_MspInit+0x94>)
 8000fb4:	f000 fc4c 	bl	8001850 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2105      	movs	r1, #5
 8000fbc:	2027      	movs	r0, #39	; 0x27
 8000fbe:	f000 fbce 	bl	800175e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fc2:	2027      	movs	r0, #39	; 0x27
 8000fc4:	f000 fbe7 	bl	8001796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40004800 	.word	0x40004800
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020400 	.word	0x40020400

08000fdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fdc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000fde:	e003      	b.n	8000fe8 <LoopCopyDataInit>

08000fe0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000fe2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fe4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fe6:	3104      	adds	r1, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fe8:	480a      	ldr	r0, [pc, #40]	; (8001014 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ff0:	d3f6      	bcc.n	8000fe0 <CopyDataInit>
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ff4:	e002      	b.n	8000ffc <LoopFillZerobss>

08000ff6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ff8:	f842 3b04 	str.w	r3, [r2], #4

08000ffc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ffe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001000:	d3f9      	bcc.n	8000ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001002:	f7ff fd79 	bl	8000af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001006:	f006 fc59 	bl	80078bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800100a:	f7ff fc2f 	bl	800086c <main>
  bx lr
 800100e:	4770      	bx	lr
  ldr r3, =_sidata
 8001010:	08007b80 	.word	0x08007b80
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001018:	20000064 	.word	0x20000064
  ldr r2, =_sbss
 800101c:	20000064 	.word	0x20000064
  ldr r3, = _ebss
 8001020:	20001bd4 	.word	0x20001bd4

08001024 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC1_IRQHandler>

08001026 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 fb89 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff fcd2 	bl	80009e0 <HAL_InitTick>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	e001      	b.n	800104c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001048:	f7ff fc96 	bl	8000978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800104c:	79fb      	ldrb	r3, [r7, #7]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_IncTick+0x1c>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_IncTick+0x20>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4413      	add	r3, r2
 8001066:	4a03      	ldr	r2, [pc, #12]	; (8001074 <HAL_IncTick+0x1c>)
 8001068:	6013      	str	r3, [r2, #0]
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20001b90 	.word	0x20001b90
 8001078:	2000005c 	.word	0x2000005c

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b02      	ldr	r3, [pc, #8]	; (800108c <HAL_GetTick+0x10>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	20001b90 	.word	0x20001b90

08001090 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08e      	sub	sp, #56	; 0x38
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e127      	b.n	8001300 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d115      	bne.n	80010ea <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010cc:	4b8e      	ldr	r3, [pc, #568]	; (8001308 <HAL_ADC_Init+0x278>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4a8d      	ldr	r2, [pc, #564]	; (8001308 <HAL_ADC_Init+0x278>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6213      	str	r3, [r2, #32]
 80010d8:	4b8b      	ldr	r3, [pc, #556]	; (8001308 <HAL_ADC_Init+0x278>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff f9d1 	bl	800048c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f040 80ff 	bne.w	80012f6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001100:	f023 0302 	bic.w	r3, r3, #2
 8001104:	f043 0202 	orr.w	r2, r3, #2
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800110c:	4b7f      	ldr	r3, [pc, #508]	; (800130c <HAL_ADC_Init+0x27c>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	497c      	ldr	r1, [pc, #496]	; (800130c <HAL_ADC_Init+0x27c>)
 800111a:	4313      	orrs	r3, r2
 800111c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001126:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800112e:	4619      	mov	r1, r3
 8001130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001134:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001136:	6a3b      	ldr	r3, [r7, #32]
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fab3 f383 	clz	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800114a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001150:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	2302      	movs	r3, #2
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	fa93 f3a3 	rbit	r3, r3
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	fab3 f383 	clz	r3, r3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001172:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001176:	4313      	orrs	r3, r2
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117e:	2b10      	cmp	r3, #16
 8001180:	d007      	beq.n	8001192 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800118a:	4313      	orrs	r3, r2
 800118c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800118e:	4313      	orrs	r3, r2
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119c:	2b40      	cmp	r3, #64	; 0x40
 800119e:	d04f      	beq.n	8001240 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011a6:	4313      	orrs	r3, r2
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80011b2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	6912      	ldr	r2, [r2, #16]
 80011b8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80011bc:	d003      	beq.n	80011c6 <HAL_ADC_Init+0x136>
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6912      	ldr	r2, [r2, #16]
 80011c2:	2a01      	cmp	r2, #1
 80011c4:	d102      	bne.n	80011cc <HAL_ADC_Init+0x13c>
 80011c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ca:	e000      	b.n	80011ce <HAL_ADC_Init+0x13e>
 80011cc:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80011ce:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80011d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011d2:	4313      	orrs	r3, r2
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d125      	bne.n	800122c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d114      	bne.n	8001214 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80011f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	fa92 f2a2 	rbit	r2, r2
 80011fc:	617a      	str	r2, [r7, #20]
  return result;
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	fab2 f282 	clz	r2, r2
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	4093      	lsls	r3, r2
 8001208:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800120c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800120e:	4313      	orrs	r3, r2
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
 8001212:	e00b      	b.n	800122c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	f043 0220 	orr.w	r2, r3, #32
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4b37      	ldr	r3, [pc, #220]	; (8001310 <HAL_ADC_Init+0x280>)
 8001234:	4013      	ands	r3, r2
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800123c:	430b      	orrs	r3, r1
 800123e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	4b33      	ldr	r3, [pc, #204]	; (8001314 <HAL_ADC_Init+0x284>)
 8001248:	4013      	ands	r3, r2
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001250:	430b      	orrs	r3, r1
 8001252:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800125c:	d003      	beq.n	8001266 <HAL_ADC_Init+0x1d6>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d119      	bne.n	800129a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	3b01      	subs	r3, #1
 8001276:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800127a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	fa92 f2a2 	rbit	r2, r2
 8001282:	60fa      	str	r2, [r7, #12]
  return result;
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	fab2 f282 	clz	r2, r2
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	fa03 f202 	lsl.w	r2, r3, r2
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
 8001298:	e007      	b.n	80012aa <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80012a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_ADC_Init+0x288>)
 80012b2:	4013      	ands	r3, r2
 80012b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d10b      	bne.n	80012d2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	f023 0303 	bic.w	r3, r3, #3
 80012c8:	f043 0201 	orr.w	r2, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80012d0:	e014      	b.n	80012fc <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f023 0312 	bic.w	r3, r3, #18
 80012da:	f043 0210 	orr.w	r2, r3, #16
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012f4:	e002      	b.n	80012fc <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001300:	4618      	mov	r0, r3
 8001302:	3738      	adds	r7, #56	; 0x38
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40012700 	.word	0x40012700
 8001310:	fcfc16ff 	.word	0xfcfc16ff
 8001314:	c0fff189 	.word	0xc0fff189
 8001318:	bf80fffe 	.word	0xbf80fffe

0800131c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_ADC_ConfigChannel+0x20>
 8001338:	2302      	movs	r3, #2
 800133a:	e14f      	b.n	80015dc <HAL_ADC_ConfigChannel+0x2c0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b06      	cmp	r3, #6
 800134a:	d81c      	bhi.n	8001386 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	3b05      	subs	r3, #5
 800135e:	221f      	movs	r2, #31
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	4019      	ands	r1, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	3b05      	subs	r3, #5
 8001378:	fa00 f203 	lsl.w	r2, r0, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	641a      	str	r2, [r3, #64]	; 0x40
 8001384:	e07e      	b.n	8001484 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b0c      	cmp	r3, #12
 800138c:	d81c      	bhi.n	80013c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	3b23      	subs	r3, #35	; 0x23
 80013a0:	221f      	movs	r2, #31
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	4019      	ands	r1, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	3b23      	subs	r3, #35	; 0x23
 80013ba:	fa00 f203 	lsl.w	r2, r0, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80013c6:	e05d      	b.n	8001484 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b12      	cmp	r3, #18
 80013ce:	d81c      	bhi.n	800140a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	3b41      	subs	r3, #65	; 0x41
 80013e2:	221f      	movs	r2, #31
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	4019      	ands	r1, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	3b41      	subs	r3, #65	; 0x41
 80013fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	639a      	str	r2, [r3, #56]	; 0x38
 8001408:	e03c      	b.n	8001484 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b18      	cmp	r3, #24
 8001410:	d81c      	bhi.n	800144c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	3b5f      	subs	r3, #95	; 0x5f
 8001424:	221f      	movs	r2, #31
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	4019      	ands	r1, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	3b5f      	subs	r3, #95	; 0x5f
 800143e:	fa00 f203 	lsl.w	r2, r0, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	635a      	str	r2, [r3, #52]	; 0x34
 800144a:	e01b      	b.n	8001484 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	3b7d      	subs	r3, #125	; 0x7d
 800145e:	221f      	movs	r2, #31
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	4019      	ands	r1, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	3b7d      	subs	r3, #125	; 0x7d
 8001478:	fa00 f203 	lsl.w	r2, r0, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b09      	cmp	r3, #9
 800148a:	d81a      	bhi.n	80014c2 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6959      	ldr	r1, [r3, #20]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	2207      	movs	r2, #7
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	4019      	ands	r1, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6898      	ldr	r0, [r3, #8]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	fa00 f203 	lsl.w	r2, r0, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	615a      	str	r2, [r3, #20]
 80014c0:	e05d      	b.n	800157e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b13      	cmp	r3, #19
 80014c8:	d81c      	bhi.n	8001504 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6919      	ldr	r1, [r3, #16]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	3b1e      	subs	r3, #30
 80014dc:	2207      	movs	r2, #7
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	4019      	ands	r1, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	6898      	ldr	r0, [r3, #8]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	3b1e      	subs	r3, #30
 80014f6:	fa00 f203 	lsl.w	r2, r0, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	611a      	str	r2, [r3, #16]
 8001502:	e03c      	b.n	800157e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b1d      	cmp	r3, #29
 800150a:	d81c      	bhi.n	8001546 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68d9      	ldr	r1, [r3, #12]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	3b3c      	subs	r3, #60	; 0x3c
 800151e:	2207      	movs	r2, #7
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	4019      	ands	r1, r3
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	6898      	ldr	r0, [r3, #8]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	3b3c      	subs	r3, #60	; 0x3c
 8001538:	fa00 f203 	lsl.w	r2, r0, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	e01b      	b.n	800157e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	3b5a      	subs	r3, #90	; 0x5a
 8001558:	2207      	movs	r2, #7
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	4019      	ands	r1, r3
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	6898      	ldr	r0, [r3, #8]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	3b5a      	subs	r3, #90	; 0x5a
 8001572:	fa00 f203 	lsl.w	r2, r0, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b10      	cmp	r3, #16
 8001584:	d003      	beq.n	800158e <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800158a:	2b11      	cmp	r3, #17
 800158c:	d121      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_ADC_ConfigChannel+0x2cc>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d11b      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_ADC_ConfigChannel+0x2cc>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <HAL_ADC_ConfigChannel+0x2cc>)
 80015a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015a4:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d111      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_ADC_ConfigChannel+0x2d0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <HAL_ADC_ConfigChannel+0x2d4>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	0c9a      	lsrs	r2, r3, #18
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80015c4:	e002      	b.n	80015cc <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f9      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40012700 	.word	0x40012700
 80015ec:	20000054 	.word	0x20000054
 80015f0:	431bde83 	.word	0x431bde83

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db0b      	blt.n	8001682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f003 021f 	and.w	r2, r3, #31
 8001670:	4906      	ldr	r1, [pc, #24]	; (800168c <__NVIC_EnableIRQ+0x34>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	2001      	movs	r0, #1
 800167a:	fa00 f202 	lsl.w	r2, r0, r2
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff4f 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff64 	bl	800163c <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ffb2 	bl	80016e4 <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff81 	bl	8001690 <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff57 	bl	8001658 <__NVIC_EnableIRQ>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d005      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2204      	movs	r2, #4
 80017ce:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e029      	b.n	800182a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 020e 	bic.w	r2, r2, #14
 80017e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0201 	bic.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f003 021c 	and.w	r2, r3, #28
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001802:	2101      	movs	r1, #1
 8001804:	fa01 f202 	lsl.w	r2, r1, r2
 8001808:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	4798      	blx	r3
    }
  }
  return status;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001842:	b2db      	uxtb	r3, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
	...

08001850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001866:	e160      	b.n	8001b2a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2101      	movs	r1, #1
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 8152 	beq.w	8001b24 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x40>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b12      	cmp	r3, #18
 800188e:	d123      	bne.n	80018d8 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	08da      	lsrs	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3208      	adds	r2, #8
 8001898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	08da      	lsrs	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3208      	adds	r2, #8
 80018d2:	6939      	ldr	r1, [r7, #16]
 80018d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0203 	and.w	r2, r3, #3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d00b      	beq.n	800192c <HAL_GPIO_Init+0xdc>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d007      	beq.n	800192c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001920:	2b11      	cmp	r3, #17
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b12      	cmp	r3, #18
 800192a:	d130      	bne.n	800198e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001962:	2201      	movs	r2, #1
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	091b      	lsrs	r3, r3, #4
 8001978:	f003 0201 	and.w	r2, r3, #1
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	2203      	movs	r2, #3
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80ac 	beq.w	8001b24 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019cc:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <HAL_GPIO_Init+0x2f4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a5c      	ldr	r2, [pc, #368]	; (8001b44 <HAL_GPIO_Init+0x2f4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	4b5a      	ldr	r3, [pc, #360]	; (8001b44 <HAL_GPIO_Init+0x2f4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 80019e4:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <HAL_GPIO_Init+0x2f8>)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a50      	ldr	r2, [pc, #320]	; (8001b4c <HAL_GPIO_Init+0x2fc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d025      	beq.n	8001a5c <HAL_GPIO_Init+0x20c>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a4f      	ldr	r2, [pc, #316]	; (8001b50 <HAL_GPIO_Init+0x300>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d01f      	beq.n	8001a58 <HAL_GPIO_Init+0x208>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a4e      	ldr	r2, [pc, #312]	; (8001b54 <HAL_GPIO_Init+0x304>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d019      	beq.n	8001a54 <HAL_GPIO_Init+0x204>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a4d      	ldr	r2, [pc, #308]	; (8001b58 <HAL_GPIO_Init+0x308>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d013      	beq.n	8001a50 <HAL_GPIO_Init+0x200>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a4c      	ldr	r2, [pc, #304]	; (8001b5c <HAL_GPIO_Init+0x30c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d00d      	beq.n	8001a4c <HAL_GPIO_Init+0x1fc>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <HAL_GPIO_Init+0x310>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d007      	beq.n	8001a48 <HAL_GPIO_Init+0x1f8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <HAL_GPIO_Init+0x314>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d101      	bne.n	8001a44 <HAL_GPIO_Init+0x1f4>
 8001a40:	2306      	movs	r3, #6
 8001a42:	e00c      	b.n	8001a5e <HAL_GPIO_Init+0x20e>
 8001a44:	2307      	movs	r3, #7
 8001a46:	e00a      	b.n	8001a5e <HAL_GPIO_Init+0x20e>
 8001a48:	2305      	movs	r3, #5
 8001a4a:	e008      	b.n	8001a5e <HAL_GPIO_Init+0x20e>
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	e006      	b.n	8001a5e <HAL_GPIO_Init+0x20e>
 8001a50:	2303      	movs	r3, #3
 8001a52:	e004      	b.n	8001a5e <HAL_GPIO_Init+0x20e>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0x20e>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_GPIO_Init+0x20e>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	f002 0203 	and.w	r2, r2, #3
 8001a64:	0092      	lsls	r2, r2, #2
 8001a66:	4093      	lsls	r3, r2
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a6e:	4936      	ldr	r1, [pc, #216]	; (8001b48 <HAL_GPIO_Init+0x2f8>)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	089b      	lsrs	r3, r3, #2
 8001a74:	3302      	adds	r3, #2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7c:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <HAL_GPIO_Init+0x318>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aa0:	4a31      	ldr	r2, [pc, #196]	; (8001b68 <HAL_GPIO_Init+0x318>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <HAL_GPIO_Init+0x318>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001aca:	4a27      	ldr	r2, [pc, #156]	; (8001b68 <HAL_GPIO_Init+0x318>)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <HAL_GPIO_Init+0x318>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001af4:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_GPIO_Init+0x318>)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <HAL_GPIO_Init+0x318>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b1e:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <HAL_GPIO_Init+0x318>)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3301      	adds	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f47f ae97 	bne.w	8001868 <HAL_GPIO_Init+0x18>
  } 
}
 8001b3a:	bf00      	nop
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40010000 	.word	0x40010000
 8001b4c:	40020000 	.word	0x40020000
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40020800 	.word	0x40020800
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40021400 	.word	0x40021400
 8001b64:	40021800 	.word	0x40021800
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001b88:	e003      	b.n	8001b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	041a      	lsls	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	619a      	str	r2, [r3, #24]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e10f      	b.n	8001dce <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7fe fe06 	bl	80007d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2224      	movs	r2, #36	; 0x24
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001be0:	f002 f878 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 8001be4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4a7b      	ldr	r2, [pc, #492]	; (8001dd8 <HAL_I2C_Init+0x23c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d807      	bhi.n	8001c00 <HAL_I2C_Init+0x64>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4a7a      	ldr	r2, [pc, #488]	; (8001ddc <HAL_I2C_Init+0x240>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	bf94      	ite	ls
 8001bf8:	2301      	movls	r3, #1
 8001bfa:	2300      	movhi	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	e006      	b.n	8001c0e <HAL_I2C_Init+0x72>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4a77      	ldr	r2, [pc, #476]	; (8001de0 <HAL_I2C_Init+0x244>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	bf94      	ite	ls
 8001c08:	2301      	movls	r3, #1
 8001c0a:	2300      	movhi	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0db      	b.n	8001dce <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4a72      	ldr	r2, [pc, #456]	; (8001de4 <HAL_I2C_Init+0x248>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	0c9b      	lsrs	r3, r3, #18
 8001c20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a64      	ldr	r2, [pc, #400]	; (8001dd8 <HAL_I2C_Init+0x23c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d802      	bhi.n	8001c50 <HAL_I2C_Init+0xb4>
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	e009      	b.n	8001c64 <HAL_I2C_Init+0xc8>
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	4a63      	ldr	r2, [pc, #396]	; (8001de8 <HAL_I2C_Init+0x24c>)
 8001c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c60:	099b      	lsrs	r3, r3, #6
 8001c62:	3301      	adds	r3, #1
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4956      	ldr	r1, [pc, #344]	; (8001dd8 <HAL_I2C_Init+0x23c>)
 8001c80:	428b      	cmp	r3, r1
 8001c82:	d80d      	bhi.n	8001ca0 <HAL_I2C_Init+0x104>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1e59      	subs	r1, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	bf38      	it	cc
 8001c9c:	2304      	movcc	r3, #4
 8001c9e:	e04f      	b.n	8001d40 <HAL_I2C_Init+0x1a4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d111      	bne.n	8001ccc <HAL_I2C_Init+0x130>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1e58      	subs	r0, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	440b      	add	r3, r1
 8001cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf0c      	ite	eq
 8001cc4:	2301      	moveq	r3, #1
 8001cc6:	2300      	movne	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	e012      	b.n	8001cf2 <HAL_I2C_Init+0x156>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1e58      	subs	r0, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	0099      	lsls	r1, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_I2C_Init+0x15e>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e022      	b.n	8001d40 <HAL_I2C_Init+0x1a4>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10e      	bne.n	8001d20 <HAL_I2C_Init+0x184>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1e58      	subs	r0, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6859      	ldr	r1, [r3, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	440b      	add	r3, r1
 8001d10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d14:	3301      	adds	r3, #1
 8001d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1e:	e00f      	b.n	8001d40 <HAL_I2C_Init+0x1a4>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1e58      	subs	r0, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	0099      	lsls	r1, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	6809      	ldr	r1, [r1, #0]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69da      	ldr	r2, [r3, #28]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6911      	ldr	r1, [r2, #16]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68d2      	ldr	r2, [r2, #12]
 8001d7a:	4311      	orrs	r1, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	430b      	orrs	r3, r1
 8001d82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	000186a0 	.word	0x000186a0
 8001ddc:	001e847f 	.word	0x001e847f
 8001de0:	003d08ff 	.word	0x003d08ff
 8001de4:	431bde83 	.word	0x431bde83
 8001de8:	10624dd3 	.word	0x10624dd3

08001dec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e0c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e14:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	d003      	beq.n	8001e24 <HAL_I2C_EV_IRQHandler+0x38>
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b40      	cmp	r3, #64	; 0x40
 8001e20:	f040 80b6 	bne.w	8001f90 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <HAL_I2C_EV_IRQHandler+0x6e>
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001e44:	d003      	beq.n	8001e4e <HAL_I2C_EV_IRQHandler+0x62>
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001e4c:	d101      	bne.n	8001e52 <HAL_I2C_EV_IRQHandler+0x66>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_I2C_EV_IRQHandler+0x68>
 8001e52:	2300      	movs	r3, #0
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	f000 8127 	beq.w	80020a8 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00c      	beq.n	8001e7e <HAL_I2C_EV_IRQHandler+0x92>
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	0a5b      	lsrs	r3, r3, #9
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d006      	beq.n	8001e7e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f001 fa4e 	bl	8003312 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fc56 	bl	8002728 <I2C_Master_SB>
 8001e7c:	e087      	b.n	8001f8e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	08db      	lsrs	r3, r3, #3
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <HAL_I2C_EV_IRQHandler+0xb2>
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	0a5b      	lsrs	r3, r3, #9
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fccb 	bl	8002832 <I2C_Master_ADD10>
 8001e9c:	e077      	b.n	8001f8e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	085b      	lsrs	r3, r3, #1
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_I2C_EV_IRQHandler+0xd2>
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	0a5b      	lsrs	r3, r3, #9
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fce4 	bl	8002884 <I2C_Master_ADDR>
 8001ebc:	e067      	b.n	8001f8e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d030      	beq.n	8001f2c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ed8:	f000 80e8 	beq.w	80020ac <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	09db      	lsrs	r3, r3, #7
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00f      	beq.n	8001f08 <HAL_I2C_EV_IRQHandler+0x11c>
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	0a9b      	lsrs	r3, r3, #10
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d009      	beq.n	8001f08 <HAL_I2C_EV_IRQHandler+0x11c>
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d103      	bne.n	8001f08 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f937 	bl	8002174 <I2C_MasterTransmit_TXE>
 8001f06:	e042      	b.n	8001f8e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80cb 	beq.w	80020ac <HAL_I2C_EV_IRQHandler+0x2c0>
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	0a5b      	lsrs	r3, r3, #9
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80c4 	beq.w	80020ac <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fa1d 	bl	8002364 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f2a:	e0bf      	b.n	80020ac <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f3a:	f000 80b7 	beq.w	80020ac <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	099b      	lsrs	r3, r3, #6
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00f      	beq.n	8001f6a <HAL_I2C_EV_IRQHandler+0x17e>
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	0a9b      	lsrs	r3, r3, #10
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_I2C_EV_IRQHandler+0x17e>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fa74 	bl	8002450 <I2C_MasterReceive_RXNE>
 8001f68:	e011      	b.n	8001f8e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 809a 	beq.w	80020ac <HAL_I2C_EV_IRQHandler+0x2c0>
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	0a5b      	lsrs	r3, r3, #9
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8093 	beq.w	80020ac <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fae4 	bl	8002554 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f8c:	e08e      	b.n	80020ac <HAL_I2C_EV_IRQHandler+0x2c0>
 8001f8e:	e08d      	b.n	80020ac <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	e007      	b.n	8001fb2 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	085b      	lsrs	r3, r3, #1
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d012      	beq.n	8001fe4 <HAL_I2C_EV_IRQHandler+0x1f8>
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	0a5b      	lsrs	r3, r3, #9
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fe9d 	bl	8002d1c <I2C_Slave_ADDR>
 8001fe2:	e066      	b.n	80020b2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d009      	beq.n	8002004 <HAL_I2C_EV_IRQHandler+0x218>
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	0a5b      	lsrs	r3, r3, #9
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 fed1 	bl	8002da4 <I2C_Slave_STOPF>
 8002002:	e056      	b.n	80020b2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002004:	7bbb      	ldrb	r3, [r7, #14]
 8002006:	2b21      	cmp	r3, #33	; 0x21
 8002008:	d002      	beq.n	8002010 <HAL_I2C_EV_IRQHandler+0x224>
 800200a:	7bbb      	ldrb	r3, [r7, #14]
 800200c:	2b29      	cmp	r3, #41	; 0x29
 800200e:	d125      	bne.n	800205c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	09db      	lsrs	r3, r3, #7
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00f      	beq.n	800203c <HAL_I2C_EV_IRQHandler+0x250>
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	0a9b      	lsrs	r3, r3, #10
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d009      	beq.n	800203c <HAL_I2C_EV_IRQHandler+0x250>
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d103      	bne.n	800203c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fdb5 	bl	8002ba4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800203a:	e039      	b.n	80020b0 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d033      	beq.n	80020b0 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	0a5b      	lsrs	r3, r3, #9
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d02d      	beq.n	80020b0 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 fde2 	bl	8002c1e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800205a:	e029      	b.n	80020b0 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	099b      	lsrs	r3, r3, #6
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00f      	beq.n	8002088 <HAL_I2C_EV_IRQHandler+0x29c>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	0a9b      	lsrs	r3, r3, #10
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d009      	beq.n	8002088 <HAL_I2C_EV_IRQHandler+0x29c>
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d103      	bne.n	8002088 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 fdec 	bl	8002c5e <I2C_SlaveReceive_RXNE>
 8002086:	e014      	b.n	80020b2 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00e      	beq.n	80020b2 <HAL_I2C_EV_IRQHandler+0x2c6>
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	0a5b      	lsrs	r3, r3, #9
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fe1a 	bl	8002cda <I2C_SlaveReceive_BTF>
 80020a6:	e004      	b.n	80020b2 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80020a8:	bf00      	nop
 80020aa:	e002      	b.n	80020b2 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ac:	bf00      	nop
 80020ae:	e000      	b.n	80020b2 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020b0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	70fb      	strb	r3, [r7, #3]
 800210c:	4613      	mov	r3, r2
 800210e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002182:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800218a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002196:	2b00      	cmp	r3, #0
 8002198:	d150      	bne.n	800223c <I2C_MasterTransmit_TXE+0xc8>
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	2b21      	cmp	r3, #33	; 0x21
 800219e:	d14d      	bne.n	800223c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d01d      	beq.n	80021e2 <I2C_MasterTransmit_TXE+0x6e>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d01a      	beq.n	80021e2 <I2C_MasterTransmit_TXE+0x6e>
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021b2:	d016      	beq.n	80021e2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021c2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2211      	movs	r2, #17
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ff6c 	bl	80020b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021e0:	e0bc      	b.n	800235c <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021f0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002200:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d107      	bne.n	800222c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff81 	bl	800212c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800222a:	e097      	b.n	800235c <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ff3f 	bl	80020b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800223a:	e08f      	b.n	800235c <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	2b21      	cmp	r3, #33	; 0x21
 8002240:	d007      	beq.n	8002252 <I2C_MasterTransmit_TXE+0xde>
 8002242:	7bbb      	ldrb	r3, [r7, #14]
 8002244:	2b40      	cmp	r3, #64	; 0x40
 8002246:	f040 8089 	bne.w	800235c <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	2b22      	cmp	r3, #34	; 0x22
 800224e:	f040 8085 	bne.w	800235c <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d108      	bne.n	800226e <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800226c:	e076      	b.n	800235c <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b40      	cmp	r3, #64	; 0x40
 8002278:	d15d      	bne.n	8002336 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227e:	2b00      	cmp	r3, #0
 8002280:	d11d      	bne.n	80022be <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	2b01      	cmp	r3, #1
 8002288:	d10b      	bne.n	80022a2 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228e:	b2da      	uxtb	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229a:	1c9a      	adds	r2, r3, #2
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022a0:	e05c      	b.n	800235c <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	121b      	asrs	r3, r3, #8
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022bc:	e04e      	b.n	800235c <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10b      	bne.n	80022de <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022dc:	e03e      	b.n	800235c <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d13a      	bne.n	800235c <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b22      	cmp	r3, #34	; 0x22
 80022f0:	d108      	bne.n	8002304 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002300:	601a      	str	r2, [r3, #0]
}
 8002302:	e02b      	b.n	800235c <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b21      	cmp	r3, #33	; 0x21
 800230e:	d125      	bne.n	800235c <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002334:	e012      	b.n	800235c <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800235a:	e7ff      	b.n	800235c <I2C_MasterTransmit_TXE+0x1e8>
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b21      	cmp	r3, #33	; 0x21
 800237c:	d164      	bne.n	8002448 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d012      	beq.n	80023ae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	781a      	ldrb	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 80023ac:	e04c      	b.n	8002448 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d01d      	beq.n	80023f0 <I2C_MasterTransmit_BTF+0x8c>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d01a      	beq.n	80023f0 <I2C_MasterTransmit_BTF+0x8c>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023c0:	d016      	beq.n	80023f0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023d0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2211      	movs	r2, #17
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff fe65 	bl	80020b8 <HAL_I2C_MasterTxCpltCallback>
}
 80023ee:	e02b      	b.n	8002448 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023fe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b40      	cmp	r3, #64	; 0x40
 8002428:	d107      	bne.n	800243a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff fe7a 	bl	800212c <HAL_I2C_MemTxCpltCallback>
}
 8002438:	e006      	b.n	8002448 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff fe38 	bl	80020b8 <HAL_I2C_MasterTxCpltCallback>
}
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b22      	cmp	r3, #34	; 0x22
 8002462:	d173      	bne.n	800254c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b03      	cmp	r3, #3
 8002470:	d920      	bls.n	80024b4 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d154      	bne.n	800254c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80024b2:	e04b      	b.n	800254c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d047      	beq.n	800254c <I2C_MasterReceive_RXNE+0xfc>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d002      	beq.n	80024c8 <I2C_MasterReceive_RXNE+0x78>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d141      	bne.n	800254c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024e6:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b40      	cmp	r3, #64	; 0x40
 8002520:	d10a      	bne.n	8002538 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff fe04 	bl	800213e <HAL_I2C_MemRxCpltCallback>
}
 8002536:	e009      	b.n	800254c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2212      	movs	r2, #18
 8002544:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff fdbf 	bl	80020ca <HAL_I2C_MasterRxCpltCallback>
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b04      	cmp	r3, #4
 800256a:	d11b      	bne.n	80025a4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800257a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80025a2:	e0bd      	b.n	8002720 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d129      	bne.n	8002602 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025bc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d00a      	beq.n	80025da <I2C_MasterReceive_BTF+0x86>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d007      	beq.n	80025da <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002600:	e08e      	b.n	8002720 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d176      	bne.n	80026fa <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d002      	beq.n	8002618 <I2C_MasterReceive_BTF+0xc4>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b10      	cmp	r3, #16
 8002616:	d108      	bne.n	800262a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e019      	b.n	800265e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b04      	cmp	r3, #4
 800262e:	d002      	beq.n	8002636 <I2C_MasterReceive_BTF+0xe2>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d108      	bne.n	8002648 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	e00a      	b.n	800265e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b10      	cmp	r3, #16
 800264c:	d007      	beq.n	800265e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026b8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b40      	cmp	r3, #64	; 0x40
 80026cc:	d10a      	bne.n	80026e4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff fd2e 	bl	800213e <HAL_I2C_MemRxCpltCallback>
}
 80026e2:	e01d      	b.n	8002720 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2212      	movs	r2, #18
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fce9 	bl	80020ca <HAL_I2C_MasterRxCpltCallback>
}
 80026f8:	e012      	b.n	8002720 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b40      	cmp	r3, #64	; 0x40
 800273a:	d117      	bne.n	800276c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002740:	2b00      	cmp	r3, #0
 8002742:	d109      	bne.n	8002758 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002754:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002756:	e067      	b.n	8002828 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	b2da      	uxtb	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	611a      	str	r2, [r3, #16]
}
 800276a:	e05d      	b.n	8002828 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002774:	d133      	bne.n	80027de <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b21      	cmp	r3, #33	; 0x21
 8002780:	d109      	bne.n	8002796 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002792:	611a      	str	r2, [r3, #16]
 8002794:	e008      	b.n	80027a8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d103      	bne.n	80027b8 <I2C_Master_SB+0x90>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d037      	beq.n	8002828 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d104      	bne.n	80027cc <I2C_Master_SB+0xa4>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d02d      	beq.n	8002828 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027da:	605a      	str	r2, [r3, #4]
}
 80027dc:	e024      	b.n	8002828 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10e      	bne.n	8002804 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	11db      	asrs	r3, r3, #7
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	f003 0306 	and.w	r3, r3, #6
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f063 030f 	orn	r3, r3, #15
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	611a      	str	r2, [r3, #16]
}
 8002802:	e011      	b.n	8002828 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002808:	2b01      	cmp	r3, #1
 800280a:	d10d      	bne.n	8002828 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002810:	b29b      	uxth	r3, r3
 8002812:	11db      	asrs	r3, r3, #7
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 0306 	and.w	r3, r3, #6
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f063 030e 	orn	r3, r3, #14
 8002820:	b2da      	uxtb	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	611a      	str	r2, [r3, #16]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	b2da      	uxtb	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284a:	2b00      	cmp	r3, #0
 800284c:	d103      	bne.n	8002856 <I2C_Master_ADD10+0x24>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	2b00      	cmp	r3, #0
 8002854:	d011      	beq.n	800287a <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	2b00      	cmp	r3, #0
 800285e:	d104      	bne.n	800286a <I2C_Master_ADD10+0x38>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002878:	605a      	str	r2, [r3, #4]
    }
  }
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002884:	b480      	push	{r7}
 8002886:	b091      	sub	sp, #68	; 0x44
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002892:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b22      	cmp	r3, #34	; 0x22
 80028ac:	f040 8169 	bne.w	8002b82 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10f      	bne.n	80028d8 <I2C_Master_ADDR+0x54>
 80028b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d10b      	bne.n	80028d8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c0:	2300      	movs	r3, #0
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	633b      	str	r3, [r7, #48]	; 0x30
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	e160      	b.n	8002b9a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d11d      	bne.n	800291c <I2C_Master_ADDR+0x98>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028e8:	d118      	bne.n	800291c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800290e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	651a      	str	r2, [r3, #80]	; 0x50
 800291a:	e13e      	b.n	8002b9a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d113      	bne.n	800294e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002926:	2300      	movs	r3, #0
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e115      	b.n	8002b7a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	f040 808a 	bne.w	8002a6e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002960:	d137      	bne.n	80029d2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002970:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800297c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002980:	d113      	bne.n	80029aa <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002990:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002992:	2300      	movs	r3, #0
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	e0e7      	b.n	8002b7a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	623b      	str	r3, [r7, #32]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	623b      	str	r3, [r7, #32]
 80029be:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	e0d3      	b.n	8002b7a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80029d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d02e      	beq.n	8002a36 <I2C_Master_ADDR+0x1b2>
 80029d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d02b      	beq.n	8002a36 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80029de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e0:	2b12      	cmp	r3, #18
 80029e2:	d102      	bne.n	80029ea <I2C_Master_ADDR+0x166>
 80029e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d125      	bne.n	8002a36 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80029ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d00e      	beq.n	8002a0e <I2C_Master_ADDR+0x18a>
 80029f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d00b      	beq.n	8002a0e <I2C_Master_ADDR+0x18a>
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d008      	beq.n	8002a0e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e007      	b.n	8002a1e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a1c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	e0a1      	b.n	8002b7a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a44:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e085      	b.n	8002b7a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d14d      	bne.n	8002b14 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d016      	beq.n	8002aac <I2C_Master_ADDR+0x228>
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d013      	beq.n	8002aac <I2C_Master_ADDR+0x228>
 8002a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d010      	beq.n	8002aac <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a98:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e007      	b.n	8002abc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aba:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aca:	d117      	bne.n	8002afc <I2C_Master_ADDR+0x278>
 8002acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ace:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ad2:	d00b      	beq.n	8002aec <I2C_Master_ADDR+0x268>
 8002ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d008      	beq.n	8002aec <I2C_Master_ADDR+0x268>
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d005      	beq.n	8002aec <I2C_Master_ADDR+0x268>
 8002ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d002      	beq.n	8002aec <I2C_Master_ADDR+0x268>
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d107      	bne.n	8002afc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002afa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	e032      	b.n	8002b7a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b22:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b32:	d117      	bne.n	8002b64 <I2C_Master_ADDR+0x2e0>
 8002b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b3a:	d00b      	beq.n	8002b54 <I2C_Master_ADDR+0x2d0>
 8002b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d008      	beq.n	8002b54 <I2C_Master_ADDR+0x2d0>
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d005      	beq.n	8002b54 <I2C_Master_ADDR+0x2d0>
 8002b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d002      	beq.n	8002b54 <I2C_Master_ADDR+0x2d0>
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d107      	bne.n	8002b64 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b62:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002b80:	e00b      	b.n	8002b9a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	68fb      	ldr	r3, [r7, #12]
}
 8002b98:	e7ff      	b.n	8002b9a <I2C_Master_ADDR+0x316>
 8002b9a:	bf00      	nop
 8002b9c:	3744      	adds	r7, #68	; 0x44
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d02b      	beq.n	8002c16 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	781a      	ldrb	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d114      	bne.n	8002c16 <I2C_SlaveTransmit_TXE+0x72>
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b29      	cmp	r3, #41	; 0x29
 8002bf0:	d111      	bne.n	8002c16 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c00:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2221      	movs	r2, #33	; 0x21
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2228      	movs	r2, #40	; 0x28
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff fa63 	bl	80020dc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d011      	beq.n	8002c54 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr

08002c5e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d02c      	beq.n	8002cd2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d114      	bne.n	8002cd2 <I2C_SlaveReceive_RXNE+0x74>
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b2a      	cmp	r3, #42	; 0x2a
 8002cac:	d111      	bne.n	8002cd2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cbc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2222      	movs	r2, #34	; 0x22
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2228      	movs	r2, #40	; 0x28
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff fa0e 	bl	80020ee <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d012      	beq.n	8002d12 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d36:	2b28      	cmp	r3, #40	; 0x28
 8002d38:	d127      	bne.n	8002d8a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d48:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	089b      	lsrs	r3, r3, #2
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	09db      	lsrs	r3, r3, #7
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d103      	bne.n	8002d6e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	81bb      	strh	r3, [r7, #12]
 8002d6c:	e002      	b.n	8002d74 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d7c:	89ba      	ldrh	r2, [r7, #12]
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	4619      	mov	r1, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff f9bc 	bl	8002100 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d88:	e008      	b.n	8002d9c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f06f 0202 	mvn.w	r2, #2
 8002d92:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dc2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e00:	d172      	bne.n	8002ee8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	2b22      	cmp	r3, #34	; 0x22
 8002e06:	d002      	beq.n	8002e0e <I2C_Slave_STOPF+0x6a>
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e0c:	d135      	bne.n	8002e7a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f043 0204 	orr.w	r2, r3, #4
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fcf4 	bl	8001834 <HAL_DMA_GetState>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d049      	beq.n	8002ee6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e56:	4a69      	ldr	r2, [pc, #420]	; (8002ffc <I2C_Slave_STOPF+0x258>)
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe fca7 	bl	80017b2 <HAL_DMA_Abort_IT>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d03d      	beq.n	8002ee6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e74:	4610      	mov	r0, r2
 8002e76:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e78:	e035      	b.n	8002ee6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d005      	beq.n	8002e9e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f043 0204 	orr.w	r2, r3, #4
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fcbe 	bl	8001834 <HAL_DMA_GetState>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d014      	beq.n	8002ee8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec2:	4a4e      	ldr	r2, [pc, #312]	; (8002ffc <I2C_Slave_STOPF+0x258>)
 8002ec4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fc71 	bl	80017b2 <HAL_DMA_Abort_IT>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4798      	blx	r3
 8002ee4:	e000      	b.n	8002ee8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ee6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d03e      	beq.n	8002f70 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d112      	bne.n	8002f26 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b40      	cmp	r3, #64	; 0x40
 8002f32:	d112      	bne.n	8002f5a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f043 0204 	orr.w	r2, r3, #4
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f843 	bl	8003004 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f7e:	e039      	b.n	8002ff4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b2a      	cmp	r3, #42	; 0x2a
 8002f84:	d109      	bne.n	8002f9a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2228      	movs	r2, #40	; 0x28
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff f8aa 	bl	80020ee <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b28      	cmp	r3, #40	; 0x28
 8002fa4:	d111      	bne.n	8002fca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a15      	ldr	r2, [pc, #84]	; (8003000 <I2C_Slave_STOPF+0x25c>)
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff f8a9 	bl	800211a <HAL_I2C_ListenCpltCallback>
}
 8002fc8:	e014      	b.n	8002ff4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	2b22      	cmp	r3, #34	; 0x22
 8002fd0:	d002      	beq.n	8002fd8 <I2C_Slave_STOPF+0x234>
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b22      	cmp	r3, #34	; 0x22
 8002fd6:	d10d      	bne.n	8002ff4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff f87d 	bl	80020ee <HAL_I2C_SlaveRxCpltCallback>
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	08003235 	.word	0x08003235
 8003000:	ffff0000 	.word	0xffff0000

08003004 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003012:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b10      	cmp	r3, #16
 800301e:	d10a      	bne.n	8003036 <I2C_ITError+0x32>
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b22      	cmp	r3, #34	; 0x22
 8003024:	d107      	bne.n	8003036 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003034:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800303c:	2b28      	cmp	r3, #40	; 0x28
 800303e:	d107      	bne.n	8003050 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2228      	movs	r2, #40	; 0x28
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800304e:	e015      	b.n	800307c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800305e:	d006      	beq.n	800306e <I2C_ITError+0x6a>
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b60      	cmp	r3, #96	; 0x60
 8003064:	d003      	beq.n	800306e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800308a:	d162      	bne.n	8003152 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d020      	beq.n	80030ec <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ae:	4a5f      	ldr	r2, [pc, #380]	; (800322c <I2C_ITError+0x228>)
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe fb7b 	bl	80017b2 <HAL_DMA_Abort_IT>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8089 	beq.w	80031d6 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030e6:	4610      	mov	r0, r2
 80030e8:	4798      	blx	r3
 80030ea:	e074      	b.n	80031d6 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	4a4e      	ldr	r2, [pc, #312]	; (800322c <I2C_ITError+0x228>)
 80030f2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fe fb5a 	bl	80017b2 <HAL_DMA_Abort_IT>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d068      	beq.n	80031d6 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b40      	cmp	r3, #64	; 0x40
 8003110:	d10b      	bne.n	800312a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0201 	bic.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800314c:	4610      	mov	r0, r2
 800314e:	4798      	blx	r3
 8003150:	e041      	b.n	80031d6 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b60      	cmp	r3, #96	; 0x60
 800315c:	d125      	bne.n	80031aa <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	d10b      	bne.n	8003192 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fe ffdd 	bl	8002162 <HAL_I2C_AbortCpltCallback>
 80031a8:	e015      	b.n	80031d6 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d10b      	bne.n	80031d0 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7fe ffbd 	bl	8002150 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031dc:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d11b      	bne.n	8003222 <I2C_ITError+0x21e>
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	2b28      	cmp	r3, #40	; 0x28
 80031ee:	d118      	bne.n	8003222 <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031fe:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <I2C_ITError+0x22c>)
 8003204:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7fe ff7c 	bl	800211a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	08003235 	.word	0x08003235
 8003230:	ffff0000 	.word	0xffff0000

08003234 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324e:	2200      	movs	r2, #0
 8003250:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	2200      	movs	r2, #0
 8003258:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003268:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	2200      	movs	r2, #0
 8003276:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	2200      	movs	r2, #0
 800327e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b60      	cmp	r3, #96	; 0x60
 800329a:	d10e      	bne.n	80032ba <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7fe ff55 	bl	8002162 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032b8:	e027      	b.n	800330a <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032ba:	7afb      	ldrb	r3, [r7, #11]
 80032bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032c0:	2b28      	cmp	r3, #40	; 0x28
 80032c2:	d117      	bne.n	80032f4 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2228      	movs	r2, #40	; 0x28
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032f2:	e007      	b.n	8003304 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f7fe ff23 	bl	8002150 <HAL_I2C_ErrorCallback>
}
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003322:	d103      	bne.n	800332c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800332a:	e007      	b.n	800333c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003334:	d102      	bne.n	800333c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2208      	movs	r2, #8
 800333a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
	...

08003348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e31d      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800335a:	4b94      	ldr	r3, [pc, #592]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003364:	4b91      	ldr	r3, [pc, #580]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d07b      	beq.n	8003472 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d006      	beq.n	800338e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d10f      	bne.n	80033a6 <HAL_RCC_OscConfig+0x5e>
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338c:	d10b      	bne.n	80033a6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338e:	4b87      	ldr	r3, [pc, #540]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d06a      	beq.n	8003470 <HAL_RCC_OscConfig+0x128>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d166      	bne.n	8003470 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e2f7      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d106      	bne.n	80033bc <HAL_RCC_OscConfig+0x74>
 80033ae:	4b7f      	ldr	r3, [pc, #508]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a7e      	ldr	r2, [pc, #504]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e02d      	b.n	8003418 <HAL_RCC_OscConfig+0xd0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10c      	bne.n	80033de <HAL_RCC_OscConfig+0x96>
 80033c4:	4b79      	ldr	r3, [pc, #484]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a78      	ldr	r2, [pc, #480]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b76      	ldr	r3, [pc, #472]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a75      	ldr	r2, [pc, #468]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	e01c      	b.n	8003418 <HAL_RCC_OscConfig+0xd0>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b05      	cmp	r3, #5
 80033e4:	d10c      	bne.n	8003400 <HAL_RCC_OscConfig+0xb8>
 80033e6:	4b71      	ldr	r3, [pc, #452]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a70      	ldr	r2, [pc, #448]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80033ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	4b6e      	ldr	r3, [pc, #440]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a6d      	ldr	r2, [pc, #436]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e00b      	b.n	8003418 <HAL_RCC_OscConfig+0xd0>
 8003400:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a69      	ldr	r2, [pc, #420]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 8003406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	4b67      	ldr	r3, [pc, #412]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a66      	ldr	r2, [pc, #408]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 8003412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d013      	beq.n	8003448 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fd fe2c 	bl	800107c <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003428:	f7fd fe28 	bl	800107c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e2ad      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800343a:	4b5c      	ldr	r3, [pc, #368]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0xe0>
 8003446:	e014      	b.n	8003472 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fd fe18 	bl	800107c <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003450:	f7fd fe14 	bl	800107c <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	; 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e299      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003462:	4b52      	ldr	r3, [pc, #328]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x108>
 800346e:	e000      	b.n	8003472 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d05a      	beq.n	8003534 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d005      	beq.n	8003490 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d119      	bne.n	80034be <HAL_RCC_OscConfig+0x176>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d116      	bne.n	80034be <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003490:	4b46      	ldr	r3, [pc, #280]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_OscConfig+0x160>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e276      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a8:	4b40      	ldr	r3, [pc, #256]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	493d      	ldr	r1, [pc, #244]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034bc:	e03a      	b.n	8003534 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d020      	beq.n	8003508 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c6:	4b3a      	ldr	r3, [pc, #232]	; (80035b0 <HAL_RCC_OscConfig+0x268>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fd fdd6 	bl	800107c <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d4:	f7fd fdd2 	bl	800107c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e257      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034e6:	4b31      	ldr	r3, [pc, #196]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f2:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	492a      	ldr	r1, [pc, #168]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
 8003506:	e015      	b.n	8003534 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003508:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <HAL_RCC_OscConfig+0x268>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350e:	f7fd fdb5 	bl	800107c <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003516:	f7fd fdb1 	bl	800107c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e236      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003528:	4b20      	ldr	r3, [pc, #128]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80b8 	beq.w	80036b2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d170      	bne.n	800362a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003548:	4b18      	ldr	r3, [pc, #96]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_OscConfig+0x218>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e21a      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1a      	ldr	r2, [r3, #32]
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800356c:	429a      	cmp	r2, r3
 800356e:	d921      	bls.n	80035b4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fc05 	bl	8003d84 <RCC_SetFlashLatencyFromMSIRange>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e208      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	4906      	ldr	r1, [pc, #24]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	061b      	lsls	r3, r3, #24
 80035a4:	4901      	ldr	r1, [pc, #4]	; (80035ac <HAL_RCC_OscConfig+0x264>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	604b      	str	r3, [r1, #4]
 80035aa:	e020      	b.n	80035ee <HAL_RCC_OscConfig+0x2a6>
 80035ac:	40023800 	.word	0x40023800
 80035b0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035b4:	4ba4      	ldr	r3, [pc, #656]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	49a1      	ldr	r1, [pc, #644]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035c6:	4ba0      	ldr	r3, [pc, #640]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	061b      	lsls	r3, r3, #24
 80035d4:	499c      	ldr	r1, [pc, #624]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fbd0 	bl	8003d84 <RCC_SetFlashLatencyFromMSIRange>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e1d3      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	0b5b      	lsrs	r3, r3, #13
 80035f4:	3301      	adds	r3, #1
 80035f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80035fe:	4a92      	ldr	r2, [pc, #584]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 8003600:	6892      	ldr	r2, [r2, #8]
 8003602:	0912      	lsrs	r2, r2, #4
 8003604:	f002 020f 	and.w	r2, r2, #15
 8003608:	4990      	ldr	r1, [pc, #576]	; (800384c <HAL_RCC_OscConfig+0x504>)
 800360a:	5c8a      	ldrb	r2, [r1, r2]
 800360c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800360e:	4a90      	ldr	r2, [pc, #576]	; (8003850 <HAL_RCC_OscConfig+0x508>)
 8003610:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003612:	4b90      	ldr	r3, [pc, #576]	; (8003854 <HAL_RCC_OscConfig+0x50c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd f9e2 	bl	80009e0 <HAL_InitTick>
 800361c:	4603      	mov	r3, r0
 800361e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d045      	beq.n	80036b2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	e1b5      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d029      	beq.n	8003686 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003632:	4b89      	ldr	r3, [pc, #548]	; (8003858 <HAL_RCC_OscConfig+0x510>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fd fd20 	bl	800107c <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003640:	f7fd fd1c 	bl	800107c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e1a1      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003652:	4b7d      	ldr	r3, [pc, #500]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800365e:	4b7a      	ldr	r3, [pc, #488]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4977      	ldr	r1, [pc, #476]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003670:	4b75      	ldr	r3, [pc, #468]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	061b      	lsls	r3, r3, #24
 800367e:	4972      	ldr	r1, [pc, #456]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]
 8003684:	e015      	b.n	80036b2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003686:	4b74      	ldr	r3, [pc, #464]	; (8003858 <HAL_RCC_OscConfig+0x510>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7fd fcf6 	bl	800107c <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003694:	f7fd fcf2 	bl	800107c <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e177      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80036a6:	4b68      	ldr	r3, [pc, #416]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d030      	beq.n	8003720 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036c6:	4b65      	ldr	r3, [pc, #404]	; (800385c <HAL_RCC_OscConfig+0x514>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036cc:	f7fd fcd6 	bl	800107c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d4:	f7fd fcd2 	bl	800107c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e157      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036e6:	4b58      	ldr	r3, [pc, #352]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x38c>
 80036f2:	e015      	b.n	8003720 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036f4:	4b59      	ldr	r3, [pc, #356]	; (800385c <HAL_RCC_OscConfig+0x514>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fa:	f7fd fcbf 	bl	800107c <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003702:	f7fd fcbb 	bl	800107c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e140      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003714:	4b4c      	ldr	r3, [pc, #304]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 8003716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f0      	bne.n	8003702 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80b5 	beq.w	8003898 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372e:	2300      	movs	r3, #0
 8003730:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003732:	4b45      	ldr	r3, [pc, #276]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10d      	bne.n	800375a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373e:	4b42      	ldr	r3, [pc, #264]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	4a41      	ldr	r2, [pc, #260]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 8003744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003748:	6253      	str	r3, [r2, #36]	; 0x24
 800374a:	4b3f      	ldr	r3, [pc, #252]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003756:	2301      	movs	r3, #1
 8003758:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375a:	4b41      	ldr	r3, [pc, #260]	; (8003860 <HAL_RCC_OscConfig+0x518>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003762:	2b00      	cmp	r3, #0
 8003764:	d118      	bne.n	8003798 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003766:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <HAL_RCC_OscConfig+0x518>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a3d      	ldr	r2, [pc, #244]	; (8003860 <HAL_RCC_OscConfig+0x518>)
 800376c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003772:	f7fd fc83 	bl	800107c <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377a:	f7fd fc7f 	bl	800107c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b64      	cmp	r3, #100	; 0x64
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e104      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378c:	4b34      	ldr	r3, [pc, #208]	; (8003860 <HAL_RCC_OscConfig+0x518>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d106      	bne.n	80037ae <HAL_RCC_OscConfig+0x466>
 80037a0:	4b29      	ldr	r3, [pc, #164]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80037a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a4:	4a28      	ldr	r2, [pc, #160]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80037a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037aa:	6353      	str	r3, [r2, #52]	; 0x34
 80037ac:	e02d      	b.n	800380a <HAL_RCC_OscConfig+0x4c2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x488>
 80037b6:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80037b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ba:	4a23      	ldr	r2, [pc, #140]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80037bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037c0:	6353      	str	r3, [r2, #52]	; 0x34
 80037c2:	4b21      	ldr	r3, [pc, #132]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80037c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c6:	4a20      	ldr	r2, [pc, #128]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80037c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037cc:	6353      	str	r3, [r2, #52]	; 0x34
 80037ce:	e01c      	b.n	800380a <HAL_RCC_OscConfig+0x4c2>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	d10c      	bne.n	80037f2 <HAL_RCC_OscConfig+0x4aa>
 80037d8:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80037da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037dc:	4a1a      	ldr	r2, [pc, #104]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80037de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e2:	6353      	str	r3, [r2, #52]	; 0x34
 80037e4:	4b18      	ldr	r3, [pc, #96]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	4a17      	ldr	r2, [pc, #92]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ee:	6353      	str	r3, [r2, #52]	; 0x34
 80037f0:	e00b      	b.n	800380a <HAL_RCC_OscConfig+0x4c2>
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80037f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f6:	4a14      	ldr	r2, [pc, #80]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 80037f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037fc:	6353      	str	r3, [r2, #52]	; 0x34
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 8003800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003802:	4a11      	ldr	r2, [pc, #68]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 8003804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003808:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d015      	beq.n	800383e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003812:	f7fd fc33 	bl	800107c <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003818:	e00a      	b.n	8003830 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800381a:	f7fd fc2f 	bl	800107c <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	f241 3288 	movw	r2, #5000	; 0x1388
 8003828:	4293      	cmp	r3, r2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e0b2      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ee      	beq.n	800381a <HAL_RCC_OscConfig+0x4d2>
 800383c:	e023      	b.n	8003886 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383e:	f7fd fc1d 	bl	800107c <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003844:	e019      	b.n	800387a <HAL_RCC_OscConfig+0x532>
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800
 800384c:	08007b60 	.word	0x08007b60
 8003850:	20000054 	.word	0x20000054
 8003854:	20000058 	.word	0x20000058
 8003858:	42470020 	.word	0x42470020
 800385c:	42470680 	.word	0x42470680
 8003860:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003864:	f7fd fc0a 	bl	800107c <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e08d      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800387a:	4b49      	ldr	r3, [pc, #292]	; (80039a0 <HAL_RCC_OscConfig+0x658>)
 800387c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1ee      	bne.n	8003864 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003886:	7ffb      	ldrb	r3, [r7, #31]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d105      	bne.n	8003898 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388c:	4b44      	ldr	r3, [pc, #272]	; (80039a0 <HAL_RCC_OscConfig+0x658>)
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	4a43      	ldr	r2, [pc, #268]	; (80039a0 <HAL_RCC_OscConfig+0x658>)
 8003892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003896:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	2b00      	cmp	r3, #0
 800389e:	d079      	beq.n	8003994 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2b0c      	cmp	r3, #12
 80038a4:	d056      	beq.n	8003954 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d13b      	bne.n	8003926 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ae:	4b3d      	ldr	r3, [pc, #244]	; (80039a4 <HAL_RCC_OscConfig+0x65c>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fd fbe2 	bl	800107c <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fd fbde 	bl	800107c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e063      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038ce:	4b34      	ldr	r3, [pc, #208]	; (80039a0 <HAL_RCC_OscConfig+0x658>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038da:	4b31      	ldr	r3, [pc, #196]	; (80039a0 <HAL_RCC_OscConfig+0x658>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	4319      	orrs	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	430b      	orrs	r3, r1
 80038f2:	492b      	ldr	r1, [pc, #172]	; (80039a0 <HAL_RCC_OscConfig+0x658>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f8:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <HAL_RCC_OscConfig+0x65c>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fd fbbd 	bl	800107c <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003906:	f7fd fbb9 	bl	800107c <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e03e      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003918:	4b21      	ldr	r3, [pc, #132]	; (80039a0 <HAL_RCC_OscConfig+0x658>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x5be>
 8003924:	e036      	b.n	8003994 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003926:	4b1f      	ldr	r3, [pc, #124]	; (80039a4 <HAL_RCC_OscConfig+0x65c>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fd fba6 	bl	800107c <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003934:	f7fd fba2 	bl	800107c <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e027      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003946:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <HAL_RCC_OscConfig+0x658>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x5ec>
 8003952:	e01f      	b.n	8003994 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e01a      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <HAL_RCC_OscConfig+0x658>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	429a      	cmp	r2, r3
 8003972:	d10d      	bne.n	8003990 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d106      	bne.n	8003990 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40023800 	.word	0x40023800
 80039a4:	42470060 	.word	0x42470060

080039a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e11a      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039bc:	4b8f      	ldr	r3, [pc, #572]	; (8003bfc <HAL_RCC_ClockConfig+0x254>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d919      	bls.n	80039fe <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <HAL_RCC_ClockConfig+0x34>
 80039d0:	4b8a      	ldr	r3, [pc, #552]	; (8003bfc <HAL_RCC_ClockConfig+0x254>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a89      	ldr	r2, [pc, #548]	; (8003bfc <HAL_RCC_ClockConfig+0x254>)
 80039d6:	f043 0304 	orr.w	r3, r3, #4
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b87      	ldr	r3, [pc, #540]	; (8003bfc <HAL_RCC_ClockConfig+0x254>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 0201 	bic.w	r2, r3, #1
 80039e4:	4985      	ldr	r1, [pc, #532]	; (8003bfc <HAL_RCC_ClockConfig+0x254>)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ec:	4b83      	ldr	r3, [pc, #524]	; (8003bfc <HAL_RCC_ClockConfig+0x254>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d001      	beq.n	80039fe <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e0f9      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a0a:	4b7d      	ldr	r3, [pc, #500]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	497a      	ldr	r1, [pc, #488]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 808e 	beq.w	8003b46 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a32:	4b73      	ldr	r3, [pc, #460]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d121      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0d7      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a4a:	4b6d      	ldr	r3, [pc, #436]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d115      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0cb      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d107      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a62:	4b67      	ldr	r3, [pc, #412]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0bf      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003a72:	4b63      	ldr	r3, [pc, #396]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0b7      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a82:	4b5f      	ldr	r3, [pc, #380]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f023 0203 	bic.w	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	495c      	ldr	r1, [pc, #368]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a94:	f7fd faf2 	bl	800107c <HAL_GetTick>
 8003a98:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d112      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa4:	f7fd faea 	bl	800107c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e09b      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003aba:	4b51      	ldr	r3, [pc, #324]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 030c 	and.w	r3, r3, #12
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d1ee      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0xfc>
 8003ac6:	e03e      	b.n	8003b46 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d112      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad2:	f7fd fad3 	bl	800107c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e084      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ae8:	4b45      	ldr	r3, [pc, #276]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 030c 	and.w	r3, r3, #12
 8003af0:	2b0c      	cmp	r3, #12
 8003af2:	d1ee      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0x12a>
 8003af4:	e027      	b.n	8003b46 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d11d      	bne.n	8003b3a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fd fabc 	bl	800107c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e06d      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b16:	4b3a      	ldr	r3, [pc, #232]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d1ee      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x158>
 8003b22:	e010      	b.n	8003b46 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b24:	f7fd faaa 	bl	800107c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e05b      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b3a:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1ee      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b46:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <HAL_RCC_ClockConfig+0x254>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d219      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d105      	bne.n	8003b66 <HAL_RCC_ClockConfig+0x1be>
 8003b5a:	4b28      	ldr	r3, [pc, #160]	; (8003bfc <HAL_RCC_ClockConfig+0x254>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a27      	ldr	r2, [pc, #156]	; (8003bfc <HAL_RCC_ClockConfig+0x254>)
 8003b60:	f043 0304 	orr.w	r3, r3, #4
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <HAL_RCC_ClockConfig+0x254>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 0201 	bic.w	r2, r3, #1
 8003b6e:	4923      	ldr	r1, [pc, #140]	; (8003bfc <HAL_RCC_ClockConfig+0x254>)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b21      	ldr	r3, [pc, #132]	; (8003bfc <HAL_RCC_ClockConfig+0x254>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e034      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b94:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4917      	ldr	r1, [pc, #92]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb2:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	490f      	ldr	r1, [pc, #60]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bc6:	f000 f823 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8003bca:	4601      	mov	r1, r0
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <HAL_RCC_ClockConfig+0x258>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	4a0b      	ldr	r2, [pc, #44]	; (8003c04 <HAL_RCC_ClockConfig+0x25c>)
 8003bd8:	5cd3      	ldrb	r3, [r2, r3]
 8003bda:	fa21 f303 	lsr.w	r3, r1, r3
 8003bde:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003be2:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <HAL_RCC_ClockConfig+0x264>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fc fefa 	bl	80009e0 <HAL_InitTick>
 8003bec:	4603      	mov	r3, r0
 8003bee:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bf0:	7afb      	ldrb	r3, [r7, #11]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023c00 	.word	0x40023c00
 8003c00:	40023800 	.word	0x40023800
 8003c04:	08007b60 	.word	0x08007b60
 8003c08:	20000054 	.word	0x20000054
 8003c0c:	20000058 	.word	0x20000058

08003c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003c16:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d006      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x24>
 8003c26:	2b0c      	cmp	r3, #12
 8003c28:	d007      	beq.n	8003c3a <HAL_RCC_GetSysClockFreq+0x2a>
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d12c      	bne.n	8003c88 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c2e:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c30:	613b      	str	r3, [r7, #16]
      break;
 8003c32:	e037      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c34:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003c36:	613b      	str	r3, [r7, #16]
      break;
 8003c38:	e034      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	0c9b      	lsrs	r3, r3, #18
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	4a1e      	ldr	r2, [pc, #120]	; (8003cbc <HAL_RCC_GetSysClockFreq+0xac>)
 8003c44:	5cd3      	ldrb	r3, [r2, r3]
 8003c46:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	0d9b      	lsrs	r3, r3, #22
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	3301      	adds	r3, #1
 8003c52:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c54:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4a15      	ldr	r2, [pc, #84]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003c64:	fb02 f203 	mul.w	r2, r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e007      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4a0f      	ldr	r2, [pc, #60]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c76:	fb02 f203 	mul.w	r2, r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	613b      	str	r3, [r7, #16]
      break;
 8003c86:	e00d      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	0b5b      	lsrs	r3, r3, #13
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	3301      	adds	r3, #1
 8003c98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	613b      	str	r3, [r7, #16]
      break;
 8003ca2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ca4:	693b      	ldr	r3, [r7, #16]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	00f42400 	.word	0x00f42400
 8003cb8:	007a1200 	.word	0x007a1200
 8003cbc:	08007b54 	.word	0x08007b54

08003cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc4:	4b02      	ldr	r3, [pc, #8]	; (8003cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	20000054 	.word	0x20000054

08003cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cd8:	f7ff fff2 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003cdc:	4601      	mov	r1, r0
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	4a03      	ldr	r2, [pc, #12]	; (8003cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cea:	5cd3      	ldrb	r3, [r2, r3]
 8003cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	08007b70 	.word	0x08007b70

08003cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d00:	f7ff ffde 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003d04:	4601      	mov	r1, r0
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	0adb      	lsrs	r3, r3, #11
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4a03      	ldr	r2, [pc, #12]	; (8003d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d12:	5cd3      	ldrb	r3, [r2, r3]
 8003d14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	08007b70 	.word	0x08007b70

08003d24 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	220f      	movs	r2, #15
 8003d32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d34:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <HAL_RCC_GetClockConfig+0x58>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0203 	and.w	r2, r3, #3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d40:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <HAL_RCC_GetClockConfig+0x58>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <HAL_RCC_GetClockConfig+0x58>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <HAL_RCC_GetClockConfig+0x58>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	08db      	lsrs	r3, r3, #3
 8003d5e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <HAL_RCC_GetClockConfig+0x5c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0201 	and.w	r2, r3, #1
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	601a      	str	r2, [r3, #0]
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	40023c00 	.word	0x40023c00

08003d84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d90:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d12c      	bne.n	8003df6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d9c:	4b26      	ldr	r3, [pc, #152]	; (8003e38 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003da8:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	e016      	b.n	8003de2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db4:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	4a1f      	ldr	r2, [pc, #124]	; (8003e38 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	6253      	str	r3, [r2, #36]	; 0x24
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003dd4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd6:	4b18      	ldr	r3, [pc, #96]	; (8003e38 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	4a17      	ldr	r2, [pc, #92]	; (8003e38 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003de8:	d105      	bne.n	8003df6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003df0:	d101      	bne.n	8003df6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003df2:	2301      	movs	r3, #1
 8003df4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d105      	bne.n	8003e08 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003dfc:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a0f      	ldr	r2, [pc, #60]	; (8003e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e02:	f043 0304 	orr.w	r3, r3, #4
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f023 0201 	bic.w	r2, r3, #1
 8003e10:	490b      	ldr	r1, [pc, #44]	; (8003e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d001      	beq.n	8003e2a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	40023c00 	.word	0x40023c00

08003e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e01d      	b.n	8003e92 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f815 	bl	8003e9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4619      	mov	r1, r3
 8003e82:	4610      	mov	r0, r2
 8003e84:	f000 fa26 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b06      	cmp	r3, #6
 8003ed4:	d007      	beq.n	8003ee6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e01d      	b.n	8003f40 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d106      	bne.n	8003f1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fc ff21 	bl	8000d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f000 f9cf 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d122      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d11b      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0202 	mvn.w	r2, #2
 8003f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f987 	bl	800429e <HAL_TIM_IC_CaptureCallback>
 8003f90:	e005      	b.n	8003f9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f97a 	bl	800428c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f989 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d122      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d11b      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f06f 0204 	mvn.w	r2, #4
 8003fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f95d 	bl	800429e <HAL_TIM_IC_CaptureCallback>
 8003fe4:	e005      	b.n	8003ff2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f950 	bl	800428c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f95f 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b08      	cmp	r3, #8
 8004004:	d122      	bne.n	800404c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b08      	cmp	r3, #8
 8004012:	d11b      	bne.n	800404c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0208 	mvn.w	r2, #8
 800401c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2204      	movs	r2, #4
 8004022:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f933 	bl	800429e <HAL_TIM_IC_CaptureCallback>
 8004038:	e005      	b.n	8004046 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f926 	bl	800428c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f935 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b10      	cmp	r3, #16
 8004058:	d122      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b10      	cmp	r3, #16
 8004066:	d11b      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0210 	mvn.w	r2, #16
 8004070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2208      	movs	r2, #8
 8004076:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f909 	bl	800429e <HAL_TIM_IC_CaptureCallback>
 800408c:	e005      	b.n	800409a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f8fc 	bl	800428c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f90b 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d10e      	bne.n	80040cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d107      	bne.n	80040cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0201 	mvn.w	r2, #1
 80040c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fc fc3e 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	d10e      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d107      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f8e5 	bl	80042c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004116:	2302      	movs	r3, #2
 8004118:	e0b4      	b.n	8004284 <HAL_TIM_PWM_ConfigChannel+0x184>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b0c      	cmp	r3, #12
 800412e:	f200 809f 	bhi.w	8004270 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004132:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004138:	0800416d 	.word	0x0800416d
 800413c:	08004271 	.word	0x08004271
 8004140:	08004271 	.word	0x08004271
 8004144:	08004271 	.word	0x08004271
 8004148:	080041ad 	.word	0x080041ad
 800414c:	08004271 	.word	0x08004271
 8004150:	08004271 	.word	0x08004271
 8004154:	08004271 	.word	0x08004271
 8004158:	080041ef 	.word	0x080041ef
 800415c:	08004271 	.word	0x08004271
 8004160:	08004271 	.word	0x08004271
 8004164:	08004271 	.word	0x08004271
 8004168:	0800422f 	.word	0x0800422f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	4618      	mov	r0, r3
 8004174:	f000 f91e 	bl	80043b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0208 	orr.w	r2, r2, #8
 8004186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0204 	bic.w	r2, r2, #4
 8004196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6999      	ldr	r1, [r3, #24]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	619a      	str	r2, [r3, #24]
      break;
 80041aa:	e062      	b.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f93a 	bl	800442c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6999      	ldr	r1, [r3, #24]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	021a      	lsls	r2, r3, #8
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	619a      	str	r2, [r3, #24]
      break;
 80041ec:	e041      	b.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f957 	bl	80044a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0208 	orr.w	r2, r2, #8
 8004208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0204 	bic.w	r2, r2, #4
 8004218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69d9      	ldr	r1, [r3, #28]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	61da      	str	r2, [r3, #28]
      break;
 800422c:	e021      	b.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f974 	bl	8004522 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69da      	ldr	r2, [r3, #28]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69d9      	ldr	r1, [r3, #28]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	021a      	lsls	r2, r3, #8
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	61da      	str	r2, [r3, #28]
      break;
 800426e:	e000      	b.n	8004272 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004270:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr

0800429e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr

080042c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr

080042d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ea:	d00f      	beq.n	800430c <TIM_Base_SetConfig+0x38>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a2b      	ldr	r2, [pc, #172]	; (800439c <TIM_Base_SetConfig+0xc8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00b      	beq.n	800430c <TIM_Base_SetConfig+0x38>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a2a      	ldr	r2, [pc, #168]	; (80043a0 <TIM_Base_SetConfig+0xcc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d007      	beq.n	800430c <TIM_Base_SetConfig+0x38>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a29      	ldr	r2, [pc, #164]	; (80043a4 <TIM_Base_SetConfig+0xd0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d003      	beq.n	800430c <TIM_Base_SetConfig+0x38>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a28      	ldr	r2, [pc, #160]	; (80043a8 <TIM_Base_SetConfig+0xd4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d108      	bne.n	800431e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d017      	beq.n	8004356 <TIM_Base_SetConfig+0x82>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a1c      	ldr	r2, [pc, #112]	; (800439c <TIM_Base_SetConfig+0xc8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <TIM_Base_SetConfig+0x82>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <TIM_Base_SetConfig+0xcc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00f      	beq.n	8004356 <TIM_Base_SetConfig+0x82>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a1a      	ldr	r2, [pc, #104]	; (80043a4 <TIM_Base_SetConfig+0xd0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00b      	beq.n	8004356 <TIM_Base_SetConfig+0x82>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a19      	ldr	r2, [pc, #100]	; (80043a8 <TIM_Base_SetConfig+0xd4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d007      	beq.n	8004356 <TIM_Base_SetConfig+0x82>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a18      	ldr	r2, [pc, #96]	; (80043ac <TIM_Base_SetConfig+0xd8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d003      	beq.n	8004356 <TIM_Base_SetConfig+0x82>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a17      	ldr	r2, [pc, #92]	; (80043b0 <TIM_Base_SetConfig+0xdc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d108      	bne.n	8004368 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	615a      	str	r2, [r3, #20]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr
 800439c:	40000400 	.word	0x40000400
 80043a0:	40000800 	.word	0x40000800
 80043a4:	40000c00 	.word	0x40000c00
 80043a8:	40010800 	.word	0x40010800
 80043ac:	40010c00 	.word	0x40010c00
 80043b0:	40011000 	.word	0x40011000

080043b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f023 0201 	bic.w	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0303 	bic.w	r3, r3, #3
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f023 0302 	bic.w	r3, r3, #2
 80043fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f023 0210 	bic.w	r2, r3, #16
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800445a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	021b      	lsls	r3, r3, #8
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f023 0320 	bic.w	r3, r3, #32
 8004476:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	621a      	str	r2, [r3, #32]
}
 8004518:	bf00      	nop
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004522:	b480      	push	{r7}
 8004524:	b087      	sub	sp, #28
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004550:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004558:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	031b      	lsls	r3, r3, #12
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	621a      	str	r2, [r3, #32]
}
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e032      	b.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2202      	movs	r2, #2
 80045c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ee:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e03f      	b.n	80046b8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7fc fc79 	bl	8000f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2224      	movs	r2, #36	; 0x24
 8004656:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004668:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa5e 	bl	8004b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800467e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800468e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800469e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10d      	bne.n	8004712 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <HAL_UART_IRQHandler+0x52>
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f98d 	bl	8004a2a <UART_Receive_IT>
      return;
 8004710:	e0cc      	b.n	80048ac <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80ab 	beq.w	8004870 <HAL_UART_IRQHandler+0x1b0>
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d105      	bne.n	8004730 <HAL_UART_IRQHandler+0x70>
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80a0 	beq.w	8004870 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_UART_IRQHandler+0x90>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004748:	f043 0201 	orr.w	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_UART_IRQHandler+0xb0>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004768:	f043 0202 	orr.w	r2, r3, #2
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_UART_IRQHandler+0xd0>
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004788:	f043 0204 	orr.w	r2, r3, #4
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_UART_IRQHandler+0xf0>
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a8:	f043 0208 	orr.w	r2, r3, #8
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d078      	beq.n	80048aa <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <HAL_UART_IRQHandler+0x112>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f92c 	bl	8004a2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047dc:	2b40      	cmp	r3, #64	; 0x40
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <HAL_UART_IRQHandler+0x13a>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d031      	beq.n	800485e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f877 	bl	80048ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	d123      	bne.n	8004856 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800481c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004822:	2b00      	cmp	r3, #0
 8004824:	d013      	beq.n	800484e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	4a22      	ldr	r2, [pc, #136]	; (80048b4 <HAL_UART_IRQHandler+0x1f4>)
 800482c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	4618      	mov	r0, r3
 8004834:	f7fc ffbd 	bl	80017b2 <HAL_DMA_Abort_IT>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004848:	4610      	mov	r0, r2
 800484a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484c:	e00e      	b.n	800486c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f844 	bl	80048dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	e00a      	b.n	800486c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f840 	bl	80048dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800485c:	e006      	b.n	800486c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f83c 	bl	80048dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800486a:	e01e      	b.n	80048aa <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486c:	bf00      	nop
    return;
 800486e:	e01c      	b.n	80048aa <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_UART_IRQHandler+0x1cc>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f863 	bl	8004950 <UART_Transmit_IT>
    return;
 800488a:	e00f      	b.n	80048ac <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_UART_IRQHandler+0x1ec>
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f8aa 	bl	80049fa <UART_EndTransmit_IT>
    return;
 80048a6:	bf00      	nop
 80048a8:	e000      	b.n	80048ac <HAL_UART_IRQHandler+0x1ec>
    return;
 80048aa:	bf00      	nop
  }
}
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	08004929 	.word	0x08004929

080048b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr

080048ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004904:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695a      	ldr	r2, [r3, #20]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0201 	bic.w	r2, r2, #1
 8004914:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7ff ffca 	bl	80048dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004948:	bf00      	nop
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b21      	cmp	r3, #33	; 0x21
 8004962:	d144      	bne.n	80049ee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496c:	d11a      	bne.n	80049a4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004982:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d105      	bne.n	8004998 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	1c9a      	adds	r2, r3, #2
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	621a      	str	r2, [r3, #32]
 8004996:	e00e      	b.n	80049b6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	621a      	str	r2, [r3, #32]
 80049a2:	e008      	b.n	80049b6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	1c59      	adds	r1, r3, #1
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6211      	str	r1, [r2, #32]
 80049ae:	781a      	ldrb	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29b      	uxth	r3, r3
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	4619      	mov	r1, r3
 80049c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10f      	bne.n	80049ea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	e000      	b.n	80049f0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80049ee:	2302      	movs	r3, #2
  }
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr

080049fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff ff4c 	bl	80048b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b22      	cmp	r3, #34	; 0x22
 8004a3c:	d171      	bne.n	8004b22 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a46:	d123      	bne.n	8004a90 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10e      	bne.n	8004a74 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	1c9a      	adds	r2, r3, #2
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	629a      	str	r2, [r3, #40]	; 0x28
 8004a72:	e029      	b.n	8004ac8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	629a      	str	r2, [r3, #40]	; 0x28
 8004a8e:	e01b      	b.n	8004ac8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10a      	bne.n	8004aae <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6858      	ldr	r0, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	1c59      	adds	r1, r3, #1
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6291      	str	r1, [r2, #40]	; 0x28
 8004aa8:	b2c2      	uxtb	r2, r0
 8004aaa:	701a      	strb	r2, [r3, #0]
 8004aac:	e00c      	b.n	8004ac8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	1c58      	adds	r0, r3, #1
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	6288      	str	r0, [r1, #40]	; 0x28
 8004ac0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d120      	bne.n	8004b1e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0220 	bic.w	r2, r2, #32
 8004aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004afa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695a      	ldr	r2, [r3, #20]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff fed8 	bl	80048ca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e002      	b.n	8004b24 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e000      	b.n	8004b24 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004b22:	2302      	movs	r3, #2
  }
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b6c:	f023 030c 	bic.w	r3, r3, #12
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	68f9      	ldr	r1, [r7, #12]
 8004b76:	430b      	orrs	r3, r1
 8004b78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699a      	ldr	r2, [r3, #24]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b98:	f040 80a5 	bne.w	8004ce6 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4aa4      	ldr	r2, [pc, #656]	; (8004e34 <UART_SetConfig+0x308>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d14f      	bne.n	8004c46 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ba6:	f7ff f8a9 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 8004baa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009a      	lsls	r2, r3, #2
 8004bb6:	441a      	add	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc2:	4a9d      	ldr	r2, [pc, #628]	; (8004e38 <UART_SetConfig+0x30c>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	0119      	lsls	r1, r3, #4
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009a      	lsls	r2, r3, #2
 8004bd6:	441a      	add	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	fbb2 f2f3 	udiv	r2, r2, r3
 8004be2:	4b95      	ldr	r3, [pc, #596]	; (8004e38 <UART_SetConfig+0x30c>)
 8004be4:	fba3 0302 	umull	r0, r3, r3, r2
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	2064      	movs	r0, #100	; 0x64
 8004bec:	fb00 f303 	mul.w	r3, r0, r3
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	3332      	adds	r3, #50	; 0x32
 8004bf6:	4a90      	ldr	r2, [pc, #576]	; (8004e38 <UART_SetConfig+0x30c>)
 8004bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c04:	4419      	add	r1, r3
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009a      	lsls	r2, r3, #2
 8004c10:	441a      	add	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c1c:	4b86      	ldr	r3, [pc, #536]	; (8004e38 <UART_SetConfig+0x30c>)
 8004c1e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	2064      	movs	r0, #100	; 0x64
 8004c26:	fb00 f303 	mul.w	r3, r0, r3
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	3332      	adds	r3, #50	; 0x32
 8004c30:	4a81      	ldr	r2, [pc, #516]	; (8004e38 <UART_SetConfig+0x30c>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	f003 0207 	and.w	r2, r3, #7
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	440a      	add	r2, r1
 8004c42:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004c44:	e0f1      	b.n	8004e2a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c46:	f7ff f845 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 8004c4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	009a      	lsls	r2, r3, #2
 8004c56:	441a      	add	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c62:	4a75      	ldr	r2, [pc, #468]	; (8004e38 <UART_SetConfig+0x30c>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	0119      	lsls	r1, r3, #4
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	009a      	lsls	r2, r3, #2
 8004c76:	441a      	add	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c82:	4b6d      	ldr	r3, [pc, #436]	; (8004e38 <UART_SetConfig+0x30c>)
 8004c84:	fba3 0302 	umull	r0, r3, r3, r2
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	2064      	movs	r0, #100	; 0x64
 8004c8c:	fb00 f303 	mul.w	r3, r0, r3
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	3332      	adds	r3, #50	; 0x32
 8004c96:	4a68      	ldr	r2, [pc, #416]	; (8004e38 <UART_SetConfig+0x30c>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ca4:	4419      	add	r1, r3
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	009a      	lsls	r2, r3, #2
 8004cb0:	441a      	add	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cbc:	4b5e      	ldr	r3, [pc, #376]	; (8004e38 <UART_SetConfig+0x30c>)
 8004cbe:	fba3 0302 	umull	r0, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2064      	movs	r0, #100	; 0x64
 8004cc6:	fb00 f303 	mul.w	r3, r0, r3
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	3332      	adds	r3, #50	; 0x32
 8004cd0:	4a59      	ldr	r2, [pc, #356]	; (8004e38 <UART_SetConfig+0x30c>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	f003 0207 	and.w	r2, r3, #7
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	440a      	add	r2, r1
 8004ce2:	609a      	str	r2, [r3, #8]
}
 8004ce4:	e0a1      	b.n	8004e2a <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a52      	ldr	r2, [pc, #328]	; (8004e34 <UART_SetConfig+0x308>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d14e      	bne.n	8004d8e <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cf0:	f7ff f804 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 8004cf4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009a      	lsls	r2, r3, #2
 8004d00:	441a      	add	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0c:	4a4a      	ldr	r2, [pc, #296]	; (8004e38 <UART_SetConfig+0x30c>)
 8004d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	0119      	lsls	r1, r3, #4
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009a      	lsls	r2, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d2c:	4b42      	ldr	r3, [pc, #264]	; (8004e38 <UART_SetConfig+0x30c>)
 8004d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	2064      	movs	r0, #100	; 0x64
 8004d36:	fb00 f303 	mul.w	r3, r0, r3
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	3332      	adds	r3, #50	; 0x32
 8004d40:	4a3d      	ldr	r2, [pc, #244]	; (8004e38 <UART_SetConfig+0x30c>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d4c:	4419      	add	r1, r3
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009a      	lsls	r2, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d64:	4b34      	ldr	r3, [pc, #208]	; (8004e38 <UART_SetConfig+0x30c>)
 8004d66:	fba3 0302 	umull	r0, r3, r3, r2
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2064      	movs	r0, #100	; 0x64
 8004d6e:	fb00 f303 	mul.w	r3, r0, r3
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	3332      	adds	r3, #50	; 0x32
 8004d78:	4a2f      	ldr	r2, [pc, #188]	; (8004e38 <UART_SetConfig+0x30c>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	f003 020f 	and.w	r2, r3, #15
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	440a      	add	r2, r1
 8004d8a:	609a      	str	r2, [r3, #8]
}
 8004d8c:	e04d      	b.n	8004e2a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d8e:	f7fe ffa1 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 8004d92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009a      	lsls	r2, r3, #2
 8004d9e:	441a      	add	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	4a23      	ldr	r2, [pc, #140]	; (8004e38 <UART_SetConfig+0x30c>)
 8004dac:	fba2 2303 	umull	r2, r3, r2, r3
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	0119      	lsls	r1, r3, #4
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	009a      	lsls	r2, r3, #2
 8004dbe:	441a      	add	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dca:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <UART_SetConfig+0x30c>)
 8004dcc:	fba3 0302 	umull	r0, r3, r3, r2
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	2064      	movs	r0, #100	; 0x64
 8004dd4:	fb00 f303 	mul.w	r3, r0, r3
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	3332      	adds	r3, #50	; 0x32
 8004dde:	4a16      	ldr	r2, [pc, #88]	; (8004e38 <UART_SetConfig+0x30c>)
 8004de0:	fba2 2303 	umull	r2, r3, r2, r3
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dea:	4419      	add	r1, r3
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	009a      	lsls	r2, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e02:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <UART_SetConfig+0x30c>)
 8004e04:	fba3 0302 	umull	r0, r3, r3, r2
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	2064      	movs	r0, #100	; 0x64
 8004e0c:	fb00 f303 	mul.w	r3, r0, r3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	3332      	adds	r3, #50	; 0x32
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <UART_SetConfig+0x30c>)
 8004e18:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	f003 020f 	and.w	r2, r3, #15
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	440a      	add	r2, r1
 8004e28:	609a      	str	r2, [r3, #8]
}
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40013800 	.word	0x40013800
 8004e38:	51eb851f 	.word	0x51eb851f

08004e3c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e42:	f3ef 8305 	mrs	r3, IPSR
 8004e46:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10f      	bne.n	8004e6e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e52:	607b      	str	r3, [r7, #4]
  return(result);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <osKernelInitialize+0x32>
 8004e5a:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <osKernelInitialize+0x60>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d109      	bne.n	8004e76 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e62:	f3ef 8311 	mrs	r3, BASEPRI
 8004e66:	603b      	str	r3, [r7, #0]
  return(result);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004e6e:	f06f 0305 	mvn.w	r3, #5
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e00c      	b.n	8004e90 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <osKernelInitialize+0x60>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d105      	bne.n	8004e8a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004e7e:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <osKernelInitialize+0x60>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e002      	b.n	8004e90 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e90:	68fb      	ldr	r3, [r7, #12]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr
 8004e9c:	20000080 	.word	0x20000080

08004ea0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ea6:	f3ef 8305 	mrs	r3, IPSR
 8004eaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10f      	bne.n	8004ed2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb6:	607b      	str	r3, [r7, #4]
  return(result);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <osKernelStart+0x32>
 8004ebe:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <osKernelStart+0x64>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d109      	bne.n	8004eda <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ec6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eca:	603b      	str	r3, [r7, #0]
  return(result);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <osKernelStart+0x3a>
    stat = osErrorISR;
 8004ed2:	f06f 0305 	mvn.w	r3, #5
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e00e      	b.n	8004ef8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004eda:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <osKernelStart+0x64>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d107      	bne.n	8004ef2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004ee2:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <osKernelStart+0x64>)
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004ee8:	f001 f8ba 	bl	8006060 <vTaskStartScheduler>
      stat = osOK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e002      	b.n	8004ef8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000080 	.word	0x20000080

08004f08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b092      	sub	sp, #72	; 0x48
 8004f0c:	af04      	add	r7, sp, #16
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f18:	f3ef 8305 	mrs	r3, IPSR
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f040 8094 	bne.w	800504e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f26:	f3ef 8310 	mrs	r3, PRIMASK
 8004f2a:	623b      	str	r3, [r7, #32]
  return(result);
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f040 808d 	bne.w	800504e <osThreadNew+0x146>
 8004f34:	4b48      	ldr	r3, [pc, #288]	; (8005058 <osThreadNew+0x150>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d106      	bne.n	8004f4a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f40:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f040 8082 	bne.w	800504e <osThreadNew+0x146>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d07e      	beq.n	800504e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004f54:	2318      	movs	r3, #24
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004f58:	2300      	movs	r3, #0
 8004f5a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004f5c:	f107 031b 	add.w	r3, r7, #27
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004f62:	f04f 33ff 	mov.w	r3, #4294967295
 8004f66:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d045      	beq.n	8004ffa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <osThreadNew+0x74>
        name = attr->name;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <osThreadNew+0x9a>
 8004f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f92:	2b38      	cmp	r3, #56	; 0x38
 8004f94:	d805      	bhi.n	8004fa2 <osThreadNew+0x9a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <osThreadNew+0x9e>
        return (NULL);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e054      	b.n	8005050 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	089b      	lsrs	r3, r3, #2
 8004fb4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00e      	beq.n	8004fdc <osThreadNew+0xd4>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	2b5b      	cmp	r3, #91	; 0x5b
 8004fc4:	d90a      	bls.n	8004fdc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d006      	beq.n	8004fdc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <osThreadNew+0xd4>
        mem = 1;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fda:	e010      	b.n	8004ffe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10c      	bne.n	8004ffe <osThreadNew+0xf6>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d108      	bne.n	8004ffe <osThreadNew+0xf6>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d104      	bne.n	8004ffe <osThreadNew+0xf6>
          mem = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff8:	e001      	b.n	8004ffe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	2b01      	cmp	r3, #1
 8005002:	d110      	bne.n	8005026 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800500c:	9202      	str	r2, [sp, #8]
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005018:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 fe58 	bl	8005cd0 <xTaskCreateStatic>
 8005020:	4603      	mov	r3, r0
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e013      	b.n	800504e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	2b00      	cmp	r3, #0
 800502a:	d110      	bne.n	800504e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	b29a      	uxth	r2, r3
 8005030:	f107 0314 	add.w	r3, r7, #20
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fe9f 	bl	8005d82 <xTaskCreate>
 8005044:	4603      	mov	r3, r0
 8005046:	2b01      	cmp	r3, #1
 8005048:	d001      	beq.n	800504e <osThreadNew+0x146>
          hTask = NULL;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800504e:	697b      	ldr	r3, [r7, #20]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3738      	adds	r7, #56	; 0x38
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000080 	.word	0x20000080

0800505c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005064:	f3ef 8305 	mrs	r3, IPSR
 8005068:	613b      	str	r3, [r7, #16]
  return(result);
 800506a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10f      	bne.n	8005090 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005070:	f3ef 8310 	mrs	r3, PRIMASK
 8005074:	60fb      	str	r3, [r7, #12]
  return(result);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d109      	bne.n	8005090 <osDelay+0x34>
 800507c:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <osDelay+0x58>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b02      	cmp	r3, #2
 8005082:	d109      	bne.n	8005098 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005084:	f3ef 8311 	mrs	r3, BASEPRI
 8005088:	60bb      	str	r3, [r7, #8]
  return(result);
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <osDelay+0x3c>
    stat = osErrorISR;
 8005090:	f06f 0305 	mvn.w	r3, #5
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	e007      	b.n	80050a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 ffa8 	bl	8005ff8 <vTaskDelay>
    }
  }

  return (stat);
 80050a8:	697b      	ldr	r3, [r7, #20]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000080 	.word	0x20000080

080050b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4a06      	ldr	r2, [pc, #24]	; (80050e0 <vApplicationGetIdleTaskMemory+0x28>)
 80050c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	4a05      	ldr	r2, [pc, #20]	; (80050e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80050ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2280      	movs	r2, #128	; 0x80
 80050d4:	601a      	str	r2, [r3, #0]
}
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	20000084 	.word	0x20000084
 80050e4:	200000e0 	.word	0x200000e0

080050e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4a07      	ldr	r2, [pc, #28]	; (8005114 <vApplicationGetTimerTaskMemory+0x2c>)
 80050f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4a06      	ldr	r2, [pc, #24]	; (8005118 <vApplicationGetTimerTaskMemory+0x30>)
 80050fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005106:	601a      	str	r2, [r3, #0]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	200002e0 	.word	0x200002e0
 8005118:	2000033c 	.word	0x2000033c

0800511c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005122:	2020      	movs	r0, #32
 8005124:	f002 f9f6 	bl	8007514 <pvPortMalloc>
 8005128:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3304      	adds	r3, #4
 800513a:	4618      	mov	r0, r3
 800513c:	f000 f808 	bl	8005150 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005146:	687b      	ldr	r3, [r7, #4]
	}
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f103 0208 	add.w	r2, r3, #8
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f04f 32ff 	mov.w	r2, #4294967295
 8005168:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f103 0208 	add.w	r2, r3, #8
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f103 0208 	add.w	r2, r3, #8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bc80      	pop	{r7}
 80051a4:	4770      	bx	lr

080051a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051a6:	b480      	push	{r7}
 80051a8:	b085      	sub	sp, #20
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	601a      	str	r2, [r3, #0]
}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr

080051ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005202:	d103      	bne.n	800520c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	e00c      	b.n	8005226 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3308      	adds	r3, #8
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	e002      	b.n	800521a <vListInsert+0x2e>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	429a      	cmp	r2, r3
 8005224:	d2f6      	bcs.n	8005214 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	601a      	str	r2, [r3, #0]
}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr

0800525c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6892      	ldr	r2, [r2, #8]
 8005272:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6852      	ldr	r2, [r2, #4]
 800527c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	429a      	cmp	r2, r3
 8005286:	d103      	bne.n	8005290 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	1e5a      	subs	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr
	...

080052b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d109      	bne.n	80052d8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	60bb      	str	r3, [r7, #8]
 80052d6:	e7fe      	b.n	80052d6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80052d8:	f002 f826 	bl	8007328 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e4:	68f9      	ldr	r1, [r7, #12]
 80052e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052e8:	fb01 f303 	mul.w	r3, r1, r3
 80052ec:	441a      	add	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	3b01      	subs	r3, #1
 800530a:	68f9      	ldr	r1, [r7, #12]
 800530c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800530e:	fb01 f303 	mul.w	r3, r1, r3
 8005312:	441a      	add	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	22ff      	movs	r2, #255	; 0xff
 800531c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	22ff      	movs	r2, #255	; 0xff
 8005324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d114      	bne.n	8005358 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d01a      	beq.n	800536c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3310      	adds	r3, #16
 800533a:	4618      	mov	r0, r3
 800533c:	f001 f914 	bl	8006568 <xTaskRemoveFromEventList>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d012      	beq.n	800536c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005346:	4b0d      	ldr	r3, [pc, #52]	; (800537c <xQueueGenericReset+0xcc>)
 8005348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	e009      	b.n	800536c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3310      	adds	r3, #16
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff fef7 	bl	8005150 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3324      	adds	r3, #36	; 0x24
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff fef2 	bl	8005150 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800536c:	f002 f80a 	bl	8007384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005370:	2301      	movs	r3, #1
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	e000ed04 	.word	0xe000ed04

08005380 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08e      	sub	sp, #56	; 0x38
 8005384:	af02      	add	r7, sp, #8
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d109      	bne.n	80053a8 <xQueueGenericCreateStatic+0x28>
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a6:	e7fe      	b.n	80053a6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <xQueueGenericCreateStatic+0x42>
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
 80053c0:	e7fe      	b.n	80053c0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <xQueueGenericCreateStatic+0x4e>
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <xQueueGenericCreateStatic+0x52>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <xQueueGenericCreateStatic+0x54>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d109      	bne.n	80053ec <xQueueGenericCreateStatic+0x6c>
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	623b      	str	r3, [r7, #32]
 80053ea:	e7fe      	b.n	80053ea <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d102      	bne.n	80053f8 <xQueueGenericCreateStatic+0x78>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <xQueueGenericCreateStatic+0x7c>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <xQueueGenericCreateStatic+0x7e>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <xQueueGenericCreateStatic+0x96>
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	61fb      	str	r3, [r7, #28]
 8005414:	e7fe      	b.n	8005414 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005416:	2350      	movs	r3, #80	; 0x50
 8005418:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b50      	cmp	r3, #80	; 0x50
 800541e:	d009      	beq.n	8005434 <xQueueGenericCreateStatic+0xb4>
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	e7fe      	b.n	8005432 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00d      	beq.n	800545a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005446:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	4613      	mov	r3, r2
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f842 	bl	80054de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800545c:	4618      	mov	r0, r3
 800545e:	3730      	adds	r7, #48	; 0x30
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	; 0x28
 8005468:	af02      	add	r7, sp, #8
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4613      	mov	r3, r2
 8005470:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d109      	bne.n	800548c <xQueueGenericCreate+0x28>
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	e7fe      	b.n	800548a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005492:	2300      	movs	r3, #0
 8005494:	61fb      	str	r3, [r7, #28]
 8005496:	e004      	b.n	80054a2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	fb02 f303 	mul.w	r3, r2, r3
 80054a0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	3350      	adds	r3, #80	; 0x50
 80054a6:	4618      	mov	r0, r3
 80054a8:	f002 f834 	bl	8007514 <pvPortMalloc>
 80054ac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00f      	beq.n	80054d4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	3350      	adds	r3, #80	; 0x50
 80054b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054c2:	79fa      	ldrb	r2, [r7, #7]
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f805 	bl	80054de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80054d4:	69bb      	ldr	r3, [r7, #24]
	}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
 80054ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d103      	bne.n	80054fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	e002      	b.n	8005500 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800550c:	2101      	movs	r1, #1
 800550e:	69b8      	ldr	r0, [r7, #24]
 8005510:	f7ff fece 	bl	80052b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	78fa      	ldrb	r2, [r7, #3]
 8005518:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800551c:	bf00      	nop
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08e      	sub	sp, #56	; 0x38
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005532:	2300      	movs	r3, #0
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	2b00      	cmp	r3, #0
 800553e:	d109      	bne.n	8005554 <xQueueGenericSend+0x30>
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	62bb      	str	r3, [r7, #40]	; 0x28
 8005552:	e7fe      	b.n	8005552 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d103      	bne.n	8005562 <xQueueGenericSend+0x3e>
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <xQueueGenericSend+0x42>
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <xQueueGenericSend+0x44>
 8005566:	2300      	movs	r3, #0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d109      	bne.n	8005580 <xQueueGenericSend+0x5c>
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
 800557e:	e7fe      	b.n	800557e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d103      	bne.n	800558e <xQueueGenericSend+0x6a>
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <xQueueGenericSend+0x6e>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <xQueueGenericSend+0x70>
 8005592:	2300      	movs	r3, #0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d109      	bne.n	80055ac <xQueueGenericSend+0x88>
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	623b      	str	r3, [r7, #32]
 80055aa:	e7fe      	b.n	80055aa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055ac:	f001 f996 	bl	80068dc <xTaskGetSchedulerState>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d102      	bne.n	80055bc <xQueueGenericSend+0x98>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <xQueueGenericSend+0x9c>
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <xQueueGenericSend+0x9e>
 80055c0:	2300      	movs	r3, #0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <xQueueGenericSend+0xb6>
 80055c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	e7fe      	b.n	80055d8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055da:	f001 fea5 	bl	8007328 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d302      	bcc.n	80055f0 <xQueueGenericSend+0xcc>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d129      	bne.n	8005644 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055f6:	f000 f9ff 	bl	80059f8 <prvCopyDataToQueue>
 80055fa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	2b00      	cmp	r3, #0
 8005602:	d010      	beq.n	8005626 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	3324      	adds	r3, #36	; 0x24
 8005608:	4618      	mov	r0, r3
 800560a:	f000 ffad 	bl	8006568 <xTaskRemoveFromEventList>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d013      	beq.n	800563c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005614:	4b3f      	ldr	r3, [pc, #252]	; (8005714 <xQueueGenericSend+0x1f0>)
 8005616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	e00a      	b.n	800563c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800562c:	4b39      	ldr	r3, [pc, #228]	; (8005714 <xQueueGenericSend+0x1f0>)
 800562e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800563c:	f001 fea2 	bl	8007384 <vPortExitCritical>
				return pdPASS;
 8005640:	2301      	movs	r3, #1
 8005642:	e063      	b.n	800570c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d103      	bne.n	8005652 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800564a:	f001 fe9b 	bl	8007384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800564e:	2300      	movs	r3, #0
 8005650:	e05c      	b.n	800570c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005654:	2b00      	cmp	r3, #0
 8005656:	d106      	bne.n	8005666 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005658:	f107 0314 	add.w	r3, r7, #20
 800565c:	4618      	mov	r0, r3
 800565e:	f000 ffe5 	bl	800662c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005662:	2301      	movs	r3, #1
 8005664:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005666:	f001 fe8d 	bl	8007384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800566a:	f000 fd5d 	bl	8006128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800566e:	f001 fe5b 	bl	8007328 <vPortEnterCritical>
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005678:	b25b      	sxtb	r3, r3
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d103      	bne.n	8005688 <xQueueGenericSend+0x164>
 8005680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800568e:	b25b      	sxtb	r3, r3
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d103      	bne.n	800569e <xQueueGenericSend+0x17a>
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800569e:	f001 fe71 	bl	8007384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056a2:	1d3a      	adds	r2, r7, #4
 80056a4:	f107 0314 	add.w	r3, r7, #20
 80056a8:	4611      	mov	r1, r2
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 ffd4 	bl	8006658 <xTaskCheckForTimeOut>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d124      	bne.n	8005700 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056b8:	f000 fa96 	bl	8005be8 <prvIsQueueFull>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d018      	beq.n	80056f4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	3310      	adds	r3, #16
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	4611      	mov	r1, r2
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fefe 	bl	80064cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056d2:	f000 fa21 	bl	8005b18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056d6:	f000 fd35 	bl	8006144 <xTaskResumeAll>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f47f af7c 	bne.w	80055da <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80056e2:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <xQueueGenericSend+0x1f0>)
 80056e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	e772      	b.n	80055da <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056f6:	f000 fa0f 	bl	8005b18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056fa:	f000 fd23 	bl	8006144 <xTaskResumeAll>
 80056fe:	e76c      	b.n	80055da <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005702:	f000 fa09 	bl	8005b18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005706:	f000 fd1d 	bl	8006144 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800570a:	2300      	movs	r3, #0
		}
	}
}
 800570c:	4618      	mov	r0, r3
 800570e:	3738      	adds	r7, #56	; 0x38
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	e000ed04 	.word	0xe000ed04

08005718 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08e      	sub	sp, #56	; 0x38
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <xQueueGenericSendFromISR+0x2c>
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
 8005742:	e7fe      	b.n	8005742 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d103      	bne.n	8005752 <xQueueGenericSendFromISR+0x3a>
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <xQueueGenericSendFromISR+0x3e>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <xQueueGenericSendFromISR+0x40>
 8005756:	2300      	movs	r3, #0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d109      	bne.n	8005770 <xQueueGenericSendFromISR+0x58>
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	623b      	str	r3, [r7, #32]
 800576e:	e7fe      	b.n	800576e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d103      	bne.n	800577e <xQueueGenericSendFromISR+0x66>
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <xQueueGenericSendFromISR+0x6a>
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <xQueueGenericSendFromISR+0x6c>
 8005782:	2300      	movs	r3, #0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d109      	bne.n	800579c <xQueueGenericSendFromISR+0x84>
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	61fb      	str	r3, [r7, #28]
 800579a:	e7fe      	b.n	800579a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800579c:	f001 fe7e 	bl	800749c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057a0:	f3ef 8211 	mrs	r2, BASEPRI
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	61ba      	str	r2, [r7, #24]
 80057b6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d302      	bcc.n	80057ce <xQueueGenericSendFromISR+0xb6>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d12c      	bne.n	8005828 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	68b9      	ldr	r1, [r7, #8]
 80057dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057de:	f000 f90b 	bl	80059f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d112      	bne.n	8005812 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d016      	beq.n	8005822 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	3324      	adds	r3, #36	; 0x24
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 feb5 	bl	8006568 <xTaskRemoveFromEventList>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00e      	beq.n	8005822 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00b      	beq.n	8005822 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	e007      	b.n	8005822 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005816:	3301      	adds	r3, #1
 8005818:	b2db      	uxtb	r3, r3
 800581a:	b25a      	sxtb	r2, r3
 800581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005822:	2301      	movs	r3, #1
 8005824:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005826:	e001      	b.n	800582c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005828:	2300      	movs	r3, #0
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
 800582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005838:	4618      	mov	r0, r3
 800583a:	3738      	adds	r7, #56	; 0x38
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08c      	sub	sp, #48	; 0x30
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800584c:	2300      	movs	r3, #0
 800584e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	d109      	bne.n	800586e <xQueueReceive+0x2e>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	623b      	str	r3, [r7, #32]
 800586c:	e7fe      	b.n	800586c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d103      	bne.n	800587c <xQueueReceive+0x3c>
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <xQueueReceive+0x40>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <xQueueReceive+0x42>
 8005880:	2300      	movs	r3, #0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <xQueueReceive+0x5a>
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	e7fe      	b.n	8005898 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800589a:	f001 f81f 	bl	80068dc <xTaskGetSchedulerState>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d102      	bne.n	80058aa <xQueueReceive+0x6a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <xQueueReceive+0x6e>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <xQueueReceive+0x70>
 80058ae:	2300      	movs	r3, #0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d109      	bne.n	80058c8 <xQueueReceive+0x88>
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e7fe      	b.n	80058c6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80058c8:	f001 fd2e 	bl	8007328 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01f      	beq.n	8005918 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058dc:	f000 f8f6 	bl	8005acc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	1e5a      	subs	r2, r3, #1
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00f      	beq.n	8005910 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	3310      	adds	r3, #16
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fe37 	bl	8006568 <xTaskRemoveFromEventList>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d007      	beq.n	8005910 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005900:	4b3c      	ldr	r3, [pc, #240]	; (80059f4 <xQueueReceive+0x1b4>)
 8005902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005910:	f001 fd38 	bl	8007384 <vPortExitCritical>
				return pdPASS;
 8005914:	2301      	movs	r3, #1
 8005916:	e069      	b.n	80059ec <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d103      	bne.n	8005926 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800591e:	f001 fd31 	bl	8007384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005922:	2300      	movs	r3, #0
 8005924:	e062      	b.n	80059ec <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800592c:	f107 0310 	add.w	r3, r7, #16
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fe7b 	bl	800662c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005936:	2301      	movs	r3, #1
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800593a:	f001 fd23 	bl	8007384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800593e:	f000 fbf3 	bl	8006128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005942:	f001 fcf1 	bl	8007328 <vPortEnterCritical>
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800594c:	b25b      	sxtb	r3, r3
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d103      	bne.n	800595c <xQueueReceive+0x11c>
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005962:	b25b      	sxtb	r3, r3
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d103      	bne.n	8005972 <xQueueReceive+0x132>
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005972:	f001 fd07 	bl	8007384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005976:	1d3a      	adds	r2, r7, #4
 8005978:	f107 0310 	add.w	r3, r7, #16
 800597c:	4611      	mov	r1, r2
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fe6a 	bl	8006658 <xTaskCheckForTimeOut>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d123      	bne.n	80059d2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800598a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800598c:	f000 f916 	bl	8005bbc <prvIsQueueEmpty>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d017      	beq.n	80059c6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	3324      	adds	r3, #36	; 0x24
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	4611      	mov	r1, r2
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fd94 	bl	80064cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059a6:	f000 f8b7 	bl	8005b18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059aa:	f000 fbcb 	bl	8006144 <xTaskResumeAll>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d189      	bne.n	80058c8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80059b4:	4b0f      	ldr	r3, [pc, #60]	; (80059f4 <xQueueReceive+0x1b4>)
 80059b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	e780      	b.n	80058c8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059c8:	f000 f8a6 	bl	8005b18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059cc:	f000 fbba 	bl	8006144 <xTaskResumeAll>
 80059d0:	e77a      	b.n	80058c8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80059d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d4:	f000 f8a0 	bl	8005b18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059d8:	f000 fbb4 	bl	8006144 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059de:	f000 f8ed 	bl	8005bbc <prvIsQueueEmpty>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f43f af6f 	beq.w	80058c8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3730      	adds	r7, #48	; 0x30
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	e000ed04 	.word	0xe000ed04

080059f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a04:	2300      	movs	r3, #0
 8005a06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10d      	bne.n	8005a32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d14d      	bne.n	8005aba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 ff78 	bl	8006918 <xTaskPriorityDisinherit>
 8005a28:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	605a      	str	r2, [r3, #4]
 8005a30:	e043      	b.n	8005aba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d119      	bne.n	8005a6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6898      	ldr	r0, [r3, #8]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	461a      	mov	r2, r3
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	f001 ff5e 	bl	8007904 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	441a      	add	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d32b      	bcc.n	8005aba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	609a      	str	r2, [r3, #8]
 8005a6a:	e026      	b.n	8005aba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	68d8      	ldr	r0, [r3, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	461a      	mov	r2, r3
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	f001 ff44 	bl	8007904 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	425b      	negs	r3, r3
 8005a86:	441a      	add	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d207      	bcs.n	8005aa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	425b      	negs	r3, r3
 8005aa2:	441a      	add	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d105      	bne.n	8005aba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ac2:	697b      	ldr	r3, [r7, #20]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d018      	beq.n	8005b10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	441a      	add	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d303      	bcc.n	8005b00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68d9      	ldr	r1, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6838      	ldr	r0, [r7, #0]
 8005b0c:	f001 fefa 	bl	8007904 <memcpy>
	}
}
 8005b10:	bf00      	nop
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b20:	f001 fc02 	bl	8007328 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b2c:	e011      	b.n	8005b52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d012      	beq.n	8005b5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3324      	adds	r3, #36	; 0x24
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fd14 	bl	8006568 <xTaskRemoveFromEventList>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b46:	f000 fde7 	bl	8006718 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	dce9      	bgt.n	8005b2e <prvUnlockQueue+0x16>
 8005b5a:	e000      	b.n	8005b5e <prvUnlockQueue+0x46>
					break;
 8005b5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	22ff      	movs	r2, #255	; 0xff
 8005b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b66:	f001 fc0d 	bl	8007384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b6a:	f001 fbdd 	bl	8007328 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b76:	e011      	b.n	8005b9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d012      	beq.n	8005ba6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3310      	adds	r3, #16
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fcef 	bl	8006568 <xTaskRemoveFromEventList>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b90:	f000 fdc2 	bl	8006718 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b94:	7bbb      	ldrb	r3, [r7, #14]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	dce9      	bgt.n	8005b78 <prvUnlockQueue+0x60>
 8005ba4:	e000      	b.n	8005ba8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ba6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	22ff      	movs	r2, #255	; 0xff
 8005bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005bb0:	f001 fbe8 	bl	8007384 <vPortExitCritical>
}
 8005bb4:	bf00      	nop
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bc4:	f001 fbb0 	bl	8007328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	e001      	b.n	8005bda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bda:	f001 fbd3 	bl	8007384 <vPortExitCritical>

	return xReturn;
 8005bde:	68fb      	ldr	r3, [r7, #12]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bf0:	f001 fb9a 	bl	8007328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d102      	bne.n	8005c06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c00:	2301      	movs	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	e001      	b.n	8005c0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c0a:	f001 fbbb 	bl	8007384 <vPortExitCritical>

	return xReturn;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	e014      	b.n	8005c52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c28:	4a0e      	ldr	r2, [pc, #56]	; (8005c64 <vQueueAddToRegistry+0x4c>)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10b      	bne.n	8005c4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c34:	490b      	ldr	r1, [pc, #44]	; (8005c64 <vQueueAddToRegistry+0x4c>)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c3e:	4a09      	ldr	r2, [pc, #36]	; (8005c64 <vQueueAddToRegistry+0x4c>)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	4413      	add	r3, r2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c4a:	e005      	b.n	8005c58 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b07      	cmp	r3, #7
 8005c56:	d9e7      	bls.n	8005c28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c58:	bf00      	nop
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	20001b94 	.word	0x20001b94

08005c68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c78:	f001 fb56 	bl	8007328 <vPortEnterCritical>
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c82:	b25b      	sxtb	r3, r3
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d103      	bne.n	8005c92 <vQueueWaitForMessageRestricted+0x2a>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c98:	b25b      	sxtb	r3, r3
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	d103      	bne.n	8005ca8 <vQueueWaitForMessageRestricted+0x40>
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ca8:	f001 fb6c 	bl	8007384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d106      	bne.n	8005cc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	3324      	adds	r3, #36	; 0x24
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fc29 	bl	8006514 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005cc2:	6978      	ldr	r0, [r7, #20]
 8005cc4:	f7ff ff28 	bl	8005b18 <prvUnlockQueue>
	}
 8005cc8:	bf00      	nop
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08e      	sub	sp, #56	; 0x38
 8005cd4:	af04      	add	r7, sp, #16
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d109      	bne.n	8005cf8 <xTaskCreateStatic+0x28>
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	623b      	str	r3, [r7, #32]
 8005cf6:	e7fe      	b.n	8005cf6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d109      	bne.n	8005d12 <xTaskCreateStatic+0x42>
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	61fb      	str	r3, [r7, #28]
 8005d10:	e7fe      	b.n	8005d10 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d12:	235c      	movs	r3, #92	; 0x5c
 8005d14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b5c      	cmp	r3, #92	; 0x5c
 8005d1a:	d009      	beq.n	8005d30 <xTaskCreateStatic+0x60>
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	61bb      	str	r3, [r7, #24]
 8005d2e:	e7fe      	b.n	8005d2e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d01e      	beq.n	8005d74 <xTaskCreateStatic+0xa4>
 8005d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01b      	beq.n	8005d74 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	2202      	movs	r2, #2
 8005d4a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d4e:	2300      	movs	r3, #0
 8005d50:	9303      	str	r3, [sp, #12]
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	9302      	str	r3, [sp, #8]
 8005d56:	f107 0314 	add.w	r3, r7, #20
 8005d5a:	9301      	str	r3, [sp, #4]
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f850 	bl	8005e0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d6e:	f000 f8d3 	bl	8005f18 <prvAddNewTaskToReadyList>
 8005d72:	e001      	b.n	8005d78 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d78:	697b      	ldr	r3, [r7, #20]
	}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3728      	adds	r7, #40	; 0x28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b08c      	sub	sp, #48	; 0x30
 8005d86:	af04      	add	r7, sp, #16
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	603b      	str	r3, [r7, #0]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d92:	88fb      	ldrh	r3, [r7, #6]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 fbbc 	bl	8007514 <pvPortMalloc>
 8005d9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00e      	beq.n	8005dc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005da4:	205c      	movs	r0, #92	; 0x5c
 8005da6:	f001 fbb5 	bl	8007514 <pvPortMalloc>
 8005daa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30
 8005db8:	e005      	b.n	8005dc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005dba:	6978      	ldr	r0, [r7, #20]
 8005dbc:	f001 fc6c 	bl	8007698 <vPortFree>
 8005dc0:	e001      	b.n	8005dc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d017      	beq.n	8005dfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005dd4:	88fa      	ldrh	r2, [r7, #6]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9303      	str	r3, [sp, #12]
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	9302      	str	r3, [sp, #8]
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 f80e 	bl	8005e0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005df0:	69f8      	ldr	r0, [r7, #28]
 8005df2:	f000 f891 	bl	8005f18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005df6:	2301      	movs	r3, #1
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	e002      	b.n	8005e02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8005e00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e02:	69bb      	ldr	r3, [r7, #24]
	}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3720      	adds	r7, #32
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	461a      	mov	r2, r3
 8005e24:	21a5      	movs	r1, #165	; 0xa5
 8005e26:	f001 fd78 	bl	800791a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e34:	3b01      	subs	r3, #1
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	f023 0307 	bic.w	r3, r3, #7
 8005e42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <prvInitialiseNewTask+0x56>
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e7fe      	b.n	8005e60 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
 8005e66:	e012      	b.n	8005e8e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	7819      	ldrb	r1, [r3, #0]
 8005e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	4413      	add	r3, r2
 8005e76:	3334      	adds	r3, #52	; 0x34
 8005e78:	460a      	mov	r2, r1
 8005e7a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	4413      	add	r3, r2
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d006      	beq.n	8005e96 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	2b0f      	cmp	r3, #15
 8005e92:	d9e9      	bls.n	8005e68 <prvInitialiseNewTask+0x5c>
 8005e94:	e000      	b.n	8005e98 <prvInitialiseNewTask+0x8c>
		{
			break;
 8005e96:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	2b37      	cmp	r3, #55	; 0x37
 8005ea4:	d901      	bls.n	8005eaa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ea6:	2337      	movs	r3, #55	; 0x37
 8005ea8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eb4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	2200      	movs	r2, #0
 8005eba:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff f964 	bl	800518e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	3318      	adds	r3, #24
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff f95f 	bl	800518e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ed4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ee4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	2200      	movs	r2, #0
 8005eea:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	69b8      	ldr	r0, [r7, #24]
 8005efa:	f001 f929 	bl	8007150 <pxPortInitialiseStack>
 8005efe:	4602      	mov	r2, r0
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f10:	bf00      	nop
 8005f12:	3720      	adds	r7, #32
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f20:	f001 fa02 	bl	8007328 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f24:	4b2d      	ldr	r3, [pc, #180]	; (8005fdc <prvAddNewTaskToReadyList+0xc4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	4a2c      	ldr	r2, [pc, #176]	; (8005fdc <prvAddNewTaskToReadyList+0xc4>)
 8005f2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f2e:	4b2c      	ldr	r3, [pc, #176]	; (8005fe0 <prvAddNewTaskToReadyList+0xc8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f36:	4a2a      	ldr	r2, [pc, #168]	; (8005fe0 <prvAddNewTaskToReadyList+0xc8>)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f3c:	4b27      	ldr	r3, [pc, #156]	; (8005fdc <prvAddNewTaskToReadyList+0xc4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d110      	bne.n	8005f66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f44:	f000 fc0c 	bl	8006760 <prvInitialiseTaskLists>
 8005f48:	e00d      	b.n	8005f66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f4a:	4b26      	ldr	r3, [pc, #152]	; (8005fe4 <prvAddNewTaskToReadyList+0xcc>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d109      	bne.n	8005f66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f52:	4b23      	ldr	r3, [pc, #140]	; (8005fe0 <prvAddNewTaskToReadyList+0xc8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d802      	bhi.n	8005f66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f60:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <prvAddNewTaskToReadyList+0xc8>)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f66:	4b20      	ldr	r3, [pc, #128]	; (8005fe8 <prvAddNewTaskToReadyList+0xd0>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	4a1e      	ldr	r2, [pc, #120]	; (8005fe8 <prvAddNewTaskToReadyList+0xd0>)
 8005f6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f70:	4b1d      	ldr	r3, [pc, #116]	; (8005fe8 <prvAddNewTaskToReadyList+0xd0>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <prvAddNewTaskToReadyList+0xd4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d903      	bls.n	8005f8c <prvAddNewTaskToReadyList+0x74>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	4a18      	ldr	r2, [pc, #96]	; (8005fec <prvAddNewTaskToReadyList+0xd4>)
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4a15      	ldr	r2, [pc, #84]	; (8005ff0 <prvAddNewTaskToReadyList+0xd8>)
 8005f9a:	441a      	add	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	f7ff f8ff 	bl	80051a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fa8:	f001 f9ec 	bl	8007384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fac:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <prvAddNewTaskToReadyList+0xcc>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00e      	beq.n	8005fd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fb4:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <prvAddNewTaskToReadyList+0xc8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d207      	bcs.n	8005fd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <prvAddNewTaskToReadyList+0xdc>)
 8005fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fd2:	bf00      	nop
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000c10 	.word	0x20000c10
 8005fe0:	2000073c 	.word	0x2000073c
 8005fe4:	20000c1c 	.word	0x20000c1c
 8005fe8:	20000c2c 	.word	0x20000c2c
 8005fec:	20000c18 	.word	0x20000c18
 8005ff0:	20000740 	.word	0x20000740
 8005ff4:	e000ed04 	.word	0xe000ed04

08005ff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006000:	2300      	movs	r3, #0
 8006002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d016      	beq.n	8006038 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800600a:	4b13      	ldr	r3, [pc, #76]	; (8006058 <vTaskDelay+0x60>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d009      	beq.n	8006026 <vTaskDelay+0x2e>
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	60bb      	str	r3, [r7, #8]
 8006024:	e7fe      	b.n	8006024 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006026:	f000 f87f 	bl	8006128 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800602a:	2100      	movs	r1, #0
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fcdf 	bl	80069f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006032:	f000 f887 	bl	8006144 <xTaskResumeAll>
 8006036:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d107      	bne.n	800604e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800603e:	4b07      	ldr	r3, [pc, #28]	; (800605c <vTaskDelay+0x64>)
 8006040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800604e:	bf00      	nop
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20000c38 	.word	0x20000c38
 800605c:	e000ed04 	.word	0xe000ed04

08006060 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b08a      	sub	sp, #40	; 0x28
 8006064:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006066:	2300      	movs	r3, #0
 8006068:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800606a:	2300      	movs	r3, #0
 800606c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800606e:	463a      	mov	r2, r7
 8006070:	1d39      	adds	r1, r7, #4
 8006072:	f107 0308 	add.w	r3, r7, #8
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff f81e 	bl	80050b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800607c:	6839      	ldr	r1, [r7, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	9202      	str	r2, [sp, #8]
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	2300      	movs	r3, #0
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	2300      	movs	r3, #0
 800608c:	460a      	mov	r2, r1
 800608e:	4920      	ldr	r1, [pc, #128]	; (8006110 <vTaskStartScheduler+0xb0>)
 8006090:	4820      	ldr	r0, [pc, #128]	; (8006114 <vTaskStartScheduler+0xb4>)
 8006092:	f7ff fe1d 	bl	8005cd0 <xTaskCreateStatic>
 8006096:	4602      	mov	r2, r0
 8006098:	4b1f      	ldr	r3, [pc, #124]	; (8006118 <vTaskStartScheduler+0xb8>)
 800609a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800609c:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <vTaskStartScheduler+0xb8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060a4:	2301      	movs	r3, #1
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	e001      	b.n	80060ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d102      	bne.n	80060ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80060b4:	f000 fcf0 	bl	8006a98 <xTimerCreateTimerTask>
 80060b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d115      	bne.n	80060ec <vTaskStartScheduler+0x8c>
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060d2:	4b12      	ldr	r3, [pc, #72]	; (800611c <vTaskStartScheduler+0xbc>)
 80060d4:	f04f 32ff 	mov.w	r2, #4294967295
 80060d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060da:	4b11      	ldr	r3, [pc, #68]	; (8006120 <vTaskStartScheduler+0xc0>)
 80060dc:	2201      	movs	r2, #1
 80060de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80060e0:	4b10      	ldr	r3, [pc, #64]	; (8006124 <vTaskStartScheduler+0xc4>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060e6:	f001 f8af 	bl	8007248 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060ea:	e00d      	b.n	8006108 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d109      	bne.n	8006108 <vTaskStartScheduler+0xa8>
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	e7fe      	b.n	8006106 <vTaskStartScheduler+0xa6>
}
 8006108:	bf00      	nop
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	08007a84 	.word	0x08007a84
 8006114:	08006731 	.word	0x08006731
 8006118:	20000c34 	.word	0x20000c34
 800611c:	20000c30 	.word	0x20000c30
 8006120:	20000c1c 	.word	0x20000c1c
 8006124:	20000c14 	.word	0x20000c14

08006128 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800612c:	4b04      	ldr	r3, [pc, #16]	; (8006140 <vTaskSuspendAll+0x18>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3301      	adds	r3, #1
 8006132:	4a03      	ldr	r2, [pc, #12]	; (8006140 <vTaskSuspendAll+0x18>)
 8006134:	6013      	str	r3, [r2, #0]
}
 8006136:	bf00      	nop
 8006138:	46bd      	mov	sp, r7
 800613a:	bc80      	pop	{r7}
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	20000c38 	.word	0x20000c38

08006144 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800614e:	2300      	movs	r3, #0
 8006150:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006152:	4b41      	ldr	r3, [pc, #260]	; (8006258 <xTaskResumeAll+0x114>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <xTaskResumeAll+0x2a>
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	603b      	str	r3, [r7, #0]
 800616c:	e7fe      	b.n	800616c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800616e:	f001 f8db 	bl	8007328 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006172:	4b39      	ldr	r3, [pc, #228]	; (8006258 <xTaskResumeAll+0x114>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3b01      	subs	r3, #1
 8006178:	4a37      	ldr	r2, [pc, #220]	; (8006258 <xTaskResumeAll+0x114>)
 800617a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800617c:	4b36      	ldr	r3, [pc, #216]	; (8006258 <xTaskResumeAll+0x114>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d162      	bne.n	800624a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006184:	4b35      	ldr	r3, [pc, #212]	; (800625c <xTaskResumeAll+0x118>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d05e      	beq.n	800624a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800618c:	e02f      	b.n	80061ee <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800618e:	4b34      	ldr	r3, [pc, #208]	; (8006260 <xTaskResumeAll+0x11c>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3318      	adds	r3, #24
 800619a:	4618      	mov	r0, r3
 800619c:	f7ff f85e 	bl	800525c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3304      	adds	r3, #4
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff f859 	bl	800525c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	4b2d      	ldr	r3, [pc, #180]	; (8006264 <xTaskResumeAll+0x120>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d903      	bls.n	80061be <xTaskResumeAll+0x7a>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	4a2a      	ldr	r2, [pc, #168]	; (8006264 <xTaskResumeAll+0x120>)
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c2:	4613      	mov	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4a27      	ldr	r2, [pc, #156]	; (8006268 <xTaskResumeAll+0x124>)
 80061cc:	441a      	add	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3304      	adds	r3, #4
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f7fe ffe6 	bl	80051a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061de:	4b23      	ldr	r3, [pc, #140]	; (800626c <xTaskResumeAll+0x128>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d302      	bcc.n	80061ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80061e8:	4b21      	ldr	r3, [pc, #132]	; (8006270 <xTaskResumeAll+0x12c>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061ee:	4b1c      	ldr	r3, [pc, #112]	; (8006260 <xTaskResumeAll+0x11c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1cb      	bne.n	800618e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061fc:	f000 fb4a 	bl	8006894 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006200:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <xTaskResumeAll+0x130>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d010      	beq.n	800622e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800620c:	f000 f844 	bl	8006298 <xTaskIncrementTick>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006216:	4b16      	ldr	r3, [pc, #88]	; (8006270 <xTaskResumeAll+0x12c>)
 8006218:	2201      	movs	r2, #1
 800621a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3b01      	subs	r3, #1
 8006220:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1f1      	bne.n	800620c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006228:	4b12      	ldr	r3, [pc, #72]	; (8006274 <xTaskResumeAll+0x130>)
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800622e:	4b10      	ldr	r3, [pc, #64]	; (8006270 <xTaskResumeAll+0x12c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d009      	beq.n	800624a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006236:	2301      	movs	r3, #1
 8006238:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800623a:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <xTaskResumeAll+0x134>)
 800623c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800624a:	f001 f89b 	bl	8007384 <vPortExitCritical>

	return xAlreadyYielded;
 800624e:	68bb      	ldr	r3, [r7, #8]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	20000c38 	.word	0x20000c38
 800625c:	20000c10 	.word	0x20000c10
 8006260:	20000bd0 	.word	0x20000bd0
 8006264:	20000c18 	.word	0x20000c18
 8006268:	20000740 	.word	0x20000740
 800626c:	2000073c 	.word	0x2000073c
 8006270:	20000c24 	.word	0x20000c24
 8006274:	20000c20 	.word	0x20000c20
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006282:	4b04      	ldr	r3, [pc, #16]	; (8006294 <xTaskGetTickCount+0x18>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006288:	687b      	ldr	r3, [r7, #4]
}
 800628a:	4618      	mov	r0, r3
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	bc80      	pop	{r7}
 8006292:	4770      	bx	lr
 8006294:	20000c14 	.word	0x20000c14

08006298 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062a2:	4b51      	ldr	r3, [pc, #324]	; (80063e8 <xTaskIncrementTick+0x150>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f040 808d 	bne.w	80063c6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062ac:	4b4f      	ldr	r3, [pc, #316]	; (80063ec <xTaskIncrementTick+0x154>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3301      	adds	r3, #1
 80062b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062b4:	4a4d      	ldr	r2, [pc, #308]	; (80063ec <xTaskIncrementTick+0x154>)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d11f      	bne.n	8006300 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80062c0:	4b4b      	ldr	r3, [pc, #300]	; (80063f0 <xTaskIncrementTick+0x158>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d009      	beq.n	80062de <xTaskIncrementTick+0x46>
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	e7fe      	b.n	80062dc <xTaskIncrementTick+0x44>
 80062de:	4b44      	ldr	r3, [pc, #272]	; (80063f0 <xTaskIncrementTick+0x158>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	4b43      	ldr	r3, [pc, #268]	; (80063f4 <xTaskIncrementTick+0x15c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a41      	ldr	r2, [pc, #260]	; (80063f0 <xTaskIncrementTick+0x158>)
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	4a41      	ldr	r2, [pc, #260]	; (80063f4 <xTaskIncrementTick+0x15c>)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	4b41      	ldr	r3, [pc, #260]	; (80063f8 <xTaskIncrementTick+0x160>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3301      	adds	r3, #1
 80062f8:	4a3f      	ldr	r2, [pc, #252]	; (80063f8 <xTaskIncrementTick+0x160>)
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	f000 faca 	bl	8006894 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006300:	4b3e      	ldr	r3, [pc, #248]	; (80063fc <xTaskIncrementTick+0x164>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	429a      	cmp	r2, r3
 8006308:	d34e      	bcc.n	80063a8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800630a:	4b39      	ldr	r3, [pc, #228]	; (80063f0 <xTaskIncrementTick+0x158>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <xTaskIncrementTick+0x80>
 8006314:	2301      	movs	r3, #1
 8006316:	e000      	b.n	800631a <xTaskIncrementTick+0x82>
 8006318:	2300      	movs	r3, #0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800631e:	4b37      	ldr	r3, [pc, #220]	; (80063fc <xTaskIncrementTick+0x164>)
 8006320:	f04f 32ff 	mov.w	r2, #4294967295
 8006324:	601a      	str	r2, [r3, #0]
					break;
 8006326:	e03f      	b.n	80063a8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006328:	4b31      	ldr	r3, [pc, #196]	; (80063f0 <xTaskIncrementTick+0x158>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	429a      	cmp	r2, r3
 800633e:	d203      	bcs.n	8006348 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006340:	4a2e      	ldr	r2, [pc, #184]	; (80063fc <xTaskIncrementTick+0x164>)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6013      	str	r3, [r2, #0]
						break;
 8006346:	e02f      	b.n	80063a8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	3304      	adds	r3, #4
 800634c:	4618      	mov	r0, r3
 800634e:	f7fe ff85 	bl	800525c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	d004      	beq.n	8006364 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	3318      	adds	r3, #24
 800635e:	4618      	mov	r0, r3
 8006360:	f7fe ff7c 	bl	800525c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006368:	4b25      	ldr	r3, [pc, #148]	; (8006400 <xTaskIncrementTick+0x168>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d903      	bls.n	8006378 <xTaskIncrementTick+0xe0>
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	4a22      	ldr	r2, [pc, #136]	; (8006400 <xTaskIncrementTick+0x168>)
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637c:	4613      	mov	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4a1f      	ldr	r2, [pc, #124]	; (8006404 <xTaskIncrementTick+0x16c>)
 8006386:	441a      	add	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	3304      	adds	r3, #4
 800638c:	4619      	mov	r1, r3
 800638e:	4610      	mov	r0, r2
 8006390:	f7fe ff09 	bl	80051a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006398:	4b1b      	ldr	r3, [pc, #108]	; (8006408 <xTaskIncrementTick+0x170>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	429a      	cmp	r2, r3
 80063a0:	d3b3      	bcc.n	800630a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80063a2:	2301      	movs	r3, #1
 80063a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063a6:	e7b0      	b.n	800630a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063a8:	4b17      	ldr	r3, [pc, #92]	; (8006408 <xTaskIncrementTick+0x170>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ae:	4915      	ldr	r1, [pc, #84]	; (8006404 <xTaskIncrementTick+0x16c>)
 80063b0:	4613      	mov	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	440b      	add	r3, r1
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d907      	bls.n	80063d0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80063c0:	2301      	movs	r3, #1
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	e004      	b.n	80063d0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80063c6:	4b11      	ldr	r3, [pc, #68]	; (800640c <xTaskIncrementTick+0x174>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3301      	adds	r3, #1
 80063cc:	4a0f      	ldr	r2, [pc, #60]	; (800640c <xTaskIncrementTick+0x174>)
 80063ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80063d0:	4b0f      	ldr	r3, [pc, #60]	; (8006410 <xTaskIncrementTick+0x178>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80063d8:	2301      	movs	r3, #1
 80063da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80063dc:	697b      	ldr	r3, [r7, #20]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000c38 	.word	0x20000c38
 80063ec:	20000c14 	.word	0x20000c14
 80063f0:	20000bc8 	.word	0x20000bc8
 80063f4:	20000bcc 	.word	0x20000bcc
 80063f8:	20000c28 	.word	0x20000c28
 80063fc:	20000c30 	.word	0x20000c30
 8006400:	20000c18 	.word	0x20000c18
 8006404:	20000740 	.word	0x20000740
 8006408:	2000073c 	.word	0x2000073c
 800640c:	20000c20 	.word	0x20000c20
 8006410:	20000c24 	.word	0x20000c24

08006414 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800641a:	4b27      	ldr	r3, [pc, #156]	; (80064b8 <vTaskSwitchContext+0xa4>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006422:	4b26      	ldr	r3, [pc, #152]	; (80064bc <vTaskSwitchContext+0xa8>)
 8006424:	2201      	movs	r2, #1
 8006426:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006428:	e040      	b.n	80064ac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800642a:	4b24      	ldr	r3, [pc, #144]	; (80064bc <vTaskSwitchContext+0xa8>)
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006430:	4b23      	ldr	r3, [pc, #140]	; (80064c0 <vTaskSwitchContext+0xac>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	e00f      	b.n	8006458 <vTaskSwitchContext+0x44>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d109      	bne.n	8006452 <vTaskSwitchContext+0x3e>
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	607b      	str	r3, [r7, #4]
 8006450:	e7fe      	b.n	8006450 <vTaskSwitchContext+0x3c>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3b01      	subs	r3, #1
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	491a      	ldr	r1, [pc, #104]	; (80064c4 <vTaskSwitchContext+0xb0>)
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	440b      	add	r3, r1
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0e5      	beq.n	8006438 <vTaskSwitchContext+0x24>
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <vTaskSwitchContext+0xb0>)
 8006478:	4413      	add	r3, r2
 800647a:	60bb      	str	r3, [r7, #8]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	3308      	adds	r3, #8
 800648e:	429a      	cmp	r2, r3
 8006490:	d104      	bne.n	800649c <vTaskSwitchContext+0x88>
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	605a      	str	r2, [r3, #4]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	4a09      	ldr	r2, [pc, #36]	; (80064c8 <vTaskSwitchContext+0xb4>)
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	4a06      	ldr	r2, [pc, #24]	; (80064c0 <vTaskSwitchContext+0xac>)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6013      	str	r3, [r2, #0]
}
 80064ac:	bf00      	nop
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	20000c38 	.word	0x20000c38
 80064bc:	20000c24 	.word	0x20000c24
 80064c0:	20000c18 	.word	0x20000c18
 80064c4:	20000740 	.word	0x20000740
 80064c8:	2000073c 	.word	0x2000073c

080064cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d109      	bne.n	80064f0 <vTaskPlaceOnEventList+0x24>
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	e7fe      	b.n	80064ee <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064f0:	4b07      	ldr	r3, [pc, #28]	; (8006510 <vTaskPlaceOnEventList+0x44>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3318      	adds	r3, #24
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7fe fe77 	bl	80051ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064fe:	2101      	movs	r1, #1
 8006500:	6838      	ldr	r0, [r7, #0]
 8006502:	f000 fa75 	bl	80069f0 <prvAddCurrentTaskToDelayedList>
}
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	2000073c 	.word	0x2000073c

08006514 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d109      	bne.n	800653a <vTaskPlaceOnEventListRestricted+0x26>
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	e7fe      	b.n	8006538 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800653a:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <vTaskPlaceOnEventListRestricted+0x50>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3318      	adds	r3, #24
 8006540:	4619      	mov	r1, r3
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f7fe fe2f 	bl	80051a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800654e:	f04f 33ff 	mov.w	r3, #4294967295
 8006552:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	68b8      	ldr	r0, [r7, #8]
 8006558:	f000 fa4a 	bl	80069f0 <prvAddCurrentTaskToDelayedList>
	}
 800655c:	bf00      	nop
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	2000073c 	.word	0x2000073c

08006568 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <xTaskRemoveFromEventList+0x2a>
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e7fe      	b.n	8006590 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	3318      	adds	r3, #24
 8006596:	4618      	mov	r0, r3
 8006598:	f7fe fe60 	bl	800525c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800659c:	4b1d      	ldr	r3, [pc, #116]	; (8006614 <xTaskRemoveFromEventList+0xac>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d11d      	bne.n	80065e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	3304      	adds	r3, #4
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fe fe57 	bl	800525c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b2:	4b19      	ldr	r3, [pc, #100]	; (8006618 <xTaskRemoveFromEventList+0xb0>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d903      	bls.n	80065c2 <xTaskRemoveFromEventList+0x5a>
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	4a16      	ldr	r2, [pc, #88]	; (8006618 <xTaskRemoveFromEventList+0xb0>)
 80065c0:	6013      	str	r3, [r2, #0]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4a13      	ldr	r2, [pc, #76]	; (800661c <xTaskRemoveFromEventList+0xb4>)
 80065d0:	441a      	add	r2, r3
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	3304      	adds	r3, #4
 80065d6:	4619      	mov	r1, r3
 80065d8:	4610      	mov	r0, r2
 80065da:	f7fe fde4 	bl	80051a6 <vListInsertEnd>
 80065de:	e005      	b.n	80065ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	3318      	adds	r3, #24
 80065e4:	4619      	mov	r1, r3
 80065e6:	480e      	ldr	r0, [pc, #56]	; (8006620 <xTaskRemoveFromEventList+0xb8>)
 80065e8:	f7fe fddd 	bl	80051a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <xTaskRemoveFromEventList+0xbc>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d905      	bls.n	8006606 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065fa:	2301      	movs	r3, #1
 80065fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065fe:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <xTaskRemoveFromEventList+0xc0>)
 8006600:	2201      	movs	r2, #1
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	e001      	b.n	800660a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800660a:	697b      	ldr	r3, [r7, #20]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20000c38 	.word	0x20000c38
 8006618:	20000c18 	.word	0x20000c18
 800661c:	20000740 	.word	0x20000740
 8006620:	20000bd0 	.word	0x20000bd0
 8006624:	2000073c 	.word	0x2000073c
 8006628:	20000c24 	.word	0x20000c24

0800662c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006634:	4b06      	ldr	r3, [pc, #24]	; (8006650 <vTaskInternalSetTimeOutState+0x24>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800663c:	4b05      	ldr	r3, [pc, #20]	; (8006654 <vTaskInternalSetTimeOutState+0x28>)
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	605a      	str	r2, [r3, #4]
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	bc80      	pop	{r7}
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20000c28 	.word	0x20000c28
 8006654:	20000c14 	.word	0x20000c14

08006658 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d109      	bne.n	800667c <xTaskCheckForTimeOut+0x24>
 8006668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	e7fe      	b.n	800667a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d109      	bne.n	8006696 <xTaskCheckForTimeOut+0x3e>
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e7fe      	b.n	8006694 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006696:	f000 fe47 	bl	8007328 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800669a:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <xTaskCheckForTimeOut+0xb8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d102      	bne.n	80066ba <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066b4:	2300      	movs	r3, #0
 80066b6:	61fb      	str	r3, [r7, #28]
 80066b8:	e023      	b.n	8006702 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b15      	ldr	r3, [pc, #84]	; (8006714 <xTaskCheckForTimeOut+0xbc>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d007      	beq.n	80066d6 <xTaskCheckForTimeOut+0x7e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d302      	bcc.n	80066d6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066d0:	2301      	movs	r3, #1
 80066d2:	61fb      	str	r3, [r7, #28]
 80066d4:	e015      	b.n	8006702 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d20b      	bcs.n	80066f8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	1ad2      	subs	r2, r2, r3
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff ff9d 	bl	800662c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	e004      	b.n	8006702 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066fe:	2301      	movs	r3, #1
 8006700:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006702:	f000 fe3f 	bl	8007384 <vPortExitCritical>

	return xReturn;
 8006706:	69fb      	ldr	r3, [r7, #28]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3720      	adds	r7, #32
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20000c14 	.word	0x20000c14
 8006714:	20000c28 	.word	0x20000c28

08006718 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006718:	b480      	push	{r7}
 800671a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800671c:	4b03      	ldr	r3, [pc, #12]	; (800672c <vTaskMissedYield+0x14>)
 800671e:	2201      	movs	r2, #1
 8006720:	601a      	str	r2, [r3, #0]
}
 8006722:	bf00      	nop
 8006724:	46bd      	mov	sp, r7
 8006726:	bc80      	pop	{r7}
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20000c24 	.word	0x20000c24

08006730 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006738:	f000 f852 	bl	80067e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <prvIdleTask+0x28>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d9f9      	bls.n	8006738 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006744:	4b05      	ldr	r3, [pc, #20]	; (800675c <prvIdleTask+0x2c>)
 8006746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006754:	e7f0      	b.n	8006738 <prvIdleTask+0x8>
 8006756:	bf00      	nop
 8006758:	20000740 	.word	0x20000740
 800675c:	e000ed04 	.word	0xe000ed04

08006760 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006766:	2300      	movs	r3, #0
 8006768:	607b      	str	r3, [r7, #4]
 800676a:	e00c      	b.n	8006786 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4a12      	ldr	r2, [pc, #72]	; (80067c0 <prvInitialiseTaskLists+0x60>)
 8006778:	4413      	add	r3, r2
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe fce8 	bl	8005150 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3301      	adds	r3, #1
 8006784:	607b      	str	r3, [r7, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b37      	cmp	r3, #55	; 0x37
 800678a:	d9ef      	bls.n	800676c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800678c:	480d      	ldr	r0, [pc, #52]	; (80067c4 <prvInitialiseTaskLists+0x64>)
 800678e:	f7fe fcdf 	bl	8005150 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006792:	480d      	ldr	r0, [pc, #52]	; (80067c8 <prvInitialiseTaskLists+0x68>)
 8006794:	f7fe fcdc 	bl	8005150 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006798:	480c      	ldr	r0, [pc, #48]	; (80067cc <prvInitialiseTaskLists+0x6c>)
 800679a:	f7fe fcd9 	bl	8005150 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800679e:	480c      	ldr	r0, [pc, #48]	; (80067d0 <prvInitialiseTaskLists+0x70>)
 80067a0:	f7fe fcd6 	bl	8005150 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067a4:	480b      	ldr	r0, [pc, #44]	; (80067d4 <prvInitialiseTaskLists+0x74>)
 80067a6:	f7fe fcd3 	bl	8005150 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067aa:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <prvInitialiseTaskLists+0x78>)
 80067ac:	4a05      	ldr	r2, [pc, #20]	; (80067c4 <prvInitialiseTaskLists+0x64>)
 80067ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067b0:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <prvInitialiseTaskLists+0x7c>)
 80067b2:	4a05      	ldr	r2, [pc, #20]	; (80067c8 <prvInitialiseTaskLists+0x68>)
 80067b4:	601a      	str	r2, [r3, #0]
}
 80067b6:	bf00      	nop
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000740 	.word	0x20000740
 80067c4:	20000ba0 	.word	0x20000ba0
 80067c8:	20000bb4 	.word	0x20000bb4
 80067cc:	20000bd0 	.word	0x20000bd0
 80067d0:	20000be4 	.word	0x20000be4
 80067d4:	20000bfc 	.word	0x20000bfc
 80067d8:	20000bc8 	.word	0x20000bc8
 80067dc:	20000bcc 	.word	0x20000bcc

080067e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067e6:	e019      	b.n	800681c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067e8:	f000 fd9e 	bl	8007328 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80067ec:	4b0f      	ldr	r3, [pc, #60]	; (800682c <prvCheckTasksWaitingTermination+0x4c>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3304      	adds	r3, #4
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe fd2f 	bl	800525c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067fe:	4b0c      	ldr	r3, [pc, #48]	; (8006830 <prvCheckTasksWaitingTermination+0x50>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3b01      	subs	r3, #1
 8006804:	4a0a      	ldr	r2, [pc, #40]	; (8006830 <prvCheckTasksWaitingTermination+0x50>)
 8006806:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006808:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <prvCheckTasksWaitingTermination+0x54>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3b01      	subs	r3, #1
 800680e:	4a09      	ldr	r2, [pc, #36]	; (8006834 <prvCheckTasksWaitingTermination+0x54>)
 8006810:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006812:	f000 fdb7 	bl	8007384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f80e 	bl	8006838 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800681c:	4b05      	ldr	r3, [pc, #20]	; (8006834 <prvCheckTasksWaitingTermination+0x54>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e1      	bne.n	80067e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	20000be4 	.word	0x20000be4
 8006830:	20000c10 	.word	0x20000c10
 8006834:	20000bf8 	.word	0x20000bf8

08006838 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006846:	2b00      	cmp	r3, #0
 8006848:	d108      	bne.n	800685c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684e:	4618      	mov	r0, r3
 8006850:	f000 ff22 	bl	8007698 <vPortFree>
				vPortFree( pxTCB );
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 ff1f 	bl	8007698 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800685a:	e017      	b.n	800688c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006862:	2b01      	cmp	r3, #1
 8006864:	d103      	bne.n	800686e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 ff16 	bl	8007698 <vPortFree>
	}
 800686c:	e00e      	b.n	800688c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006874:	2b02      	cmp	r3, #2
 8006876:	d009      	beq.n	800688c <prvDeleteTCB+0x54>
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	e7fe      	b.n	800688a <prvDeleteTCB+0x52>
	}
 800688c:	bf00      	nop
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800689a:	4b0e      	ldr	r3, [pc, #56]	; (80068d4 <prvResetNextTaskUnblockTime+0x40>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <prvResetNextTaskUnblockTime+0x14>
 80068a4:	2301      	movs	r3, #1
 80068a6:	e000      	b.n	80068aa <prvResetNextTaskUnblockTime+0x16>
 80068a8:	2300      	movs	r3, #0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068ae:	4b0a      	ldr	r3, [pc, #40]	; (80068d8 <prvResetNextTaskUnblockTime+0x44>)
 80068b0:	f04f 32ff 	mov.w	r2, #4294967295
 80068b4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068b6:	e008      	b.n	80068ca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80068b8:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <prvResetNextTaskUnblockTime+0x40>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	4a04      	ldr	r2, [pc, #16]	; (80068d8 <prvResetNextTaskUnblockTime+0x44>)
 80068c8:	6013      	str	r3, [r2, #0]
}
 80068ca:	bf00      	nop
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bc80      	pop	{r7}
 80068d2:	4770      	bx	lr
 80068d4:	20000bc8 	.word	0x20000bc8
 80068d8:	20000c30 	.word	0x20000c30

080068dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068e2:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <xTaskGetSchedulerState+0x34>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d102      	bne.n	80068f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068ea:	2301      	movs	r3, #1
 80068ec:	607b      	str	r3, [r7, #4]
 80068ee:	e008      	b.n	8006902 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068f0:	4b08      	ldr	r3, [pc, #32]	; (8006914 <xTaskGetSchedulerState+0x38>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d102      	bne.n	80068fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068f8:	2302      	movs	r3, #2
 80068fa:	607b      	str	r3, [r7, #4]
 80068fc:	e001      	b.n	8006902 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068fe:	2300      	movs	r3, #0
 8006900:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006902:	687b      	ldr	r3, [r7, #4]
	}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	20000c1c 	.word	0x20000c1c
 8006914:	20000c38 	.word	0x20000c38

08006918 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d054      	beq.n	80069d8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800692e:	4b2d      	ldr	r3, [pc, #180]	; (80069e4 <xTaskPriorityDisinherit+0xcc>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	429a      	cmp	r2, r3
 8006936:	d009      	beq.n	800694c <xTaskPriorityDisinherit+0x34>
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	e7fe      	b.n	800694a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006950:	2b00      	cmp	r3, #0
 8006952:	d109      	bne.n	8006968 <xTaskPriorityDisinherit+0x50>
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	e7fe      	b.n	8006966 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800696c:	1e5a      	subs	r2, r3, #1
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800697a:	429a      	cmp	r2, r3
 800697c:	d02c      	beq.n	80069d8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006982:	2b00      	cmp	r3, #0
 8006984:	d128      	bne.n	80069d8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	3304      	adds	r3, #4
 800698a:	4618      	mov	r0, r3
 800698c:	f7fe fc66 	bl	800525c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	4b0f      	ldr	r3, [pc, #60]	; (80069e8 <xTaskPriorityDisinherit+0xd0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d903      	bls.n	80069b8 <xTaskPriorityDisinherit+0xa0>
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	4a0c      	ldr	r2, [pc, #48]	; (80069e8 <xTaskPriorityDisinherit+0xd0>)
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069bc:	4613      	mov	r3, r2
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4a09      	ldr	r2, [pc, #36]	; (80069ec <xTaskPriorityDisinherit+0xd4>)
 80069c6:	441a      	add	r2, r3
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f7fe fbe9 	bl	80051a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069d4:	2301      	movs	r3, #1
 80069d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069d8:	697b      	ldr	r3, [r7, #20]
	}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	2000073c 	.word	0x2000073c
 80069e8:	20000c18 	.word	0x20000c18
 80069ec:	20000740 	.word	0x20000740

080069f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069fa:	4b21      	ldr	r3, [pc, #132]	; (8006a80 <prvAddCurrentTaskToDelayedList+0x90>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a00:	4b20      	ldr	r3, [pc, #128]	; (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3304      	adds	r3, #4
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe fc28 	bl	800525c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a12:	d10a      	bne.n	8006a2a <prvAddCurrentTaskToDelayedList+0x3a>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d007      	beq.n	8006a2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a1a:	4b1a      	ldr	r3, [pc, #104]	; (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	4619      	mov	r1, r3
 8006a22:	4819      	ldr	r0, [pc, #100]	; (8006a88 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a24:	f7fe fbbf 	bl	80051a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a28:	e026      	b.n	8006a78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4413      	add	r3, r2
 8006a30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a32:	4b14      	ldr	r3, [pc, #80]	; (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d209      	bcs.n	8006a56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a42:	4b12      	ldr	r3, [pc, #72]	; (8006a8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4610      	mov	r0, r2
 8006a50:	f7fe fbcc 	bl	80051ec <vListInsert>
}
 8006a54:	e010      	b.n	8006a78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a56:	4b0e      	ldr	r3, [pc, #56]	; (8006a90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4619      	mov	r1, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	f7fe fbc2 	bl	80051ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d202      	bcs.n	8006a78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a72:	4a08      	ldr	r2, [pc, #32]	; (8006a94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	6013      	str	r3, [r2, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	20000c14 	.word	0x20000c14
 8006a84:	2000073c 	.word	0x2000073c
 8006a88:	20000bfc 	.word	0x20000bfc
 8006a8c:	20000bcc 	.word	0x20000bcc
 8006a90:	20000bc8 	.word	0x20000bc8
 8006a94:	20000c30 	.word	0x20000c30

08006a98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	; 0x28
 8006a9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006aa2:	f000 fb15 	bl	80070d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006aa6:	4b1c      	ldr	r3, [pc, #112]	; (8006b18 <xTimerCreateTimerTask+0x80>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d021      	beq.n	8006af2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ab6:	1d3a      	adds	r2, r7, #4
 8006ab8:	f107 0108 	add.w	r1, r7, #8
 8006abc:	f107 030c 	add.w	r3, r7, #12
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fe fb11 	bl	80050e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	9202      	str	r2, [sp, #8]
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	460a      	mov	r2, r1
 8006ad8:	4910      	ldr	r1, [pc, #64]	; (8006b1c <xTimerCreateTimerTask+0x84>)
 8006ada:	4811      	ldr	r0, [pc, #68]	; (8006b20 <xTimerCreateTimerTask+0x88>)
 8006adc:	f7ff f8f8 	bl	8005cd0 <xTaskCreateStatic>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4b10      	ldr	r3, [pc, #64]	; (8006b24 <xTimerCreateTimerTask+0x8c>)
 8006ae4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006ae6:	4b0f      	ldr	r3, [pc, #60]	; (8006b24 <xTimerCreateTimerTask+0x8c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006aee:	2301      	movs	r3, #1
 8006af0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d109      	bne.n	8006b0c <xTimerCreateTimerTask+0x74>
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	613b      	str	r3, [r7, #16]
 8006b0a:	e7fe      	b.n	8006b0a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006b0c:	697b      	ldr	r3, [r7, #20]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20000c6c 	.word	0x20000c6c
 8006b1c:	08007a8c 	.word	0x08007a8c
 8006b20:	08006ce5 	.word	0x08006ce5
 8006b24:	20000c70 	.word	0x20000c70

08006b28 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006b36:	2030      	movs	r0, #48	; 0x30
 8006b38:	f000 fcec 	bl	8007514 <pvPortMalloc>
 8006b3c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00d      	beq.n	8006b60 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	68b9      	ldr	r1, [r7, #8]
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 f809 	bl	8006b6a <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8006b60:	697b      	ldr	r3, [r7, #20]
	}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b086      	sub	sp, #24
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]
 8006b76:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <prvInitialiseNewTimer+0x28>
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	e7fe      	b.n	8006b90 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d015      	beq.n	8006bc4 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006b98:	f000 fa9a 	bl	80070d0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	6a3a      	ldr	r2, [r7, #32]
 8006bb8:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fe fae5 	bl	800518e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006bc4:	bf00      	nop
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08a      	sub	sp, #40	; 0x28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d109      	bne.n	8006bf8 <xTimerGenericCommand+0x2c>
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	623b      	str	r3, [r7, #32]
 8006bf6:	e7fe      	b.n	8006bf6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bf8:	4b19      	ldr	r3, [pc, #100]	; (8006c60 <xTimerGenericCommand+0x94>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d02a      	beq.n	8006c56 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b05      	cmp	r3, #5
 8006c10:	dc18      	bgt.n	8006c44 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c12:	f7ff fe63 	bl	80068dc <xTaskGetSchedulerState>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d109      	bne.n	8006c30 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c1c:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <xTimerGenericCommand+0x94>)
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	f107 0110 	add.w	r1, r7, #16
 8006c24:	2300      	movs	r3, #0
 8006c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c28:	f7fe fc7c 	bl	8005524 <xQueueGenericSend>
 8006c2c:	6278      	str	r0, [r7, #36]	; 0x24
 8006c2e:	e012      	b.n	8006c56 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c30:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <xTimerGenericCommand+0x94>)
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	f107 0110 	add.w	r1, r7, #16
 8006c38:	2300      	movs	r3, #0
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f7fe fc72 	bl	8005524 <xQueueGenericSend>
 8006c40:	6278      	str	r0, [r7, #36]	; 0x24
 8006c42:	e008      	b.n	8006c56 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c44:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <xTimerGenericCommand+0x94>)
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	f107 0110 	add.w	r1, r7, #16
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	f7fe fd62 	bl	8005718 <xQueueGenericSendFromISR>
 8006c54:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3728      	adds	r7, #40	; 0x28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	20000c6c 	.word	0x20000c6c

08006c64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af02      	add	r7, sp, #8
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c6e:	4b1c      	ldr	r3, [pc, #112]	; (8006ce0 <prvProcessExpiredTimer+0x7c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe faed 	bl	800525c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d121      	bne.n	8006cce <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	18d1      	adds	r1, r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	6978      	ldr	r0, [r7, #20]
 8006c98:	f000 f8c8 	bl	8006e2c <prvInsertTimerInActiveList>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d015      	beq.n	8006cce <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	2100      	movs	r1, #0
 8006cac:	6978      	ldr	r0, [r7, #20]
 8006cae:	f7ff ff8d 	bl	8006bcc <xTimerGenericCommand>
 8006cb2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d109      	bne.n	8006cce <prvProcessExpiredTimer+0x6a>
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	e7fe      	b.n	8006ccc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	6978      	ldr	r0, [r7, #20]
 8006cd4:	4798      	blx	r3
}
 8006cd6:	bf00      	nop
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000c64 	.word	0x20000c64

08006ce4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cec:	f107 0308 	add.w	r3, r7, #8
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 f857 	bl	8006da4 <prvGetNextExpireTime>
 8006cf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 f803 	bl	8006d08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d02:	f000 f8d5 	bl	8006eb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d06:	e7f1      	b.n	8006cec <prvTimerTask+0x8>

08006d08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d12:	f7ff fa09 	bl	8006128 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d16:	f107 0308 	add.w	r3, r7, #8
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 f866 	bl	8006dec <prvSampleTimeNow>
 8006d20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d130      	bne.n	8006d8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10a      	bne.n	8006d44 <prvProcessTimerOrBlockTask+0x3c>
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d806      	bhi.n	8006d44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d36:	f7ff fa05 	bl	8006144 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d3a:	68f9      	ldr	r1, [r7, #12]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff ff91 	bl	8006c64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d42:	e024      	b.n	8006d8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d008      	beq.n	8006d5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d4a:	4b13      	ldr	r3, [pc, #76]	; (8006d98 <prvProcessTimerOrBlockTask+0x90>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	bf0c      	ite	eq
 8006d54:	2301      	moveq	r3, #1
 8006d56:	2300      	movne	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d5c:	4b0f      	ldr	r3, [pc, #60]	; (8006d9c <prvProcessTimerOrBlockTask+0x94>)
 8006d5e:	6818      	ldr	r0, [r3, #0]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f7fe ff7d 	bl	8005c68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d6e:	f7ff f9e9 	bl	8006144 <xTaskResumeAll>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d78:	4b09      	ldr	r3, [pc, #36]	; (8006da0 <prvProcessTimerOrBlockTask+0x98>)
 8006d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	f3bf 8f6f 	isb	sy
}
 8006d88:	e001      	b.n	8006d8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d8a:	f7ff f9db 	bl	8006144 <xTaskResumeAll>
}
 8006d8e:	bf00      	nop
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000c68 	.word	0x20000c68
 8006d9c:	20000c6c 	.word	0x20000c6c
 8006da0:	e000ed04 	.word	0xe000ed04

08006da4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006dac:	4b0e      	ldr	r3, [pc, #56]	; (8006de8 <prvGetNextExpireTime+0x44>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	bf0c      	ite	eq
 8006db6:	2301      	moveq	r3, #1
 8006db8:	2300      	movne	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d105      	bne.n	8006dd6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dca:	4b07      	ldr	r3, [pc, #28]	; (8006de8 <prvGetNextExpireTime+0x44>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	e001      	b.n	8006dda <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006dda:	68fb      	ldr	r3, [r7, #12]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bc80      	pop	{r7}
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	20000c64 	.word	0x20000c64

08006dec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006df4:	f7ff fa42 	bl	800627c <xTaskGetTickCount>
 8006df8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <prvSampleTimeNow+0x3c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d205      	bcs.n	8006e10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e04:	f000 f904 	bl	8007010 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e002      	b.n	8006e16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e16:	4a04      	ldr	r2, [pc, #16]	; (8006e28 <prvSampleTimeNow+0x3c>)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000c74 	.word	0x20000c74

08006e2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d812      	bhi.n	8006e78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	1ad2      	subs	r2, r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d302      	bcc.n	8006e66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e60:	2301      	movs	r3, #1
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	e01b      	b.n	8006e9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e66:	4b10      	ldr	r3, [pc, #64]	; (8006ea8 <prvInsertTimerInActiveList+0x7c>)
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f7fe f9bb 	bl	80051ec <vListInsert>
 8006e76:	e012      	b.n	8006e9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d206      	bcs.n	8006e8e <prvInsertTimerInActiveList+0x62>
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d302      	bcc.n	8006e8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	e007      	b.n	8006e9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <prvInsertTimerInActiveList+0x80>)
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3304      	adds	r3, #4
 8006e96:	4619      	mov	r1, r3
 8006e98:	4610      	mov	r0, r2
 8006e9a:	f7fe f9a7 	bl	80051ec <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e9e:	697b      	ldr	r3, [r7, #20]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	20000c68 	.word	0x20000c68
 8006eac:	20000c64 	.word	0x20000c64

08006eb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08e      	sub	sp, #56	; 0x38
 8006eb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006eb6:	e099      	b.n	8006fec <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	da17      	bge.n	8006eee <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ebe:	1d3b      	adds	r3, r7, #4
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d109      	bne.n	8006ede <prvProcessReceivedCommands+0x2e>
 8006eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	61fb      	str	r3, [r7, #28]
 8006edc:	e7fe      	b.n	8006edc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ee4:	6850      	ldr	r0, [r2, #4]
 8006ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ee8:	6892      	ldr	r2, [r2, #8]
 8006eea:	4611      	mov	r1, r2
 8006eec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	db7a      	blt.n	8006fea <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	3304      	adds	r3, #4
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fe f9a9 	bl	800525c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f0a:	463b      	mov	r3, r7
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff ff6d 	bl	8006dec <prvSampleTimeNow>
 8006f12:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b09      	cmp	r3, #9
 8006f18:	d868      	bhi.n	8006fec <prvProcessReceivedCommands+0x13c>
 8006f1a:	a201      	add	r2, pc, #4	; (adr r2, 8006f20 <prvProcessReceivedCommands+0x70>)
 8006f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f20:	08006f49 	.word	0x08006f49
 8006f24:	08006f49 	.word	0x08006f49
 8006f28:	08006f49 	.word	0x08006f49
 8006f2c:	08006fed 	.word	0x08006fed
 8006f30:	08006fa3 	.word	0x08006fa3
 8006f34:	08006fd9 	.word	0x08006fd9
 8006f38:	08006f49 	.word	0x08006f49
 8006f3c:	08006f49 	.word	0x08006f49
 8006f40:	08006fed 	.word	0x08006fed
 8006f44:	08006fa3 	.word	0x08006fa3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	18d1      	adds	r1, r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f56:	f7ff ff69 	bl	8006e2c <prvInsertTimerInActiveList>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d045      	beq.n	8006fec <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f66:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d13d      	bne.n	8006fec <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	441a      	add	r2, r3
 8006f78:	2300      	movs	r3, #0
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2100      	movs	r1, #0
 8006f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f82:	f7ff fe23 	bl	8006bcc <xTimerGenericCommand>
 8006f86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d12e      	bne.n	8006fec <prvProcessReceivedCommands+0x13c>
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	61bb      	str	r3, [r7, #24]
 8006fa0:	e7fe      	b.n	8006fa0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d109      	bne.n	8006fc4 <prvProcessReceivedCommands+0x114>
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	e7fe      	b.n	8006fc2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	699a      	ldr	r2, [r3, #24]
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	18d1      	adds	r1, r2, r3
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fd2:	f7ff ff2b 	bl	8006e2c <prvInsertTimerInActiveList>
					break;
 8006fd6:	e009      	b.n	8006fec <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d104      	bne.n	8006fec <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe4:	f000 fb58 	bl	8007698 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006fe8:	e000      	b.n	8006fec <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006fea:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fec:	4b07      	ldr	r3, [pc, #28]	; (800700c <prvProcessReceivedCommands+0x15c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	1d39      	adds	r1, r7, #4
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe fc23 	bl	8005840 <xQueueReceive>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f47f af5b 	bne.w	8006eb8 <prvProcessReceivedCommands+0x8>
	}
}
 8007002:	bf00      	nop
 8007004:	3730      	adds	r7, #48	; 0x30
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20000c6c 	.word	0x20000c6c

08007010 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007016:	e044      	b.n	80070a2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007018:	4b2b      	ldr	r3, [pc, #172]	; (80070c8 <prvSwitchTimerLists+0xb8>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007022:	4b29      	ldr	r3, [pc, #164]	; (80070c8 <prvSwitchTimerLists+0xb8>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3304      	adds	r3, #4
 8007030:	4618      	mov	r0, r3
 8007032:	f7fe f913 	bl	800525c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d12d      	bne.n	80070a2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	4413      	add	r3, r2
 800704e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	429a      	cmp	r2, r3
 8007056:	d90e      	bls.n	8007076 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007064:	4b18      	ldr	r3, [pc, #96]	; (80070c8 <prvSwitchTimerLists+0xb8>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3304      	adds	r3, #4
 800706c:	4619      	mov	r1, r3
 800706e:	4610      	mov	r0, r2
 8007070:	f7fe f8bc 	bl	80051ec <vListInsert>
 8007074:	e015      	b.n	80070a2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007076:	2300      	movs	r3, #0
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	2300      	movs	r3, #0
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	2100      	movs	r1, #0
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f7ff fda3 	bl	8006bcc <xTimerGenericCommand>
 8007086:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d109      	bne.n	80070a2 <prvSwitchTimerLists+0x92>
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	603b      	str	r3, [r7, #0]
 80070a0:	e7fe      	b.n	80070a0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070a2:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <prvSwitchTimerLists+0xb8>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1b5      	bne.n	8007018 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070ac:	4b06      	ldr	r3, [pc, #24]	; (80070c8 <prvSwitchTimerLists+0xb8>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070b2:	4b06      	ldr	r3, [pc, #24]	; (80070cc <prvSwitchTimerLists+0xbc>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a04      	ldr	r2, [pc, #16]	; (80070c8 <prvSwitchTimerLists+0xb8>)
 80070b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070ba:	4a04      	ldr	r2, [pc, #16]	; (80070cc <prvSwitchTimerLists+0xbc>)
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	6013      	str	r3, [r2, #0]
}
 80070c0:	bf00      	nop
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20000c64 	.word	0x20000c64
 80070cc:	20000c68 	.word	0x20000c68

080070d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80070d6:	f000 f927 	bl	8007328 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070da:	4b15      	ldr	r3, [pc, #84]	; (8007130 <prvCheckForValidListAndQueue+0x60>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d120      	bne.n	8007124 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80070e2:	4814      	ldr	r0, [pc, #80]	; (8007134 <prvCheckForValidListAndQueue+0x64>)
 80070e4:	f7fe f834 	bl	8005150 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80070e8:	4813      	ldr	r0, [pc, #76]	; (8007138 <prvCheckForValidListAndQueue+0x68>)
 80070ea:	f7fe f831 	bl	8005150 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80070ee:	4b13      	ldr	r3, [pc, #76]	; (800713c <prvCheckForValidListAndQueue+0x6c>)
 80070f0:	4a10      	ldr	r2, [pc, #64]	; (8007134 <prvCheckForValidListAndQueue+0x64>)
 80070f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80070f4:	4b12      	ldr	r3, [pc, #72]	; (8007140 <prvCheckForValidListAndQueue+0x70>)
 80070f6:	4a10      	ldr	r2, [pc, #64]	; (8007138 <prvCheckForValidListAndQueue+0x68>)
 80070f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80070fa:	2300      	movs	r3, #0
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	4b11      	ldr	r3, [pc, #68]	; (8007144 <prvCheckForValidListAndQueue+0x74>)
 8007100:	4a11      	ldr	r2, [pc, #68]	; (8007148 <prvCheckForValidListAndQueue+0x78>)
 8007102:	2110      	movs	r1, #16
 8007104:	200a      	movs	r0, #10
 8007106:	f7fe f93b 	bl	8005380 <xQueueGenericCreateStatic>
 800710a:	4602      	mov	r2, r0
 800710c:	4b08      	ldr	r3, [pc, #32]	; (8007130 <prvCheckForValidListAndQueue+0x60>)
 800710e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007110:	4b07      	ldr	r3, [pc, #28]	; (8007130 <prvCheckForValidListAndQueue+0x60>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d005      	beq.n	8007124 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007118:	4b05      	ldr	r3, [pc, #20]	; (8007130 <prvCheckForValidListAndQueue+0x60>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	490b      	ldr	r1, [pc, #44]	; (800714c <prvCheckForValidListAndQueue+0x7c>)
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fd7a 	bl	8005c18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007124:	f000 f92e 	bl	8007384 <vPortExitCritical>
}
 8007128:	bf00      	nop
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20000c6c 	.word	0x20000c6c
 8007134:	20000c3c 	.word	0x20000c3c
 8007138:	20000c50 	.word	0x20000c50
 800713c:	20000c64 	.word	0x20000c64
 8007140:	20000c68 	.word	0x20000c68
 8007144:	20000d18 	.word	0x20000d18
 8007148:	20000c78 	.word	0x20000c78
 800714c:	08007a94 	.word	0x08007a94

08007150 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3b04      	subs	r3, #4
 8007160:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	3b04      	subs	r3, #4
 800716e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f023 0201 	bic.w	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3b04      	subs	r3, #4
 800717e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007180:	4a08      	ldr	r2, [pc, #32]	; (80071a4 <pxPortInitialiseStack+0x54>)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3b14      	subs	r3, #20
 800718a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3b20      	subs	r3, #32
 8007196:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007198:	68fb      	ldr	r3, [r7, #12]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	bc80      	pop	{r7}
 80071a2:	4770      	bx	lr
 80071a4:	080071a9 	.word	0x080071a9

080071a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071b2:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <prvTaskExitError+0x4c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ba:	d009      	beq.n	80071d0 <prvTaskExitError+0x28>
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	e7fe      	b.n	80071ce <prvTaskExitError+0x26>
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071e2:	bf00      	nop
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0fc      	beq.n	80071e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071ea:	bf00      	nop
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bc80      	pop	{r7}
 80071f2:	4770      	bx	lr
 80071f4:	20000060 	.word	0x20000060
	...

08007200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007200:	4b07      	ldr	r3, [pc, #28]	; (8007220 <pxCurrentTCBConst2>)
 8007202:	6819      	ldr	r1, [r3, #0]
 8007204:	6808      	ldr	r0, [r1, #0]
 8007206:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800720a:	f380 8809 	msr	PSP, r0
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f04f 0000 	mov.w	r0, #0
 8007216:	f380 8811 	msr	BASEPRI, r0
 800721a:	f04e 0e0d 	orr.w	lr, lr, #13
 800721e:	4770      	bx	lr

08007220 <pxCurrentTCBConst2>:
 8007220:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop

08007228 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007228:	4806      	ldr	r0, [pc, #24]	; (8007244 <prvPortStartFirstTask+0x1c>)
 800722a:	6800      	ldr	r0, [r0, #0]
 800722c:	6800      	ldr	r0, [r0, #0]
 800722e:	f380 8808 	msr	MSP, r0
 8007232:	b662      	cpsie	i
 8007234:	b661      	cpsie	f
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	df00      	svc	0
 8007240:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007242:	bf00      	nop
 8007244:	e000ed08 	.word	0xe000ed08

08007248 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800724e:	4b31      	ldr	r3, [pc, #196]	; (8007314 <xPortStartScheduler+0xcc>)
 8007250:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	22ff      	movs	r2, #255	; 0xff
 800725e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	b2db      	uxtb	r3, r3
 8007266:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007268:	78fb      	ldrb	r3, [r7, #3]
 800726a:	b2db      	uxtb	r3, r3
 800726c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007270:	b2da      	uxtb	r2, r3
 8007272:	4b29      	ldr	r3, [pc, #164]	; (8007318 <xPortStartScheduler+0xd0>)
 8007274:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007276:	4b29      	ldr	r3, [pc, #164]	; (800731c <xPortStartScheduler+0xd4>)
 8007278:	2207      	movs	r2, #7
 800727a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800727c:	e009      	b.n	8007292 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800727e:	4b27      	ldr	r3, [pc, #156]	; (800731c <xPortStartScheduler+0xd4>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3b01      	subs	r3, #1
 8007284:	4a25      	ldr	r2, [pc, #148]	; (800731c <xPortStartScheduler+0xd4>)
 8007286:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007288:	78fb      	ldrb	r3, [r7, #3]
 800728a:	b2db      	uxtb	r3, r3
 800728c:	005b      	lsls	r3, r3, #1
 800728e:	b2db      	uxtb	r3, r3
 8007290:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729a:	2b80      	cmp	r3, #128	; 0x80
 800729c:	d0ef      	beq.n	800727e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800729e:	4b1f      	ldr	r3, [pc, #124]	; (800731c <xPortStartScheduler+0xd4>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f1c3 0307 	rsb	r3, r3, #7
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d009      	beq.n	80072be <xPortStartScheduler+0x76>
 80072aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	60bb      	str	r3, [r7, #8]
 80072bc:	e7fe      	b.n	80072bc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072be:	4b17      	ldr	r3, [pc, #92]	; (800731c <xPortStartScheduler+0xd4>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	021b      	lsls	r3, r3, #8
 80072c4:	4a15      	ldr	r2, [pc, #84]	; (800731c <xPortStartScheduler+0xd4>)
 80072c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072c8:	4b14      	ldr	r3, [pc, #80]	; (800731c <xPortStartScheduler+0xd4>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072d0:	4a12      	ldr	r2, [pc, #72]	; (800731c <xPortStartScheduler+0xd4>)
 80072d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072dc:	4b10      	ldr	r3, [pc, #64]	; (8007320 <xPortStartScheduler+0xd8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a0f      	ldr	r2, [pc, #60]	; (8007320 <xPortStartScheduler+0xd8>)
 80072e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072e8:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <xPortStartScheduler+0xd8>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a0c      	ldr	r2, [pc, #48]	; (8007320 <xPortStartScheduler+0xd8>)
 80072ee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072f4:	f000 f8b0 	bl	8007458 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072f8:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <xPortStartScheduler+0xdc>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072fe:	f7ff ff93 	bl	8007228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007302:	f7ff f887 	bl	8006414 <vTaskSwitchContext>
	prvTaskExitError();
 8007306:	f7ff ff4f 	bl	80071a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	e000e400 	.word	0xe000e400
 8007318:	20000d68 	.word	0x20000d68
 800731c:	20000d6c 	.word	0x20000d6c
 8007320:	e000ed20 	.word	0xe000ed20
 8007324:	20000060 	.word	0x20000060

08007328 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007340:	4b0e      	ldr	r3, [pc, #56]	; (800737c <vPortEnterCritical+0x54>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3301      	adds	r3, #1
 8007346:	4a0d      	ldr	r2, [pc, #52]	; (800737c <vPortEnterCritical+0x54>)
 8007348:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800734a:	4b0c      	ldr	r3, [pc, #48]	; (800737c <vPortEnterCritical+0x54>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d10e      	bne.n	8007370 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007352:	4b0b      	ldr	r3, [pc, #44]	; (8007380 <vPortEnterCritical+0x58>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d009      	beq.n	8007370 <vPortEnterCritical+0x48>
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	603b      	str	r3, [r7, #0]
 800736e:	e7fe      	b.n	800736e <vPortEnterCritical+0x46>
	}
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	20000060 	.word	0x20000060
 8007380:	e000ed04 	.word	0xe000ed04

08007384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800738a:	4b10      	ldr	r3, [pc, #64]	; (80073cc <vPortExitCritical+0x48>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d109      	bne.n	80073a6 <vPortExitCritical+0x22>
 8007392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	607b      	str	r3, [r7, #4]
 80073a4:	e7fe      	b.n	80073a4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80073a6:	4b09      	ldr	r3, [pc, #36]	; (80073cc <vPortExitCritical+0x48>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	4a07      	ldr	r2, [pc, #28]	; (80073cc <vPortExitCritical+0x48>)
 80073ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073b0:	4b06      	ldr	r3, [pc, #24]	; (80073cc <vPortExitCritical+0x48>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d104      	bne.n	80073c2 <vPortExitCritical+0x3e>
 80073b8:	2300      	movs	r3, #0
 80073ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80073c2:	bf00      	nop
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr
 80073cc:	20000060 	.word	0x20000060

080073d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073d0:	f3ef 8009 	mrs	r0, PSP
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <pxCurrentTCBConst>)
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073e0:	6010      	str	r0, [r2, #0]
 80073e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80073e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80073ea:	f380 8811 	msr	BASEPRI, r0
 80073ee:	f7ff f811 	bl	8006414 <vTaskSwitchContext>
 80073f2:	f04f 0000 	mov.w	r0, #0
 80073f6:	f380 8811 	msr	BASEPRI, r0
 80073fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80073fe:	6819      	ldr	r1, [r3, #0]
 8007400:	6808      	ldr	r0, [r1, #0]
 8007402:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007406:	f380 8809 	msr	PSP, r0
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	4770      	bx	lr

08007410 <pxCurrentTCBConst>:
 8007410:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop

08007418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007430:	f7fe ff32 	bl	8006298 <xTaskIncrementTick>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800743a:	4b06      	ldr	r3, [pc, #24]	; (8007454 <SysTick_Handler+0x3c>)
 800743c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	2300      	movs	r3, #0
 8007444:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	e000ed04 	.word	0xe000ed04

08007458 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800745c:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <vPortSetupTimerInterrupt+0x30>)
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007462:	4b0a      	ldr	r3, [pc, #40]	; (800748c <vPortSetupTimerInterrupt+0x34>)
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007468:	4b09      	ldr	r3, [pc, #36]	; (8007490 <vPortSetupTimerInterrupt+0x38>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a09      	ldr	r2, [pc, #36]	; (8007494 <vPortSetupTimerInterrupt+0x3c>)
 800746e:	fba2 2303 	umull	r2, r3, r2, r3
 8007472:	099b      	lsrs	r3, r3, #6
 8007474:	4a08      	ldr	r2, [pc, #32]	; (8007498 <vPortSetupTimerInterrupt+0x40>)
 8007476:	3b01      	subs	r3, #1
 8007478:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800747a:	4b03      	ldr	r3, [pc, #12]	; (8007488 <vPortSetupTimerInterrupt+0x30>)
 800747c:	2207      	movs	r2, #7
 800747e:	601a      	str	r2, [r3, #0]
}
 8007480:	bf00      	nop
 8007482:	46bd      	mov	sp, r7
 8007484:	bc80      	pop	{r7}
 8007486:	4770      	bx	lr
 8007488:	e000e010 	.word	0xe000e010
 800748c:	e000e018 	.word	0xe000e018
 8007490:	20000054 	.word	0x20000054
 8007494:	10624dd3 	.word	0x10624dd3
 8007498:	e000e014 	.word	0xe000e014

0800749c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074a2:	f3ef 8305 	mrs	r3, IPSR
 80074a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2b0f      	cmp	r3, #15
 80074ac:	d913      	bls.n	80074d6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074ae:	4a15      	ldr	r2, [pc, #84]	; (8007504 <vPortValidateInterruptPriority+0x68>)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074b8:	4b13      	ldr	r3, [pc, #76]	; (8007508 <vPortValidateInterruptPriority+0x6c>)
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	7afa      	ldrb	r2, [r7, #11]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d209      	bcs.n	80074d6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	607b      	str	r3, [r7, #4]
 80074d4:	e7fe      	b.n	80074d4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074d6:	4b0d      	ldr	r3, [pc, #52]	; (800750c <vPortValidateInterruptPriority+0x70>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80074de:	4b0c      	ldr	r3, [pc, #48]	; (8007510 <vPortValidateInterruptPriority+0x74>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d909      	bls.n	80074fa <vPortValidateInterruptPriority+0x5e>
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	e7fe      	b.n	80074f8 <vPortValidateInterruptPriority+0x5c>
	}
 80074fa:	bf00      	nop
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	bc80      	pop	{r7}
 8007502:	4770      	bx	lr
 8007504:	e000e3f0 	.word	0xe000e3f0
 8007508:	20000d68 	.word	0x20000d68
 800750c:	e000ed0c 	.word	0xe000ed0c
 8007510:	20000d6c 	.word	0x20000d6c

08007514 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	; 0x28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800751c:	2300      	movs	r3, #0
 800751e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007520:	f7fe fe02 	bl	8006128 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007524:	4b57      	ldr	r3, [pc, #348]	; (8007684 <pvPortMalloc+0x170>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800752c:	f000 f90c 	bl	8007748 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007530:	4b55      	ldr	r3, [pc, #340]	; (8007688 <pvPortMalloc+0x174>)
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4013      	ands	r3, r2
 8007538:	2b00      	cmp	r3, #0
 800753a:	f040 808c 	bne.w	8007656 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01c      	beq.n	800757e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007544:	2208      	movs	r2, #8
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4413      	add	r3, r2
 800754a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	2b00      	cmp	r3, #0
 8007554:	d013      	beq.n	800757e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f023 0307 	bic.w	r3, r3, #7
 800755c:	3308      	adds	r3, #8
 800755e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	2b00      	cmp	r3, #0
 8007568:	d009      	beq.n	800757e <pvPortMalloc+0x6a>
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	e7fe      	b.n	800757c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d068      	beq.n	8007656 <pvPortMalloc+0x142>
 8007584:	4b41      	ldr	r3, [pc, #260]	; (800768c <pvPortMalloc+0x178>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	429a      	cmp	r2, r3
 800758c:	d863      	bhi.n	8007656 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800758e:	4b40      	ldr	r3, [pc, #256]	; (8007690 <pvPortMalloc+0x17c>)
 8007590:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007592:	4b3f      	ldr	r3, [pc, #252]	; (8007690 <pvPortMalloc+0x17c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007598:	e004      	b.n	80075a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d903      	bls.n	80075b6 <pvPortMalloc+0xa2>
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1f1      	bne.n	800759a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075b6:	4b33      	ldr	r3, [pc, #204]	; (8007684 <pvPortMalloc+0x170>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075bc:	429a      	cmp	r2, r3
 80075be:	d04a      	beq.n	8007656 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2208      	movs	r2, #8
 80075c6:	4413      	add	r3, r2
 80075c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	1ad2      	subs	r2, r2, r3
 80075da:	2308      	movs	r3, #8
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	429a      	cmp	r2, r3
 80075e0:	d91e      	bls.n	8007620 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4413      	add	r3, r2
 80075e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	f003 0307 	and.w	r3, r3, #7
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d009      	beq.n	8007608 <pvPortMalloc+0xf4>
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	613b      	str	r3, [r7, #16]
 8007606:	e7fe      	b.n	8007606 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	1ad2      	subs	r2, r2, r3
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800761a:	69b8      	ldr	r0, [r7, #24]
 800761c:	f000 f8f6 	bl	800780c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007620:	4b1a      	ldr	r3, [pc, #104]	; (800768c <pvPortMalloc+0x178>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	4a18      	ldr	r2, [pc, #96]	; (800768c <pvPortMalloc+0x178>)
 800762c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800762e:	4b17      	ldr	r3, [pc, #92]	; (800768c <pvPortMalloc+0x178>)
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	4b18      	ldr	r3, [pc, #96]	; (8007694 <pvPortMalloc+0x180>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d203      	bcs.n	8007642 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800763a:	4b14      	ldr	r3, [pc, #80]	; (800768c <pvPortMalloc+0x178>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a15      	ldr	r2, [pc, #84]	; (8007694 <pvPortMalloc+0x180>)
 8007640:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	4b10      	ldr	r3, [pc, #64]	; (8007688 <pvPortMalloc+0x174>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	431a      	orrs	r2, r3
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007656:	f7fe fd75 	bl	8006144 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	f003 0307 	and.w	r3, r3, #7
 8007660:	2b00      	cmp	r3, #0
 8007662:	d009      	beq.n	8007678 <pvPortMalloc+0x164>
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	e7fe      	b.n	8007676 <pvPortMalloc+0x162>
	return pvReturn;
 8007678:	69fb      	ldr	r3, [r7, #28]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3728      	adds	r7, #40	; 0x28
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	20001978 	.word	0x20001978
 8007688:	20001984 	.word	0x20001984
 800768c:	2000197c 	.word	0x2000197c
 8007690:	20001970 	.word	0x20001970
 8007694:	20001980 	.word	0x20001980

08007698 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d046      	beq.n	8007738 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076aa:	2308      	movs	r3, #8
 80076ac:	425b      	negs	r3, r3
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4413      	add	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	4b20      	ldr	r3, [pc, #128]	; (8007740 <vPortFree+0xa8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4013      	ands	r3, r2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d109      	bne.n	80076da <vPortFree+0x42>
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	e7fe      	b.n	80076d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <vPortFree+0x5e>
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	60bb      	str	r3, [r7, #8]
 80076f4:	e7fe      	b.n	80076f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	4b11      	ldr	r3, [pc, #68]	; (8007740 <vPortFree+0xa8>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4013      	ands	r3, r2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d019      	beq.n	8007738 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d115      	bne.n	8007738 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <vPortFree+0xa8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	43db      	mvns	r3, r3
 8007716:	401a      	ands	r2, r3
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800771c:	f7fe fd04 	bl	8006128 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	4b07      	ldr	r3, [pc, #28]	; (8007744 <vPortFree+0xac>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4413      	add	r3, r2
 800772a:	4a06      	ldr	r2, [pc, #24]	; (8007744 <vPortFree+0xac>)
 800772c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800772e:	6938      	ldr	r0, [r7, #16]
 8007730:	f000 f86c 	bl	800780c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007734:	f7fe fd06 	bl	8006144 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007738:	bf00      	nop
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20001984 	.word	0x20001984
 8007744:	2000197c 	.word	0x2000197c

08007748 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800774e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007752:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007754:	4b27      	ldr	r3, [pc, #156]	; (80077f4 <prvHeapInit+0xac>)
 8007756:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00c      	beq.n	800777c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3307      	adds	r3, #7
 8007766:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0307 	bic.w	r3, r3, #7
 800776e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	4a1f      	ldr	r2, [pc, #124]	; (80077f4 <prvHeapInit+0xac>)
 8007778:	4413      	add	r3, r2
 800777a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007780:	4a1d      	ldr	r2, [pc, #116]	; (80077f8 <prvHeapInit+0xb0>)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007786:	4b1c      	ldr	r3, [pc, #112]	; (80077f8 <prvHeapInit+0xb0>)
 8007788:	2200      	movs	r2, #0
 800778a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	4413      	add	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007794:	2208      	movs	r2, #8
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	1a9b      	subs	r3, r3, r2
 800779a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0307 	bic.w	r3, r3, #7
 80077a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4a15      	ldr	r2, [pc, #84]	; (80077fc <prvHeapInit+0xb4>)
 80077a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077aa:	4b14      	ldr	r3, [pc, #80]	; (80077fc <prvHeapInit+0xb4>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2200      	movs	r2, #0
 80077b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077b2:	4b12      	ldr	r3, [pc, #72]	; (80077fc <prvHeapInit+0xb4>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2200      	movs	r2, #0
 80077b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	1ad2      	subs	r2, r2, r3
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077c8:	4b0c      	ldr	r3, [pc, #48]	; (80077fc <prvHeapInit+0xb4>)
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	4a0a      	ldr	r2, [pc, #40]	; (8007800 <prvHeapInit+0xb8>)
 80077d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	4a09      	ldr	r2, [pc, #36]	; (8007804 <prvHeapInit+0xbc>)
 80077de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077e0:	4b09      	ldr	r3, [pc, #36]	; (8007808 <prvHeapInit+0xc0>)
 80077e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077e6:	601a      	str	r2, [r3, #0]
}
 80077e8:	bf00      	nop
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	20000d70 	.word	0x20000d70
 80077f8:	20001970 	.word	0x20001970
 80077fc:	20001978 	.word	0x20001978
 8007800:	20001980 	.word	0x20001980
 8007804:	2000197c 	.word	0x2000197c
 8007808:	20001984 	.word	0x20001984

0800780c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007814:	4b27      	ldr	r3, [pc, #156]	; (80078b4 <prvInsertBlockIntoFreeList+0xa8>)
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	e002      	b.n	8007820 <prvInsertBlockIntoFreeList+0x14>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	429a      	cmp	r2, r3
 8007828:	d8f7      	bhi.n	800781a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	4413      	add	r3, r2
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	429a      	cmp	r2, r3
 800783a:	d108      	bne.n	800784e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	441a      	add	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	441a      	add	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d118      	bne.n	8007894 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	4b14      	ldr	r3, [pc, #80]	; (80078b8 <prvInsertBlockIntoFreeList+0xac>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d00d      	beq.n	800788a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	441a      	add	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	e008      	b.n	800789c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800788a:	4b0b      	ldr	r3, [pc, #44]	; (80078b8 <prvInsertBlockIntoFreeList+0xac>)
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	e003      	b.n	800789c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d002      	beq.n	80078aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078aa:	bf00      	nop
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bc80      	pop	{r7}
 80078b2:	4770      	bx	lr
 80078b4:	20001970 	.word	0x20001970
 80078b8:	20001978 	.word	0x20001978

080078bc <__libc_init_array>:
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	2500      	movs	r5, #0
 80078c0:	4e0c      	ldr	r6, [pc, #48]	; (80078f4 <__libc_init_array+0x38>)
 80078c2:	4c0d      	ldr	r4, [pc, #52]	; (80078f8 <__libc_init_array+0x3c>)
 80078c4:	1ba4      	subs	r4, r4, r6
 80078c6:	10a4      	asrs	r4, r4, #2
 80078c8:	42a5      	cmp	r5, r4
 80078ca:	d109      	bne.n	80078e0 <__libc_init_array+0x24>
 80078cc:	f000 f82e 	bl	800792c <_init>
 80078d0:	2500      	movs	r5, #0
 80078d2:	4e0a      	ldr	r6, [pc, #40]	; (80078fc <__libc_init_array+0x40>)
 80078d4:	4c0a      	ldr	r4, [pc, #40]	; (8007900 <__libc_init_array+0x44>)
 80078d6:	1ba4      	subs	r4, r4, r6
 80078d8:	10a4      	asrs	r4, r4, #2
 80078da:	42a5      	cmp	r5, r4
 80078dc:	d105      	bne.n	80078ea <__libc_init_array+0x2e>
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078e4:	4798      	blx	r3
 80078e6:	3501      	adds	r5, #1
 80078e8:	e7ee      	b.n	80078c8 <__libc_init_array+0xc>
 80078ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80078ee:	4798      	blx	r3
 80078f0:	3501      	adds	r5, #1
 80078f2:	e7f2      	b.n	80078da <__libc_init_array+0x1e>
 80078f4:	08007b78 	.word	0x08007b78
 80078f8:	08007b78 	.word	0x08007b78
 80078fc:	08007b78 	.word	0x08007b78
 8007900:	08007b7c 	.word	0x08007b7c

08007904 <memcpy>:
 8007904:	b510      	push	{r4, lr}
 8007906:	1e43      	subs	r3, r0, #1
 8007908:	440a      	add	r2, r1
 800790a:	4291      	cmp	r1, r2
 800790c:	d100      	bne.n	8007910 <memcpy+0xc>
 800790e:	bd10      	pop	{r4, pc}
 8007910:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007918:	e7f7      	b.n	800790a <memcpy+0x6>

0800791a <memset>:
 800791a:	4603      	mov	r3, r0
 800791c:	4402      	add	r2, r0
 800791e:	4293      	cmp	r3, r2
 8007920:	d100      	bne.n	8007924 <memset+0xa>
 8007922:	4770      	bx	lr
 8007924:	f803 1b01 	strb.w	r1, [r3], #1
 8007928:	e7f9      	b.n	800791e <memset+0x4>
	...

0800792c <_init>:
 800792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792e:	bf00      	nop
 8007930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007932:	bc08      	pop	{r3}
 8007934:	469e      	mov	lr, r3
 8007936:	4770      	bx	lr

08007938 <_fini>:
 8007938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793a:	bf00      	nop
 800793c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800793e:	bc08      	pop	{r3}
 8007940:	469e      	mov	lr, r3
 8007942:	4770      	bx	lr
