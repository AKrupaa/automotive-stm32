
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008194  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  080082d4  080082d4  000182d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008664  08008664  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008664  08008664  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008664  08008664  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008664  08008664  00018664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800866c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000379c  20000010  0800867c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200037ac  0800867c  000237ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000263d2  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004a8a  00000000  00000000  0004640b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001888  00000000  00000000  0004ae98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001648  00000000  00000000  0004c720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006d0a  00000000  00000000  0004dd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b6fc  00000000  00000000  00054a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a945d  00000000  00000000  0007016e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001195cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000629c  00000000  00000000  00119648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	080082bc 	.word	0x080082bc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	080082bc 	.word	0x080082bc

08000180 <ble_receive_data>:
	}
	ble_turn_off_transmittion;
	return true;
}

bool ble_receive_data(char *pData) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	ble_turn_on_transmittion;
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	480e      	ldr	r0, [pc, #56]	; (80001c8 <ble_receive_data+0x48>)
 800018e:	f002 f9cf 	bl	8002530 <HAL_GPIO_WritePin>
	if (HAL_UART_Receive(&huart3, (uint8_t*) pData, MAX_SIZE, 100)
 8000192:	2364      	movs	r3, #100	; 0x64
 8000194:	2220      	movs	r2, #32
 8000196:	6879      	ldr	r1, [r7, #4]
 8000198:	480c      	ldr	r0, [pc, #48]	; (80001cc <ble_receive_data+0x4c>)
 800019a:	f004 fdc1 	bl	8004d20 <HAL_UART_Receive>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d006      	beq.n	80001b2 <ble_receive_data+0x32>
			!= HAL_OK) {
		ble_turn_off_transmittion;
 80001a4:	2201      	movs	r2, #1
 80001a6:	2110      	movs	r1, #16
 80001a8:	4807      	ldr	r0, [pc, #28]	; (80001c8 <ble_receive_data+0x48>)
 80001aa:	f002 f9c1 	bl	8002530 <HAL_GPIO_WritePin>
		return false;
 80001ae:	2300      	movs	r3, #0
 80001b0:	e005      	b.n	80001be <ble_receive_data+0x3e>
	}
	ble_turn_off_transmittion;
 80001b2:	2201      	movs	r2, #1
 80001b4:	2110      	movs	r1, #16
 80001b6:	4804      	ldr	r0, [pc, #16]	; (80001c8 <ble_receive_data+0x48>)
 80001b8:	f002 f9ba 	bl	8002530 <HAL_GPIO_WritePin>
	return true;
 80001bc:	2301      	movs	r3, #1
}
 80001be:	4618      	mov	r0, r3
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	40020800 	.word	0x40020800
 80001cc:	20003728 	.word	0x20003728

080001d0 <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 80001d6:	2300      	movs	r3, #0
 80001d8:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 80001da:	2300      	movs	r3, #0
 80001dc:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < /*mod_N*/mod_0; i++) {
 80001de:	2300      	movs	r3, #0
 80001e0:	807b      	strh	r3, [r7, #2]
 80001e2:	bf00      	nop
		}

		modsToInit++;
	}

	if (modsToInit != successCnt) {
 80001e4:	88ba      	ldrh	r2, [r7, #4]
 80001e6:	88fb      	ldrh	r3, [r7, #6]
 80001e8:	429a      	cmp	r2, r3
 80001ea:	d000      	beq.n	80001ee <device_init+0x1e>
		// some kind of error
		while (1)
 80001ec:	e7fe      	b.n	80001ec <device_init+0x1c>
			; //TODO: call some error handler
	}

}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr

080001f8 <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 80001f8:	b5b0      	push	{r4, r5, r7, lr}
 80001fa:	b08a      	sub	sp, #40	; 0x28
 80001fc:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 80001fe:	2300      	movs	r3, #0
 8000200:	77fb      	strb	r3, [r7, #31]
 8000202:	e02c      	b.n	800025e <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 8000204:	7ffa      	ldrb	r2, [r7, #31]
 8000206:	4613      	mov	r3, r2
 8000208:	009b      	lsls	r3, r3, #2
 800020a:	4413      	add	r3, r2
 800020c:	009b      	lsls	r3, r3, #2
 800020e:	461a      	mov	r2, r3
 8000210:	4b47      	ldr	r3, [pc, #284]	; (8000330 <rt_init+0x138>)
 8000212:	4413      	add	r3, r2
 8000214:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 8000216:	7ffb      	ldrb	r3, [r7, #31]
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	4a46      	ldr	r2, [pc, #280]	; (8000334 <rt_init+0x13c>)
 800021c:	4413      	add	r3, r2
 800021e:	603b      	str	r3, [r7, #0]
		if (def->active) {
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	7c9b      	ldrb	r3, [r3, #18]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d014      	beq.n	8000252 <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	6818      	ldr	r0, [r3, #0]
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	6859      	ldr	r1, [r3, #4]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	8a1c      	ldrh	r4, [r3, #16]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	689d      	ldr	r5, [r3, #8]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	683a      	ldr	r2, [r7, #0]
 800023e:	9201      	str	r2, [sp, #4]
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	462b      	mov	r3, r5
 8000244:	4622      	mov	r2, r4
 8000246:	f006 f95c 	bl	8006502 <xTaskCreate>
 800024a:	4603      	mov	r3, r0
 800024c:	2b01      	cmp	r3, #1
 800024e:	d003      	beq.n	8000258 <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 8000250:	e7fe      	b.n	8000250 <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000258:	7ffb      	ldrb	r3, [r7, #31]
 800025a:	3301      	adds	r3, #1
 800025c:	77fb      	strb	r3, [r7, #31]
 800025e:	7ffb      	ldrb	r3, [r7, #31]
 8000260:	2b04      	cmp	r3, #4
 8000262:	d9cf      	bls.n	8000204 <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 8000264:	2300      	movs	r3, #0
 8000266:	77bb      	strb	r3, [r7, #30]
 8000268:	e01c      	b.n	80002a4 <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 800026a:	7fbb      	ldrb	r3, [r7, #30]
 800026c:	011b      	lsls	r3, r3, #4
 800026e:	4a32      	ldr	r2, [pc, #200]	; (8000338 <rt_init+0x140>)
 8000270:	4413      	add	r3, r2
 8000272:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 8000274:	7fbb      	ldrb	r3, [r7, #30]
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	4a30      	ldr	r2, [pc, #192]	; (800033c <rt_init+0x144>)
 800027a:	4413      	add	r3, r2
 800027c:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	6818      	ldr	r0, [r3, #0]
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	2200      	movs	r2, #0
 8000288:	4619      	mov	r1, r3
 800028a:	f005 fcab 	bl	8005be4 <xQueueGenericCreate>
 800028e:	4602      	mov	r2, r0
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d100      	bne.n	800029e <rt_init+0xa6>
				== 0) {
			while (1)
 800029c:	e7fe      	b.n	800029c <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 800029e:	7fbb      	ldrb	r3, [r7, #30]
 80002a0:	3301      	adds	r3, #1
 80002a2:	77bb      	strb	r3, [r7, #30]
 80002a4:	7fbb      	ldrb	r3, [r7, #30]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d9df      	bls.n	800026a <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 80002aa:	2300      	movs	r3, #0
 80002ac:	777b      	strb	r3, [r7, #29]
 80002ae:	e020      	b.n	80002f2 <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 80002b0:	7f7b      	ldrb	r3, [r7, #29]
 80002b2:	011b      	lsls	r3, r3, #4
 80002b4:	4a22      	ldr	r2, [pc, #136]	; (8000340 <rt_init+0x148>)
 80002b6:	4413      	add	r3, r2
 80002b8:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 80002ba:	7f7b      	ldrb	r3, [r7, #29]
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	4a21      	ldr	r2, [pc, #132]	; (8000344 <rt_init+0x14c>)
 80002c0:	4413      	add	r3, r2
 80002c2:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	6818      	ldr	r0, [r3, #0]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	6859      	ldr	r1, [r3, #4]
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	689a      	ldr	r2, [r3, #8]
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	2300      	movs	r3, #0
 80002d8:	f007 f8b2 	bl	8007440 <xTimerCreate>
 80002dc:	4602      	mov	r2, r0
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d100      	bne.n	80002ec <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 80002ea:	e7fe      	b.n	80002ea <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 80002ec:	7f7b      	ldrb	r3, [r7, #29]
 80002ee:	3301      	adds	r3, #1
 80002f0:	777b      	strb	r3, [r7, #29]
 80002f2:	7f7b      	ldrb	r3, [r7, #29]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d9db      	bls.n	80002b0 <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 80002f8:	2300      	movs	r3, #0
 80002fa:	773b      	strb	r3, [r7, #28]
 80002fc:	e011      	b.n	8000322 <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 80002fe:	7f3b      	ldrb	r3, [r7, #28]
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	4a11      	ldr	r2, [pc, #68]	; (8000348 <rt_init+0x150>)
 8000304:	4413      	add	r3, r2
 8000306:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 8000308:	f005 f932 	bl	8005570 <xEventGroupCreate>
 800030c:	4602      	mov	r2, r0
 800030e:	69bb      	ldr	r3, [r7, #24]
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	69bb      	ldr	r3, [r7, #24]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d100      	bne.n	800031c <rt_init+0x124>
			while (1)
 800031a:	e7fe      	b.n	800031a <rt_init+0x122>
			evgroup++) {
 800031c:	7f3b      	ldrb	r3, [r7, #28]
 800031e:	3301      	adds	r3, #1
 8000320:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000322:	7f3b      	ldrb	r3, [r7, #28]
 8000324:	2b02      	cmp	r3, #2
 8000326:	d9ea      	bls.n	80002fe <rt_init+0x106>
				;
		}
	}

}
 8000328:	bf00      	nop
 800032a:	3720      	adds	r7, #32
 800032c:	46bd      	mov	sp, r7
 800032e:	bdb0      	pop	{r4, r5, r7, pc}
 8000330:	08008578 	.word	0x08008578
 8000334:	2000355c 	.word	0x2000355c
 8000338:	080085dc 	.word	0x080085dc
 800033c:	20003584 	.word	0x20003584
 8000340:	080085fc 	.word	0x080085fc
 8000344:	20003570 	.word	0x20003570
 8000348:	20003578 	.word	0x20003578

0800034c <rt_evbitwait_any>:

uint32_t rt_evbitwait_any(rt_evgroup_t Ev) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af02      	add	r7, sp, #8
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	4a09      	ldr	r2, [pc, #36]	; (8000380 <rt_evbitwait_any+0x34>)
 800035a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800035e:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdTRUE, pdFALSE, portMAX_DELAY);
 8000360:	f04f 33ff 	mov.w	r3, #4294967295
 8000364:	9300      	str	r3, [sp, #0]
 8000366:	2300      	movs	r3, #0
 8000368:	2201      	movs	r2, #1
 800036a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800036e:	68f8      	ldr	r0, [r7, #12]
 8000370:	f005 f918 	bl	80055a4 <xEventGroupWaitBits>
 8000374:	4603      	mov	r3, r0
}
 8000376:	4618      	mov	r0, r3
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20003578 	.word	0x20003578

08000384 <rt_evbit_set>:

void rt_evbit_set(rt_evgroup_t Ev, uint32_t bit) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	6039      	str	r1, [r7, #0]
 800038e:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000390:	2201      	movs	r2, #1
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	fa02 f303 	lsl.w	r3, r2, r3
 8000398:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	4a05      	ldr	r2, [pc, #20]	; (80003b4 <rt_evbit_set+0x30>)
 800039e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003a2:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBits(Evh, msk);
 80003a4:	68f9      	ldr	r1, [r7, #12]
 80003a6:	68b8      	ldr	r0, [r7, #8]
 80003a8:	f005 f9c6 	bl	8005738 <xEventGroupSetBits>
}
 80003ac:	bf00      	nop
 80003ae:	3710      	adds	r7, #16
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20003578 	.word	0x20003578

080003b8 <rt_evbit_set_from_ISR>:

void rt_evbit_set_from_ISR(rt_evgroup_t Ev, uint32_t bit) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	6039      	str	r1, [r7, #0]
 80003c2:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 80003c4:	2201      	movs	r2, #1
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	fa02 f303 	lsl.w	r3, r2, r3
 80003cc:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	4a06      	ldr	r2, [pc, #24]	; (80003ec <rt_evbit_set_from_ISR+0x34>)
 80003d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d6:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBitsFromISR(Evh, msk, pdFALSE);
 80003d8:	2200      	movs	r2, #0
 80003da:	68f9      	ldr	r1, [r7, #12]
 80003dc:	68b8      	ldr	r0, [r7, #8]
 80003de:	f005 fa63 	bl	80058a8 <xEventGroupSetBitsFromISR>
	portYIELD_FROM_ISR(pdFALSE);
}
 80003e2:	bf00      	nop
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20003578 	.word	0x20003578

080003f0 <rt_enqueue_ISR>:
	}

	return false;
}

bool rt_enqueue_ISR(rt_queue_t Q, void const *bf) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	6039      	str	r1, [r7, #0]
 80003fa:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <rt_enqueue_ISR+0x48>)
 8000400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000404:	617b      	str	r3, [r7, #20]
	TickType_t to = rt_queue_def[Q].timeout_enq;
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	4a0c      	ldr	r2, [pc, #48]	; (800043c <rt_enqueue_ISR+0x4c>)
 800040a:	011b      	lsls	r3, r3, #4
 800040c:	4413      	add	r3, r2
 800040e:	3308      	adds	r3, #8
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	613b      	str	r3, [r7, #16]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
	if (xQueueSendToBackFromISR(Qh, bf, xHigherPriorityTaskWoken) == pdPASS) {
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	2300      	movs	r3, #0
 800041c:	6839      	ldr	r1, [r7, #0]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f005 fd3a 	bl	8005e98 <xQueueGenericSendFromISR>
 8000424:	4603      	mov	r3, r0
 8000426:	2b01      	cmp	r3, #1
 8000428:	d101      	bne.n	800042e <rt_enqueue_ISR+0x3e>
		return true;
 800042a:	2301      	movs	r3, #1
 800042c:	e000      	b.n	8000430 <rt_enqueue_ISR+0x40>
	}

	return false;
 800042e:	2300      	movs	r3, #0
}
 8000430:	4618      	mov	r0, r3
 8000432:	3718      	adds	r7, #24
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20003584 	.word	0x20003584
 800043c:	080085dc 	.word	0x080085dc

08000440 <rt_dequeue>:

bool rt_dequeue(rt_queue_t Q, void *bf) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	6039      	str	r1, [r7, #0]
 800044a:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	4a0d      	ldr	r2, [pc, #52]	; (8000484 <rt_dequeue+0x44>)
 8000450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000454:	60fb      	str	r3, [r7, #12]
	TickType_t to = rt_queue_def[Q].timeout_deq;
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	4a0b      	ldr	r2, [pc, #44]	; (8000488 <rt_dequeue+0x48>)
 800045a:	011b      	lsls	r3, r3, #4
 800045c:	4413      	add	r3, r2
 800045e:	330c      	adds	r3, #12
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	60bb      	str	r3, [r7, #8]

	if (xQueueReceive(Qh, bf, to) == pdPASS) {
 8000464:	68ba      	ldr	r2, [r7, #8]
 8000466:	6839      	ldr	r1, [r7, #0]
 8000468:	68f8      	ldr	r0, [r7, #12]
 800046a:	f005 fda9 	bl	8005fc0 <xQueueReceive>
 800046e:	4603      	mov	r3, r0
 8000470:	2b01      	cmp	r3, #1
 8000472:	d101      	bne.n	8000478 <rt_dequeue+0x38>
		return true;
 8000474:	2301      	movs	r3, #1
 8000476:	e000      	b.n	800047a <rt_dequeue+0x3a>
	}

	return false;
 8000478:	2300      	movs	r3, #0
}
 800047a:	4618      	mov	r0, r3
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20003584 	.word	0x20003584
 8000488:	080085dc 	.word	0x080085dc

0800048c <task_ble>:
//#include "task_ble.h"
#include "bluetooth_le.h"
#include <stdio.h>
extern char ble_pData[MAX_SIZE];
// working all the time, checking if something is received or sending data to android device
void task_ble(void *pvParameters) {
 800048c:	b5b0      	push	{r4, r5, r7, lr}
 800048e:	b08c      	sub	sp, #48	; 0x30
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

//	int i = 0;
//	const TickType_t xDelay1000ms = pdMS_TO_TICKS(5000);
	bool status;
	xQueueBleData receivedBleData = { 0 };
 8000494:	f107 030c 	add.w	r3, r7, #12
 8000498:	2221      	movs	r2, #33	; 0x21
 800049a:	2100      	movs	r1, #0
 800049c:	4618      	mov	r0, r3
 800049e:	f007 fef0 	bl	8008282 <memset>
	for (;;) {

//		vTaskDelay(xDelay1000ms);

		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 80004a2:	f107 030c 	add.w	r3, r7, #12
 80004a6:	4619      	mov	r1, r3
 80004a8:	2000      	movs	r0, #0
 80004aa:	f7ff ffc9 	bl	8000440 <rt_dequeue>
 80004ae:	4603      	mov	r3, r0
 80004b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if (status) {
 80004b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d0f2      	beq.n	80004a2 <task_ble+0x16>
			if (receivedBleData.info == ble_received) {
 80004bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d1ee      	bne.n	80004a2 <task_ble+0x16>
				memcpy(ble_pData, receivedBleData.value, MAX_SIZE);
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <task_ble+0x60>)
 80004c6:	461d      	mov	r5, r3
 80004c8:	f107 040c 	add.w	r4, r7, #12
 80004cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004ce:	6028      	str	r0, [r5, #0]
 80004d0:	6069      	str	r1, [r5, #4]
 80004d2:	60aa      	str	r2, [r5, #8]
 80004d4:	60eb      	str	r3, [r5, #12]
 80004d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004d8:	6128      	str	r0, [r5, #16]
 80004da:	6169      	str	r1, [r5, #20]
 80004dc:	61aa      	str	r2, [r5, #24]
 80004de:	61eb      	str	r3, [r5, #28]
				memset(ble_pData, 0, MAX_SIZE);
 80004e0:	2220      	movs	r2, #32
 80004e2:	2100      	movs	r1, #0
 80004e4:	4801      	ldr	r0, [pc, #4]	; (80004ec <task_ble+0x60>)
 80004e6:	f007 fecc 	bl	8008282 <memset>
		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 80004ea:	e7da      	b.n	80004a2 <task_ble+0x16>
 80004ec:	2000353c 	.word	0x2000353c

080004f0 <task_eyes>:
 *      Author: Arkadiusz
 */

//#include "task_eyes.h"

void task_eyes(void *pvParameters) {
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 80004f8:	e7fe      	b.n	80004f8 <task_eyes+0x8>

080004fa <task_memory>:
 *      Author: Arkadiusz
 */

//#include "task_memory.h"

void task_memory(void *pvParameters) {
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 8000502:	e7fe      	b.n	8000502 <task_memory+0x8>

08000504 <HAL_GPIO_EXTI_Callback>:
bool ultrasound_was = false;
bool ultrasound_done = false;
extern char ble_pData[MAX_SIZE];

// interrupt pin callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b08c      	sub	sp, #48	; 0x30
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	80fb      	strh	r3, [r7, #6]
//	IRQ_ULTRASOUND_ECHO_Pin
	if (GPIO_Pin & IRQ_ULTRASOUND_ECHO_Pin) {
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	f003 0302 	and.w	r3, r3, #2
 8000514:	2b00      	cmp	r3, #0
 8000516:	d01e      	beq.n	8000556 <HAL_GPIO_EXTI_Callback+0x52>

		if (ultrasound_was == false) {
 8000518:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	f083 0301 	eor.w	r3, r3, #1
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2b00      	cmp	r3, #0
 8000524:	d008      	beq.n	8000538 <HAL_GPIO_EXTI_Callback+0x34>
			ultrasound_time = HAL_GetTick();
 8000526:	f000 ff3b 	bl	80013a0 <HAL_GetTick>
 800052a:	4602      	mov	r2, r0
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <HAL_GPIO_EXTI_Callback+0xa8>)
 800052e:	601a      	str	r2, [r3, #0]
			ultrasound_was = true;
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000532:	2201      	movs	r2, #1
 8000534:	701a      	strb	r2, [r3, #0]
 8000536:	e00e      	b.n	8000556 <HAL_GPIO_EXTI_Callback+0x52>
		} else {
			ultrasound_time = HAL_GetTick() - ultrasound_time;
 8000538:	f000 ff32 	bl	80013a0 <HAL_GetTick>
 800053c:	4602      	mov	r2, r0
 800053e:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <HAL_GPIO_EXTI_Callback+0xa8>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	4a19      	ldr	r2, [pc, #100]	; (80005ac <HAL_GPIO_EXTI_Callback+0xa8>)
 8000546:	6013      	str	r3, [r2, #0]
			ultrasound_was = false;
 8000548:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
			rt_evbit_set_from_ISR(rt_evgroup_sensors,
 800054e:	2100      	movs	r1, #0
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff ff31 	bl	80003b8 <rt_evbit_set_from_ISR>
//			ultrasound_done = true;
		}
	}

//	BLE INTERRUPT -> SOMETHING IS RECEIVED
	if (GPIO_Pin & IRQ_BLE_Pin) {
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	2b00      	cmp	r3, #0
 800055e:	d01e      	beq.n	800059e <HAL_GPIO_EXTI_Callback+0x9a>
//		rt_evbit_set_from_ISR(rt_evgroup_ble, evgroup_ble_evbit_received);
		ble_receive_data(ble_pData);
 8000560:	4813      	ldr	r0, [pc, #76]	; (80005b0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000562:	f7ff fe0d 	bl	8000180 <ble_receive_data>
		xQueueBleData ble_queue = { 0 };
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	2221      	movs	r2, #33	; 0x21
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f007 fe87 	bl	8008282 <memset>
		strncpy(ble_queue.value, ble_pData, MAX_SIZE);
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2220      	movs	r2, #32
 800057a:	490d      	ldr	r1, [pc, #52]	; (80005b0 <HAL_GPIO_EXTI_Callback+0xac>)
 800057c:	4618      	mov	r0, r3
 800057e:	f007 fe88 	bl	8008292 <strncpy>
		ble_queue.info = ble_received;
 8000582:	2300      	movs	r3, #0
 8000584:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		rt_enqueue_ISR(rt_queue_ble, &ble_queue);
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	4619      	mov	r1, r3
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff ff2e 	bl	80003f0 <rt_enqueue_ISR>
		memset(ble_pData, 0, MAX_SIZE);
 8000594:	2220      	movs	r2, #32
 8000596:	2100      	movs	r1, #0
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <HAL_GPIO_EXTI_Callback+0xac>)
 800059a:	f007 fe72 	bl	8008282 <memset>
	}
}
 800059e:	bf00      	nop
 80005a0:	3730      	adds	r7, #48	; 0x30
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000030 	.word	0x20000030
 80005ac:	2000002c 	.word	0x2000002c
 80005b0:	2000353c 	.word	0x2000353c

080005b4 <task_sensors>:

void task_sensors(void *pvParameters) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

	uint32_t evgroup = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
		// ultrasound measurment
//		ultrasound_trig();
//		if ( ultrasound_done ) {
//		}

		evgroup = rt_evbitwait_any(rt_evgroup_sensors);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff fec3 	bl	800034c <rt_evbitwait_any>
 80005c6:	60f8      	str	r0, [r7, #12]

		if (evgroup & (1 << evgroup_ultrasound_evbit_echo)) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0f6      	beq.n	80005c0 <task_sensors+0xc>
			// obsluga sensora ultradzwiekowego
			// policz odleglosc
			// na podstawie na danych zareaguj :)

			// jakis tam bit do ustawienia, np skret w lewo - uzupelnic
			rt_evbit_set(rt_evgroup_state_machine, (1 << 8));
 80005d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d6:	2001      	movs	r0, #1
 80005d8:	f7ff fed4 	bl	8000384 <rt_evbit_set>
		evgroup = rt_evbitwait_any(rt_evgroup_sensors);
 80005dc:	e7f0      	b.n	80005c0 <task_sensors+0xc>

080005de <task_state_machine>:
 */

//#include "task_state_machine.h"
#include "runtime.h"
#define jakis_tam_bit 12
void task_state_machine(void *pvParameters) {
 80005de:	b580      	push	{r7, lr}
 80005e0:	b084      	sub	sp, #16
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	uint32_t evgroup = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]

	for (;;) {

		evgroup = rt_evbitwait_any(rt_evgroup_sensors);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff feae 	bl	800034c <rt_evbitwait_any>
 80005f0:	60f8      	str	r0, [r7, #12]
 80005f2:	e7fa      	b.n	80005ea <task_state_machine+0xc>

080005f4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <MX_ADC_Init+0xa8>)
 8000606:	4a26      	ldr	r2, [pc, #152]	; (80006a0 <MX_ADC_Init+0xac>)
 8000608:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800060a:	4b24      	ldr	r3, [pc, #144]	; (800069c <MX_ADC_Init+0xa8>)
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <MX_ADC_Init+0xa8>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <MX_ADC_Init+0xa8>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_ADC_Init+0xa8>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_ADC_Init+0xa8>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_ADC_Init+0xa8>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_ADC_Init+0xa8>)
 8000630:	2200      	movs	r2, #0
 8000632:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_ADC_Init+0xa8>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_ADC_Init+0xa8>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_ADC_Init+0xa8>)
 8000644:	2201      	movs	r2, #1
 8000646:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_ADC_Init+0xa8>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_ADC_Init+0xa8>)
 8000652:	2210      	movs	r2, #16
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_ADC_Init+0xa8>)
 8000658:	2200      	movs	r2, #0
 800065a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_ADC_Init+0xa8>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <MX_ADC_Init+0xa8>)
 8000666:	f000 fea5 	bl	80013b4 <HAL_ADC_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000670:	f000 fab8 	bl	8000be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000674:	2301      	movs	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000678:	2301      	movs	r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_ADC_Init+0xa8>)
 8000686:	f001 f939 	bl	80018fc <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000690:	f000 faa8 	bl	8000be4 <Error_Handler>
  }

}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000358c 	.word	0x2000358c
 80006a0:	40012400 	.word	0x40012400

080006a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a2d      	ldr	r2, [pc, #180]	; (8000778 <HAL_ADC_MspInit+0xd4>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d154      	bne.n	8000770 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006c6:	4b2d      	ldr	r3, [pc, #180]	; (800077c <HAL_ADC_MspInit+0xd8>)
 80006c8:	6a1b      	ldr	r3, [r3, #32]
 80006ca:	4a2c      	ldr	r2, [pc, #176]	; (800077c <HAL_ADC_MspInit+0xd8>)
 80006cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006d0:	6213      	str	r3, [r2, #32]
 80006d2:	4b2a      	ldr	r3, [pc, #168]	; (800077c <HAL_ADC_MspInit+0xd8>)
 80006d4:	6a1b      	ldr	r3, [r3, #32]
 80006d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b27      	ldr	r3, [pc, #156]	; (800077c <HAL_ADC_MspInit+0xd8>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a26      	ldr	r2, [pc, #152]	; (800077c <HAL_ADC_MspInit+0xd8>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <HAL_ADC_MspInit+0xd8>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <HAL_ADC_MspInit+0xd8>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	4a20      	ldr	r2, [pc, #128]	; (800077c <HAL_ADC_MspInit+0xd8>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	61d3      	str	r3, [r2, #28]
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <HAL_ADC_MspInit+0xd8>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_ADC_MspInit+0xd8>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <HAL_ADC_MspInit+0xd8>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	61d3      	str	r3, [r2, #28]
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_ADC_MspInit+0xd8>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 8000726:	2301      	movs	r3, #1
 8000728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072a:	2303      	movs	r3, #3
 800072c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <HAL_ADC_MspInit+0xdc>)
 800073a:	f001 fc87 	bl	800204c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 800073e:	2386      	movs	r3, #134	; 0x86
 8000740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000742:	2303      	movs	r3, #3
 8000744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <HAL_ADC_MspInit+0xe0>)
 8000752:	f001 fc7b 	bl	800204c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 8000756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	4807      	ldr	r0, [pc, #28]	; (8000788 <HAL_ADC_MspInit+0xe4>)
 800076c:	f001 fc6e 	bl	800204c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000770:	bf00      	nop
 8000772:	3730      	adds	r7, #48	; 0x30
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40012400 	.word	0x40012400
 800077c:	40023800 	.word	0x40023800
 8000780:	40020800 	.word	0x40020800
 8000784:	40020000 	.word	0x40020000
 8000788:	40020400 	.word	0x40020400

0800078c <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007d4:	4a05      	ldr	r2, [pc, #20]	; (80007ec <MX_FREERTOS_Init+0x1c>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_FREERTOS_Init+0x20>)
 80007da:	f004 fdbf 	bl	800535c <osThreadNew>
 80007de:	4602      	mov	r2, r0
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <MX_FREERTOS_Init+0x24>)
 80007e2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 80007e4:	f7ff fd08 	bl	80001f8 <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	0800861c 	.word	0x0800861c
 80007f0:	080007f9 	.word	0x080007f9
 80007f4:	200035e0 	.word	0x200035e0

080007f8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000800:	2001      	movs	r0, #1
 8000802:	f004 fe55 	bl	80054b0 <osDelay>
 8000806:	e7fb      	b.n	8000800 <StartDefaultTask+0x8>

08000808 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b72      	ldr	r3, [pc, #456]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a71      	ldr	r2, [pc, #452]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b6f      	ldr	r3, [pc, #444]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	4b6c      	ldr	r3, [pc, #432]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a6b      	ldr	r2, [pc, #428]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 800083c:	f043 0320 	orr.w	r3, r3, #32
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b69      	ldr	r3, [pc, #420]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b66      	ldr	r3, [pc, #408]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a65      	ldr	r2, [pc, #404]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b63      	ldr	r3, [pc, #396]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b60      	ldr	r3, [pc, #384]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	4a5f      	ldr	r2, [pc, #380]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	61d3      	str	r3, [r2, #28]
 8000872:	4b5d      	ldr	r3, [pc, #372]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	4b5a      	ldr	r3, [pc, #360]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a59      	ldr	r2, [pc, #356]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b57      	ldr	r3, [pc, #348]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 8000896:	2200      	movs	r2, #0
 8000898:	f640 616e 	movw	r1, #3694	; 0xe6e
 800089c:	4853      	ldr	r0, [pc, #332]	; (80009ec <MX_GPIO_Init+0x1e4>)
 800089e:	f001 fe47 	bl	8002530 <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 80008a2:	2200      	movs	r2, #0
 80008a4:	f248 7108 	movw	r1, #34568	; 0x8708
 80008a8:	4851      	ldr	r0, [pc, #324]	; (80009f0 <MX_GPIO_Init+0x1e8>)
 80008aa:	f001 fe41 	bl	8002530 <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2110      	movs	r1, #16
 80008b2:	484e      	ldr	r0, [pc, #312]	; (80009ec <MX_GPIO_Init+0x1e4>)
 80008b4:	f001 fe3c 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 80008b8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008be:	2303      	movs	r3, #3
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4847      	ldr	r0, [pc, #284]	; (80009ec <MX_GPIO_Init+0x1e4>)
 80008ce:	f001 fbbd 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 80008d2:	f640 637e 	movw	r3, #3710	; 0xe7e
 80008d6:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	4840      	ldr	r0, [pc, #256]	; (80009ec <MX_GPIO_Init+0x1e4>)
 80008ec:	f001 fbae 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 80008f0:	f248 7308 	movw	r3, #34568	; 0x8708
 80008f4:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4839      	ldr	r0, [pc, #228]	; (80009f0 <MX_GPIO_Init+0x1e8>)
 800090a:	f001 fb9f 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 800090e:	f241 0370 	movw	r3, #4208	; 0x1070
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000914:	2303      	movs	r3, #3
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	4833      	ldr	r0, [pc, #204]	; (80009f0 <MX_GPIO_Init+0x1e8>)
 8000924:	f001 fb92 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin|IRQ_ULTRASOUND_ECHO_Pin;
 8000928:	2303      	movs	r3, #3
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092c:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <MX_GPIO_Init+0x1ec>)
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	482f      	ldr	r0, [pc, #188]	; (80009f8 <MX_GPIO_Init+0x1f0>)
 800093c:	f001 fb86 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 8000940:	f242 333c 	movw	r3, #9020	; 0x233c
 8000944:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000946:	2303      	movs	r3, #3
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4828      	ldr	r0, [pc, #160]	; (80009f8 <MX_GPIO_Init+0x1f0>)
 8000956:	f001 fb79 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_LEFT_Pin;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4822      	ldr	r0, [pc, #136]	; (80009f8 <MX_GPIO_Init+0x1f0>)
 8000970:	f001 fb6c 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4819      	ldr	r0, [pc, #100]	; (80009ec <MX_GPIO_Init+0x1e4>)
 8000988:	f001 fb60 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 800098c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000992:	2300      	movs	r3, #0
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	4813      	ldr	r0, [pc, #76]	; (80009f0 <MX_GPIO_Init+0x1e8>)
 80009a2:	f001 fb53 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009a6:	2304      	movs	r3, #4
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009aa:	2303      	movs	r3, #3
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4810      	ldr	r0, [pc, #64]	; (80009fc <MX_GPIO_Init+0x1f4>)
 80009ba:	f001 fb47 	bl	800204c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2105      	movs	r1, #5
 80009c2:	2006      	movs	r0, #6
 80009c4:	f001 fafe 	bl	8001fc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009c8:	2006      	movs	r0, #6
 80009ca:	f001 fb27 	bl	800201c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2105      	movs	r1, #5
 80009d2:	2007      	movs	r0, #7
 80009d4:	f001 faf6 	bl	8001fc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009d8:	2007      	movs	r0, #7
 80009da:	f001 fb1f 	bl	800201c <HAL_NVIC_EnableIRQ>

}
 80009de:	bf00      	nop
 80009e0:	3728      	adds	r7, #40	; 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020000 	.word	0x40020000
 80009f4:	10110000 	.word	0x10110000
 80009f8:	40020400 	.word	0x40020400
 80009fc:	40020c00 	.word	0x40020c00

08000a00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a06:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <MX_I2C1_Init+0x54>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a0c:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <MX_I2C1_Init+0x58>)
 8000a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a3e:	f001 fdc1 	bl	80025c4 <HAL_I2C_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a48:	f000 f8cc 	bl	8000be4 <Error_Handler>
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200035e4 	.word	0x200035e4
 8000a54:	40005400 	.word	0x40005400
 8000a58:	000186a0 	.word	0x000186a0

08000a5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <HAL_I2C_MspInit+0x7c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d127      	bne.n	8000ace <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_I2C_MspInit+0x80>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	4a16      	ldr	r2, [pc, #88]	; (8000adc <HAL_I2C_MspInit+0x80>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	61d3      	str	r3, [r2, #28]
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_I2C_MspInit+0x80>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a96:	23c0      	movs	r3, #192	; 0xc0
 8000a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9a:	2312      	movs	r3, #18
 8000a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <HAL_I2C_MspInit+0x84>)
 8000ab2:	f001 facb 	bl	800204c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_I2C_MspInit+0x80>)
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_I2C_MspInit+0x80>)
 8000abc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac0:	6253      	str	r3, [r2, #36]	; 0x24
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_I2C_MspInit+0x80>)
 8000ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	; 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae8:	f000 fc2f 	bl	800134a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aec:	f000 f818 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af0:	f7ff fe8a 	bl	8000808 <MX_GPIO_Init>
  MX_ADC_Init();
 8000af4:	f7ff fd7e 	bl	80005f4 <MX_ADC_Init>
  MX_I2C1_Init();
 8000af8:	f7ff ff82 	bl	8000a00 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000afc:	f000 f970 	bl	8000de0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b00:	f000 f9e0 	bl	8000ec4 <MX_TIM3_Init>
  MX_TIM9_Init();
 8000b04:	f000 fa52 	bl	8000fac <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8000b08:	f000 fb8c 	bl	8001224 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	device_init();
 8000b0c:	f7ff fb60 	bl	80001d0 <device_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000b10:	f004 fbbe 	bl	8005290 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8000b14:	f7ff fe5c 	bl	80007d0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b18:	f004 fbec 	bl	80052f4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000b1c:	e7fe      	b.n	8000b1c <main+0x38>
	...

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b092      	sub	sp, #72	; 0x48
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2234      	movs	r2, #52	; 0x34
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 fba7 	bl	8008282 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <SystemClock_Config+0x9c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <SystemClock_Config+0x9c>)
 8000b4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b50:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b52:	2303      	movs	r3, #3
 8000b54:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5e:	2310      	movs	r3, #16
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b62:	2302      	movs	r3, #2
 8000b64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000b6c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000b70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000b72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 fecb 	bl	8002918 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000b88:	f000 f82c 	bl	8000be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2303      	movs	r3, #3
 8000b92:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 fb35 	bl	8003214 <HAL_RCC_ClockConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bb0:	f000 f818 	bl	8000be4 <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3748      	adds	r7, #72	; 0x48
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d101      	bne.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bd2:	f000 fbd3 	bl	800137c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40000c00 	.word	0x40000c00

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <HAL_MspInit+0x64>)
 8000c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0e:	4a16      	ldr	r2, [pc, #88]	; (8000c68 <HAL_MspInit+0x64>)
 8000c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c14:	6253      	str	r3, [r2, #36]	; 0x24
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <HAL_MspInit+0x64>)
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_MspInit+0x64>)
 8000c24:	6a1b      	ldr	r3, [r3, #32]
 8000c26:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <HAL_MspInit+0x64>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6213      	str	r3, [r2, #32]
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_MspInit+0x64>)
 8000c30:	6a1b      	ldr	r3, [r3, #32]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_MspInit+0x64>)
 8000c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_MspInit+0x64>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6253      	str	r3, [r2, #36]	; 0x24
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_MspInit+0x64>)
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	210f      	movs	r1, #15
 8000c56:	f06f 0001 	mvn.w	r0, #1
 8000c5a:	f001 f9b3 	bl	8001fc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	; 0x30
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	202e      	movs	r0, #46	; 0x2e
 8000c82:	f001 f99f 	bl	8001fc4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000c86:	202e      	movs	r0, #46	; 0x2e
 8000c88:	f001 f9c8 	bl	800201c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <HAL_InitTick+0x9c>)
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	4a1d      	ldr	r2, [pc, #116]	; (8000d08 <HAL_InitTick+0x9c>)
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	6253      	str	r3, [r2, #36]	; 0x24
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <HAL_InitTick+0x9c>)
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca4:	f107 0210 	add.w	r2, r7, #16
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f002 fcf8 	bl	80036a4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cb4:	f002 fcce 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 8000cb8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbc:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <HAL_InitTick+0xa0>)
 8000cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc2:	0c9b      	lsrs	r3, r3, #18
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_InitTick+0xa4>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <HAL_InitTick+0xa8>)
 8000ccc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_InitTick+0xa4>)
 8000cd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <HAL_InitTick+0xa4>)
 8000cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cda:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_InitTick+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_InitTick+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <HAL_InitTick+0xa4>)
 8000cea:	f002 fd7d 	bl	80037e8 <HAL_TIM_Base_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d104      	bne.n	8000cfe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000cf4:	4806      	ldr	r0, [pc, #24]	; (8000d10 <HAL_InitTick+0xa4>)
 8000cf6:	f002 fe1f 	bl	8003938 <HAL_TIM_Base_Start_IT>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3730      	adds	r7, #48	; 0x30
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	431bde83 	.word	0x431bde83
 8000d10:	20003638 	.word	0x20003638
 8000d14:	40000c00 	.word	0x40000c00

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <HardFault_Handler+0x4>

08000d2a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <MemManage_Handler+0x4>

08000d30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <BusFault_Handler+0x4>

08000d36 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <UsageFault_Handler+0x4>

08000d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f001 fc21 	bl	8002594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f001 fc1a 	bl	8002594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <TIM5_IRQHandler+0x10>)
 8000d6a:	f002 fefc 	bl	8003b66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20003638 	.word	0x20003638

08000d78 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <SystemInit+0x5c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <SystemInit+0x5c>)
 8000d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d86:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <SystemInit+0x5c>)
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	4911      	ldr	r1, [pc, #68]	; (8000dd4 <SystemInit+0x5c>)
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <SystemInit+0x60>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <SystemInit+0x5c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <SystemInit+0x5c>)
 8000d9a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000d9e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000da2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <SystemInit+0x5c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <SystemInit+0x5c>)
 8000daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dae:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <SystemInit+0x5c>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <SystemInit+0x5c>)
 8000db6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000dba:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SystemInit+0x5c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <SystemInit+0x64>)
 8000dc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc8:	609a      	str	r2, [r3, #8]
#endif
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	88ffc00c 	.word	0x88ffc00c
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0318 	add.w	r3, r7, #24
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000e0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <MX_TIM2_Init+0xe0>)
 8000e0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e12:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <MX_TIM2_Init+0xe0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <MX_TIM2_Init+0xe0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200;
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <MX_TIM2_Init+0xe0>)
 8000e20:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000e24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <MX_TIM2_Init+0xe0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <MX_TIM2_Init+0xe0>)
 8000e2e:	2280      	movs	r2, #128	; 0x80
 8000e30:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e32:	4823      	ldr	r0, [pc, #140]	; (8000ec0 <MX_TIM2_Init+0xe0>)
 8000e34:	f002 fcd8 	bl	80037e8 <HAL_TIM_Base_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000e3e:	f7ff fed1 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e46:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	481c      	ldr	r0, [pc, #112]	; (8000ec0 <MX_TIM2_Init+0xe0>)
 8000e50:	f003 f8f6 	bl	8004040 <HAL_TIM_ConfigClockSource>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e5a:	f7ff fec3 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e5e:	4818      	ldr	r0, [pc, #96]	; (8000ec0 <MX_TIM2_Init+0xe0>)
 8000e60:	f002 fdd0 	bl	8003a04 <HAL_TIM_PWM_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e6a:	f7ff febb 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4810      	ldr	r0, [pc, #64]	; (8000ec0 <MX_TIM2_Init+0xe0>)
 8000e7e:	f003 fdf1 	bl	8004a64 <HAL_TIMEx_MasterConfigSynchronization>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000e88:	f7ff feac 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8c:	2360      	movs	r3, #96	; 0x60
 8000e8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4807      	ldr	r0, [pc, #28]	; (8000ec0 <MX_TIM2_Init+0xe0>)
 8000ea4:	f002 ff3c 	bl	8003d20 <HAL_TIM_PWM_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000eae:	f7ff fe99 	bl	8000be4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000eb2:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <MX_TIM2_Init+0xe0>)
 8000eb4:	f000 f932 	bl	800111c <HAL_TIM_MspPostInit>

}
 8000eb8:	bf00      	nop
 8000eba:	3728      	adds	r7, #40	; 0x28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200036ec 	.word	0x200036ec

08000ec4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eca:	f107 0318 	add.w	r3, r7, #24
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MX_TIM3_Init+0xe0>)
 8000ef0:	4a2d      	ldr	r2, [pc, #180]	; (8000fa8 <MX_TIM3_Init+0xe4>)
 8000ef2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ef4:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <MX_TIM3_Init+0xe0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <MX_TIM3_Init+0xe0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200;
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <MX_TIM3_Init+0xe0>)
 8000f02:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000f06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <MX_TIM3_Init+0xe0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <MX_TIM3_Init+0xe0>)
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f14:	4823      	ldr	r0, [pc, #140]	; (8000fa4 <MX_TIM3_Init+0xe0>)
 8000f16:	f002 fc67 	bl	80037e8 <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000f20:	f7ff fe60 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f28:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	481c      	ldr	r0, [pc, #112]	; (8000fa4 <MX_TIM3_Init+0xe0>)
 8000f32:	f003 f885 	bl	8004040 <HAL_TIM_ConfigClockSource>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f3c:	f7ff fe52 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f40:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <MX_TIM3_Init+0xe0>)
 8000f42:	f002 fd5f 	bl	8003a04 <HAL_TIM_PWM_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f4c:	f7ff fe4a 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <MX_TIM3_Init+0xe0>)
 8000f60:	f003 fd80 	bl	8004a64 <HAL_TIMEx_MasterConfigSynchronization>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000f6a:	f7ff fe3b 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6e:	2360      	movs	r3, #96	; 0x60
 8000f70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2208      	movs	r2, #8
 8000f82:	4619      	mov	r1, r3
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <MX_TIM3_Init+0xe0>)
 8000f86:	f002 fecb 	bl	8003d20 <HAL_TIM_PWM_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000f90:	f7ff fe28 	bl	8000be4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <MX_TIM3_Init+0xe0>)
 8000f96:	f000 f8c1 	bl	800111c <HAL_TIM_MspPostInit>

}
 8000f9a:	bf00      	nop
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20003674 	.word	0x20003674
 8000fa8:	40000400 	.word	0x40000400

08000fac <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fca:	463b      	mov	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <MX_TIM9_Init+0xe0>)
 8000fd8:	4a2d      	ldr	r2, [pc, #180]	; (8001090 <MX_TIM9_Init+0xe4>)
 8000fda:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32768;
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <MX_TIM9_Init+0xe0>)
 8000fde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fe2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <MX_TIM9_Init+0xe0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19;
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <MX_TIM9_Init+0xe0>)
 8000fec:	2213      	movs	r2, #19
 8000fee:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000ff0:	4b26      	ldr	r3, [pc, #152]	; (800108c <MX_TIM9_Init+0xe0>)
 8000ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ff8:	4b24      	ldr	r3, [pc, #144]	; (800108c <MX_TIM9_Init+0xe0>)
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000ffe:	4823      	ldr	r0, [pc, #140]	; (800108c <MX_TIM9_Init+0xe0>)
 8001000:	f002 fbf2 	bl	80037e8 <HAL_TIM_Base_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800100a:	f7ff fdeb 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001012:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001014:	f107 0318 	add.w	r3, r7, #24
 8001018:	4619      	mov	r1, r3
 800101a:	481c      	ldr	r0, [pc, #112]	; (800108c <MX_TIM9_Init+0xe0>)
 800101c:	f003 f810 	bl	8004040 <HAL_TIM_ConfigClockSource>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM9_Init+0x7e>
  {
    Error_Handler();
 8001026:	f7ff fddd 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800102a:	4818      	ldr	r0, [pc, #96]	; (800108c <MX_TIM9_Init+0xe0>)
 800102c:	f002 fcea 	bl	8003a04 <HAL_TIM_PWM_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM9_Init+0x8e>
  {
    Error_Handler();
 8001036:	f7ff fdd5 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4619      	mov	r1, r3
 8001048:	4810      	ldr	r0, [pc, #64]	; (800108c <MX_TIM9_Init+0xe0>)
 800104a:	f003 fd0b 	bl	8004a64 <HAL_TIMEx_MasterConfigSynchronization>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8001054:	f7ff fdc6 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001058:	2360      	movs	r3, #96	; 0x60
 800105a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	2204      	movs	r2, #4
 800106c:	4619      	mov	r1, r3
 800106e:	4807      	ldr	r0, [pc, #28]	; (800108c <MX_TIM9_Init+0xe0>)
 8001070:	f002 fe56 	bl	8003d20 <HAL_TIM_PWM_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM9_Init+0xd2>
  {
    Error_Handler();
 800107a:	f7ff fdb3 	bl	8000be4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <MX_TIM9_Init+0xe0>)
 8001080:	f000 f84c 	bl	800111c <HAL_TIM_MspPostInit>

}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200036b0 	.word	0x200036b0
 8001090:	40010800 	.word	0x40010800

08001094 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001094:	b480      	push	{r7}
 8001096:	b087      	sub	sp, #28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a4:	d10c      	bne.n	80010c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_TIM_Base_MspInit+0x7c>)
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	4a19      	ldr	r2, [pc, #100]	; (8001110 <HAL_TIM_Base_MspInit+0x7c>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6253      	str	r3, [r2, #36]	; 0x24
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <HAL_TIM_Base_MspInit+0x7c>)
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80010be:	e022      	b.n	8001106 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a13      	ldr	r2, [pc, #76]	; (8001114 <HAL_TIM_Base_MspInit+0x80>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d10c      	bne.n	80010e4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_TIM_Base_MspInit+0x7c>)
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <HAL_TIM_Base_MspInit+0x7c>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6253      	str	r3, [r2, #36]	; 0x24
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_TIM_Base_MspInit+0x7c>)
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
}
 80010e2:	e010      	b.n	8001106 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM9)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_TIM_Base_MspInit+0x84>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d10b      	bne.n	8001106 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_TIM_Base_MspInit+0x7c>)
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_TIM_Base_MspInit+0x7c>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6213      	str	r3, [r2, #32]
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_TIM_Base_MspInit+0x7c>)
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
}
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	40023800 	.word	0x40023800
 8001114:	40000400 	.word	0x40000400
 8001118:	40010800 	.word	0x40010800

0800111c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800113c:	d11c      	bne.n	8001178 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <HAL_TIM_MspPostInit+0xf0>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	4a32      	ldr	r2, [pc, #200]	; (800120c <HAL_TIM_MspPostInit+0xf0>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	61d3      	str	r3, [r2, #28]
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <HAL_TIM_MspPostInit+0xf0>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 8001156:	2301      	movs	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001166:	2301      	movs	r3, #1
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4827      	ldr	r0, [pc, #156]	; (8001210 <HAL_TIM_MspPostInit+0xf4>)
 8001172:	f000 ff6b 	bl	800204c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001176:	e044      	b.n	8001202 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a25      	ldr	r2, [pc, #148]	; (8001214 <HAL_TIM_MspPostInit+0xf8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d11d      	bne.n	80011be <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <HAL_TIM_MspPostInit+0xf0>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a21      	ldr	r2, [pc, #132]	; (800120c <HAL_TIM_MspPostInit+0xf0>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <HAL_TIM_MspPostInit+0xf0>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 800119a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011ac:	2302      	movs	r3, #2
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	4818      	ldr	r0, [pc, #96]	; (8001218 <HAL_TIM_MspPostInit+0xfc>)
 80011b8:	f000 ff48 	bl	800204c <HAL_GPIO_Init>
}
 80011bc:	e021      	b.n	8001202 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a16      	ldr	r2, [pc, #88]	; (800121c <HAL_TIM_MspPostInit+0x100>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d11c      	bne.n	8001202 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_TIM_MspPostInit+0xf0>)
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_TIM_MspPostInit+0xf0>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	61d3      	str	r3, [r2, #28]
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_TIM_MspPostInit+0xf0>)
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 80011e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80011f2:	2303      	movs	r3, #3
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4808      	ldr	r0, [pc, #32]	; (8001220 <HAL_TIM_MspPostInit+0x104>)
 80011fe:	f000 ff25 	bl	800204c <HAL_GPIO_Init>
}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000
 8001214:	40000400 	.word	0x40000400
 8001218:	40020800 	.word	0x40020800
 800121c:	40010800 	.word	0x40010800
 8001220:	40020400 	.word	0x40020400

08001224 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_USART3_UART_Init+0x4c>)
 800122a:	4a12      	ldr	r2, [pc, #72]	; (8001274 <MX_USART3_UART_Init+0x50>)
 800122c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <MX_USART3_UART_Init+0x4c>)
 8001230:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001234:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_USART3_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_USART3_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_USART3_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_USART3_UART_Init+0x4c>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_USART3_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_USART3_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_USART3_UART_Init+0x4c>)
 800125c:	f003 fc9c 	bl	8004b98 <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001266:	f7ff fcbd 	bl	8000be4 <Error_Handler>
  }

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20003728 	.word	0x20003728
 8001274:	40004800 	.word	0x40004800

08001278 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <HAL_UART_MspInit+0x7c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d128      	bne.n	80012ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_UART_MspInit+0x80>)
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <HAL_UART_MspInit+0x80>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a4:	6253      	str	r3, [r2, #36]	; 0x24
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_UART_MspInit+0x80>)
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_UART_MspInit+0x80>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <HAL_UART_MspInit+0x80>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_UART_MspInit+0x80>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012dc:	2307      	movs	r3, #7
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <HAL_UART_MspInit+0x84>)
 80012e8:	f000 feb0 	bl	800204c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012ec:	bf00      	nop
 80012ee:	3728      	adds	r7, #40	; 0x28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40004800 	.word	0x40004800
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020400 	.word	0x40020400

08001300 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001300:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001302:	e003      	b.n	800130c <LoopCopyDataInit>

08001304 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001306:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001308:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800130a:	3104      	adds	r1, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800130c:	480a      	ldr	r0, [pc, #40]	; (8001338 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001310:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001312:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001314:	d3f6      	bcc.n	8001304 <CopyDataInit>
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001318:	e002      	b.n	8001320 <LoopFillZerobss>

0800131a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800131c:	f842 3b04 	str.w	r3, [r2], #4

08001320 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001322:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001324:	d3f9      	bcc.n	800131a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001326:	f7ff fd27 	bl	8000d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132a:	f006 ff7b 	bl	8008224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800132e:	f7ff fbd9 	bl	8000ae4 <main>
  bx lr
 8001332:	4770      	bx	lr
  ldr r3, =_sidata
 8001334:	0800866c 	.word	0x0800866c
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800133c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001340:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001344:	200037ac 	.word	0x200037ac

08001348 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC1_IRQHandler>

0800134a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001354:	2003      	movs	r0, #3
 8001356:	f000 fe15 	bl	8001f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fc86 	bl	8000c6c <HAL_InitTick>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	e001      	b.n	8001370 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800136c:	f7ff fc4a 	bl	8000c04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001370:	79fb      	ldrb	r3, [r7, #7]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x1c>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_IncTick+0x20>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4413      	add	r3, r2
 800138a:	4a03      	ldr	r2, [pc, #12]	; (8001398 <HAL_IncTick+0x1c>)
 800138c:	6013      	str	r3, [r2, #0]
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20003768 	.word	0x20003768
 800139c:	20000008 	.word	0x20000008

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <HAL_GetTick+0x10>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20003768 	.word	0x20003768

080013b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08e      	sub	sp, #56	; 0x38
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e282      	b.n	80018da <HAL_ADC_Init+0x526>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a9d      	ldr	r2, [pc, #628]	; (8001650 <HAL_ADC_Init+0x29c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d004      	beq.n	80013e8 <HAL_ADC_Init+0x34>
 80013de:	f240 11bd 	movw	r1, #445	; 0x1bd
 80013e2:	489c      	ldr	r0, [pc, #624]	; (8001654 <HAL_ADC_Init+0x2a0>)
 80013e4:	f7ff fc04 	bl	8000bf0 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00e      	beq.n	800140e <HAL_ADC_Init+0x5a>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f8:	d009      	beq.n	800140e <HAL_ADC_Init+0x5a>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001402:	d004      	beq.n	800140e <HAL_ADC_Init+0x5a>
 8001404:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8001408:	4892      	ldr	r0, [pc, #584]	; (8001654 <HAL_ADC_Init+0x2a0>)
 800140a:	f7ff fbf1 	bl	8000bf0 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d013      	beq.n	800143e <HAL_ADC_Init+0x8a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141e:	d00e      	beq.n	800143e <HAL_ADC_Init+0x8a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001428:	d009      	beq.n	800143e <HAL_ADC_Init+0x8a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001432:	d004      	beq.n	800143e <HAL_ADC_Init+0x8a>
 8001434:	f240 11bf 	movw	r1, #447	; 0x1bf
 8001438:	4886      	ldr	r0, [pc, #536]	; (8001654 <HAL_ADC_Init+0x2a0>)
 800143a:	f7ff fbd9 	bl	8000bf0 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <HAL_ADC_Init+0xa6>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800144e:	d004      	beq.n	800145a <HAL_ADC_Init+0xa6>
 8001450:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001454:	487f      	ldr	r0, [pc, #508]	; (8001654 <HAL_ADC_Init+0x2a0>)
 8001456:	f7ff fbcb 	bl	8000bf0 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d009      	beq.n	8001476 <HAL_ADC_Init+0xc2>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800146a:	d004      	beq.n	8001476 <HAL_ADC_Init+0xc2>
 800146c:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001470:	4878      	ldr	r0, [pc, #480]	; (8001654 <HAL_ADC_Init+0x2a0>)
 8001472:	f7ff fbbd 	bl	8000bf0 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147e:	d008      	beq.n	8001492 <HAL_ADC_Init+0xde>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <HAL_ADC_Init+0xde>
 8001488:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800148c:	4871      	ldr	r0, [pc, #452]	; (8001654 <HAL_ADC_Init+0x2a0>)
 800148e:	f7ff fbaf 	bl	8000bf0 <assert_failed>
  assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d020      	beq.n	80014dc <HAL_ADC_Init+0x128>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2b10      	cmp	r3, #16
 80014a0:	d01c      	beq.n	80014dc <HAL_ADC_Init+0x128>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2b20      	cmp	r3, #32
 80014a8:	d018      	beq.n	80014dc <HAL_ADC_Init+0x128>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2b30      	cmp	r3, #48	; 0x30
 80014b0:	d014      	beq.n	80014dc <HAL_ADC_Init+0x128>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2b40      	cmp	r3, #64	; 0x40
 80014b8:	d010      	beq.n	80014dc <HAL_ADC_Init+0x128>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	2b50      	cmp	r3, #80	; 0x50
 80014c0:	d00c      	beq.n	80014dc <HAL_ADC_Init+0x128>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	2b60      	cmp	r3, #96	; 0x60
 80014c8:	d008      	beq.n	80014dc <HAL_ADC_Init+0x128>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2b70      	cmp	r3, #112	; 0x70
 80014d0:	d004      	beq.n	80014dc <HAL_ADC_Init+0x128>
 80014d2:	f240 11c3 	movw	r1, #451	; 0x1c3
 80014d6:	485f      	ldr	r0, [pc, #380]	; (8001654 <HAL_ADC_Init+0x2a0>)
 80014d8:	f7ff fb8a 	bl	8000bf0 <assert_failed>
  assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <HAL_ADC_Init+0x158>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014ec:	d00e      	beq.n	800150c <HAL_ADC_Init+0x158>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f6:	d009      	beq.n	800150c <HAL_ADC_Init+0x158>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001500:	d004      	beq.n	800150c <HAL_ADC_Init+0x158>
 8001502:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001506:	4853      	ldr	r0, [pc, #332]	; (8001654 <HAL_ADC_Init+0x2a0>)
 8001508:	f7ff fb72 	bl	8000bf0 <assert_failed>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <HAL_ADC_Init+0x172>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	2b04      	cmp	r3, #4
 800151a:	d004      	beq.n	8001526 <HAL_ADC_Init+0x172>
 800151c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001520:	484c      	ldr	r0, [pc, #304]	; (8001654 <HAL_ADC_Init+0x2a0>)
 8001522:	f7ff fb65 	bl	8000bf0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800152c:	2b00      	cmp	r3, #0
 800152e:	d009      	beq.n	8001544 <HAL_ADC_Init+0x190>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001536:	2b01      	cmp	r3, #1
 8001538:	d004      	beq.n	8001544 <HAL_ADC_Init+0x190>
 800153a:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800153e:	4845      	ldr	r0, [pc, #276]	; (8001654 <HAL_ADC_Init+0x2a0>)
 8001540:	f7ff fb56 	bl	8000bf0 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001548:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800154c:	d03e      	beq.n	80015cc <HAL_ADC_Init+0x218>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001552:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001556:	d039      	beq.n	80015cc <HAL_ADC_Init+0x218>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001560:	d034      	beq.n	80015cc <HAL_ADC_Init+0x218>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001566:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800156a:	d02f      	beq.n	80015cc <HAL_ADC_Init+0x218>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001574:	d02a      	beq.n	80015cc <HAL_ADC_Init+0x218>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800157e:	d025      	beq.n	80015cc <HAL_ADC_Init+0x218>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001584:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001588:	d020      	beq.n	80015cc <HAL_ADC_Init+0x218>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8001592:	d01b      	beq.n	80015cc <HAL_ADC_Init+0x218>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001598:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800159c:	d016      	beq.n	80015cc <HAL_ADC_Init+0x218>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d012      	beq.n	80015cc <HAL_ADC_Init+0x218>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ae:	d00d      	beq.n	80015cc <HAL_ADC_Init+0x218>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80015b8:	d008      	beq.n	80015cc <HAL_ADC_Init+0x218>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015be:	2b10      	cmp	r3, #16
 80015c0:	d004      	beq.n	80015cc <HAL_ADC_Init+0x218>
 80015c2:	f240 11c7 	movw	r1, #455	; 0x1c7
 80015c6:	4823      	ldr	r0, [pc, #140]	; (8001654 <HAL_ADC_Init+0x2a0>)
 80015c8:	f7ff fb12 	bl	8000bf0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d009      	beq.n	80015ea <HAL_ADC_Init+0x236>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d004      	beq.n	80015ea <HAL_ADC_Init+0x236>
 80015e0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80015e4:	481b      	ldr	r0, [pc, #108]	; (8001654 <HAL_ADC_Init+0x2a0>)
 80015e6:	f7ff fb03 	bl	8000bf0 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d032      	beq.n	8001658 <HAL_ADC_Init+0x2a4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_ADC_Init+0x24e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	2b1c      	cmp	r3, #28
 8001600:	d904      	bls.n	800160c <HAL_ADC_Init+0x258>
 8001602:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8001606:	4813      	ldr	r0, [pc, #76]	; (8001654 <HAL_ADC_Init+0x2a0>)
 8001608:	f7ff faf2 	bl	8000bf0 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001612:	2b00      	cmp	r3, #0
 8001614:	d009      	beq.n	800162a <HAL_ADC_Init+0x276>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800161c:	2b01      	cmp	r3, #1
 800161e:	d004      	beq.n	800162a <HAL_ADC_Init+0x276>
 8001620:	f240 11cd 	movw	r1, #461	; 0x1cd
 8001624:	480b      	ldr	r0, [pc, #44]	; (8001654 <HAL_ADC_Init+0x2a0>)
 8001626:	f7ff fae3 	bl	8000bf0 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001630:	2b00      	cmp	r3, #0
 8001632:	d011      	beq.n	8001658 <HAL_ADC_Init+0x2a4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_ADC_Init+0x290>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	2b08      	cmp	r3, #8
 8001642:	d909      	bls.n	8001658 <HAL_ADC_Init+0x2a4>
 8001644:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <HAL_ADC_Init+0x2a0>)
 800164a:	f7ff fad1 	bl	8000bf0 <assert_failed>
 800164e:	e003      	b.n	8001658 <HAL_ADC_Init+0x2a4>
 8001650:	40012400 	.word	0x40012400
 8001654:	08008390 	.word	0x08008390
    }
  }
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165c:	2b10      	cmp	r3, #16
 800165e:	d017      	beq.n	8001690 <HAL_ADC_Init+0x2dc>
  {
    assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_ADC_Init+0x2dc>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001670:	d00e      	beq.n	8001690 <HAL_ADC_Init+0x2dc>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800167a:	d009      	beq.n	8001690 <HAL_ADC_Init+0x2dc>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001684:	d004      	beq.n	8001690 <HAL_ADC_Init+0x2dc>
 8001686:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800168a:	4896      	ldr	r0, [pc, #600]	; (80018e4 <HAL_ADC_Init+0x530>)
 800168c:	f7ff fab0 	bl	8000bf0 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	2b00      	cmp	r3, #0
 8001696:	d115      	bne.n	80016c4 <HAL_ADC_Init+0x310>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	4b90      	ldr	r3, [pc, #576]	; (80018e8 <HAL_ADC_Init+0x534>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a8f      	ldr	r2, [pc, #572]	; (80018e8 <HAL_ADC_Init+0x534>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	4b8d      	ldr	r3, [pc, #564]	; (80018e8 <HAL_ADC_Init+0x534>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7fe fff0 	bl	80006a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f040 80ff 	bne.w	80018d0 <HAL_ADC_Init+0x51c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016da:	f023 0302 	bic.w	r3, r3, #2
 80016de:	f043 0202 	orr.w	r2, r3, #2
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80016e6:	4b81      	ldr	r3, [pc, #516]	; (80018ec <HAL_ADC_Init+0x538>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	497e      	ldr	r1, [pc, #504]	; (80018ec <HAL_ADC_Init+0x538>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001700:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001708:	4619      	mov	r1, r3
 800170a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170e:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	fa93 f3a3 	rbit	r3, r3
 8001716:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001724:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800172a:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	2302      	movs	r3, #2
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800174c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800174e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001750:	4313      	orrs	r3, r2
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001758:	2b10      	cmp	r3, #16
 800175a:	d007      	beq.n	800176c <HAL_ADC_Init+0x3b8>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001764:	4313      	orrs	r3, r2
 8001766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001768:	4313      	orrs	r3, r2
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001776:	2b40      	cmp	r3, #64	; 0x40
 8001778:	d04f      	beq.n	800181a <HAL_ADC_Init+0x466>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001780:	4313      	orrs	r3, r2
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800178c:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6912      	ldr	r2, [r2, #16]
 8001792:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001796:	d003      	beq.n	80017a0 <HAL_ADC_Init+0x3ec>
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6912      	ldr	r2, [r2, #16]
 800179c:	2a01      	cmp	r2, #1
 800179e:	d102      	bne.n	80017a6 <HAL_ADC_Init+0x3f2>
 80017a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a4:	e000      	b.n	80017a8 <HAL_ADC_Init+0x3f4>
 80017a6:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80017a8:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80017aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017ac:	4313      	orrs	r3, r2
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d125      	bne.n	8001806 <HAL_ADC_Init+0x452>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d114      	bne.n	80017ee <HAL_ADC_Init+0x43a>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	3b01      	subs	r3, #1
 80017ca:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80017ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	fa92 f2a2 	rbit	r2, r2
 80017d6:	617a      	str	r2, [r7, #20]
  return result;
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	fab2 f282 	clz	r2, r2
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	4093      	lsls	r3, r2
 80017e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017e8:	4313      	orrs	r3, r2
 80017ea:	633b      	str	r3, [r7, #48]	; 0x30
 80017ec:	e00b      	b.n	8001806 <HAL_ADC_Init+0x452>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f043 0220 	orr.w	r2, r3, #32
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017fe:	f043 0201 	orr.w	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	4b38      	ldr	r3, [pc, #224]	; (80018f0 <HAL_ADC_Init+0x53c>)
 800180e:	4013      	ands	r3, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001816:	430b      	orrs	r3, r1
 8001818:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <HAL_ADC_Init+0x540>)
 8001822:	4013      	ands	r3, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800182a:	430b      	orrs	r3, r1
 800182c:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001836:	d003      	beq.n	8001840 <HAL_ADC_Init+0x48c>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d119      	bne.n	8001874 <HAL_ADC_Init+0x4c0>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	3b01      	subs	r3, #1
 8001850:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001854:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	fa92 f2a2 	rbit	r2, r2
 800185c:	60fa      	str	r2, [r7, #12]
  return result;
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	fab2 f282 	clz	r2, r2
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	fa03 f202 	lsl.w	r2, r3, r2
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	631a      	str	r2, [r3, #48]	; 0x30
 8001872:	e007      	b.n	8001884 <HAL_ADC_Init+0x4d0>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_ADC_Init+0x544>)
 800188c:	4013      	ands	r3, r2
 800188e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001890:	429a      	cmp	r2, r3
 8001892:	d10b      	bne.n	80018ac <HAL_ADC_Init+0x4f8>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f023 0303 	bic.w	r3, r3, #3
 80018a2:	f043 0201 	orr.w	r2, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80018aa:	e014      	b.n	80018d6 <HAL_ADC_Init+0x522>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	f023 0312 	bic.w	r3, r3, #18
 80018b4:	f043 0210 	orr.w	r2, r3, #16
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80018ce:	e002      	b.n	80018d6 <HAL_ADC_Init+0x522>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3738      	adds	r7, #56	; 0x38
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	08008390 	.word	0x08008390
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40012700 	.word	0x40012700
 80018f0:	fcfc16ff 	.word	0xfcfc16ff
 80018f4:	c0fff189 	.word	0xc0fff189
 80018f8:	bf80fffe 	.word	0xbf80fffe

080018fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a94      	ldr	r2, [pc, #592]	; (8001b64 <HAL_ADC_ConfigChannel+0x268>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d004      	beq.n	8001922 <HAL_ADC_ConfigChannel+0x26>
 8001918:	f240 7191 	movw	r1, #1937	; 0x791
 800191c:	4892      	ldr	r0, [pc, #584]	; (8001b68 <HAL_ADC_ConfigChannel+0x26c>)
 800191e:	f7ff f967 	bl	8000bf0 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8081 	beq.w	8001a2e <HAL_ADC_ConfigChannel+0x132>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d07c      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d078      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d074      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b04      	cmp	r3, #4
 800194a:	d070      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b05      	cmp	r3, #5
 8001952:	d06c      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b06      	cmp	r3, #6
 800195a:	d068      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b07      	cmp	r3, #7
 8001962:	d064      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b08      	cmp	r3, #8
 800196a:	d060      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b09      	cmp	r3, #9
 8001972:	d05c      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b0a      	cmp	r3, #10
 800197a:	d058      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b0b      	cmp	r3, #11
 8001982:	d054      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b0c      	cmp	r3, #12
 800198a:	d050      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b0d      	cmp	r3, #13
 8001992:	d04c      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b0e      	cmp	r3, #14
 800199a:	d048      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d044      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b10      	cmp	r3, #16
 80019aa:	d040      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b11      	cmp	r3, #17
 80019b2:	d03c      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b12      	cmp	r3, #18
 80019ba:	d038      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b13      	cmp	r3, #19
 80019c2:	d034      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b14      	cmp	r3, #20
 80019ca:	d030      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b15      	cmp	r3, #21
 80019d2:	d02c      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b16      	cmp	r3, #22
 80019da:	d028      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b17      	cmp	r3, #23
 80019e2:	d024      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b18      	cmp	r3, #24
 80019ea:	d020      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b19      	cmp	r3, #25
 80019f2:	d01c      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b1a      	cmp	r3, #26
 80019fa:	d018      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b1b      	cmp	r3, #27
 8001a02:	d014      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b1c      	cmp	r3, #28
 8001a0a:	d010      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b1d      	cmp	r3, #29
 8001a12:	d00c      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b1e      	cmp	r3, #30
 8001a1a:	d008      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	d004      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x132>
 8001a24:	f240 7192 	movw	r1, #1938	; 0x792
 8001a28:	484f      	ldr	r0, [pc, #316]	; (8001b68 <HAL_ADC_ConfigChannel+0x26c>)
 8001a2a:	f7ff f8e1 	bl	8000bf0 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d070      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d06c      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d068      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d064      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b05      	cmp	r3, #5
 8001a54:	d060      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d05c      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b07      	cmp	r3, #7
 8001a64:	d058      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d054      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b09      	cmp	r3, #9
 8001a74:	d050      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b0a      	cmp	r3, #10
 8001a7c:	d04c      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b0b      	cmp	r3, #11
 8001a84:	d048      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d044      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b0d      	cmp	r3, #13
 8001a94:	d040      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b0e      	cmp	r3, #14
 8001a9c:	d03c      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b0f      	cmp	r3, #15
 8001aa4:	d038      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b10      	cmp	r3, #16
 8001aac:	d034      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b11      	cmp	r3, #17
 8001ab4:	d030      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b12      	cmp	r3, #18
 8001abc:	d02c      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b13      	cmp	r3, #19
 8001ac4:	d028      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b14      	cmp	r3, #20
 8001acc:	d024      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b15      	cmp	r3, #21
 8001ad4:	d020      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b16      	cmp	r3, #22
 8001adc:	d01c      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b17      	cmp	r3, #23
 8001ae4:	d018      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b18      	cmp	r3, #24
 8001aec:	d014      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b19      	cmp	r3, #25
 8001af4:	d010      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b1a      	cmp	r3, #26
 8001afc:	d00c      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b1b      	cmp	r3, #27
 8001b04:	d008      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b1c      	cmp	r3, #28
 8001b0c:	d004      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x21c>
 8001b0e:	f240 7193 	movw	r1, #1939	; 0x793
 8001b12:	4815      	ldr	r0, [pc, #84]	; (8001b68 <HAL_ADC_ConfigChannel+0x26c>)
 8001b14:	f7ff f86c 	bl	8000bf0 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d025      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x270>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d021      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x270>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d01d      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x270>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d019      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x270>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d015      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x270>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	d011      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x270>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b06      	cmp	r3, #6
 8001b4e:	d00d      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x270>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b07      	cmp	r3, #7
 8001b56:	d009      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x270>
 8001b58:	f240 7194 	movw	r1, #1940	; 0x794
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <HAL_ADC_ConfigChannel+0x26c>)
 8001b5e:	f7ff f847 	bl	8000bf0 <assert_failed>
 8001b62:	e003      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x270>
 8001b64:	40012400 	.word	0x40012400
 8001b68:	08008390 	.word	0x08008390
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_ConfigChannel+0x27e>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e14f      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x51e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d81c      	bhi.n	8001bc4 <HAL_ADC_ConfigChannel+0x2c8>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3b05      	subs	r3, #5
 8001b9c:	221f      	movs	r2, #31
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	4019      	ands	r1, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3b05      	subs	r3, #5
 8001bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
 8001bc2:	e07e      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b0c      	cmp	r3, #12
 8001bca:	d81c      	bhi.n	8001c06 <HAL_ADC_ConfigChannel+0x30a>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	3b23      	subs	r3, #35	; 0x23
 8001bde:	221f      	movs	r2, #31
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4019      	ands	r1, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3b23      	subs	r3, #35	; 0x23
 8001bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c04:	e05d      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b12      	cmp	r3, #18
 8001c0c:	d81c      	bhi.n	8001c48 <HAL_ADC_ConfigChannel+0x34c>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b41      	subs	r3, #65	; 0x41
 8001c20:	221f      	movs	r2, #31
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	4019      	ands	r1, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	3b41      	subs	r3, #65	; 0x41
 8001c3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	639a      	str	r2, [r3, #56]	; 0x38
 8001c46:	e03c      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b18      	cmp	r3, #24
 8001c4e:	d81c      	bhi.n	8001c8a <HAL_ADC_ConfigChannel+0x38e>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b5f      	subs	r3, #95	; 0x5f
 8001c62:	221f      	movs	r2, #31
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4019      	ands	r1, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b5f      	subs	r3, #95	; 0x5f
 8001c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	635a      	str	r2, [r3, #52]	; 0x34
 8001c88:	e01b      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b7d      	subs	r3, #125	; 0x7d
 8001c9c:	221f      	movs	r2, #31
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	4019      	ands	r1, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b7d      	subs	r3, #125	; 0x7d
 8001cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b09      	cmp	r3, #9
 8001cc8:	d81a      	bhi.n	8001d00 <HAL_ADC_ConfigChannel+0x404>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6959      	ldr	r1, [r3, #20]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	2207      	movs	r2, #7
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4019      	ands	r1, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6898      	ldr	r0, [r3, #8]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	615a      	str	r2, [r3, #20]
 8001cfe:	e05d      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b13      	cmp	r3, #19
 8001d06:	d81c      	bhi.n	8001d42 <HAL_ADC_ConfigChannel+0x446>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6919      	ldr	r1, [r3, #16]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	3b1e      	subs	r3, #30
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	4019      	ands	r1, r3
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	6898      	ldr	r0, [r3, #8]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	3b1e      	subs	r3, #30
 8001d34:	fa00 f203 	lsl.w	r2, r0, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	611a      	str	r2, [r3, #16]
 8001d40:	e03c      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b1d      	cmp	r3, #29
 8001d48:	d81c      	bhi.n	8001d84 <HAL_ADC_ConfigChannel+0x488>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68d9      	ldr	r1, [r3, #12]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	3b3c      	subs	r3, #60	; 0x3c
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	4019      	ands	r1, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6898      	ldr	r0, [r3, #8]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	3b3c      	subs	r3, #60	; 0x3c
 8001d76:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	e01b      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	3b5a      	subs	r3, #90	; 0x5a
 8001d96:	2207      	movs	r2, #7
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4019      	ands	r1, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6898      	ldr	r0, [r3, #8]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	3b5a      	subs	r3, #90	; 0x5a
 8001db0:	fa00 f203 	lsl.w	r2, r0, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b10      	cmp	r3, #16
 8001dc2:	d003      	beq.n	8001dcc <HAL_ADC_ConfigChannel+0x4d0>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dc8:	2b11      	cmp	r3, #17
 8001dca:	d121      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x514>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001dcc:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <HAL_ADC_ConfigChannel+0x528>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d11b      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x514>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_ADC_ConfigChannel+0x528>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <HAL_ADC_ConfigChannel+0x528>)
 8001dde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001de2:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d111      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x514>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_ADC_ConfigChannel+0x52c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <HAL_ADC_ConfigChannel+0x530>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0c9a      	lsrs	r2, r3, #18
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001e02:	e002      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x50e>
          {
            wait_loop_index--;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f9      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x508>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40012700 	.word	0x40012700
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	431bde83 	.word	0x431bde83

08001e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e62:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60d3      	str	r3, [r2, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <__NVIC_GetPriorityGrouping+0x18>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	f003 0307 	and.w	r3, r3, #7
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db0b      	blt.n	8001ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	4906      	ldr	r1, [pc, #24]	; (8001ec8 <__NVIC_EnableIRQ+0x34>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100

08001ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db0a      	blt.n	8001ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	490c      	ldr	r1, [pc, #48]	; (8001f18 <__NVIC_SetPriority+0x4c>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	0112      	lsls	r2, r2, #4
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef4:	e00a      	b.n	8001f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4908      	ldr	r1, [pc, #32]	; (8001f1c <__NVIC_SetPriority+0x50>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3b04      	subs	r3, #4
 8001f04:	0112      	lsls	r2, r2, #4
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	440b      	add	r3, r1
 8001f0a:	761a      	strb	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e100 	.word	0xe000e100
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f1c3 0307 	rsb	r3, r3, #7
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	bf28      	it	cs
 8001f3e:	2304      	movcs	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d902      	bls.n	8001f50 <NVIC_EncodePriority+0x30>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3b03      	subs	r3, #3
 8001f4e:	e000      	b.n	8001f52 <NVIC_EncodePriority+0x32>
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	401a      	ands	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	4313      	orrs	r3, r2
         );
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b07      	cmp	r3, #7
 8001f90:	d00f      	beq.n	8001fb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b06      	cmp	r3, #6
 8001f96:	d00c      	beq.n	8001fb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b05      	cmp	r3, #5
 8001f9c:	d009      	beq.n	8001fb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d006      	beq.n	8001fb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d003      	beq.n	8001fb2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001faa:	21ac      	movs	r1, #172	; 0xac
 8001fac:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001fae:	f7fe fe1f 	bl	8000bf0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ff3c 	bl	8001e30 <__NVIC_SetPriorityGrouping>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	080083c8 	.word	0x080083c8

08001fc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	d903      	bls.n	8001fe4 <HAL_NVIC_SetPriority+0x20>
 8001fdc:	21c4      	movs	r1, #196	; 0xc4
 8001fde:	480e      	ldr	r0, [pc, #56]	; (8002018 <HAL_NVIC_SetPriority+0x54>)
 8001fe0:	f7fe fe06 	bl	8000bf0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b0f      	cmp	r3, #15
 8001fe8:	d903      	bls.n	8001ff2 <HAL_NVIC_SetPriority+0x2e>
 8001fea:	21c5      	movs	r1, #197	; 0xc5
 8001fec:	480a      	ldr	r0, [pc, #40]	; (8002018 <HAL_NVIC_SetPriority+0x54>)
 8001fee:	f7fe fdff 	bl	8000bf0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff2:	f7ff ff41 	bl	8001e78 <__NVIC_GetPriorityGrouping>
 8001ff6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68b9      	ldr	r1, [r7, #8]
 8001ffc:	6978      	ldr	r0, [r7, #20]
 8001ffe:	f7ff ff8f 	bl	8001f20 <NVIC_EncodePriority>
 8002002:	4602      	mov	r2, r0
 8002004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff5e 	bl	8001ecc <__NVIC_SetPriority>
}
 8002010:	bf00      	nop
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	080083c8 	.word	0x080083c8

0800201c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	da03      	bge.n	8002036 <HAL_NVIC_EnableIRQ+0x1a>
 800202e:	21d8      	movs	r1, #216	; 0xd8
 8002030:	4805      	ldr	r0, [pc, #20]	; (8002048 <HAL_NVIC_EnableIRQ+0x2c>)
 8002032:	f7fe fddd 	bl	8000bf0 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff2a 	bl	8001e94 <__NVIC_EnableIRQ>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	080083c8 	.word	0x080083c8

0800204c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a3f      	ldr	r2, [pc, #252]	; (8002164 <HAL_GPIO_Init+0x118>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01f      	beq.n	80020aa <HAL_GPIO_Init+0x5e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a3e      	ldr	r2, [pc, #248]	; (8002168 <HAL_GPIO_Init+0x11c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01b      	beq.n	80020aa <HAL_GPIO_Init+0x5e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a3d      	ldr	r2, [pc, #244]	; (800216c <HAL_GPIO_Init+0x120>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d017      	beq.n	80020aa <HAL_GPIO_Init+0x5e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a3c      	ldr	r2, [pc, #240]	; (8002170 <HAL_GPIO_Init+0x124>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0x5e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a3b      	ldr	r2, [pc, #236]	; (8002174 <HAL_GPIO_Init+0x128>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00f      	beq.n	80020aa <HAL_GPIO_Init+0x5e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a3a      	ldr	r2, [pc, #232]	; (8002178 <HAL_GPIO_Init+0x12c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00b      	beq.n	80020aa <HAL_GPIO_Init+0x5e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a39      	ldr	r2, [pc, #228]	; (800217c <HAL_GPIO_Init+0x130>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <HAL_GPIO_Init+0x5e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a38      	ldr	r2, [pc, #224]	; (8002180 <HAL_GPIO_Init+0x134>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x5e>
 80020a2:	21b9      	movs	r1, #185	; 0xb9
 80020a4:	4837      	ldr	r0, [pc, #220]	; (8002184 <HAL_GPIO_Init+0x138>)
 80020a6:	f7fe fda3 	bl	8000bf0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_GPIO_Init+0x74>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	0c1b      	lsrs	r3, r3, #16
 80020ba:	041b      	lsls	r3, r3, #16
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x7c>
 80020c0:	21ba      	movs	r1, #186	; 0xba
 80020c2:	4830      	ldr	r0, [pc, #192]	; (8002184 <HAL_GPIO_Init+0x138>)
 80020c4:	f7fe fd94 	bl	8000bf0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d035      	beq.n	800213c <HAL_GPIO_Init+0xf0>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d031      	beq.n	800213c <HAL_GPIO_Init+0xf0>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b11      	cmp	r3, #17
 80020de:	d02d      	beq.n	800213c <HAL_GPIO_Init+0xf0>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d029      	beq.n	800213c <HAL_GPIO_Init+0xf0>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b12      	cmp	r3, #18
 80020ee:	d025      	beq.n	800213c <HAL_GPIO_Init+0xf0>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a24      	ldr	r2, [pc, #144]	; (8002188 <HAL_GPIO_Init+0x13c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d020      	beq.n	800213c <HAL_GPIO_Init+0xf0>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4a23      	ldr	r2, [pc, #140]	; (800218c <HAL_GPIO_Init+0x140>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d01b      	beq.n	800213c <HAL_GPIO_Init+0xf0>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a21      	ldr	r2, [pc, #132]	; (8002190 <HAL_GPIO_Init+0x144>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d016      	beq.n	800213c <HAL_GPIO_Init+0xf0>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4a20      	ldr	r2, [pc, #128]	; (8002194 <HAL_GPIO_Init+0x148>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d011      	beq.n	800213c <HAL_GPIO_Init+0xf0>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4a1e      	ldr	r2, [pc, #120]	; (8002198 <HAL_GPIO_Init+0x14c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00c      	beq.n	800213c <HAL_GPIO_Init+0xf0>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4a1d      	ldr	r2, [pc, #116]	; (800219c <HAL_GPIO_Init+0x150>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d007      	beq.n	800213c <HAL_GPIO_Init+0xf0>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0xf0>
 8002134:	21bb      	movs	r1, #187	; 0xbb
 8002136:	4813      	ldr	r0, [pc, #76]	; (8002184 <HAL_GPIO_Init+0x138>)
 8002138:	f7fe fd5a 	bl	8000bf0 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 81e4 	beq.w	800250e <HAL_GPIO_Init+0x4c2>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b01      	cmp	r3, #1
 800214c:	f000 81df 	beq.w	800250e <HAL_GPIO_Init+0x4c2>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b02      	cmp	r3, #2
 8002156:	f000 81da 	beq.w	800250e <HAL_GPIO_Init+0x4c2>
 800215a:	21bc      	movs	r1, #188	; 0xbc
 800215c:	4809      	ldr	r0, [pc, #36]	; (8002184 <HAL_GPIO_Init+0x138>)
 800215e:	f7fe fd47 	bl	8000bf0 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002162:	e1d4      	b.n	800250e <HAL_GPIO_Init+0x4c2>
 8002164:	40020000 	.word	0x40020000
 8002168:	40020400 	.word	0x40020400
 800216c:	40020800 	.word	0x40020800
 8002170:	40020c00 	.word	0x40020c00
 8002174:	40021000 	.word	0x40021000
 8002178:	40021800 	.word	0x40021800
 800217c:	40021c00 	.word	0x40021c00
 8002180:	40021400 	.word	0x40021400
 8002184:	08008404 	.word	0x08008404
 8002188:	10110000 	.word	0x10110000
 800218c:	10210000 	.word	0x10210000
 8002190:	10310000 	.word	0x10310000
 8002194:	10120000 	.word	0x10120000
 8002198:	10220000 	.word	0x10220000
 800219c:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	4013      	ands	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 81a8 	beq.w	8002508 <HAL_GPIO_Init+0x4bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x17c>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b12      	cmp	r3, #18
 80021c6:	d14f      	bne.n	8002268 <HAL_GPIO_Init+0x21c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a92      	ldr	r2, [pc, #584]	; (8002414 <HAL_GPIO_Init+0x3c8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d01f      	beq.n	8002210 <HAL_GPIO_Init+0x1c4>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a91      	ldr	r2, [pc, #580]	; (8002418 <HAL_GPIO_Init+0x3cc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d01b      	beq.n	8002210 <HAL_GPIO_Init+0x1c4>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a90      	ldr	r2, [pc, #576]	; (800241c <HAL_GPIO_Init+0x3d0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d017      	beq.n	8002210 <HAL_GPIO_Init+0x1c4>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a8f      	ldr	r2, [pc, #572]	; (8002420 <HAL_GPIO_Init+0x3d4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d013      	beq.n	8002210 <HAL_GPIO_Init+0x1c4>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a8e      	ldr	r2, [pc, #568]	; (8002424 <HAL_GPIO_Init+0x3d8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00f      	beq.n	8002210 <HAL_GPIO_Init+0x1c4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a8d      	ldr	r2, [pc, #564]	; (8002428 <HAL_GPIO_Init+0x3dc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d00b      	beq.n	8002210 <HAL_GPIO_Init+0x1c4>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a8c      	ldr	r2, [pc, #560]	; (800242c <HAL_GPIO_Init+0x3e0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d007      	beq.n	8002210 <HAL_GPIO_Init+0x1c4>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a8b      	ldr	r2, [pc, #556]	; (8002430 <HAL_GPIO_Init+0x3e4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x1c4>
 8002208:	21cb      	movs	r1, #203	; 0xcb
 800220a:	488a      	ldr	r0, [pc, #552]	; (8002434 <HAL_GPIO_Init+0x3e8>)
 800220c:	f7fe fcf0 	bl	8000bf0 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d903      	bls.n	8002220 <HAL_GPIO_Init+0x1d4>
 8002218:	21cc      	movs	r1, #204	; 0xcc
 800221a:	4886      	ldr	r0, [pc, #536]	; (8002434 <HAL_GPIO_Init+0x3e8>)
 800221c:	f7fe fce8 	bl	8000bf0 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	08da      	lsrs	r2, r3, #3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3208      	adds	r2, #8
 8002228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	220f      	movs	r2, #15
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	08da      	lsrs	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3208      	adds	r2, #8
 8002262:	6939      	ldr	r1, [r7, #16]
 8002264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	2203      	movs	r2, #3
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0203 	and.w	r2, r3, #3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d00b      	beq.n	80022bc <HAL_GPIO_Init+0x270>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d007      	beq.n	80022bc <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022b0:	2b11      	cmp	r3, #17
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b12      	cmp	r3, #18
 80022ba:	d144      	bne.n	8002346 <HAL_GPIO_Init+0x2fa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00f      	beq.n	80022e4 <HAL_GPIO_Init+0x298>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d00b      	beq.n	80022e4 <HAL_GPIO_Init+0x298>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d007      	beq.n	80022e4 <HAL_GPIO_Init+0x298>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x298>
 80022dc:	21e1      	movs	r1, #225	; 0xe1
 80022de:	4855      	ldr	r0, [pc, #340]	; (8002434 <HAL_GPIO_Init+0x3e8>)
 80022e0:	f7fe fc86 	bl	8000bf0 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800231a:	2201      	movs	r2, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f003 0201 	and.w	r2, r3, #1
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80c2 	beq.w	8002508 <HAL_GPIO_Init+0x4bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002384:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_GPIO_Init+0x3ec>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4a2b      	ldr	r2, [pc, #172]	; (8002438 <HAL_GPIO_Init+0x3ec>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6213      	str	r3, [r2, #32]
 8002390:	4b29      	ldr	r3, [pc, #164]	; (8002438 <HAL_GPIO_Init+0x3ec>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 800239c:	4a27      	ldr	r2, [pc, #156]	; (800243c <HAL_GPIO_Init+0x3f0>)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a14      	ldr	r2, [pc, #80]	; (8002414 <HAL_GPIO_Init+0x3c8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d03b      	beq.n	8002440 <HAL_GPIO_Init+0x3f4>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a13      	ldr	r2, [pc, #76]	; (8002418 <HAL_GPIO_Init+0x3cc>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d01f      	beq.n	8002410 <HAL_GPIO_Init+0x3c4>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <HAL_GPIO_Init+0x3d0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d019      	beq.n	800240c <HAL_GPIO_Init+0x3c0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a11      	ldr	r2, [pc, #68]	; (8002420 <HAL_GPIO_Init+0x3d4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d013      	beq.n	8002408 <HAL_GPIO_Init+0x3bc>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a10      	ldr	r2, [pc, #64]	; (8002424 <HAL_GPIO_Init+0x3d8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00d      	beq.n	8002404 <HAL_GPIO_Init+0x3b8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a11      	ldr	r2, [pc, #68]	; (8002430 <HAL_GPIO_Init+0x3e4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d007      	beq.n	8002400 <HAL_GPIO_Init+0x3b4>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <HAL_GPIO_Init+0x3dc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d101      	bne.n	80023fc <HAL_GPIO_Init+0x3b0>
 80023f8:	2306      	movs	r3, #6
 80023fa:	e022      	b.n	8002442 <HAL_GPIO_Init+0x3f6>
 80023fc:	2307      	movs	r3, #7
 80023fe:	e020      	b.n	8002442 <HAL_GPIO_Init+0x3f6>
 8002400:	2305      	movs	r3, #5
 8002402:	e01e      	b.n	8002442 <HAL_GPIO_Init+0x3f6>
 8002404:	2304      	movs	r3, #4
 8002406:	e01c      	b.n	8002442 <HAL_GPIO_Init+0x3f6>
 8002408:	2303      	movs	r3, #3
 800240a:	e01a      	b.n	8002442 <HAL_GPIO_Init+0x3f6>
 800240c:	2302      	movs	r3, #2
 800240e:	e018      	b.n	8002442 <HAL_GPIO_Init+0x3f6>
 8002410:	2301      	movs	r3, #1
 8002412:	e016      	b.n	8002442 <HAL_GPIO_Init+0x3f6>
 8002414:	40020000 	.word	0x40020000
 8002418:	40020400 	.word	0x40020400
 800241c:	40020800 	.word	0x40020800
 8002420:	40020c00 	.word	0x40020c00
 8002424:	40021000 	.word	0x40021000
 8002428:	40021800 	.word	0x40021800
 800242c:	40021c00 	.word	0x40021c00
 8002430:	40021400 	.word	0x40021400
 8002434:	08008404 	.word	0x08008404
 8002438:	40023800 	.word	0x40023800
 800243c:	40010000 	.word	0x40010000
 8002440:	2300      	movs	r3, #0
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	f002 0203 	and.w	r2, r2, #3
 8002448:	0092      	lsls	r2, r2, #2
 800244a:	4093      	lsls	r3, r2
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002452:	4935      	ldr	r1, [pc, #212]	; (8002528 <HAL_GPIO_Init+0x4dc>)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3302      	adds	r3, #2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002460:	4b32      	ldr	r3, [pc, #200]	; (800252c <HAL_GPIO_Init+0x4e0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	43db      	mvns	r3, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x438>
        {
          SET_BIT(temp, iocurrent); 
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002484:	4a29      	ldr	r2, [pc, #164]	; (800252c <HAL_GPIO_Init+0x4e0>)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800248a:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_GPIO_Init+0x4e0>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43db      	mvns	r3, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x462>
        {
          SET_BIT(temp, iocurrent); 
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024ae:	4a1f      	ldr	r2, [pc, #124]	; (800252c <HAL_GPIO_Init+0x4e0>)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b4:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_GPIO_Init+0x4e0>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43db      	mvns	r3, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x48c>
        {
          SET_BIT(temp, iocurrent); 
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <HAL_GPIO_Init+0x4e0>)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <HAL_GPIO_Init+0x4e0>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x4b6>
        {
          SET_BIT(temp, iocurrent); 
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <HAL_GPIO_Init+0x4e0>)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3301      	adds	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	f47f ae41 	bne.w	80021a0 <HAL_GPIO_Init+0x154>
  } 
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40010000 	.word	0x40010000
 800252c:	40010400 	.word	0x40010400

08002530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
 800253c:	4613      	mov	r3, r2
 800253e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <HAL_GPIO_WritePin+0x20>
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	041b      	lsls	r3, r3, #16
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <HAL_GPIO_WritePin+0x2a>
 8002550:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8002554:	480e      	ldr	r0, [pc, #56]	; (8002590 <HAL_GPIO_WritePin+0x60>)
 8002556:	f7fe fb4b 	bl	8000bf0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800255a:	787b      	ldrb	r3, [r7, #1]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HAL_GPIO_WritePin+0x40>
 8002560:	787b      	ldrb	r3, [r7, #1]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d004      	beq.n	8002570 <HAL_GPIO_WritePin+0x40>
 8002566:	f240 11a5 	movw	r1, #421	; 0x1a5
 800256a:	4809      	ldr	r0, [pc, #36]	; (8002590 <HAL_GPIO_WritePin+0x60>)
 800256c:	f7fe fb40 	bl	8000bf0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002570:	787b      	ldrb	r3, [r7, #1]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800257c:	e003      	b.n	8002586 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	08008404 	.word	0x08008404

08002594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d006      	beq.n	80025b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025aa:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ffa6 	bl	8000504 <HAL_GPIO_EXTI_Callback>
  }
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40010400 	.word	0x40010400

080025c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e19b      	b.n	800290e <HAL_I2C_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a98      	ldr	r2, [pc, #608]	; (800283c <HAL_I2C_Init+0x278>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d009      	beq.n	80025f4 <HAL_I2C_Init+0x30>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a96      	ldr	r2, [pc, #600]	; (8002840 <HAL_I2C_Init+0x27c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d004      	beq.n	80025f4 <HAL_I2C_Init+0x30>
 80025ea:	f240 11bb 	movw	r1, #443	; 0x1bb
 80025ee:	4895      	ldr	r0, [pc, #596]	; (8002844 <HAL_I2C_Init+0x280>)
 80025f0:	f7fe fafe 	bl	8000bf0 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d004      	beq.n	8002606 <HAL_I2C_Init+0x42>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4a91      	ldr	r2, [pc, #580]	; (8002848 <HAL_I2C_Init+0x284>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d904      	bls.n	8002610 <HAL_I2C_Init+0x4c>
 8002606:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800260a:	488e      	ldr	r0, [pc, #568]	; (8002844 <HAL_I2C_Init+0x280>)
 800260c:	f7fe faf0 	bl	8000bf0 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d009      	beq.n	800262c <HAL_I2C_Init+0x68>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002620:	d004      	beq.n	800262c <HAL_I2C_Init+0x68>
 8002622:	f240 11bd 	movw	r1, #445	; 0x1bd
 8002626:	4887      	ldr	r0, [pc, #540]	; (8002844 <HAL_I2C_Init+0x280>)
 8002628:	f7fe fae2 	bl	8000bf0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002634:	f023 0303 	bic.w	r3, r3, #3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d004      	beq.n	8002646 <HAL_I2C_Init+0x82>
 800263c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002640:	4880      	ldr	r0, [pc, #512]	; (8002844 <HAL_I2C_Init+0x280>)
 8002642:	f7fe fad5 	bl	8000bf0 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800264e:	d009      	beq.n	8002664 <HAL_I2C_Init+0xa0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002658:	d004      	beq.n	8002664 <HAL_I2C_Init+0xa0>
 800265a:	f240 11bf 	movw	r1, #447	; 0x1bf
 800265e:	4879      	ldr	r0, [pc, #484]	; (8002844 <HAL_I2C_Init+0x280>)
 8002660:	f7fe fac6 	bl	8000bf0 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_I2C_Init+0xba>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d004      	beq.n	800267e <HAL_I2C_Init+0xba>
 8002674:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002678:	4872      	ldr	r0, [pc, #456]	; (8002844 <HAL_I2C_Init+0x280>)
 800267a:	f7fe fab9 	bl	8000bf0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <HAL_I2C_Init+0xd0>
 800268a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800268e:	486d      	ldr	r0, [pc, #436]	; (8002844 <HAL_I2C_Init+0x280>)
 8002690:	f7fe faae 	bl	8000bf0 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_I2C_Init+0xea>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	2b40      	cmp	r3, #64	; 0x40
 80026a2:	d004      	beq.n	80026ae <HAL_I2C_Init+0xea>
 80026a4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80026a8:	4866      	ldr	r0, [pc, #408]	; (8002844 <HAL_I2C_Init+0x280>)
 80026aa:	f7fe faa1 	bl	8000bf0 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_I2C_Init+0x104>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	2b80      	cmp	r3, #128	; 0x80
 80026bc:	d004      	beq.n	80026c8 <HAL_I2C_Init+0x104>
 80026be:	f240 11c3 	movw	r1, #451	; 0x1c3
 80026c2:	4860      	ldr	r0, [pc, #384]	; (8002844 <HAL_I2C_Init+0x280>)
 80026c4:	f7fe fa94 	bl	8000bf0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d106      	bne.n	80026e2 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7fe f9bd 	bl	8000a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2224      	movs	r2, #36	; 0x24
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0201 	bic.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026fa:	f000 ffab 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 80026fe:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a51      	ldr	r2, [pc, #324]	; (800284c <HAL_I2C_Init+0x288>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d807      	bhi.n	800271a <HAL_I2C_Init+0x156>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4a50      	ldr	r2, [pc, #320]	; (8002850 <HAL_I2C_Init+0x28c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	bf94      	ite	ls
 8002712:	2301      	movls	r3, #1
 8002714:	2300      	movhi	r3, #0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	e006      	b.n	8002728 <HAL_I2C_Init+0x164>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4a4d      	ldr	r2, [pc, #308]	; (8002854 <HAL_I2C_Init+0x290>)
 800271e:	4293      	cmp	r3, r2
 8002720:	bf94      	ite	ls
 8002722:	2301      	movls	r3, #1
 8002724:	2300      	movhi	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_I2C_Init+0x16c>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0ee      	b.n	800290e <HAL_I2C_Init+0x34a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a49      	ldr	r2, [pc, #292]	; (8002858 <HAL_I2C_Init+0x294>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	0c9b      	lsrs	r3, r3, #18
 800273a:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a3b      	ldr	r2, [pc, #236]	; (800284c <HAL_I2C_Init+0x288>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d802      	bhi.n	800276a <HAL_I2C_Init+0x1a6>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	3301      	adds	r3, #1
 8002768:	e009      	b.n	800277e <HAL_I2C_Init+0x1ba>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002770:	fb02 f303 	mul.w	r3, r2, r3
 8002774:	4a39      	ldr	r2, [pc, #228]	; (800285c <HAL_I2C_Init+0x298>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	099b      	lsrs	r3, r3, #6
 800277c:	3301      	adds	r3, #1
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	430b      	orrs	r3, r1
 8002784:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002790:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	492c      	ldr	r1, [pc, #176]	; (800284c <HAL_I2C_Init+0x288>)
 800279a:	428b      	cmp	r3, r1
 800279c:	d80d      	bhi.n	80027ba <HAL_I2C_Init+0x1f6>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1e59      	subs	r1, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf38      	it	cc
 80027b6:	2304      	movcc	r3, #4
 80027b8:	e062      	b.n	8002880 <HAL_I2C_Init+0x2bc>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d111      	bne.n	80027e6 <HAL_I2C_Init+0x222>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1e58      	subs	r0, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	440b      	add	r3, r1
 80027d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027da:	2b00      	cmp	r3, #0
 80027dc:	bf0c      	ite	eq
 80027de:	2301      	moveq	r3, #1
 80027e0:	2300      	movne	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	e012      	b.n	800280c <HAL_I2C_Init+0x248>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1e58      	subs	r0, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6859      	ldr	r1, [r3, #4]
 80027ee:	460b      	mov	r3, r1
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	0099      	lsls	r1, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002802:	2b00      	cmp	r3, #0
 8002804:	bf0c      	ite	eq
 8002806:	2301      	moveq	r3, #1
 8002808:	2300      	movne	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_I2C_Init+0x250>
 8002810:	2301      	movs	r3, #1
 8002812:	e035      	b.n	8002880 <HAL_I2C_Init+0x2bc>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d121      	bne.n	8002860 <HAL_I2C_Init+0x29c>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	440b      	add	r3, r1
 800282a:	fbb0 f3f3 	udiv	r3, r0, r3
 800282e:	3301      	adds	r3, #1
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002838:	e022      	b.n	8002880 <HAL_I2C_Init+0x2bc>
 800283a:	bf00      	nop
 800283c:	40005400 	.word	0x40005400
 8002840:	40005800 	.word	0x40005800
 8002844:	08008440 	.word	0x08008440
 8002848:	00061a80 	.word	0x00061a80
 800284c:	000186a0 	.word	0x000186a0
 8002850:	001e847f 	.word	0x001e847f
 8002854:	003d08ff 	.word	0x003d08ff
 8002858:	431bde83 	.word	0x431bde83
 800285c:	10624dd3 	.word	0x10624dd3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e58      	subs	r0, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	0099      	lsls	r1, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	fbb0 f3f3 	udiv	r3, r0, r3
 8002876:	3301      	adds	r3, #1
 8002878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	6809      	ldr	r1, [r1, #0]
 8002884:	4313      	orrs	r3, r2
 8002886:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6911      	ldr	r1, [r2, #16]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68d2      	ldr	r2, [r2, #12]
 80028ba:	4311      	orrs	r1, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	430b      	orrs	r3, r1
 80028c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	430a      	orrs	r2, r1
 80028de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop

08002918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	f000 bc6c 	b.w	8003204 <HAL_RCC_OscConfig+0x8ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d022      	beq.n	800297a <HAL_RCC_OscConfig+0x62>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d11c      	bne.n	800297a <HAL_RCC_OscConfig+0x62>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d116      	bne.n	800297a <HAL_RCC_OscConfig+0x62>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d110      	bne.n	800297a <HAL_RCC_OscConfig+0x62>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10a      	bne.n	800297a <HAL_RCC_OscConfig+0x62>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	d104      	bne.n	800297a <HAL_RCC_OscConfig+0x62>
 8002970:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002974:	4897      	ldr	r0, [pc, #604]	; (8002bd4 <HAL_RCC_OscConfig+0x2bc>)
 8002976:	f7fe f93b 	bl	8000bf0 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297a:	4b97      	ldr	r3, [pc, #604]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002984:	4b94      	ldr	r3, [pc, #592]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 808e 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00c      	beq.n	80029be <HAL_RCC_OscConfig+0xa6>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d008      	beq.n	80029be <HAL_RCC_OscConfig+0xa6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b05      	cmp	r3, #5
 80029b2:	d004      	beq.n	80029be <HAL_RCC_OscConfig+0xa6>
 80029b4:	f240 1159 	movw	r1, #345	; 0x159
 80029b8:	4886      	ldr	r0, [pc, #536]	; (8002bd4 <HAL_RCC_OscConfig+0x2bc>)
 80029ba:	f7fe f919 	bl	8000bf0 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d006      	beq.n	80029d2 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d110      	bne.n	80029ec <HAL_RCC_OscConfig+0xd4>
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d2:	4b81      	ldr	r3, [pc, #516]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d06b      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x19e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d167      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f000 bc0c 	b.w	8003204 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d106      	bne.n	8002a02 <HAL_RCC_OscConfig+0xea>
 80029f4:	4b78      	ldr	r3, [pc, #480]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a77      	ldr	r2, [pc, #476]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 80029fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	e02d      	b.n	8002a5e <HAL_RCC_OscConfig+0x146>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x10c>
 8002a0a:	4b73      	ldr	r3, [pc, #460]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a72      	ldr	r2, [pc, #456]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b70      	ldr	r3, [pc, #448]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6f      	ldr	r2, [pc, #444]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e01c      	b.n	8002a5e <HAL_RCC_OscConfig+0x146>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b05      	cmp	r3, #5
 8002a2a:	d10c      	bne.n	8002a46 <HAL_RCC_OscConfig+0x12e>
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a69      	ldr	r2, [pc, #420]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002a32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b67      	ldr	r3, [pc, #412]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a66      	ldr	r2, [pc, #408]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	e00b      	b.n	8002a5e <HAL_RCC_OscConfig+0x146>
 8002a46:	4b64      	ldr	r3, [pc, #400]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a63      	ldr	r2, [pc, #396]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4b61      	ldr	r3, [pc, #388]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a60      	ldr	r2, [pc, #384]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d013      	beq.n	8002a8e <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe fc9b 	bl	80013a0 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a6e:	f7fe fc97 	bl	80013a0 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b64      	cmp	r3, #100	; 0x64
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e3c1      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a80:	4b55      	ldr	r3, [pc, #340]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x156>
 8002a8c:	e014      	b.n	8002ab8 <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8e:	f7fe fc87 	bl	80013a0 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a96:	f7fe fc83 	bl	80013a0 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b64      	cmp	r3, #100	; 0x64
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e3ad      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aa8:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f0      	bne.n	8002a96 <HAL_RCC_OscConfig+0x17e>
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d070      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_RCC_OscConfig+0x1c6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d004      	beq.n	8002ade <HAL_RCC_OscConfig+0x1c6>
 8002ad4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002ad8:	483e      	ldr	r0, [pc, #248]	; (8002bd4 <HAL_RCC_OscConfig+0x2bc>)
 8002ada:	f7fe f889 	bl	8000bf0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b1f      	cmp	r3, #31
 8002ae4:	d904      	bls.n	8002af0 <HAL_RCC_OscConfig+0x1d8>
 8002ae6:	f240 118d 	movw	r1, #397	; 0x18d
 8002aea:	483a      	ldr	r0, [pc, #232]	; (8002bd4 <HAL_RCC_OscConfig+0x2bc>)
 8002aec:	f7fe f880 	bl	8000bf0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d005      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	2b0c      	cmp	r3, #12
 8002afa:	d119      	bne.n	8002b30 <HAL_RCC_OscConfig+0x218>
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d116      	bne.n	8002b30 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b02:	4b35      	ldr	r3, [pc, #212]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_RCC_OscConfig+0x202>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e374      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1a:	4b2f      	ldr	r3, [pc, #188]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	492b      	ldr	r1, [pc, #172]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	e03a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b38:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <HAL_RCC_OscConfig+0x2c4>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fc2f 	bl	80013a0 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b46:	f7fe fc2b 	bl	80013a0 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e355      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b58:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	4919      	ldr	r1, [pc, #100]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
 8002b78:	e015      	b.n	8002ba6 <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7a:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <HAL_RCC_OscConfig+0x2c4>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fe fc0e 	bl	80013a0 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b88:	f7fe fc0a 	bl	80013a0 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e334      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8129 	beq.w	8002e06 <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f040 80a4 	bne.w	8002d04 <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_RCC_OscConfig+0x2c0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00b      	beq.n	8002be0 <HAL_RCC_OscConfig+0x2c8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e317      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
 8002bd4:	08008478 	.word	0x08008478
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	2bff      	cmp	r3, #255	; 0xff
 8002be6:	d904      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x2da>
 8002be8:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002bec:	48a5      	ldr	r0, [pc, #660]	; (8002e84 <HAL_RCC_OscConfig+0x56c>)
 8002bee:	f7fd ffff 	bl	8000bf0 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d022      	beq.n	8002c40 <HAL_RCC_OscConfig+0x328>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c02:	d01d      	beq.n	8002c40 <HAL_RCC_OscConfig+0x328>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c0c:	d018      	beq.n	8002c40 <HAL_RCC_OscConfig+0x328>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002c16:	d013      	beq.n	8002c40 <HAL_RCC_OscConfig+0x328>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c20:	d00e      	beq.n	8002c40 <HAL_RCC_OscConfig+0x328>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002c2a:	d009      	beq.n	8002c40 <HAL_RCC_OscConfig+0x328>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c34:	d004      	beq.n	8002c40 <HAL_RCC_OscConfig+0x328>
 8002c36:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002c3a:	4892      	ldr	r0, [pc, #584]	; (8002e84 <HAL_RCC_OscConfig+0x56c>)
 8002c3c:	f7fd ffd8 	bl	8000bf0 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1a      	ldr	r2, [r3, #32]
 8002c44:	4b90      	ldr	r3, [pc, #576]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d91d      	bls.n	8002c8c <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fd67 	bl	8003728 <RCC_SetFlashLatencyFromMSIRange>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e2cf      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c64:	4b88      	ldr	r3, [pc, #544]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4985      	ldr	r1, [pc, #532]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c76:	4b84      	ldr	r3, [pc, #528]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	4980      	ldr	r1, [pc, #512]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
 8002c8a:	e01c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c8c:	4b7e      	ldr	r3, [pc, #504]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	497b      	ldr	r1, [pc, #492]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c9e:	4b7a      	ldr	r3, [pc, #488]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	061b      	lsls	r3, r3, #24
 8002cac:	4976      	ldr	r1, [pc, #472]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fd36 	bl	8003728 <RCC_SetFlashLatencyFromMSIRange>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e29e      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	0b5b      	lsrs	r3, r3, #13
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002cd6:	4a6c      	ldr	r2, [pc, #432]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002cd8:	6892      	ldr	r2, [r2, #8]
 8002cda:	0912      	lsrs	r2, r2, #4
 8002cdc:	f002 020f 	and.w	r2, r2, #15
 8002ce0:	496a      	ldr	r1, [pc, #424]	; (8002e8c <HAL_RCC_OscConfig+0x574>)
 8002ce2:	5c8a      	ldrb	r2, [r1, r2]
 8002ce4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ce6:	4a6a      	ldr	r2, [pc, #424]	; (8002e90 <HAL_RCC_OscConfig+0x578>)
 8002ce8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cea:	4b6a      	ldr	r3, [pc, #424]	; (8002e94 <HAL_RCC_OscConfig+0x57c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd ffbc 	bl	8000c6c <HAL_InitTick>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8083 	beq.w	8002e06 <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	e27f      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCC_OscConfig+0x406>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d004      	beq.n	8002d1e <HAL_RCC_OscConfig+0x406>
 8002d14:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002d18:	485a      	ldr	r0, [pc, #360]	; (8002e84 <HAL_RCC_OscConfig+0x56c>)
 8002d1a:	f7fd ff69 	bl	8000bf0 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d059      	beq.n	8002dda <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d26:	4b5c      	ldr	r3, [pc, #368]	; (8002e98 <HAL_RCC_OscConfig+0x580>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fb38 	bl	80013a0 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d34:	f7fe fb34 	bl	80013a0 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e25e      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d46:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	2bff      	cmp	r3, #255	; 0xff
 8002d58:	d904      	bls.n	8002d64 <HAL_RCC_OscConfig+0x44c>
 8002d5a:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8002d5e:	4849      	ldr	r0, [pc, #292]	; (8002e84 <HAL_RCC_OscConfig+0x56c>)
 8002d60:	f7fd ff46 	bl	8000bf0 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d022      	beq.n	8002db2 <HAL_RCC_OscConfig+0x49a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d74:	d01d      	beq.n	8002db2 <HAL_RCC_OscConfig+0x49a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d7e:	d018      	beq.n	8002db2 <HAL_RCC_OscConfig+0x49a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d88:	d013      	beq.n	8002db2 <HAL_RCC_OscConfig+0x49a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d92:	d00e      	beq.n	8002db2 <HAL_RCC_OscConfig+0x49a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d9c:	d009      	beq.n	8002db2 <HAL_RCC_OscConfig+0x49a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002da6:	d004      	beq.n	8002db2 <HAL_RCC_OscConfig+0x49a>
 8002da8:	f240 211d 	movw	r1, #541	; 0x21d
 8002dac:	4835      	ldr	r0, [pc, #212]	; (8002e84 <HAL_RCC_OscConfig+0x56c>)
 8002dae:	f7fd ff1f 	bl	8000bf0 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002db2:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4932      	ldr	r1, [pc, #200]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc4:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	492d      	ldr	r1, [pc, #180]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
 8002dd8:	e015      	b.n	8002e06 <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dda:	4b2f      	ldr	r3, [pc, #188]	; (8002e98 <HAL_RCC_OscConfig+0x580>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe fade 	bl	80013a0 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002de8:	f7fe fada 	bl	80013a0 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e204      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002dfa:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d04c      	beq.n	8002eac <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <HAL_RCC_OscConfig+0x514>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d004      	beq.n	8002e2c <HAL_RCC_OscConfig+0x514>
 8002e22:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8002e26:	4817      	ldr	r0, [pc, #92]	; (8002e84 <HAL_RCC_OscConfig+0x56c>)
 8002e28:	f7fd fee2 	bl	8000bf0 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d016      	beq.n	8002e62 <HAL_RCC_OscConfig+0x54a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_RCC_OscConfig+0x584>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3a:	f7fe fab1 	bl	80013a0 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e42:	f7fe faad 	bl	80013a0 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e1d7      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <HAL_RCC_OscConfig+0x570>)
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x52a>
 8002e60:	e024      	b.n	8002eac <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_RCC_OscConfig+0x584>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e68:	f7fe fa9a 	bl	80013a0 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e6e:	e017      	b.n	8002ea0 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e70:	f7fe fa96 	bl	80013a0 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d910      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e1c0      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
 8002e82:	bf00      	nop
 8002e84:	08008478 	.word	0x08008478
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	0800864c 	.word	0x0800864c
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20000004 	.word	0x20000004
 8002e98:	42470020 	.word	0x42470020
 8002e9c:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ea0:	4ba2      	ldr	r3, [pc, #648]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e1      	bne.n	8002e70 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80b7 	beq.w	8003028 <HAL_RCC_OscConfig+0x710>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00c      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x5c8>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d008      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x5c8>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	d004      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x5c8>
 8002ed6:	f44f 711a 	mov.w	r1, #616	; 0x268
 8002eda:	4895      	ldr	r0, [pc, #596]	; (8003130 <HAL_RCC_OscConfig+0x818>)
 8002edc:	f7fd fe88 	bl	8000bf0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee0:	4b92      	ldr	r3, [pc, #584]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10d      	bne.n	8002f08 <HAL_RCC_OscConfig+0x5f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eec:	4b8f      	ldr	r3, [pc, #572]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	4a8e      	ldr	r2, [pc, #568]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	6253      	str	r3, [r2, #36]	; 0x24
 8002ef8:	4b8c      	ldr	r3, [pc, #560]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f04:	2301      	movs	r3, #1
 8002f06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	4b8a      	ldr	r3, [pc, #552]	; (8003134 <HAL_RCC_OscConfig+0x81c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d118      	bne.n	8002f46 <HAL_RCC_OscConfig+0x62e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f14:	4b87      	ldr	r3, [pc, #540]	; (8003134 <HAL_RCC_OscConfig+0x81c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a86      	ldr	r2, [pc, #536]	; (8003134 <HAL_RCC_OscConfig+0x81c>)
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f20:	f7fe fa3e 	bl	80013a0 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f28:	f7fe fa3a 	bl	80013a0 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e164      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b7e      	ldr	r3, [pc, #504]	; (8003134 <HAL_RCC_OscConfig+0x81c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x610>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d106      	bne.n	8002f5c <HAL_RCC_OscConfig+0x644>
 8002f4e:	4b77      	ldr	r3, [pc, #476]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	4a76      	ldr	r2, [pc, #472]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	6353      	str	r3, [r2, #52]	; 0x34
 8002f5a:	e02d      	b.n	8002fb8 <HAL_RCC_OscConfig+0x6a0>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10c      	bne.n	8002f7e <HAL_RCC_OscConfig+0x666>
 8002f64:	4b71      	ldr	r3, [pc, #452]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	4a70      	ldr	r2, [pc, #448]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002f6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f6e:	6353      	str	r3, [r2, #52]	; 0x34
 8002f70:	4b6e      	ldr	r3, [pc, #440]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f74:	4a6d      	ldr	r2, [pc, #436]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f7a:	6353      	str	r3, [r2, #52]	; 0x34
 8002f7c:	e01c      	b.n	8002fb8 <HAL_RCC_OscConfig+0x6a0>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x688>
 8002f86:	4b69      	ldr	r3, [pc, #420]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8a:	4a68      	ldr	r2, [pc, #416]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002f8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f90:	6353      	str	r3, [r2, #52]	; 0x34
 8002f92:	4b66      	ldr	r3, [pc, #408]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f96:	4a65      	ldr	r2, [pc, #404]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6353      	str	r3, [r2, #52]	; 0x34
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCC_OscConfig+0x6a0>
 8002fa0:	4b62      	ldr	r3, [pc, #392]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa4:	4a61      	ldr	r2, [pc, #388]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002faa:	6353      	str	r3, [r2, #52]	; 0x34
 8002fac:	4b5f      	ldr	r3, [pc, #380]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb0:	4a5e      	ldr	r2, [pc, #376]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002fb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fb6:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d015      	beq.n	8002fec <HAL_RCC_OscConfig+0x6d4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc0:	f7fe f9ee 	bl	80013a0 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc8:	f7fe f9ea 	bl	80013a0 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e112      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fde:	4b53      	ldr	r3, [pc, #332]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0ee      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x6b0>
 8002fea:	e014      	b.n	8003016 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fec:	f7fe f9d8 	bl	80013a0 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_OscConfig+0x6f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff4:	f7fe f9d4 	bl	80013a0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0fc      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800300a:	4b48      	ldr	r3, [pc, #288]	; (800312c <HAL_RCC_OscConfig+0x814>)
 800300c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1ee      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x6dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003016:	7ffb      	ldrb	r3, [r7, #31]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d105      	bne.n	8003028 <HAL_RCC_OscConfig+0x710>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301c:	4b43      	ldr	r3, [pc, #268]	; (800312c <HAL_RCC_OscConfig+0x814>)
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	4a42      	ldr	r2, [pc, #264]	; (800312c <HAL_RCC_OscConfig+0x814>)
 8003022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003026:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00c      	beq.n	800304a <HAL_RCC_OscConfig+0x732>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	2b01      	cmp	r3, #1
 8003036:	d008      	beq.n	800304a <HAL_RCC_OscConfig+0x732>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	2b02      	cmp	r3, #2
 800303e:	d004      	beq.n	800304a <HAL_RCC_OscConfig+0x732>
 8003040:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8003044:	483a      	ldr	r0, [pc, #232]	; (8003130 <HAL_RCC_OscConfig+0x818>)
 8003046:	f7fd fdd3 	bl	8000bf0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80d7 	beq.w	8003202 <HAL_RCC_OscConfig+0x8ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	f000 80b3 	beq.w	80031c2 <HAL_RCC_OscConfig+0x8aa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2b02      	cmp	r3, #2
 8003062:	f040 8097 	bne.w	8003194 <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_RCC_OscConfig+0x76a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003076:	d004      	beq.n	8003082 <HAL_RCC_OscConfig+0x76a>
 8003078:	f240 21b5 	movw	r1, #693	; 0x2b5
 800307c:	482c      	ldr	r0, [pc, #176]	; (8003130 <HAL_RCC_OscConfig+0x818>)
 800307e:	f7fd fdb7 	bl	8000bf0 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d02c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x7cc>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003092:	d027      	beq.n	80030e4 <HAL_RCC_OscConfig+0x7cc>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800309c:	d022      	beq.n	80030e4 <HAL_RCC_OscConfig+0x7cc>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030a6:	d01d      	beq.n	80030e4 <HAL_RCC_OscConfig+0x7cc>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b0:	d018      	beq.n	80030e4 <HAL_RCC_OscConfig+0x7cc>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80030ba:	d013      	beq.n	80030e4 <HAL_RCC_OscConfig+0x7cc>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80030c4:	d00e      	beq.n	80030e4 <HAL_RCC_OscConfig+0x7cc>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80030ce:	d009      	beq.n	80030e4 <HAL_RCC_OscConfig+0x7cc>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030d8:	d004      	beq.n	80030e4 <HAL_RCC_OscConfig+0x7cc>
 80030da:	f240 21b6 	movw	r1, #694	; 0x2b6
 80030de:	4814      	ldr	r0, [pc, #80]	; (8003130 <HAL_RCC_OscConfig+0x818>)
 80030e0:	f7fd fd86 	bl	8000bf0 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ec:	d00e      	beq.n	800310c <HAL_RCC_OscConfig+0x7f4>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030f6:	d009      	beq.n	800310c <HAL_RCC_OscConfig+0x7f4>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003100:	d004      	beq.n	800310c <HAL_RCC_OscConfig+0x7f4>
 8003102:	f240 21b7 	movw	r1, #695	; 0x2b7
 8003106:	480a      	ldr	r0, [pc, #40]	; (8003130 <HAL_RCC_OscConfig+0x818>)
 8003108:	f7fd fd72 	bl	8000bf0 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <HAL_RCC_OscConfig+0x820>)
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fe f945 	bl	80013a0 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003118:	e010      	b.n	800313c <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311a:	f7fe f941 	bl	80013a0 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d909      	bls.n	800313c <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e06b      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
 800312c:	40023800 	.word	0x40023800
 8003130:	08008478 	.word	0x08008478
 8003134:	40007000 	.word	0x40007000
 8003138:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800313c:	4b33      	ldr	r3, [pc, #204]	; (800320c <HAL_RCC_OscConfig+0x8f4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e8      	bne.n	800311a <HAL_RCC_OscConfig+0x802>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003148:	4b30      	ldr	r3, [pc, #192]	; (800320c <HAL_RCC_OscConfig+0x8f4>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	4319      	orrs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	430b      	orrs	r3, r1
 8003160:	492a      	ldr	r1, [pc, #168]	; (800320c <HAL_RCC_OscConfig+0x8f4>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003166:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <HAL_RCC_OscConfig+0x8f8>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe f918 	bl	80013a0 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003174:	f7fe f914 	bl	80013a0 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e03e      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003186:	4b21      	ldr	r3, [pc, #132]	; (800320c <HAL_RCC_OscConfig+0x8f4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x85c>
 8003192:	e036      	b.n	8003202 <HAL_RCC_OscConfig+0x8ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003194:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <HAL_RCC_OscConfig+0x8f8>)
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7fe f901 	bl	80013a0 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x89c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a2:	f7fe f8fd 	bl	80013a0 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x89c>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e027      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031b4:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_RCC_OscConfig+0x8f4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f0      	bne.n	80031a2 <HAL_RCC_OscConfig+0x88a>
 80031c0:	e01f      	b.n	8003202 <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x8b6>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e01a      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031ce:	4b0f      	ldr	r3, [pc, #60]	; (800320c <HAL_RCC_OscConfig+0x8f4>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	429a      	cmp	r2, r3
 80031e0:	d10d      	bne.n	80031fe <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x8ea>
        {
          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_RCC_OscConfig+0x8ec>
        }
      }
    }
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40023800 	.word	0x40023800
 8003210:	42470060 	.word	0x42470060

08003214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e1a4      	b.n	8003572 <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <HAL_RCC_ClockConfig+0x2a>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d004      	beq.n	800323e <HAL_RCC_ClockConfig+0x2a>
 8003234:	f240 312a 	movw	r1, #810	; 0x32a
 8003238:	4893      	ldr	r0, [pc, #588]	; (8003488 <HAL_RCC_ClockConfig+0x274>)
 800323a:	f7fd fcd9 	bl	8000bf0 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800323e:	4b93      	ldr	r3, [pc, #588]	; (800348c <HAL_RCC_ClockConfig+0x278>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d919      	bls.n	8003280 <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d105      	bne.n	800325e <HAL_RCC_ClockConfig+0x4a>
 8003252:	4b8e      	ldr	r3, [pc, #568]	; (800348c <HAL_RCC_ClockConfig+0x278>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a8d      	ldr	r2, [pc, #564]	; (800348c <HAL_RCC_ClockConfig+0x278>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4b8b      	ldr	r3, [pc, #556]	; (800348c <HAL_RCC_ClockConfig+0x278>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 0201 	bic.w	r2, r3, #1
 8003266:	4989      	ldr	r1, [pc, #548]	; (800348c <HAL_RCC_ClockConfig+0x278>)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b87      	ldr	r3, [pc, #540]	; (800348c <HAL_RCC_ClockConfig+0x278>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e178      	b.n	8003572 <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d031      	beq.n	80032f0 <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d024      	beq.n	80032de <HAL_RCC_ClockConfig+0xca>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b80      	cmp	r3, #128	; 0x80
 800329a:	d020      	beq.n	80032de <HAL_RCC_ClockConfig+0xca>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b90      	cmp	r3, #144	; 0x90
 80032a2:	d01c      	beq.n	80032de <HAL_RCC_ClockConfig+0xca>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2ba0      	cmp	r3, #160	; 0xa0
 80032aa:	d018      	beq.n	80032de <HAL_RCC_ClockConfig+0xca>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2bb0      	cmp	r3, #176	; 0xb0
 80032b2:	d014      	beq.n	80032de <HAL_RCC_ClockConfig+0xca>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2bc0      	cmp	r3, #192	; 0xc0
 80032ba:	d010      	beq.n	80032de <HAL_RCC_ClockConfig+0xca>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2bd0      	cmp	r3, #208	; 0xd0
 80032c2:	d00c      	beq.n	80032de <HAL_RCC_ClockConfig+0xca>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2be0      	cmp	r3, #224	; 0xe0
 80032ca:	d008      	beq.n	80032de <HAL_RCC_ClockConfig+0xca>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2bf0      	cmp	r3, #240	; 0xf0
 80032d2:	d004      	beq.n	80032de <HAL_RCC_ClockConfig+0xca>
 80032d4:	f240 3141 	movw	r1, #833	; 0x341
 80032d8:	486b      	ldr	r0, [pc, #428]	; (8003488 <HAL_RCC_ClockConfig+0x274>)
 80032da:	f7fd fc89 	bl	8000bf0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032de:	4b6c      	ldr	r3, [pc, #432]	; (8003490 <HAL_RCC_ClockConfig+0x27c>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	4969      	ldr	r1, [pc, #420]	; (8003490 <HAL_RCC_ClockConfig+0x27c>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80a3 	beq.w	8003444 <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d010      	beq.n	8003328 <HAL_RCC_ClockConfig+0x114>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d00c      	beq.n	8003328 <HAL_RCC_ClockConfig+0x114>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d008      	beq.n	8003328 <HAL_RCC_ClockConfig+0x114>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d004      	beq.n	8003328 <HAL_RCC_ClockConfig+0x114>
 800331e:	f44f 7152 	mov.w	r1, #840	; 0x348
 8003322:	4859      	ldr	r0, [pc, #356]	; (8003488 <HAL_RCC_ClockConfig+0x274>)
 8003324:	f7fd fc64 	bl	8000bf0 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d107      	bne.n	8003340 <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003330:	4b57      	ldr	r3, [pc, #348]	; (8003490 <HAL_RCC_ClockConfig+0x27c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d121      	bne.n	8003380 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e118      	b.n	8003572 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d107      	bne.n	8003358 <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003348:	4b51      	ldr	r3, [pc, #324]	; (8003490 <HAL_RCC_ClockConfig+0x27c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d115      	bne.n	8003380 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e10c      	b.n	8003572 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d107      	bne.n	8003370 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003360:	4b4b      	ldr	r3, [pc, #300]	; (8003490 <HAL_RCC_ClockConfig+0x27c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d109      	bne.n	8003380 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e100      	b.n	8003572 <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003370:	4b47      	ldr	r3, [pc, #284]	; (8003490 <HAL_RCC_ClockConfig+0x27c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0f8      	b.n	8003572 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003380:	4b43      	ldr	r3, [pc, #268]	; (8003490 <HAL_RCC_ClockConfig+0x27c>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f023 0203 	bic.w	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	4940      	ldr	r1, [pc, #256]	; (8003490 <HAL_RCC_ClockConfig+0x27c>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003392:	f7fe f805 	bl	80013a0 <HAL_GetTick>
 8003396:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d112      	bne.n	80033c6 <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033a0:	e00a      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a2:	f7fd fffd 	bl	80013a0 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e0dc      	b.n	8003572 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b8:	4b35      	ldr	r3, [pc, #212]	; (8003490 <HAL_RCC_ClockConfig+0x27c>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d1ee      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x18e>
 80033c4:	e03e      	b.n	8003444 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d112      	bne.n	80033f4 <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d0:	f7fd ffe6 	bl	80013a0 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e0c5      	b.n	8003572 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e6:	4b2a      	ldr	r3, [pc, #168]	; (8003490 <HAL_RCC_ClockConfig+0x27c>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d1ee      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x1bc>
 80033f2:	e027      	b.n	8003444 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d11d      	bne.n	8003438 <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fe:	f7fd ffcf 	bl	80013a0 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0ae      	b.n	8003572 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003414:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <HAL_RCC_ClockConfig+0x27c>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b04      	cmp	r3, #4
 800341e:	d1ee      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1ea>
 8003420:	e010      	b.n	8003444 <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003422:	f7fd ffbd 	bl	80013a0 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003430:	4293      	cmp	r3, r2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e09c      	b.n	8003572 <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <HAL_RCC_ClockConfig+0x27c>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1ee      	bne.n	8003422 <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_RCC_ClockConfig+0x278>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d220      	bcs.n	8003494 <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d105      	bne.n	8003464 <HAL_RCC_ClockConfig+0x250>
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <HAL_RCC_ClockConfig+0x278>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a0b      	ldr	r2, [pc, #44]	; (800348c <HAL_RCC_ClockConfig+0x278>)
 800345e:	f043 0304 	orr.w	r3, r3, #4
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	4b09      	ldr	r3, [pc, #36]	; (800348c <HAL_RCC_ClockConfig+0x278>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f023 0201 	bic.w	r2, r3, #1
 800346c:	4907      	ldr	r1, [pc, #28]	; (800348c <HAL_RCC_ClockConfig+0x278>)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RCC_ClockConfig+0x278>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d008      	beq.n	8003494 <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e075      	b.n	8003572 <HAL_RCC_ClockConfig+0x35e>
 8003486:	bf00      	nop
 8003488:	08008478 	.word	0x08008478
 800348c:	40023c00 	.word	0x40023c00
 8003490:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d025      	beq.n	80034ec <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d018      	beq.n	80034da <HAL_RCC_ClockConfig+0x2c6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b0:	d013      	beq.n	80034da <HAL_RCC_ClockConfig+0x2c6>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80034ba:	d00e      	beq.n	80034da <HAL_RCC_ClockConfig+0x2c6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034c4:	d009      	beq.n	80034da <HAL_RCC_ClockConfig+0x2c6>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034ce:	d004      	beq.n	80034da <HAL_RCC_ClockConfig+0x2c6>
 80034d0:	f240 31ad 	movw	r1, #941	; 0x3ad
 80034d4:	4829      	ldr	r0, [pc, #164]	; (800357c <HAL_RCC_ClockConfig+0x368>)
 80034d6:	f7fd fb8b 	bl	8000bf0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034da:	4b29      	ldr	r3, [pc, #164]	; (8003580 <HAL_RCC_ClockConfig+0x36c>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	4926      	ldr	r1, [pc, #152]	; (8003580 <HAL_RCC_ClockConfig+0x36c>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d026      	beq.n	8003546 <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d018      	beq.n	8003532 <HAL_RCC_ClockConfig+0x31e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003508:	d013      	beq.n	8003532 <HAL_RCC_ClockConfig+0x31e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003512:	d00e      	beq.n	8003532 <HAL_RCC_ClockConfig+0x31e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800351c:	d009      	beq.n	8003532 <HAL_RCC_ClockConfig+0x31e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003526:	d004      	beq.n	8003532 <HAL_RCC_ClockConfig+0x31e>
 8003528:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 800352c:	4813      	ldr	r0, [pc, #76]	; (800357c <HAL_RCC_ClockConfig+0x368>)
 800352e:	f7fd fb5f 	bl	8000bf0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <HAL_RCC_ClockConfig+0x36c>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	490f      	ldr	r1, [pc, #60]	; (8003580 <HAL_RCC_ClockConfig+0x36c>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003546:	f000 f823 	bl	8003590 <HAL_RCC_GetSysClockFreq>
 800354a:	4601      	mov	r1, r0
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <HAL_RCC_ClockConfig+0x36c>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <HAL_RCC_ClockConfig+0x370>)
 8003558:	5cd3      	ldrb	r3, [r2, r3]
 800355a:	fa21 f303 	lsr.w	r3, r1, r3
 800355e:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <HAL_RCC_ClockConfig+0x374>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003562:	4b0a      	ldr	r3, [pc, #40]	; (800358c <HAL_RCC_ClockConfig+0x378>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd fb80 	bl	8000c6c <HAL_InitTick>
 800356c:	4603      	mov	r3, r0
 800356e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003570:	7afb      	ldrb	r3, [r7, #11]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	08008478 	.word	0x08008478
 8003580:	40023800 	.word	0x40023800
 8003584:	0800864c 	.word	0x0800864c
 8003588:	20000000 	.word	0x20000000
 800358c:	20000004 	.word	0x20000004

08003590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003596:	4b26      	ldr	r3, [pc, #152]	; (8003630 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d006      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x24>
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	d007      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0x2a>
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d12c      	bne.n	8003608 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035ae:	4b21      	ldr	r3, [pc, #132]	; (8003634 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035b0:	613b      	str	r3, [r7, #16]
      break;
 80035b2:	e037      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035b4:	4b20      	ldr	r3, [pc, #128]	; (8003638 <HAL_RCC_GetSysClockFreq+0xa8>)
 80035b6:	613b      	str	r3, [r7, #16]
      break;
 80035b8:	e034      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	0c9b      	lsrs	r3, r3, #18
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	4a1e      	ldr	r2, [pc, #120]	; (800363c <HAL_RCC_GetSysClockFreq+0xac>)
 80035c4:	5cd3      	ldrb	r3, [r2, r3]
 80035c6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	0d9b      	lsrs	r3, r3, #22
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	3301      	adds	r3, #1
 80035d2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d4:	4b16      	ldr	r3, [pc, #88]	; (8003630 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4a15      	ldr	r2, [pc, #84]	; (8003638 <HAL_RCC_GetSysClockFreq+0xa8>)
 80035e4:	fb02 f203 	mul.w	r2, r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	e007      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4a0f      	ldr	r2, [pc, #60]	; (8003634 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035f6:	fb02 f203 	mul.w	r2, r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003600:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	613b      	str	r3, [r7, #16]
      break;
 8003606:	e00d      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003608:	4b09      	ldr	r3, [pc, #36]	; (8003630 <HAL_RCC_GetSysClockFreq+0xa0>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	0b5b      	lsrs	r3, r3, #13
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	613b      	str	r3, [r7, #16]
      break;
 8003622:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003624:	693b      	ldr	r3, [r7, #16]
}
 8003626:	4618      	mov	r0, r3
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	40023800 	.word	0x40023800
 8003634:	00f42400 	.word	0x00f42400
 8003638:	007a1200 	.word	0x007a1200
 800363c:	08008640 	.word	0x08008640

08003640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003644:	4b02      	ldr	r3, [pc, #8]	; (8003650 <HAL_RCC_GetHCLKFreq+0x10>)
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr
 8003650:	20000000 	.word	0x20000000

08003654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003658:	f7ff fff2 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 800365c:	4601      	mov	r1, r0
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4a03      	ldr	r2, [pc, #12]	; (8003678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800366a:	5cd3      	ldrb	r3, [r2, r3]
 800366c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	0800865c 	.word	0x0800865c

0800367c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003680:	f7ff ffde 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003684:	4601      	mov	r1, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	0adb      	lsrs	r3, r3, #11
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4a03      	ldr	r2, [pc, #12]	; (80036a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003692:	5cd3      	ldrb	r3, [r2, r3]
 8003694:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40023800 	.word	0x40023800
 80036a0:	0800865c 	.word	0x0800865c

080036a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <HAL_RCC_GetClockConfig+0x1a>
 80036b4:	f240 41fa 	movw	r1, #1274	; 0x4fa
 80036b8:	4818      	ldr	r0, [pc, #96]	; (800371c <HAL_RCC_GetClockConfig+0x78>)
 80036ba:	f7fd fa99 	bl	8000bf0 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <HAL_RCC_GetClockConfig+0x2a>
 80036c4:	f240 41fb 	movw	r1, #1275	; 0x4fb
 80036c8:	4814      	ldr	r0, [pc, #80]	; (800371c <HAL_RCC_GetClockConfig+0x78>)
 80036ca:	f7fd fa91 	bl	8000bf0 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	220f      	movs	r2, #15
 80036d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_RCC_GetClockConfig+0x7c>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0203 	and.w	r2, r3, #3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <HAL_RCC_GetClockConfig+0x7c>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <HAL_RCC_GetClockConfig+0x7c>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <HAL_RCC_GetClockConfig+0x7c>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	08db      	lsrs	r3, r3, #3
 80036fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003706:	4b07      	ldr	r3, [pc, #28]	; (8003724 <HAL_RCC_GetClockConfig+0x80>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0201 	and.w	r2, r3, #1
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	601a      	str	r2, [r3, #0]
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	08008478 	.word	0x08008478
 8003720:	40023800 	.word	0x40023800
 8003724:	40023c00 	.word	0x40023c00

08003728 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003734:	4b29      	ldr	r3, [pc, #164]	; (80037dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d12c      	bne.n	800379a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003740:	4b26      	ldr	r3, [pc, #152]	; (80037dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e016      	b.n	8003786 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003758:	4b20      	ldr	r3, [pc, #128]	; (80037dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	4a1f      	ldr	r2, [pc, #124]	; (80037dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800375e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003762:	6253      	str	r3, [r2, #36]	; 0x24
 8003764:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003778:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800377a:	4b18      	ldr	r3, [pc, #96]	; (80037dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	4a17      	ldr	r2, [pc, #92]	; (80037dc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003784:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800378c:	d105      	bne.n	800379a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003794:	d101      	bne.n	800379a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003796:	2301      	movs	r3, #1
 8003798:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d105      	bne.n	80037ac <RCC_SetFlashLatencyFromMSIRange+0x84>
 80037a0:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0f      	ldr	r2, [pc, #60]	; (80037e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f023 0201 	bic.w	r2, r3, #1
 80037b4:	490b      	ldr	r1, [pc, #44]	; (80037e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d001      	beq.n	80037ce <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40007000 	.word	0x40007000
 80037e4:	40023c00 	.word	0x40023c00

080037e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e088      	b.n	800390c <HAL_TIM_Base_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003802:	d02c      	beq.n	800385e <HAL_TIM_Base_Init+0x76>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a42      	ldr	r2, [pc, #264]	; (8003914 <HAL_TIM_Base_Init+0x12c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d027      	beq.n	800385e <HAL_TIM_Base_Init+0x76>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a41      	ldr	r2, [pc, #260]	; (8003918 <HAL_TIM_Base_Init+0x130>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d022      	beq.n	800385e <HAL_TIM_Base_Init+0x76>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a3f      	ldr	r2, [pc, #252]	; (800391c <HAL_TIM_Base_Init+0x134>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01d      	beq.n	800385e <HAL_TIM_Base_Init+0x76>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a3e      	ldr	r2, [pc, #248]	; (8003920 <HAL_TIM_Base_Init+0x138>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d018      	beq.n	800385e <HAL_TIM_Base_Init+0x76>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a3c      	ldr	r2, [pc, #240]	; (8003924 <HAL_TIM_Base_Init+0x13c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_TIM_Base_Init+0x76>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a3b      	ldr	r2, [pc, #236]	; (8003928 <HAL_TIM_Base_Init+0x140>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00e      	beq.n	800385e <HAL_TIM_Base_Init+0x76>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a39      	ldr	r2, [pc, #228]	; (800392c <HAL_TIM_Base_Init+0x144>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d009      	beq.n	800385e <HAL_TIM_Base_Init+0x76>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a38      	ldr	r2, [pc, #224]	; (8003930 <HAL_TIM_Base_Init+0x148>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_TIM_Base_Init+0x76>
 8003854:	f240 110b 	movw	r1, #267	; 0x10b
 8003858:	4836      	ldr	r0, [pc, #216]	; (8003934 <HAL_TIM_Base_Init+0x14c>)
 800385a:	f7fd f9c9 	bl	8000bf0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d014      	beq.n	8003890 <HAL_TIM_Base_Init+0xa8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b10      	cmp	r3, #16
 800386c:	d010      	beq.n	8003890 <HAL_TIM_Base_Init+0xa8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b20      	cmp	r3, #32
 8003874:	d00c      	beq.n	8003890 <HAL_TIM_Base_Init+0xa8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d008      	beq.n	8003890 <HAL_TIM_Base_Init+0xa8>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b60      	cmp	r3, #96	; 0x60
 8003884:	d004      	beq.n	8003890 <HAL_TIM_Base_Init+0xa8>
 8003886:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800388a:	482a      	ldr	r0, [pc, #168]	; (8003934 <HAL_TIM_Base_Init+0x14c>)
 800388c:	f7fd f9b0 	bl	8000bf0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00e      	beq.n	80038b6 <HAL_TIM_Base_Init+0xce>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a0:	d009      	beq.n	80038b6 <HAL_TIM_Base_Init+0xce>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038aa:	d004      	beq.n	80038b6 <HAL_TIM_Base_Init+0xce>
 80038ac:	f240 110d 	movw	r1, #269	; 0x10d
 80038b0:	4820      	ldr	r0, [pc, #128]	; (8003934 <HAL_TIM_Base_Init+0x14c>)
 80038b2:	f7fd f99d 	bl	8000bf0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_TIM_Base_Init+0xe8>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	2b80      	cmp	r3, #128	; 0x80
 80038c4:	d004      	beq.n	80038d0 <HAL_TIM_Base_Init+0xe8>
 80038c6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80038ca:	481a      	ldr	r0, [pc, #104]	; (8003934 <HAL_TIM_Base_Init+0x14c>)
 80038cc:	f7fd f990 	bl	8000bf0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7fd fbd5 	bl	8001094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f000 feb5 	bl	800466c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40000400 	.word	0x40000400
 8003918:	40000800 	.word	0x40000800
 800391c:	40000c00 	.word	0x40000c00
 8003920:	40001000 	.word	0x40001000
 8003924:	40001400 	.word	0x40001400
 8003928:	40010800 	.word	0x40010800
 800392c:	40010c00 	.word	0x40010c00
 8003930:	40011000 	.word	0x40011000
 8003934:	080084b0 	.word	0x080084b0

08003938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d02c      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a24      	ldr	r2, [pc, #144]	; (80039e0 <HAL_TIM_Base_Start_IT+0xa8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d027      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <HAL_TIM_Base_Start_IT+0xac>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d022      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d01d      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <HAL_TIM_Base_Start_IT+0xb4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d018      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1e      	ldr	r2, [pc, #120]	; (80039f0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d013      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1c      	ldr	r2, [pc, #112]	; (80039f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00e      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <HAL_TIM_Base_Start_IT+0xc0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d009      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a19      	ldr	r2, [pc, #100]	; (80039fc <HAL_TIM_Base_Start_IT+0xc4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d004      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 800399a:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 800399e:	4818      	ldr	r0, [pc, #96]	; (8003a00 <HAL_TIM_Base_Start_IT+0xc8>)
 80039a0:	f7fd f926 	bl	8000bf0 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b06      	cmp	r3, #6
 80039c4:	d007      	beq.n	80039d6 <HAL_TIM_Base_Start_IT+0x9e>
  {
    __HAL_TIM_ENABLE(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0201 	orr.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40000800 	.word	0x40000800
 80039e8:	40000c00 	.word	0x40000c00
 80039ec:	40001000 	.word	0x40001000
 80039f0:	40001400 	.word	0x40001400
 80039f4:	40010800 	.word	0x40010800
 80039f8:	40010c00 	.word	0x40010c00
 80039fc:	40011000 	.word	0x40011000
 8003a00:	080084b0 	.word	0x080084b0

08003a04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e088      	b.n	8003b28 <HAL_TIM_PWM_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1e:	d02c      	beq.n	8003a7a <HAL_TIM_PWM_Init+0x76>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a42      	ldr	r2, [pc, #264]	; (8003b30 <HAL_TIM_PWM_Init+0x12c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d027      	beq.n	8003a7a <HAL_TIM_PWM_Init+0x76>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a41      	ldr	r2, [pc, #260]	; (8003b34 <HAL_TIM_PWM_Init+0x130>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d022      	beq.n	8003a7a <HAL_TIM_PWM_Init+0x76>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a3f      	ldr	r2, [pc, #252]	; (8003b38 <HAL_TIM_PWM_Init+0x134>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01d      	beq.n	8003a7a <HAL_TIM_PWM_Init+0x76>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a3e      	ldr	r2, [pc, #248]	; (8003b3c <HAL_TIM_PWM_Init+0x138>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d018      	beq.n	8003a7a <HAL_TIM_PWM_Init+0x76>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a3c      	ldr	r2, [pc, #240]	; (8003b40 <HAL_TIM_PWM_Init+0x13c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_TIM_PWM_Init+0x76>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a3b      	ldr	r2, [pc, #236]	; (8003b44 <HAL_TIM_PWM_Init+0x140>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_TIM_PWM_Init+0x76>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a39      	ldr	r2, [pc, #228]	; (8003b48 <HAL_TIM_PWM_Init+0x144>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_TIM_PWM_Init+0x76>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a38      	ldr	r2, [pc, #224]	; (8003b4c <HAL_TIM_PWM_Init+0x148>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_TIM_PWM_Init+0x76>
 8003a70:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003a74:	4836      	ldr	r0, [pc, #216]	; (8003b50 <HAL_TIM_PWM_Init+0x14c>)
 8003a76:	f7fd f8bb 	bl	8000bf0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d014      	beq.n	8003aac <HAL_TIM_PWM_Init+0xa8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b10      	cmp	r3, #16
 8003a88:	d010      	beq.n	8003aac <HAL_TIM_PWM_Init+0xa8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d00c      	beq.n	8003aac <HAL_TIM_PWM_Init+0xa8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d008      	beq.n	8003aac <HAL_TIM_PWM_Init+0xa8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b60      	cmp	r3, #96	; 0x60
 8003aa0:	d004      	beq.n	8003aac <HAL_TIM_PWM_Init+0xa8>
 8003aa2:	f240 4171 	movw	r1, #1137	; 0x471
 8003aa6:	482a      	ldr	r0, [pc, #168]	; (8003b50 <HAL_TIM_PWM_Init+0x14c>)
 8003aa8:	f7fd f8a2 	bl	8000bf0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_TIM_PWM_Init+0xce>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003abc:	d009      	beq.n	8003ad2 <HAL_TIM_PWM_Init+0xce>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac6:	d004      	beq.n	8003ad2 <HAL_TIM_PWM_Init+0xce>
 8003ac8:	f240 4172 	movw	r1, #1138	; 0x472
 8003acc:	4820      	ldr	r0, [pc, #128]	; (8003b50 <HAL_TIM_PWM_Init+0x14c>)
 8003ace:	f7fd f88f 	bl	8000bf0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_TIM_PWM_Init+0xe8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	2b80      	cmp	r3, #128	; 0x80
 8003ae0:	d004      	beq.n	8003aec <HAL_TIM_PWM_Init+0xe8>
 8003ae2:	f240 4173 	movw	r1, #1139	; 0x473
 8003ae6:	481a      	ldr	r0, [pc, #104]	; (8003b50 <HAL_TIM_PWM_Init+0x14c>)
 8003ae8:	f7fd f882 	bl	8000bf0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d106      	bne.n	8003b06 <HAL_TIM_PWM_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f827 	bl	8003b54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f000 fda7 	bl	800466c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40000c00 	.word	0x40000c00
 8003b3c:	40001000 	.word	0x40001000
 8003b40:	40001400 	.word	0x40001400
 8003b44:	40010800 	.word	0x40010800
 8003b48:	40010c00 	.word	0x40010c00
 8003b4c:	40011000 	.word	0x40011000
 8003b50:	080084b0 	.word	0x080084b0

08003b54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr

08003b66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d122      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d11b      	bne.n	8003bc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f06f 0202 	mvn.w	r2, #2
 8003b92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fd44 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 8003bae:	e005      	b.n	8003bbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fd37 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fd46 	bl	8004648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d122      	bne.n	8003c16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d11b      	bne.n	8003c16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f06f 0204 	mvn.w	r2, #4
 8003be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fd1a 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 8003c02:	e005      	b.n	8003c10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fd0d 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fd1c 	bl	8004648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d122      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d11b      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f06f 0208 	mvn.w	r2, #8
 8003c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2204      	movs	r2, #4
 8003c40:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f003 0303 	and.w	r3, r3, #3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fcf0 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 8003c56:	e005      	b.n	8003c64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fce3 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fcf2 	bl	8004648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d122      	bne.n	8003cbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d11b      	bne.n	8003cbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f06f 0210 	mvn.w	r2, #16
 8003c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2208      	movs	r2, #8
 8003c94:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fcc6 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 8003caa:	e005      	b.n	8003cb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fcb9 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fcc8 	bl	8004648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d10e      	bne.n	8003cea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d107      	bne.n	8003cea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f06f 0201 	mvn.w	r2, #1
 8003ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7fc ff6b 	bl	8000bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b40      	cmp	r3, #64	; 0x40
 8003cf6:	d10e      	bne.n	8003d16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	d107      	bne.n	8003d16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fca2 	bl	800465a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d010      	beq.n	8003d54 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d00d      	beq.n	8003d54 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d00a      	beq.n	8003d54 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b0c      	cmp	r3, #12
 8003d42:	d007      	beq.n	8003d54 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b3c      	cmp	r3, #60	; 0x3c
 8003d48:	d004      	beq.n	8003d54 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003d4a:	f640 5169 	movw	r1, #3433	; 0xd69
 8003d4e:	488d      	ldr	r0, [pc, #564]	; (8003f84 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003d50:	f7fc ff4e 	bl	8000bf0 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b60      	cmp	r3, #96	; 0x60
 8003d5a:	d008      	beq.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b70      	cmp	r3, #112	; 0x70
 8003d62:	d004      	beq.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003d64:	f640 516a 	movw	r1, #3434	; 0xd6a
 8003d68:	4886      	ldr	r0, [pc, #536]	; (8003f84 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003d6a:	f7fc ff41 	bl	8000bf0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_TIM_PWM_ConfigChannel+0x68>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d004      	beq.n	8003d88 <HAL_TIM_PWM_ConfigChannel+0x68>
 8003d7e:	f640 516b 	movw	r1, #3435	; 0xd6b
 8003d82:	4880      	ldr	r0, [pc, #512]	; (8003f84 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003d84:	f7fc ff34 	bl	8000bf0 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_TIM_PWM_ConfigChannel+0x82>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d004      	beq.n	8003da2 <HAL_TIM_PWM_ConfigChannel+0x82>
 8003d98:	f640 516c 	movw	r1, #3436	; 0xd6c
 8003d9c:	4879      	ldr	r0, [pc, #484]	; (8003f84 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003d9e:	f7fc ff27 	bl	8000bf0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_TIM_PWM_ConfigChannel+0x90>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e13b      	b.n	8004028 <HAL_TIM_PWM_ConfigChannel+0x308>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b0c      	cmp	r3, #12
 8003dc4:	f200 8126 	bhi.w	8004014 <HAL_TIM_PWM_ConfigChannel+0x2f4>
 8003dc8:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003e05 	.word	0x08003e05
 8003dd4:	08004015 	.word	0x08004015
 8003dd8:	08004015 	.word	0x08004015
 8003ddc:	08004015 	.word	0x08004015
 8003de0:	08003e95 	.word	0x08003e95
 8003de4:	08004015 	.word	0x08004015
 8003de8:	08004015 	.word	0x08004015
 8003dec:	08004015 	.word	0x08004015
 8003df0:	08003f13 	.word	0x08003f13
 8003df4:	08004015 	.word	0x08004015
 8003df8:	08004015 	.word	0x08004015
 8003dfc:	08004015 	.word	0x08004015
 8003e00:	08003fa1 	.word	0x08003fa1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d022      	beq.n	8003e54 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a5d      	ldr	r2, [pc, #372]	; (8003f88 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d01d      	beq.n	8003e54 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a5b      	ldr	r2, [pc, #364]	; (8003f8c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d018      	beq.n	8003e54 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a5a      	ldr	r2, [pc, #360]	; (8003f90 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d013      	beq.n	8003e54 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a58      	ldr	r2, [pc, #352]	; (8003f94 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00e      	beq.n	8003e54 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a57      	ldr	r2, [pc, #348]	; (8003f98 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a55      	ldr	r2, [pc, #340]	; (8003f9c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003e4a:	f640 5178 	movw	r1, #3448	; 0xd78
 8003e4e:	484d      	ldr	r0, [pc, #308]	; (8003f84 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003e50:	f7fc fece 	bl	8000bf0 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fc76 	bl	800474c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0208 	orr.w	r2, r2, #8
 8003e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0204 	bic.w	r2, r2, #4
 8003e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6999      	ldr	r1, [r3, #24]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	619a      	str	r2, [r3, #24]
      break;
 8003e92:	e0c0      	b.n	8004016 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9c:	d018      	beq.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a39      	ldr	r2, [pc, #228]	; (8003f88 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a37      	ldr	r2, [pc, #220]	; (8003f8c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00e      	beq.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a36      	ldr	r2, [pc, #216]	; (8003f90 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d009      	beq.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a34      	ldr	r2, [pc, #208]	; (8003f94 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8003ec6:	f640 5189 	movw	r1, #3465	; 0xd89
 8003eca:	482e      	ldr	r0, [pc, #184]	; (8003f84 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003ecc:	f7fc fe90 	bl	8000bf0 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fc74 	bl	80047c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6999      	ldr	r1, [r3, #24]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	021a      	lsls	r2, r3, #8
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	619a      	str	r2, [r3, #24]
      break;
 8003f10:	e081      	b.n	8004016 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1a:	d013      	beq.n	8003f44 <HAL_TIM_PWM_ConfigChannel+0x224>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a19      	ldr	r2, [pc, #100]	; (8003f88 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_TIM_PWM_ConfigChannel+0x224>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a18      	ldr	r2, [pc, #96]	; (8003f8c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_TIM_PWM_ConfigChannel+0x224>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a16      	ldr	r2, [pc, #88]	; (8003f90 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_TIM_PWM_ConfigChannel+0x224>
 8003f3a:	f640 519a 	movw	r1, #3482	; 0xd9a
 8003f3e:	4811      	ldr	r0, [pc, #68]	; (8003f84 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003f40:	f7fc fe56 	bl	8000bf0 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fc78 	bl	8004840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0208 	orr.w	r2, r2, #8
 8003f5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69da      	ldr	r2, [r3, #28]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0204 	bic.w	r2, r2, #4
 8003f6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69d9      	ldr	r1, [r3, #28]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	61da      	str	r2, [r3, #28]
      break;
 8003f82:	e048      	b.n	8004016 <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8003f84:	080084b0 	.word	0x080084b0
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40000c00 	.word	0x40000c00
 8003f94:	40010800 	.word	0x40010800
 8003f98:	40010c00 	.word	0x40010c00
 8003f9c:	40011000 	.word	0x40011000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa8:	d013      	beq.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a20      	ldr	r2, [pc, #128]	; (8004030 <HAL_TIM_PWM_ConfigChannel+0x310>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00e      	beq.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1e      	ldr	r2, [pc, #120]	; (8004034 <HAL_TIM_PWM_ConfigChannel+0x314>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <HAL_TIM_PWM_ConfigChannel+0x318>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8003fc8:	f640 51ab 	movw	r1, #3499	; 0xdab
 8003fcc:	481b      	ldr	r0, [pc, #108]	; (800403c <HAL_TIM_PWM_ConfigChannel+0x31c>)
 8003fce:	f7fc fe0f 	bl	8000bf0 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fc6e 	bl	80048ba <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69da      	ldr	r2, [r3, #28]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69d9      	ldr	r1, [r3, #28]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	021a      	lsls	r2, r3, #8
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	61da      	str	r2, [r3, #28]
      break;
 8004012:	e000      	b.n	8004016 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    default:
      break;
 8004014:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	080084b0 	.word	0x080084b0

08004040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_TIM_ConfigClockSource+0x18>
 8004054:	2302      	movs	r3, #2
 8004056:	e2d7      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x5c8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004070:	d029      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x86>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800407a:	d024      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x86>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d020      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x86>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b10      	cmp	r3, #16
 800408a:	d01c      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x86>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b20      	cmp	r3, #32
 8004092:	d018      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x86>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b30      	cmp	r3, #48	; 0x30
 800409a:	d014      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x86>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	d010      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x86>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b50      	cmp	r3, #80	; 0x50
 80040aa:	d00c      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x86>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b60      	cmp	r3, #96	; 0x60
 80040b2:	d008      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x86>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b70      	cmp	r3, #112	; 0x70
 80040ba:	d004      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x86>
 80040bc:	f241 01d0 	movw	r1, #4304	; 0x10d0
 80040c0:	4874      	ldr	r0, [pc, #464]	; (8004294 <HAL_TIM_ConfigClockSource+0x254>)
 80040c2:	f7fc fd95 	bl	8000bf0 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040dc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b40      	cmp	r3, #64	; 0x40
 80040ec:	f000 820a 	beq.w	8004504 <HAL_TIM_ConfigClockSource+0x4c4>
 80040f0:	2b40      	cmp	r3, #64	; 0x40
 80040f2:	d80f      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0xd4>
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	f000 8256 	beq.w	80045a6 <HAL_TIM_ConfigClockSource+0x566>
 80040fa:	2b10      	cmp	r3, #16
 80040fc:	d803      	bhi.n	8004106 <HAL_TIM_ConfigClockSource+0xc6>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 8251 	beq.w	80045a6 <HAL_TIM_ConfigClockSource+0x566>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004104:	e277      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8004106:	2b20      	cmp	r3, #32
 8004108:	f000 824d 	beq.w	80045a6 <HAL_TIM_ConfigClockSource+0x566>
 800410c:	2b30      	cmp	r3, #48	; 0x30
 800410e:	f000 824a 	beq.w	80045a6 <HAL_TIM_ConfigClockSource+0x566>
      break;
 8004112:	e270      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8004114:	2b70      	cmp	r3, #112	; 0x70
 8004116:	d04c      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0x172>
 8004118:	2b70      	cmp	r3, #112	; 0x70
 800411a:	d806      	bhi.n	800412a <HAL_TIM_ConfigClockSource+0xea>
 800411c:	2b50      	cmp	r3, #80	; 0x50
 800411e:	f000 8141 	beq.w	80043a4 <HAL_TIM_ConfigClockSource+0x364>
 8004122:	2b60      	cmp	r3, #96	; 0x60
 8004124:	f000 818f 	beq.w	8004446 <HAL_TIM_ConfigClockSource+0x406>
      break;
 8004128:	e265      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 800412a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412e:	d004      	beq.n	800413a <HAL_TIM_ConfigClockSource+0xfa>
 8004130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004134:	f000 80c0 	beq.w	80042b8 <HAL_TIM_ConfigClockSource+0x278>
      break;
 8004138:	e25d      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004142:	f000 8257 	beq.w	80045f4 <HAL_TIM_ConfigClockSource+0x5b4>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a53      	ldr	r2, [pc, #332]	; (8004298 <HAL_TIM_ConfigClockSource+0x258>)
 800414c:	4293      	cmp	r3, r2
 800414e:	f000 8251 	beq.w	80045f4 <HAL_TIM_ConfigClockSource+0x5b4>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a51      	ldr	r2, [pc, #324]	; (800429c <HAL_TIM_ConfigClockSource+0x25c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	f000 824b 	beq.w	80045f4 <HAL_TIM_ConfigClockSource+0x5b4>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a4f      	ldr	r2, [pc, #316]	; (80042a0 <HAL_TIM_ConfigClockSource+0x260>)
 8004164:	4293      	cmp	r3, r2
 8004166:	f000 8245 	beq.w	80045f4 <HAL_TIM_ConfigClockSource+0x5b4>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a4d      	ldr	r2, [pc, #308]	; (80042a4 <HAL_TIM_ConfigClockSource+0x264>)
 8004170:	4293      	cmp	r3, r2
 8004172:	f000 823f 	beq.w	80045f4 <HAL_TIM_ConfigClockSource+0x5b4>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a4b      	ldr	r2, [pc, #300]	; (80042a8 <HAL_TIM_ConfigClockSource+0x268>)
 800417c:	4293      	cmp	r3, r2
 800417e:	f000 8239 	beq.w	80045f4 <HAL_TIM_ConfigClockSource+0x5b4>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a49      	ldr	r2, [pc, #292]	; (80042ac <HAL_TIM_ConfigClockSource+0x26c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	f000 8233 	beq.w	80045f4 <HAL_TIM_ConfigClockSource+0x5b4>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a47      	ldr	r2, [pc, #284]	; (80042b0 <HAL_TIM_ConfigClockSource+0x270>)
 8004194:	4293      	cmp	r3, r2
 8004196:	f000 822d 	beq.w	80045f4 <HAL_TIM_ConfigClockSource+0x5b4>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a45      	ldr	r2, [pc, #276]	; (80042b4 <HAL_TIM_ConfigClockSource+0x274>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	f000 8227 	beq.w	80045f4 <HAL_TIM_ConfigClockSource+0x5b4>
 80041a6:	f241 01dc 	movw	r1, #4316	; 0x10dc
 80041aa:	483a      	ldr	r0, [pc, #232]	; (8004294 <HAL_TIM_ConfigClockSource+0x254>)
 80041ac:	f7fc fd20 	bl	8000bf0 <assert_failed>
      break;
 80041b0:	e220      	b.n	80045f4 <HAL_TIM_ConfigClockSource+0x5b4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ba:	d018      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0x1ae>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a35      	ldr	r2, [pc, #212]	; (8004298 <HAL_TIM_ConfigClockSource+0x258>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0x1ae>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a34      	ldr	r2, [pc, #208]	; (800429c <HAL_TIM_ConfigClockSource+0x25c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0x1ae>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a32      	ldr	r2, [pc, #200]	; (80042a0 <HAL_TIM_ConfigClockSource+0x260>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d009      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0x1ae>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a33      	ldr	r2, [pc, #204]	; (80042ac <HAL_TIM_ConfigClockSource+0x26c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0x1ae>
 80041e4:	f241 01e3 	movw	r1, #4323	; 0x10e3
 80041e8:	482a      	ldr	r0, [pc, #168]	; (8004294 <HAL_TIM_ConfigClockSource+0x254>)
 80041ea:	f7fc fd01 	bl	8000bf0 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d013      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x1de>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fe:	d00e      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x1de>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004208:	d009      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x1de>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004212:	d004      	beq.n	800421e <HAL_TIM_ConfigClockSource+0x1de>
 8004214:	f241 01e6 	movw	r1, #4326	; 0x10e6
 8004218:	481e      	ldr	r0, [pc, #120]	; (8004294 <HAL_TIM_ConfigClockSource+0x254>)
 800421a:	f7fc fce9 	bl	8000bf0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004226:	d014      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x212>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d010      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x212>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00c      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x212>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d008      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x212>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b0a      	cmp	r3, #10
 8004246:	d004      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x212>
 8004248:	f241 01e7 	movw	r1, #4327	; 0x10e7
 800424c:	4811      	ldr	r0, [pc, #68]	; (8004294 <HAL_TIM_ConfigClockSource+0x254>)
 800424e:	f7fc fccf 	bl	8000bf0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	2b0f      	cmp	r3, #15
 8004258:	d904      	bls.n	8004264 <HAL_TIM_ConfigClockSource+0x224>
 800425a:	f241 01e8 	movw	r1, #4328	; 0x10e8
 800425e:	480d      	ldr	r0, [pc, #52]	; (8004294 <HAL_TIM_ConfigClockSource+0x254>)
 8004260:	f7fc fcc6 	bl	8000bf0 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6899      	ldr	r1, [r3, #8]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f000 fbd6 	bl	8004a24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004286:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	609a      	str	r2, [r3, #8]
      break;
 8004290:	e1b1      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x5b6>
 8004292:	bf00      	nop
 8004294:	080084b0 	.word	0x080084b0
 8004298:	40000400 	.word	0x40000400
 800429c:	40000800 	.word	0x40000800
 80042a0:	40000c00 	.word	0x40000c00
 80042a4:	40001000 	.word	0x40001000
 80042a8:	40001400 	.word	0x40001400
 80042ac:	40010800 	.word	0x40010800
 80042b0:	40010c00 	.word	0x40010c00
 80042b4:	40011000 	.word	0x40011000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c0:	d022      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0x2c8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a88      	ldr	r2, [pc, #544]	; (80044e8 <HAL_TIM_ConfigClockSource+0x4a8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d01d      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0x2c8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a86      	ldr	r2, [pc, #536]	; (80044ec <HAL_TIM_ConfigClockSource+0x4ac>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d018      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0x2c8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a85      	ldr	r2, [pc, #532]	; (80044f0 <HAL_TIM_ConfigClockSource+0x4b0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d013      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0x2c8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a83      	ldr	r2, [pc, #524]	; (80044f4 <HAL_TIM_ConfigClockSource+0x4b4>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00e      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0x2c8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a82      	ldr	r2, [pc, #520]	; (80044f8 <HAL_TIM_ConfigClockSource+0x4b8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d009      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0x2c8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a80      	ldr	r2, [pc, #512]	; (80044fc <HAL_TIM_ConfigClockSource+0x4bc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0x2c8>
 80042fe:	f241 01fb 	movw	r1, #4347	; 0x10fb
 8004302:	487f      	ldr	r0, [pc, #508]	; (8004500 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004304:	f7fc fc74 	bl	8000bf0 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d013      	beq.n	8004338 <HAL_TIM_ConfigClockSource+0x2f8>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004318:	d00e      	beq.n	8004338 <HAL_TIM_ConfigClockSource+0x2f8>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004322:	d009      	beq.n	8004338 <HAL_TIM_ConfigClockSource+0x2f8>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800432c:	d004      	beq.n	8004338 <HAL_TIM_ConfigClockSource+0x2f8>
 800432e:	f241 01fe 	movw	r1, #4350	; 0x10fe
 8004332:	4873      	ldr	r0, [pc, #460]	; (8004500 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004334:	f7fc fc5c 	bl	8000bf0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004340:	d014      	beq.n	800436c <HAL_TIM_ConfigClockSource+0x32c>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d010      	beq.n	800436c <HAL_TIM_ConfigClockSource+0x32c>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00c      	beq.n	800436c <HAL_TIM_ConfigClockSource+0x32c>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d008      	beq.n	800436c <HAL_TIM_ConfigClockSource+0x32c>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b0a      	cmp	r3, #10
 8004360:	d004      	beq.n	800436c <HAL_TIM_ConfigClockSource+0x32c>
 8004362:	f241 01ff 	movw	r1, #4351	; 0x10ff
 8004366:	4866      	ldr	r0, [pc, #408]	; (8004500 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004368:	f7fc fc42 	bl	8000bf0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b0f      	cmp	r3, #15
 8004372:	d904      	bls.n	800437e <HAL_TIM_ConfigClockSource+0x33e>
 8004374:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8004378:	4861      	ldr	r0, [pc, #388]	; (8004500 <HAL_TIM_ConfigClockSource+0x4c0>)
 800437a:	f7fc fc39 	bl	8000bf0 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	6899      	ldr	r1, [r3, #8]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f000 fb49 	bl	8004a24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043a0:	609a      	str	r2, [r3, #8]
      break;
 80043a2:	e128      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ac:	d018      	beq.n	80043e0 <HAL_TIM_ConfigClockSource+0x3a0>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a4d      	ldr	r2, [pc, #308]	; (80044e8 <HAL_TIM_ConfigClockSource+0x4a8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d013      	beq.n	80043e0 <HAL_TIM_ConfigClockSource+0x3a0>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a4b      	ldr	r2, [pc, #300]	; (80044ec <HAL_TIM_ConfigClockSource+0x4ac>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00e      	beq.n	80043e0 <HAL_TIM_ConfigClockSource+0x3a0>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a4a      	ldr	r2, [pc, #296]	; (80044f0 <HAL_TIM_ConfigClockSource+0x4b0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d009      	beq.n	80043e0 <HAL_TIM_ConfigClockSource+0x3a0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a48      	ldr	r2, [pc, #288]	; (80044f4 <HAL_TIM_ConfigClockSource+0x4b4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d004      	beq.n	80043e0 <HAL_TIM_ConfigClockSource+0x3a0>
 80043d6:	f241 110f 	movw	r1, #4367	; 0x110f
 80043da:	4849      	ldr	r0, [pc, #292]	; (8004500 <HAL_TIM_ConfigClockSource+0x4c0>)
 80043dc:	f7fc fc08 	bl	8000bf0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e8:	d014      	beq.n	8004414 <HAL_TIM_ConfigClockSource+0x3d4>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d010      	beq.n	8004414 <HAL_TIM_ConfigClockSource+0x3d4>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00c      	beq.n	8004414 <HAL_TIM_ConfigClockSource+0x3d4>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d008      	beq.n	8004414 <HAL_TIM_ConfigClockSource+0x3d4>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b0a      	cmp	r3, #10
 8004408:	d004      	beq.n	8004414 <HAL_TIM_ConfigClockSource+0x3d4>
 800440a:	f241 1112 	movw	r1, #4370	; 0x1112
 800440e:	483c      	ldr	r0, [pc, #240]	; (8004500 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004410:	f7fc fbee 	bl	8000bf0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	2b0f      	cmp	r3, #15
 800441a:	d904      	bls.n	8004426 <HAL_TIM_ConfigClockSource+0x3e6>
 800441c:	f241 1113 	movw	r1, #4371	; 0x1113
 8004420:	4837      	ldr	r0, [pc, #220]	; (8004500 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004422:	f7fc fbe5 	bl	8000bf0 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6859      	ldr	r1, [r3, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	461a      	mov	r2, r3
 8004434:	f000 fa7f 	bl	8004936 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2150      	movs	r1, #80	; 0x50
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fad6 	bl	80049f0 <TIM_ITRx_SetConfig>
      break;
 8004444:	e0d7      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444e:	d018      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0x442>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <HAL_TIM_ConfigClockSource+0x4a8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0x442>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a23      	ldr	r2, [pc, #140]	; (80044ec <HAL_TIM_ConfigClockSource+0x4ac>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00e      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0x442>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <HAL_TIM_ConfigClockSource+0x4b0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d009      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0x442>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a20      	ldr	r2, [pc, #128]	; (80044f4 <HAL_TIM_ConfigClockSource+0x4b4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0x442>
 8004478:	f241 111f 	movw	r1, #4383	; 0x111f
 800447c:	4820      	ldr	r0, [pc, #128]	; (8004500 <HAL_TIM_ConfigClockSource+0x4c0>)
 800447e:	f7fc fbb7 	bl	8000bf0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800448a:	d014      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x476>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d010      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x476>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00c      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x476>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d008      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x476>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b0a      	cmp	r3, #10
 80044aa:	d004      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x476>
 80044ac:	f241 1122 	movw	r1, #4386	; 0x1122
 80044b0:	4813      	ldr	r0, [pc, #76]	; (8004500 <HAL_TIM_ConfigClockSource+0x4c0>)
 80044b2:	f7fc fb9d 	bl	8000bf0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b0f      	cmp	r3, #15
 80044bc:	d904      	bls.n	80044c8 <HAL_TIM_ConfigClockSource+0x488>
 80044be:	f241 1123 	movw	r1, #4387	; 0x1123
 80044c2:	480f      	ldr	r0, [pc, #60]	; (8004500 <HAL_TIM_ConfigClockSource+0x4c0>)
 80044c4:	f7fc fb94 	bl	8000bf0 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	6859      	ldr	r1, [r3, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	461a      	mov	r2, r3
 80044d6:	f000 fa5c 	bl	8004992 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2160      	movs	r1, #96	; 0x60
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fa85 	bl	80049f0 <TIM_ITRx_SetConfig>
      break;
 80044e6:	e086      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x5b6>
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800
 80044f0:	40000c00 	.word	0x40000c00
 80044f4:	40010800 	.word	0x40010800
 80044f8:	40010c00 	.word	0x40010c00
 80044fc:	40011000 	.word	0x40011000
 8004500:	080084b0 	.word	0x080084b0
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450c:	d018      	beq.n	8004540 <HAL_TIM_ConfigClockSource+0x500>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a3f      	ldr	r2, [pc, #252]	; (8004610 <HAL_TIM_ConfigClockSource+0x5d0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d013      	beq.n	8004540 <HAL_TIM_ConfigClockSource+0x500>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a3d      	ldr	r2, [pc, #244]	; (8004614 <HAL_TIM_ConfigClockSource+0x5d4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00e      	beq.n	8004540 <HAL_TIM_ConfigClockSource+0x500>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a3c      	ldr	r2, [pc, #240]	; (8004618 <HAL_TIM_ConfigClockSource+0x5d8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d009      	beq.n	8004540 <HAL_TIM_ConfigClockSource+0x500>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a3a      	ldr	r2, [pc, #232]	; (800461c <HAL_TIM_ConfigClockSource+0x5dc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_TIM_ConfigClockSource+0x500>
 8004536:	f241 112f 	movw	r1, #4399	; 0x112f
 800453a:	4839      	ldr	r0, [pc, #228]	; (8004620 <HAL_TIM_ConfigClockSource+0x5e0>)
 800453c:	f7fc fb58 	bl	8000bf0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004548:	d014      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0x534>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d010      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0x534>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00c      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0x534>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d008      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0x534>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b0a      	cmp	r3, #10
 8004568:	d004      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0x534>
 800456a:	f241 1132 	movw	r1, #4402	; 0x1132
 800456e:	482c      	ldr	r0, [pc, #176]	; (8004620 <HAL_TIM_ConfigClockSource+0x5e0>)
 8004570:	f7fc fb3e 	bl	8000bf0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b0f      	cmp	r3, #15
 800457a:	d904      	bls.n	8004586 <HAL_TIM_ConfigClockSource+0x546>
 800457c:	f241 1133 	movw	r1, #4403	; 0x1133
 8004580:	4827      	ldr	r0, [pc, #156]	; (8004620 <HAL_TIM_ConfigClockSource+0x5e0>)
 8004582:	f7fc fb35 	bl	8000bf0 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6859      	ldr	r1, [r3, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	461a      	mov	r2, r3
 8004594:	f000 f9cf 	bl	8004936 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2140      	movs	r1, #64	; 0x40
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fa26 	bl	80049f0 <TIM_ITRx_SetConfig>
      break;
 80045a4:	e027      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d018      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x5a2>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a16      	ldr	r2, [pc, #88]	; (8004610 <HAL_TIM_ConfigClockSource+0x5d0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x5a2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <HAL_TIM_ConfigClockSource+0x5d4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d00e      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x5a2>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a13      	ldr	r2, [pc, #76]	; (8004618 <HAL_TIM_ConfigClockSource+0x5d8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d009      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x5a2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a12      	ldr	r2, [pc, #72]	; (800461c <HAL_TIM_ConfigClockSource+0x5dc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d004      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0x5a2>
 80045d8:	f241 1142 	movw	r1, #4418	; 0x1142
 80045dc:	4810      	ldr	r0, [pc, #64]	; (8004620 <HAL_TIM_ConfigClockSource+0x5e0>)
 80045de:	f7fc fb07 	bl	8000bf0 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f000 f9ff 	bl	80049f0 <TIM_ITRx_SetConfig>
      break;
 80045f2:	e000      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x5b6>
      break;
 80045f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800
 8004618:	40000c00 	.word	0x40000c00
 800461c:	40010800 	.word	0x40010800
 8004620:	080084b0 	.word	0x080084b0

08004624 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr

08004636 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr

0800465a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004682:	d00f      	beq.n	80046a4 <TIM_Base_SetConfig+0x38>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a2b      	ldr	r2, [pc, #172]	; (8004734 <TIM_Base_SetConfig+0xc8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00b      	beq.n	80046a4 <TIM_Base_SetConfig+0x38>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a2a      	ldr	r2, [pc, #168]	; (8004738 <TIM_Base_SetConfig+0xcc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <TIM_Base_SetConfig+0x38>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a29      	ldr	r2, [pc, #164]	; (800473c <TIM_Base_SetConfig+0xd0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d003      	beq.n	80046a4 <TIM_Base_SetConfig+0x38>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a28      	ldr	r2, [pc, #160]	; (8004740 <TIM_Base_SetConfig+0xd4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d108      	bne.n	80046b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046bc:	d017      	beq.n	80046ee <TIM_Base_SetConfig+0x82>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <TIM_Base_SetConfig+0xc8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <TIM_Base_SetConfig+0x82>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <TIM_Base_SetConfig+0xcc>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00f      	beq.n	80046ee <TIM_Base_SetConfig+0x82>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a1a      	ldr	r2, [pc, #104]	; (800473c <TIM_Base_SetConfig+0xd0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d00b      	beq.n	80046ee <TIM_Base_SetConfig+0x82>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a19      	ldr	r2, [pc, #100]	; (8004740 <TIM_Base_SetConfig+0xd4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d007      	beq.n	80046ee <TIM_Base_SetConfig+0x82>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a18      	ldr	r2, [pc, #96]	; (8004744 <TIM_Base_SetConfig+0xd8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d003      	beq.n	80046ee <TIM_Base_SetConfig+0x82>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a17      	ldr	r2, [pc, #92]	; (8004748 <TIM_Base_SetConfig+0xdc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d108      	bne.n	8004700 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	615a      	str	r2, [r3, #20]
}
 800472a:	bf00      	nop
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800
 800473c:	40000c00 	.word	0x40000c00
 8004740:	40010800 	.word	0x40010800
 8004744:	40010c00 	.word	0x40010c00
 8004748:	40011000 	.word	0x40011000

0800474c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f023 0201 	bic.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f023 0302 	bic.w	r3, r3, #2
 8004794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f023 0210 	bic.w	r2, r3, #16
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f023 0320 	bic.w	r3, r3, #32
 800480e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr

08004840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	621a      	str	r2, [r3, #32]
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr

080048ba <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b087      	sub	sp, #28
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	031b      	lsls	r3, r3, #12
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	621a      	str	r2, [r3, #32]
}
 800492c:	bf00      	nop
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr

08004936 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004936:	b480      	push	{r7}
 8004938:	b087      	sub	sp, #28
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	f023 0201 	bic.w	r2, r3, #1
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004960:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 030a 	bic.w	r3, r3, #10
 8004972:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	621a      	str	r2, [r3, #32]
}
 8004988:	bf00      	nop
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr

08004992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004992:	b480      	push	{r7}
 8004994:	b087      	sub	sp, #28
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f023 0210 	bic.w	r2, r3, #16
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	031b      	lsls	r3, r3, #12
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f043 0307 	orr.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	609a      	str	r2, [r3, #8]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr

08004a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	021a      	lsls	r2, r3, #8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
	...

08004a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a76:	d017      	beq.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a41      	ldr	r2, [pc, #260]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d012      	beq.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a40      	ldr	r2, [pc, #256]	; (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00d      	beq.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a3e      	ldr	r2, [pc, #248]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d008      	beq.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a3d      	ldr	r2, [pc, #244]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d003      	beq.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004aa0:	215a      	movs	r1, #90	; 0x5a
 8004aa2:	483c      	ldr	r0, [pc, #240]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004aa4:	f7fc f8a4 	bl	8000bf0 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01f      	beq.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d01b      	beq.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d017      	beq.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b30      	cmp	r3, #48	; 0x30
 8004ac6:	d013      	beq.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	d00f      	beq.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b50      	cmp	r3, #80	; 0x50
 8004ad6:	d00b      	beq.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b60      	cmp	r3, #96	; 0x60
 8004ade:	d007      	beq.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b70      	cmp	r3, #112	; 0x70
 8004ae6:	d003      	beq.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ae8:	215b      	movs	r1, #91	; 0x5b
 8004aea:	482a      	ldr	r0, [pc, #168]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004aec:	f7fc f880 	bl	8000bf0 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b80      	cmp	r3, #128	; 0x80
 8004af6:	d007      	beq.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004b00:	215c      	movs	r1, #92	; 0x5c
 8004b02:	4824      	ldr	r0, [pc, #144]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004b04:	f7fc f874 	bl	8000bf0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e032      	b.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x118>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b4e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40000400 	.word	0x40000400
 8004b88:	40000800 	.word	0x40000800
 8004b8c:	40000c00 	.word	0x40000c00
 8004b90:	40010800 	.word	0x40010800
 8004b94:	080084e8 	.word	0x080084e8

08004b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e0aa      	b.n	8004d00 <HAL_UART_Init+0x168>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d02c      	beq.n	8004c0c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a54      	ldr	r2, [pc, #336]	; (8004d08 <HAL_UART_Init+0x170>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00e      	beq.n	8004bda <HAL_UART_Init+0x42>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a52      	ldr	r2, [pc, #328]	; (8004d0c <HAL_UART_Init+0x174>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d009      	beq.n	8004bda <HAL_UART_Init+0x42>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a51      	ldr	r2, [pc, #324]	; (8004d10 <HAL_UART_Init+0x178>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d004      	beq.n	8004bda <HAL_UART_Init+0x42>
 8004bd0:	f240 1145 	movw	r1, #325	; 0x145
 8004bd4:	484f      	ldr	r0, [pc, #316]	; (8004d14 <HAL_UART_Init+0x17c>)
 8004bd6:	f7fc f80b 	bl	8000bf0 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d032      	beq.n	8004c48 <HAL_UART_Init+0xb0>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bea:	d02d      	beq.n	8004c48 <HAL_UART_Init+0xb0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf4:	d028      	beq.n	8004c48 <HAL_UART_Init+0xb0>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfe:	d023      	beq.n	8004c48 <HAL_UART_Init+0xb0>
 8004c00:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004c04:	4843      	ldr	r0, [pc, #268]	; (8004d14 <HAL_UART_Init+0x17c>)
 8004c06:	f7fb fff3 	bl	8000bf0 <assert_failed>
 8004c0a:	e01d      	b.n	8004c48 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a3d      	ldr	r2, [pc, #244]	; (8004d08 <HAL_UART_Init+0x170>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d018      	beq.n	8004c48 <HAL_UART_Init+0xb0>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a3c      	ldr	r2, [pc, #240]	; (8004d0c <HAL_UART_Init+0x174>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d013      	beq.n	8004c48 <HAL_UART_Init+0xb0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a3a      	ldr	r2, [pc, #232]	; (8004d10 <HAL_UART_Init+0x178>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00e      	beq.n	8004c48 <HAL_UART_Init+0xb0>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a3a      	ldr	r2, [pc, #232]	; (8004d18 <HAL_UART_Init+0x180>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d009      	beq.n	8004c48 <HAL_UART_Init+0xb0>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a38      	ldr	r2, [pc, #224]	; (8004d1c <HAL_UART_Init+0x184>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d004      	beq.n	8004c48 <HAL_UART_Init+0xb0>
 8004c3e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004c42:	4834      	ldr	r0, [pc, #208]	; (8004d14 <HAL_UART_Init+0x17c>)
 8004c44:	f7fb ffd4 	bl	8000bf0 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d009      	beq.n	8004c64 <HAL_UART_Init+0xcc>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c58:	d004      	beq.n	8004c64 <HAL_UART_Init+0xcc>
 8004c5a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004c5e:	482d      	ldr	r0, [pc, #180]	; (8004d14 <HAL_UART_Init+0x17c>)
 8004c60:	f7fb ffc6 	bl	8000bf0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d009      	beq.n	8004c80 <HAL_UART_Init+0xe8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c74:	d004      	beq.n	8004c80 <HAL_UART_Init+0xe8>
 8004c76:	f240 114d 	movw	r1, #333	; 0x14d
 8004c7a:	4826      	ldr	r0, [pc, #152]	; (8004d14 <HAL_UART_Init+0x17c>)
 8004c7c:	f7fb ffb8 	bl	8000bf0 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <HAL_UART_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7fc faef 	bl	8001278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2224      	movs	r2, #36	; 0x24
 8004c9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cb0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f924 	bl	8004f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691a      	ldr	r2, [r3, #16]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cd6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ce6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40013800 	.word	0x40013800
 8004d0c:	40004400 	.word	0x40004400
 8004d10:	40004800 	.word	0x40004800
 8004d14:	08008524 	.word	0x08008524
 8004d18:	40004c00 	.word	0x40004c00
 8004d1c:	40005000 	.word	0x40005000

08004d20 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	f040 8090 	bne.w	8004e62 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <HAL_UART_Receive+0x2e>
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e088      	b.n	8004e64 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_UART_Receive+0x40>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e081      	b.n	8004e64 <HAL_UART_Receive+0x144>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2222      	movs	r2, #34	; 0x22
 8004d72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d76:	f7fc fb13 	bl	80013a0 <HAL_GetTick>
 8004d7a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	88fa      	ldrh	r2, [r7, #6]
 8004d80:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	88fa      	ldrh	r2, [r7, #6]
 8004d86:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d88:	e05c      	b.n	8004e44 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da0:	d12b      	bne.n	8004dfa <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2200      	movs	r2, #0
 8004daa:	2120      	movs	r1, #32
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 f85d 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e053      	b.n	8004e64 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10c      	bne.n	8004de2 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	3302      	adds	r3, #2
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	e030      	b.n	8004e44 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	3301      	adds	r3, #1
 8004df6:	60bb      	str	r3, [r7, #8]
 8004df8:	e024      	b.n	8004e44 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2200      	movs	r2, #0
 8004e02:	2120      	movs	r1, #32
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f831 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e027      	b.n	8004e64 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d108      	bne.n	8004e2e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6859      	ldr	r1, [r3, #4]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	60ba      	str	r2, [r7, #8]
 8004e28:	b2ca      	uxtb	r2, r1
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	e00a      	b.n	8004e44 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	1c59      	adds	r1, r3, #1
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d19d      	bne.n	8004d8a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	e000      	b.n	8004e64 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004e62:	2302      	movs	r3, #2
  }
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7c:	e02c      	b.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d028      	beq.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e8c:	f7fc fa88 	bl	80013a0 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d21d      	bcs.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004eaa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0201 	bic.w	r2, r2, #1
 8004eba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e00f      	b.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	bf0c      	ite	eq
 8004ee8:	2301      	moveq	r3, #1
 8004eea:	2300      	movne	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d0c3      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4ab2      	ldr	r2, [pc, #712]	; (80051d8 <UART_SetConfig+0x2d8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d904      	bls.n	8004f1c <UART_SetConfig+0x1c>
 8004f12:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8004f16:	48b1      	ldr	r0, [pc, #708]	; (80051dc <UART_SetConfig+0x2dc>)
 8004f18:	f7fb fe6a 	bl	8000bf0 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <UART_SetConfig+0x38>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f2c:	d004      	beq.n	8004f38 <UART_SetConfig+0x38>
 8004f2e:	f640 31e3 	movw	r1, #3043	; 0xbe3
 8004f32:	48aa      	ldr	r0, [pc, #680]	; (80051dc <UART_SetConfig+0x2dc>)
 8004f34:	f7fb fe5c 	bl	8000bf0 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00e      	beq.n	8004f5e <UART_SetConfig+0x5e>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f48:	d009      	beq.n	8004f5e <UART_SetConfig+0x5e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f52:	d004      	beq.n	8004f5e <UART_SetConfig+0x5e>
 8004f54:	f640 31e4 	movw	r1, #3044	; 0xbe4
 8004f58:	48a0      	ldr	r0, [pc, #640]	; (80051dc <UART_SetConfig+0x2dc>)
 8004f5a:	f7fb fe49 	bl	8000bf0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <UART_SetConfig+0x74>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <UART_SetConfig+0x7e>
 8004f74:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8004f78:	4898      	ldr	r0, [pc, #608]	; (80051dc <UART_SetConfig+0x2dc>)
 8004f7a:	f7fb fe39 	bl	8000bf0 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004fb6:	f023 030c 	bic.w	r3, r3, #12
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	68f9      	ldr	r1, [r7, #12]
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe2:	f040 80a5 	bne.w	8005130 <UART_SetConfig+0x230>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a7d      	ldr	r2, [pc, #500]	; (80051e0 <UART_SetConfig+0x2e0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d14f      	bne.n	8005090 <UART_SetConfig+0x190>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ff0:	f7fe fb44 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 8004ff4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009a      	lsls	r2, r3, #2
 8005000:	441a      	add	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	4a75      	ldr	r2, [pc, #468]	; (80051e4 <UART_SetConfig+0x2e4>)
 800500e:	fba2 2303 	umull	r2, r3, r2, r3
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	0119      	lsls	r1, r3, #4
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009a      	lsls	r2, r3, #2
 8005020:	441a      	add	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	fbb2 f2f3 	udiv	r2, r2, r3
 800502c:	4b6d      	ldr	r3, [pc, #436]	; (80051e4 <UART_SetConfig+0x2e4>)
 800502e:	fba3 0302 	umull	r0, r3, r3, r2
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	2064      	movs	r0, #100	; 0x64
 8005036:	fb00 f303 	mul.w	r3, r0, r3
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	3332      	adds	r3, #50	; 0x32
 8005040:	4a68      	ldr	r2, [pc, #416]	; (80051e4 <UART_SetConfig+0x2e4>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800504e:	4419      	add	r1, r3
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009a      	lsls	r2, r3, #2
 800505a:	441a      	add	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	fbb2 f2f3 	udiv	r2, r2, r3
 8005066:	4b5f      	ldr	r3, [pc, #380]	; (80051e4 <UART_SetConfig+0x2e4>)
 8005068:	fba3 0302 	umull	r0, r3, r3, r2
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	2064      	movs	r0, #100	; 0x64
 8005070:	fb00 f303 	mul.w	r3, r0, r3
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	3332      	adds	r3, #50	; 0x32
 800507a:	4a5a      	ldr	r2, [pc, #360]	; (80051e4 <UART_SetConfig+0x2e4>)
 800507c:	fba2 2303 	umull	r2, r3, r2, r3
 8005080:	095b      	lsrs	r3, r3, #5
 8005082:	f003 0207 	and.w	r2, r3, #7
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	440a      	add	r2, r1
 800508c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800508e:	e0f9      	b.n	8005284 <UART_SetConfig+0x384>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005090:	f7fe fae0 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 8005094:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	4613      	mov	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	009a      	lsls	r2, r3, #2
 80050a0:	441a      	add	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	4a4d      	ldr	r2, [pc, #308]	; (80051e4 <UART_SetConfig+0x2e4>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	0119      	lsls	r1, r3, #4
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009a      	lsls	r2, r3, #2
 80050c0:	441a      	add	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80050cc:	4b45      	ldr	r3, [pc, #276]	; (80051e4 <UART_SetConfig+0x2e4>)
 80050ce:	fba3 0302 	umull	r0, r3, r3, r2
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	2064      	movs	r0, #100	; 0x64
 80050d6:	fb00 f303 	mul.w	r3, r0, r3
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	3332      	adds	r3, #50	; 0x32
 80050e0:	4a40      	ldr	r2, [pc, #256]	; (80051e4 <UART_SetConfig+0x2e4>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050ee:	4419      	add	r1, r3
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	009a      	lsls	r2, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	fbb2 f2f3 	udiv	r2, r2, r3
 8005106:	4b37      	ldr	r3, [pc, #220]	; (80051e4 <UART_SetConfig+0x2e4>)
 8005108:	fba3 0302 	umull	r0, r3, r3, r2
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	2064      	movs	r0, #100	; 0x64
 8005110:	fb00 f303 	mul.w	r3, r0, r3
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	3332      	adds	r3, #50	; 0x32
 800511a:	4a32      	ldr	r2, [pc, #200]	; (80051e4 <UART_SetConfig+0x2e4>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	f003 0207 	and.w	r2, r3, #7
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	440a      	add	r2, r1
 800512c:	609a      	str	r2, [r3, #8]
}
 800512e:	e0a9      	b.n	8005284 <UART_SetConfig+0x384>
    if((huart->Instance == USART1))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a2a      	ldr	r2, [pc, #168]	; (80051e0 <UART_SetConfig+0x2e0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d156      	bne.n	80051e8 <UART_SetConfig+0x2e8>
      pclk = HAL_RCC_GetPCLK2Freq();
 800513a:	f7fe fa9f 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 800513e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009a      	lsls	r2, r3, #2
 800514a:	441a      	add	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	fbb2 f3f3 	udiv	r3, r2, r3
 8005156:	4a23      	ldr	r2, [pc, #140]	; (80051e4 <UART_SetConfig+0x2e4>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	095b      	lsrs	r3, r3, #5
 800515e:	0119      	lsls	r1, r3, #4
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	4613      	mov	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	009a      	lsls	r2, r3, #2
 800516a:	441a      	add	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	fbb2 f2f3 	udiv	r2, r2, r3
 8005176:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <UART_SetConfig+0x2e4>)
 8005178:	fba3 0302 	umull	r0, r3, r3, r2
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	2064      	movs	r0, #100	; 0x64
 8005180:	fb00 f303 	mul.w	r3, r0, r3
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	3332      	adds	r3, #50	; 0x32
 800518a:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <UART_SetConfig+0x2e4>)
 800518c:	fba2 2303 	umull	r2, r3, r2, r3
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005196:	4419      	add	r1, r3
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	009a      	lsls	r2, r3, #2
 80051a2:	441a      	add	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80051ae:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <UART_SetConfig+0x2e4>)
 80051b0:	fba3 0302 	umull	r0, r3, r3, r2
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	2064      	movs	r0, #100	; 0x64
 80051b8:	fb00 f303 	mul.w	r3, r0, r3
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	3332      	adds	r3, #50	; 0x32
 80051c2:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <UART_SetConfig+0x2e4>)
 80051c4:	fba2 2303 	umull	r2, r3, r2, r3
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	f003 020f 	and.w	r2, r3, #15
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	440a      	add	r2, r1
 80051d4:	609a      	str	r2, [r3, #8]
}
 80051d6:	e055      	b.n	8005284 <UART_SetConfig+0x384>
 80051d8:	003d0900 	.word	0x003d0900
 80051dc:	08008524 	.word	0x08008524
 80051e0:	40013800 	.word	0x40013800
 80051e4:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80051e8:	f7fe fa34 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 80051ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009a      	lsls	r2, r3, #2
 80051f8:	441a      	add	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	4a21      	ldr	r2, [pc, #132]	; (800528c <UART_SetConfig+0x38c>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	0119      	lsls	r1, r3, #4
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	009a      	lsls	r2, r3, #2
 8005218:	441a      	add	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	fbb2 f2f3 	udiv	r2, r2, r3
 8005224:	4b19      	ldr	r3, [pc, #100]	; (800528c <UART_SetConfig+0x38c>)
 8005226:	fba3 0302 	umull	r0, r3, r3, r2
 800522a:	095b      	lsrs	r3, r3, #5
 800522c:	2064      	movs	r0, #100	; 0x64
 800522e:	fb00 f303 	mul.w	r3, r0, r3
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	3332      	adds	r3, #50	; 0x32
 8005238:	4a14      	ldr	r2, [pc, #80]	; (800528c <UART_SetConfig+0x38c>)
 800523a:	fba2 2303 	umull	r2, r3, r2, r3
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005244:	4419      	add	r1, r3
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	009a      	lsls	r2, r3, #2
 8005250:	441a      	add	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	fbb2 f2f3 	udiv	r2, r2, r3
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <UART_SetConfig+0x38c>)
 800525e:	fba3 0302 	umull	r0, r3, r3, r2
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	2064      	movs	r0, #100	; 0x64
 8005266:	fb00 f303 	mul.w	r3, r0, r3
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	3332      	adds	r3, #50	; 0x32
 8005270:	4a06      	ldr	r2, [pc, #24]	; (800528c <UART_SetConfig+0x38c>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	f003 020f 	and.w	r2, r3, #15
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	440a      	add	r2, r1
 8005282:	609a      	str	r2, [r3, #8]
}
 8005284:	bf00      	nop
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	51eb851f 	.word	0x51eb851f

08005290 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005296:	f3ef 8305 	mrs	r3, IPSR
 800529a:	60bb      	str	r3, [r7, #8]
  return(result);
 800529c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10f      	bne.n	80052c2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a2:	f3ef 8310 	mrs	r3, PRIMASK
 80052a6:	607b      	str	r3, [r7, #4]
  return(result);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d109      	bne.n	80052c2 <osKernelInitialize+0x32>
 80052ae:	4b10      	ldr	r3, [pc, #64]	; (80052f0 <osKernelInitialize+0x60>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d109      	bne.n	80052ca <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052b6:	f3ef 8311 	mrs	r3, BASEPRI
 80052ba:	603b      	str	r3, [r7, #0]
  return(result);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80052c2:	f06f 0305 	mvn.w	r3, #5
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	e00c      	b.n	80052e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80052ca:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <osKernelInitialize+0x60>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d105      	bne.n	80052de <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80052d2:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <osKernelInitialize+0x60>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	e002      	b.n	80052e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80052de:	f04f 33ff 	mov.w	r3, #4294967295
 80052e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80052e4:	68fb      	ldr	r3, [r7, #12]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr
 80052f0:	20000034 	.word	0x20000034

080052f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052fa:	f3ef 8305 	mrs	r3, IPSR
 80052fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005300:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10f      	bne.n	8005326 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005306:	f3ef 8310 	mrs	r3, PRIMASK
 800530a:	607b      	str	r3, [r7, #4]
  return(result);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <osKernelStart+0x32>
 8005312:	4b11      	ldr	r3, [pc, #68]	; (8005358 <osKernelStart+0x64>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d109      	bne.n	800532e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800531a:	f3ef 8311 	mrs	r3, BASEPRI
 800531e:	603b      	str	r3, [r7, #0]
  return(result);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005326:	f06f 0305 	mvn.w	r3, #5
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	e00e      	b.n	800534c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800532e:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <osKernelStart+0x64>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d107      	bne.n	8005346 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005336:	4b08      	ldr	r3, [pc, #32]	; (8005358 <osKernelStart+0x64>)
 8005338:	2202      	movs	r2, #2
 800533a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800533c:	f001 fa50 	bl	80067e0 <vTaskStartScheduler>
      stat = osOK;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e002      	b.n	800534c <osKernelStart+0x58>
    } else {
      stat = osError;
 8005346:	f04f 33ff 	mov.w	r3, #4294967295
 800534a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800534c:	68fb      	ldr	r3, [r7, #12]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20000034 	.word	0x20000034

0800535c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b092      	sub	sp, #72	; 0x48
 8005360:	af04      	add	r7, sp, #16
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800536c:	f3ef 8305 	mrs	r3, IPSR
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005374:	2b00      	cmp	r3, #0
 8005376:	f040 8094 	bne.w	80054a2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800537a:	f3ef 8310 	mrs	r3, PRIMASK
 800537e:	623b      	str	r3, [r7, #32]
  return(result);
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	2b00      	cmp	r3, #0
 8005384:	f040 808d 	bne.w	80054a2 <osThreadNew+0x146>
 8005388:	4b48      	ldr	r3, [pc, #288]	; (80054ac <osThreadNew+0x150>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d106      	bne.n	800539e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005390:	f3ef 8311 	mrs	r3, BASEPRI
 8005394:	61fb      	str	r3, [r7, #28]
  return(result);
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f040 8082 	bne.w	80054a2 <osThreadNew+0x146>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d07e      	beq.n	80054a2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80053a4:	2380      	movs	r3, #128	; 0x80
 80053a6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80053a8:	2318      	movs	r3, #24
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80053ac:	2300      	movs	r3, #0
 80053ae:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80053b0:	f107 031b 	add.w	r3, r7, #27
 80053b4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80053b6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ba:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d045      	beq.n	800544e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <osThreadNew+0x74>
        name = attr->name;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <osThreadNew+0x9a>
 80053e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e6:	2b38      	cmp	r3, #56	; 0x38
 80053e8:	d805      	bhi.n	80053f6 <osThreadNew+0x9a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <osThreadNew+0x9e>
        return (NULL);
 80053f6:	2300      	movs	r3, #0
 80053f8:	e054      	b.n	80054a4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	089b      	lsrs	r3, r3, #2
 8005408:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00e      	beq.n	8005430 <osThreadNew+0xd4>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	2b5b      	cmp	r3, #91	; 0x5b
 8005418:	d90a      	bls.n	8005430 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800541e:	2b00      	cmp	r3, #0
 8005420:	d006      	beq.n	8005430 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <osThreadNew+0xd4>
        mem = 1;
 800542a:	2301      	movs	r3, #1
 800542c:	62bb      	str	r3, [r7, #40]	; 0x28
 800542e:	e010      	b.n	8005452 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10c      	bne.n	8005452 <osThreadNew+0xf6>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d108      	bne.n	8005452 <osThreadNew+0xf6>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <osThreadNew+0xf6>
          mem = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
 800544c:	e001      	b.n	8005452 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	2b01      	cmp	r3, #1
 8005456:	d110      	bne.n	800547a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005460:	9202      	str	r2, [sp, #8]
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800546c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 ffee 	bl	8006450 <xTaskCreateStatic>
 8005474:	4603      	mov	r3, r0
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e013      	b.n	80054a2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	2b00      	cmp	r3, #0
 800547e:	d110      	bne.n	80054a2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	b29a      	uxth	r2, r3
 8005484:	f107 0314 	add.w	r3, r7, #20
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f001 f835 	bl	8006502 <xTaskCreate>
 8005498:	4603      	mov	r3, r0
 800549a:	2b01      	cmp	r3, #1
 800549c:	d001      	beq.n	80054a2 <osThreadNew+0x146>
          hTask = NULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054a2:	697b      	ldr	r3, [r7, #20]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3738      	adds	r7, #56	; 0x38
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000034 	.word	0x20000034

080054b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054b8:	f3ef 8305 	mrs	r3, IPSR
 80054bc:	613b      	str	r3, [r7, #16]
  return(result);
 80054be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10f      	bne.n	80054e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054c4:	f3ef 8310 	mrs	r3, PRIMASK
 80054c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d109      	bne.n	80054e4 <osDelay+0x34>
 80054d0:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <osDelay+0x58>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d109      	bne.n	80054ec <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054d8:	f3ef 8311 	mrs	r3, BASEPRI
 80054dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <osDelay+0x3c>
    stat = osErrorISR;
 80054e4:	f06f 0305 	mvn.w	r3, #5
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	e007      	b.n	80054fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f001 f93e 	bl	8006778 <vTaskDelay>
    }
  }

  return (stat);
 80054fc:	697b      	ldr	r3, [r7, #20]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000034 	.word	0x20000034

0800550c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4a06      	ldr	r2, [pc, #24]	; (8005534 <vApplicationGetIdleTaskMemory+0x28>)
 800551c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4a05      	ldr	r2, [pc, #20]	; (8005538 <vApplicationGetIdleTaskMemory+0x2c>)
 8005522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2280      	movs	r2, #128	; 0x80
 8005528:	601a      	str	r2, [r3, #0]
}
 800552a:	bf00      	nop
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr
 8005534:	20000038 	.word	0x20000038
 8005538:	20000094 	.word	0x20000094

0800553c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4a07      	ldr	r2, [pc, #28]	; (8005568 <vApplicationGetTimerTaskMemory+0x2c>)
 800554c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	4a06      	ldr	r2, [pc, #24]	; (800556c <vApplicationGetTimerTaskMemory+0x30>)
 8005552:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800555a:	601a      	str	r2, [r3, #0]
}
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000294 	.word	0x20000294
 800556c:	200002f0 	.word	0x200002f0

08005570 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005576:	2020      	movs	r0, #32
 8005578:	f002 fc7c 	bl	8007e74 <pvPortMalloc>
 800557c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3304      	adds	r3, #4
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f99e 	bl	80058d0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800559a:	687b      	ldr	r3, [r7, #4]
	}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b090      	sub	sp, #64	; 0x40
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	623b      	str	r3, [r7, #32]
 80055d6:	e7fe      	b.n	80055d6 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <xEventGroupWaitBits+0x52>
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	e7fe      	b.n	80055f4 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d109      	bne.n	8005610 <xEventGroupWaitBits+0x6c>
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	e7fe      	b.n	800560e <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005610:	f001 fdd8 	bl	80071c4 <xTaskGetSchedulerState>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d102      	bne.n	8005620 <xEventGroupWaitBits+0x7c>
 800561a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <xEventGroupWaitBits+0x80>
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <xEventGroupWaitBits+0x82>
 8005624:	2300      	movs	r3, #0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d109      	bne.n	800563e <xEventGroupWaitBits+0x9a>
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	e7fe      	b.n	800563c <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 800563e:	f001 f933 	bl	80068a8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800564e:	f000 f909 	bl	8005864 <prvTestWaitCondition>
 8005652:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00e      	beq.n	8005678 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800565e:	2300      	movs	r3, #0
 8005660:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d028      	beq.n	80056ba <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	43db      	mvns	r3, r3
 8005670:	401a      	ands	r2, r3
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	e020      	b.n	80056ba <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800567e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005680:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005682:	2301      	movs	r3, #1
 8005684:	633b      	str	r3, [r7, #48]	; 0x30
 8005686:	e018      	b.n	80056ba <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005694:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056a2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80056a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a6:	1d18      	adds	r0, r3, #4
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	4313      	orrs	r3, r2
 80056ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056b0:	4619      	mov	r1, r3
 80056b2:	f001 fb07 	bl	8006cc4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80056ba:	f001 f903 	bl	80068c4 <xTaskResumeAll>
 80056be:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80056c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d031      	beq.n	800572a <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d107      	bne.n	80056dc <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 80056cc:	4b19      	ldr	r3, [pc, #100]	; (8005734 <xEventGroupWaitBits+0x190>)
 80056ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80056dc:	f001 fdfc 	bl	80072d8 <uxTaskResetEventItemValue>
 80056e0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80056e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d11a      	bne.n	8005722 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80056ec:	f002 facc 	bl	8007c88 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80056fc:	f000 f8b2 	bl	8005864 <prvTestWaitCondition>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d006      	beq.n	800571a <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	43db      	mvns	r3, r3
 8005714:	401a      	ands	r2, r3
 8005716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005718:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800571a:	2301      	movs	r3, #1
 800571c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800571e:	f002 fae1 	bl	8007ce4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005724:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005728:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800572a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800572c:	4618      	mov	r0, r3
 800572e:	3740      	adds	r7, #64	; 0x40
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08e      	sub	sp, #56	; 0x38
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005742:	2300      	movs	r3, #0
 8005744:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800574a:	2300      	movs	r3, #0
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d109      	bne.n	8005768 <xEventGroupSetBits+0x30>
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	e7fe      	b.n	8005766 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <xEventGroupSetBits+0x4e>
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e7fe      	b.n	8005784 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	3304      	adds	r3, #4
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	3308      	adds	r3, #8
 8005790:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005792:	f001 f889 	bl	80068a8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80057a8:	e03c      	b.n	8005824 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80057b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80057c0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057c8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d108      	bne.n	80057e6 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	4013      	ands	r3, r2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00b      	beq.n	80057f8 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e4:	e008      	b.n	80057f8 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	4013      	ands	r3, r2
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d101      	bne.n	80057f8 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80057f4:	2301      	movs	r3, #1
 80057f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d010      	beq.n	8005820 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	4313      	orrs	r3, r2
 800580e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005818:	4619      	mov	r1, r3
 800581a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800581c:	f001 fb18 	bl	8006e50 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	429a      	cmp	r2, r3
 800582a:	d1be      	bne.n	80057aa <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	43db      	mvns	r3, r3
 8005834:	401a      	ands	r2, r3
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005838:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800583a:	f001 f843 	bl	80068c4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	681b      	ldr	r3, [r3, #0]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3738      	adds	r7, #56	; 0x38
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff ff6e 	bl	8005738 <xEventGroupSetBits>
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d107      	bne.n	800588a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4013      	ands	r3, r2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005884:	2301      	movs	r3, #1
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	e007      	b.n	800589a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4013      	ands	r3, r2
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	429a      	cmp	r2, r3
 8005894:	d101      	bne.n	800589a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005896:	2301      	movs	r3, #1
 8005898:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800589a:	697b      	ldr	r3, [r7, #20]
}
 800589c:	4618      	mov	r0, r3
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr
	...

080058a8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	68f9      	ldr	r1, [r7, #12]
 80058ba:	4804      	ldr	r0, [pc, #16]	; (80058cc <xEventGroupSetBitsFromISR+0x24>)
 80058bc:	f002 f8d6 	bl	8007a6c <xTimerPendFunctionCallFromISR>
 80058c0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80058c2:	697b      	ldr	r3, [r7, #20]
	}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	0800584b 	.word	0x0800584b

080058d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f103 0208 	add.w	r2, r3, #8
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f04f 32ff 	mov.w	r2, #4294967295
 80058e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f103 0208 	add.w	r2, r3, #8
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f103 0208 	add.w	r2, r3, #8
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	bc80      	pop	{r7}
 800590c:	4770      	bx	lr

0800590e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr

08005926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	601a      	str	r2, [r3, #0]
}
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr

0800596c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d103      	bne.n	800598c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	e00c      	b.n	80059a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3308      	adds	r3, #8
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	e002      	b.n	800599a <vListInsert+0x2e>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d2f6      	bcs.n	8005994 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]
}
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr

080059dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6892      	ldr	r2, [r2, #8]
 80059f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6852      	ldr	r2, [r2, #4]
 80059fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d103      	bne.n	8005a10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	1e5a      	subs	r2, r3, #1
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr
	...

08005a30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d109      	bne.n	8005a58 <xQueueGenericReset+0x28>
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	e7fe      	b.n	8005a56 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005a58:	f002 f916 	bl	8007c88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a64:	68f9      	ldr	r1, [r7, #12]
 8005a66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a68:	fb01 f303 	mul.w	r3, r1, r3
 8005a6c:	441a      	add	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	68f9      	ldr	r1, [r7, #12]
 8005a8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a8e:	fb01 f303 	mul.w	r3, r1, r3
 8005a92:	441a      	add	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	22ff      	movs	r2, #255	; 0xff
 8005a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	22ff      	movs	r2, #255	; 0xff
 8005aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d114      	bne.n	8005ad8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d01a      	beq.n	8005aec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3310      	adds	r3, #16
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 f966 	bl	8006d8c <xTaskRemoveFromEventList>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d012      	beq.n	8005aec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <xQueueGenericReset+0xcc>)
 8005ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	e009      	b.n	8005aec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3310      	adds	r3, #16
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff fef7 	bl	80058d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3324      	adds	r3, #36	; 0x24
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff fef2 	bl	80058d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005aec:	f002 f8fa 	bl	8007ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005af0:	2301      	movs	r3, #1
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	e000ed04 	.word	0xe000ed04

08005b00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08e      	sub	sp, #56	; 0x38
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d109      	bne.n	8005b28 <xQueueGenericCreateStatic+0x28>
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b26:	e7fe      	b.n	8005b26 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <xQueueGenericCreateStatic+0x42>
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b40:	e7fe      	b.n	8005b40 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <xQueueGenericCreateStatic+0x4e>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <xQueueGenericCreateStatic+0x52>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <xQueueGenericCreateStatic+0x54>
 8005b52:	2300      	movs	r3, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <xQueueGenericCreateStatic+0x6c>
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	623b      	str	r3, [r7, #32]
 8005b6a:	e7fe      	b.n	8005b6a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d102      	bne.n	8005b78 <xQueueGenericCreateStatic+0x78>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <xQueueGenericCreateStatic+0x7c>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e000      	b.n	8005b7e <xQueueGenericCreateStatic+0x7e>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <xQueueGenericCreateStatic+0x96>
 8005b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	61fb      	str	r3, [r7, #28]
 8005b94:	e7fe      	b.n	8005b94 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b96:	2350      	movs	r3, #80	; 0x50
 8005b98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b50      	cmp	r3, #80	; 0x50
 8005b9e:	d009      	beq.n	8005bb4 <xQueueGenericCreateStatic+0xb4>
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	e7fe      	b.n	8005bb2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00d      	beq.n	8005bda <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bc6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f842 	bl	8005c5e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3730      	adds	r7, #48	; 0x30
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d109      	bne.n	8005c0c <xQueueGenericCreate+0x28>
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	e7fe      	b.n	8005c0a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	61fb      	str	r3, [r7, #28]
 8005c16:	e004      	b.n	8005c22 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	fb02 f303 	mul.w	r3, r2, r3
 8005c20:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	3350      	adds	r3, #80	; 0x50
 8005c26:	4618      	mov	r0, r3
 8005c28:	f002 f924 	bl	8007e74 <pvPortMalloc>
 8005c2c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00f      	beq.n	8005c54 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	3350      	adds	r3, #80	; 0x50
 8005c38:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c42:	79fa      	ldrb	r2, [r7, #7]
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 f805 	bl	8005c5e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005c54:	69bb      	ldr	r3, [r7, #24]
	}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3720      	adds	r7, #32
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	607a      	str	r2, [r7, #4]
 8005c6a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	e002      	b.n	8005c80 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	69b8      	ldr	r0, [r7, #24]
 8005c90:	f7ff fece 	bl	8005a30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c9c:	bf00      	nop
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08e      	sub	sp, #56	; 0x38
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d109      	bne.n	8005cd4 <xQueueGenericSend+0x30>
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cd2:	e7fe      	b.n	8005cd2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <xQueueGenericSend+0x3e>
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <xQueueGenericSend+0x42>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <xQueueGenericSend+0x44>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d109      	bne.n	8005d00 <xQueueGenericSend+0x5c>
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfe:	e7fe      	b.n	8005cfe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d103      	bne.n	8005d0e <xQueueGenericSend+0x6a>
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <xQueueGenericSend+0x6e>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <xQueueGenericSend+0x70>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d109      	bne.n	8005d2c <xQueueGenericSend+0x88>
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	623b      	str	r3, [r7, #32]
 8005d2a:	e7fe      	b.n	8005d2a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d2c:	f001 fa4a 	bl	80071c4 <xTaskGetSchedulerState>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <xQueueGenericSend+0x98>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <xQueueGenericSend+0x9c>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e000      	b.n	8005d42 <xQueueGenericSend+0x9e>
 8005d40:	2300      	movs	r3, #0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <xQueueGenericSend+0xb6>
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	e7fe      	b.n	8005d58 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d5a:	f001 ff95 	bl	8007c88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d302      	bcc.n	8005d70 <xQueueGenericSend+0xcc>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d129      	bne.n	8005dc4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d76:	f000 f9ff 	bl	8006178 <prvCopyDataToQueue>
 8005d7a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d010      	beq.n	8005da6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	3324      	adds	r3, #36	; 0x24
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 ffff 	bl	8006d8c <xTaskRemoveFromEventList>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d013      	beq.n	8005dbc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d94:	4b3f      	ldr	r3, [pc, #252]	; (8005e94 <xQueueGenericSend+0x1f0>)
 8005d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	e00a      	b.n	8005dbc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d007      	beq.n	8005dbc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005dac:	4b39      	ldr	r3, [pc, #228]	; (8005e94 <xQueueGenericSend+0x1f0>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005dbc:	f001 ff92 	bl	8007ce4 <vPortExitCritical>
				return pdPASS;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e063      	b.n	8005e8c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d103      	bne.n	8005dd2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dca:	f001 ff8b 	bl	8007ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	e05c      	b.n	8005e8c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d106      	bne.n	8005de6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dd8:	f107 0314 	add.w	r3, r7, #20
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 f897 	bl	8006f10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005de2:	2301      	movs	r3, #1
 8005de4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005de6:	f001 ff7d 	bl	8007ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dea:	f000 fd5d 	bl	80068a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dee:	f001 ff4b 	bl	8007c88 <vPortEnterCritical>
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005df8:	b25b      	sxtb	r3, r3
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d103      	bne.n	8005e08 <xQueueGenericSend+0x164>
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e0e:	b25b      	sxtb	r3, r3
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d103      	bne.n	8005e1e <xQueueGenericSend+0x17a>
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e1e:	f001 ff61 	bl	8007ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e22:	1d3a      	adds	r2, r7, #4
 8005e24:	f107 0314 	add.w	r3, r7, #20
 8005e28:	4611      	mov	r1, r2
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 f886 	bl	8006f3c <xTaskCheckForTimeOut>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d124      	bne.n	8005e80 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e38:	f000 fa96 	bl	8006368 <prvIsQueueFull>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d018      	beq.n	8005e74 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	3310      	adds	r3, #16
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 ff16 	bl	8006c7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e52:	f000 fa21 	bl	8006298 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e56:	f000 fd35 	bl	80068c4 <xTaskResumeAll>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f47f af7c 	bne.w	8005d5a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005e62:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <xQueueGenericSend+0x1f0>)
 8005e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	e772      	b.n	8005d5a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e76:	f000 fa0f 	bl	8006298 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e7a:	f000 fd23 	bl	80068c4 <xTaskResumeAll>
 8005e7e:	e76c      	b.n	8005d5a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e82:	f000 fa09 	bl	8006298 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e86:	f000 fd1d 	bl	80068c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e8a:	2300      	movs	r3, #0
		}
	}
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3738      	adds	r7, #56	; 0x38
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	e000ed04 	.word	0xe000ed04

08005e98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08e      	sub	sp, #56	; 0x38
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d109      	bne.n	8005ec4 <xQueueGenericSendFromISR+0x2c>
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec2:	e7fe      	b.n	8005ec2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d103      	bne.n	8005ed2 <xQueueGenericSendFromISR+0x3a>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <xQueueGenericSendFromISR+0x3e>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <xQueueGenericSendFromISR+0x40>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d109      	bne.n	8005ef0 <xQueueGenericSendFromISR+0x58>
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	623b      	str	r3, [r7, #32]
 8005eee:	e7fe      	b.n	8005eee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d103      	bne.n	8005efe <xQueueGenericSendFromISR+0x66>
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <xQueueGenericSendFromISR+0x6a>
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <xQueueGenericSendFromISR+0x6c>
 8005f02:	2300      	movs	r3, #0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d109      	bne.n	8005f1c <xQueueGenericSendFromISR+0x84>
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	e7fe      	b.n	8005f1a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f1c:	f001 ff6e 	bl	8007dfc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f20:	f3ef 8211 	mrs	r2, BASEPRI
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	61ba      	str	r2, [r7, #24]
 8005f36:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f38:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d302      	bcc.n	8005f4e <xQueueGenericSendFromISR+0xb6>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d12c      	bne.n	8005fa8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f5e:	f000 f90b 	bl	8006178 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f62:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6a:	d112      	bne.n	8005f92 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d016      	beq.n	8005fa2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	3324      	adds	r3, #36	; 0x24
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 ff07 	bl	8006d8c <xTaskRemoveFromEventList>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00e      	beq.n	8005fa2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00b      	beq.n	8005fa2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	e007      	b.n	8005fa2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f96:	3301      	adds	r3, #1
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	b25a      	sxtb	r2, r3
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005fa6:	e001      	b.n	8005fac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	637b      	str	r3, [r7, #52]	; 0x34
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3738      	adds	r7, #56	; 0x38
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08c      	sub	sp, #48	; 0x30
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <xQueueReceive+0x2e>
	__asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	623b      	str	r3, [r7, #32]
 8005fec:	e7fe      	b.n	8005fec <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d103      	bne.n	8005ffc <xQueueReceive+0x3c>
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <xQueueReceive+0x40>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <xQueueReceive+0x42>
 8006000:	2300      	movs	r3, #0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <xQueueReceive+0x5a>
 8006006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	e7fe      	b.n	8006018 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800601a:	f001 f8d3 	bl	80071c4 <xTaskGetSchedulerState>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <xQueueReceive+0x6a>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <xQueueReceive+0x6e>
 800602a:	2301      	movs	r3, #1
 800602c:	e000      	b.n	8006030 <xQueueReceive+0x70>
 800602e:	2300      	movs	r3, #0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d109      	bne.n	8006048 <xQueueReceive+0x88>
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	e7fe      	b.n	8006046 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006048:	f001 fe1e 	bl	8007c88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	2b00      	cmp	r3, #0
 8006056:	d01f      	beq.n	8006098 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800605c:	f000 f8f6 	bl	800624c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	1e5a      	subs	r2, r3, #1
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00f      	beq.n	8006090 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	3310      	adds	r3, #16
 8006074:	4618      	mov	r0, r3
 8006076:	f000 fe89 	bl	8006d8c <xTaskRemoveFromEventList>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006080:	4b3c      	ldr	r3, [pc, #240]	; (8006174 <xQueueReceive+0x1b4>)
 8006082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006090:	f001 fe28 	bl	8007ce4 <vPortExitCritical>
				return pdPASS;
 8006094:	2301      	movs	r3, #1
 8006096:	e069      	b.n	800616c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d103      	bne.n	80060a6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800609e:	f001 fe21 	bl	8007ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e062      	b.n	800616c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d106      	bne.n	80060ba <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060ac:	f107 0310 	add.w	r3, r7, #16
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 ff2d 	bl	8006f10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060b6:	2301      	movs	r3, #1
 80060b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060ba:	f001 fe13 	bl	8007ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060be:	f000 fbf3 	bl	80068a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060c2:	f001 fde1 	bl	8007c88 <vPortEnterCritical>
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060cc:	b25b      	sxtb	r3, r3
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d2:	d103      	bne.n	80060dc <xQueueReceive+0x11c>
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060e2:	b25b      	sxtb	r3, r3
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d103      	bne.n	80060f2 <xQueueReceive+0x132>
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060f2:	f001 fdf7 	bl	8007ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060f6:	1d3a      	adds	r2, r7, #4
 80060f8:	f107 0310 	add.w	r3, r7, #16
 80060fc:	4611      	mov	r1, r2
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 ff1c 	bl	8006f3c <xTaskCheckForTimeOut>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d123      	bne.n	8006152 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800610a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800610c:	f000 f916 	bl	800633c <prvIsQueueEmpty>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d017      	beq.n	8006146 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	3324      	adds	r3, #36	; 0x24
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	4611      	mov	r1, r2
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fdac 	bl	8006c7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006126:	f000 f8b7 	bl	8006298 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800612a:	f000 fbcb 	bl	80068c4 <xTaskResumeAll>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d189      	bne.n	8006048 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <xQueueReceive+0x1b4>)
 8006136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	e780      	b.n	8006048 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006148:	f000 f8a6 	bl	8006298 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800614c:	f000 fbba 	bl	80068c4 <xTaskResumeAll>
 8006150:	e77a      	b.n	8006048 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006154:	f000 f8a0 	bl	8006298 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006158:	f000 fbb4 	bl	80068c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800615c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800615e:	f000 f8ed 	bl	800633c <prvIsQueueEmpty>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	f43f af6f 	beq.w	8006048 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800616a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800616c:	4618      	mov	r0, r3
 800616e:	3730      	adds	r7, #48	; 0x30
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	e000ed04 	.word	0xe000ed04

08006178 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006184:	2300      	movs	r3, #0
 8006186:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10d      	bne.n	80061b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d14d      	bne.n	800623a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 f82c 	bl	8007200 <xTaskPriorityDisinherit>
 80061a8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	605a      	str	r2, [r3, #4]
 80061b0:	e043      	b.n	800623a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d119      	bne.n	80061ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6898      	ldr	r0, [r3, #8]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	461a      	mov	r2, r3
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	f002 f852 	bl	800826c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	441a      	add	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d32b      	bcc.n	800623a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	609a      	str	r2, [r3, #8]
 80061ea:	e026      	b.n	800623a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	68d8      	ldr	r0, [r3, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	461a      	mov	r2, r3
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	f002 f838 	bl	800826c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	425b      	negs	r3, r3
 8006206:	441a      	add	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d207      	bcs.n	8006228 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	425b      	negs	r3, r3
 8006222:	441a      	add	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d105      	bne.n	800623a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	3b01      	subs	r3, #1
 8006238:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006242:	697b      	ldr	r3, [r7, #20]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d018      	beq.n	8006290 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	441a      	add	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	429a      	cmp	r2, r3
 8006276:	d303      	bcc.n	8006280 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68d9      	ldr	r1, [r3, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	461a      	mov	r2, r3
 800628a:	6838      	ldr	r0, [r7, #0]
 800628c:	f001 ffee 	bl	800826c <memcpy>
	}
}
 8006290:	bf00      	nop
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062a0:	f001 fcf2 	bl	8007c88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062ac:	e011      	b.n	80062d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d012      	beq.n	80062dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	3324      	adds	r3, #36	; 0x24
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fd66 	bl	8006d8c <xTaskRemoveFromEventList>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062c6:	f000 fe99 	bl	8006ffc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	dce9      	bgt.n	80062ae <prvUnlockQueue+0x16>
 80062da:	e000      	b.n	80062de <prvUnlockQueue+0x46>
					break;
 80062dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	22ff      	movs	r2, #255	; 0xff
 80062e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80062e6:	f001 fcfd 	bl	8007ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062ea:	f001 fccd 	bl	8007c88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062f6:	e011      	b.n	800631c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d012      	beq.n	8006326 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3310      	adds	r3, #16
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fd41 	bl	8006d8c <xTaskRemoveFromEventList>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006310:	f000 fe74 	bl	8006ffc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006314:	7bbb      	ldrb	r3, [r7, #14]
 8006316:	3b01      	subs	r3, #1
 8006318:	b2db      	uxtb	r3, r3
 800631a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800631c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006320:	2b00      	cmp	r3, #0
 8006322:	dce9      	bgt.n	80062f8 <prvUnlockQueue+0x60>
 8006324:	e000      	b.n	8006328 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006326:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	22ff      	movs	r2, #255	; 0xff
 800632c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006330:	f001 fcd8 	bl	8007ce4 <vPortExitCritical>
}
 8006334:	bf00      	nop
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006344:	f001 fca0 	bl	8007c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634c:	2b00      	cmp	r3, #0
 800634e:	d102      	bne.n	8006356 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006350:	2301      	movs	r3, #1
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	e001      	b.n	800635a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800635a:	f001 fcc3 	bl	8007ce4 <vPortExitCritical>

	return xReturn;
 800635e:	68fb      	ldr	r3, [r7, #12]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006370:	f001 fc8a 	bl	8007c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637c:	429a      	cmp	r2, r3
 800637e:	d102      	bne.n	8006386 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006380:	2301      	movs	r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	e001      	b.n	800638a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800638a:	f001 fcab 	bl	8007ce4 <vPortExitCritical>

	return xReturn;
 800638e:	68fb      	ldr	r3, [r7, #12]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	e014      	b.n	80063d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80063a8:	4a0e      	ldr	r2, [pc, #56]	; (80063e4 <vQueueAddToRegistry+0x4c>)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10b      	bne.n	80063cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80063b4:	490b      	ldr	r1, [pc, #44]	; (80063e4 <vQueueAddToRegistry+0x4c>)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80063be:	4a09      	ldr	r2, [pc, #36]	; (80063e4 <vQueueAddToRegistry+0x4c>)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	4413      	add	r3, r2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80063ca:	e005      	b.n	80063d8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3301      	adds	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b07      	cmp	r3, #7
 80063d6:	d9e7      	bls.n	80063a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80063d8:	bf00      	nop
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	bc80      	pop	{r7}
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	2000376c 	.word	0x2000376c

080063e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063f8:	f001 fc46 	bl	8007c88 <vPortEnterCritical>
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006402:	b25b      	sxtb	r3, r3
 8006404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006408:	d103      	bne.n	8006412 <vQueueWaitForMessageRestricted+0x2a>
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006418:	b25b      	sxtb	r3, r3
 800641a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641e:	d103      	bne.n	8006428 <vQueueWaitForMessageRestricted+0x40>
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006428:	f001 fc5c 	bl	8007ce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	2b00      	cmp	r3, #0
 8006432:	d106      	bne.n	8006442 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	3324      	adds	r3, #36	; 0x24
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fc7b 	bl	8006d38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006442:	6978      	ldr	r0, [r7, #20]
 8006444:	f7ff ff28 	bl	8006298 <prvUnlockQueue>
	}
 8006448:	bf00      	nop
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08e      	sub	sp, #56	; 0x38
 8006454:	af04      	add	r7, sp, #16
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006460:	2b00      	cmp	r3, #0
 8006462:	d109      	bne.n	8006478 <xTaskCreateStatic+0x28>
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	623b      	str	r3, [r7, #32]
 8006476:	e7fe      	b.n	8006476 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	2b00      	cmp	r3, #0
 800647c:	d109      	bne.n	8006492 <xTaskCreateStatic+0x42>
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	61fb      	str	r3, [r7, #28]
 8006490:	e7fe      	b.n	8006490 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006492:	235c      	movs	r3, #92	; 0x5c
 8006494:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b5c      	cmp	r3, #92	; 0x5c
 800649a:	d009      	beq.n	80064b0 <xTaskCreateStatic+0x60>
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	e7fe      	b.n	80064ae <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d01e      	beq.n	80064f4 <xTaskCreateStatic+0xa4>
 80064b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01b      	beq.n	80064f4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	2202      	movs	r2, #2
 80064ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064ce:	2300      	movs	r3, #0
 80064d0:	9303      	str	r3, [sp, #12]
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	9302      	str	r3, [sp, #8]
 80064d6:	f107 0314 	add.w	r3, r7, #20
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 f850 	bl	800658c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064ee:	f000 f8d3 	bl	8006698 <prvAddNewTaskToReadyList>
 80064f2:	e001      	b.n	80064f8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064f8:	697b      	ldr	r3, [r7, #20]
	}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3728      	adds	r7, #40	; 0x28
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006502:	b580      	push	{r7, lr}
 8006504:	b08c      	sub	sp, #48	; 0x30
 8006506:	af04      	add	r7, sp, #16
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	603b      	str	r3, [r7, #0]
 800650e:	4613      	mov	r3, r2
 8006510:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4618      	mov	r0, r3
 8006518:	f001 fcac 	bl	8007e74 <pvPortMalloc>
 800651c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00e      	beq.n	8006542 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006524:	205c      	movs	r0, #92	; 0x5c
 8006526:	f001 fca5 	bl	8007e74 <pvPortMalloc>
 800652a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	631a      	str	r2, [r3, #48]	; 0x30
 8006538:	e005      	b.n	8006546 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800653a:	6978      	ldr	r0, [r7, #20]
 800653c:	f001 fd60 	bl	8008000 <vPortFree>
 8006540:	e001      	b.n	8006546 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006542:	2300      	movs	r3, #0
 8006544:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d017      	beq.n	800657c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006554:	88fa      	ldrh	r2, [r7, #6]
 8006556:	2300      	movs	r3, #0
 8006558:	9303      	str	r3, [sp, #12]
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	9302      	str	r3, [sp, #8]
 800655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 f80e 	bl	800658c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006570:	69f8      	ldr	r0, [r7, #28]
 8006572:	f000 f891 	bl	8006698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006576:	2301      	movs	r3, #1
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	e002      	b.n	8006582 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800657c:	f04f 33ff 	mov.w	r3, #4294967295
 8006580:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006582:	69bb      	ldr	r3, [r7, #24]
	}
 8006584:	4618      	mov	r0, r3
 8006586:	3720      	adds	r7, #32
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
 8006598:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	461a      	mov	r2, r3
 80065a4:	21a5      	movs	r1, #165	; 0xa5
 80065a6:	f001 fe6c 	bl	8008282 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065b4:	3b01      	subs	r3, #1
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	f023 0307 	bic.w	r3, r3, #7
 80065c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d009      	beq.n	80065e2 <prvInitialiseNewTask+0x56>
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	e7fe      	b.n	80065e0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065e2:	2300      	movs	r3, #0
 80065e4:	61fb      	str	r3, [r7, #28]
 80065e6:	e012      	b.n	800660e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	7819      	ldrb	r1, [r3, #0]
 80065f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	4413      	add	r3, r2
 80065f6:	3334      	adds	r3, #52	; 0x34
 80065f8:	460a      	mov	r2, r1
 80065fa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4413      	add	r3, r2
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d006      	beq.n	8006616 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	3301      	adds	r3, #1
 800660c:	61fb      	str	r3, [r7, #28]
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2b0f      	cmp	r3, #15
 8006612:	d9e9      	bls.n	80065e8 <prvInitialiseNewTask+0x5c>
 8006614:	e000      	b.n	8006618 <prvInitialiseNewTask+0x8c>
		{
			break;
 8006616:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	2b37      	cmp	r3, #55	; 0x37
 8006624:	d901      	bls.n	800662a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006626:	2337      	movs	r3, #55	; 0x37
 8006628:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800662e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006634:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	2200      	movs	r2, #0
 800663a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	3304      	adds	r3, #4
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff f964 	bl	800590e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	3318      	adds	r3, #24
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff f95f 	bl	800590e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006654:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006664:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	2200      	movs	r2, #0
 800666a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	68f9      	ldr	r1, [r7, #12]
 8006678:	69b8      	ldr	r0, [r7, #24]
 800667a:	f001 fa17 	bl	8007aac <pxPortInitialiseStack>
 800667e:	4602      	mov	r2, r0
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006690:	bf00      	nop
 8006692:	3720      	adds	r7, #32
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066a0:	f001 faf2 	bl	8007c88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066a4:	4b2d      	ldr	r3, [pc, #180]	; (800675c <prvAddNewTaskToReadyList+0xc4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	4a2c      	ldr	r2, [pc, #176]	; (800675c <prvAddNewTaskToReadyList+0xc4>)
 80066ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066ae:	4b2c      	ldr	r3, [pc, #176]	; (8006760 <prvAddNewTaskToReadyList+0xc8>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d109      	bne.n	80066ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066b6:	4a2a      	ldr	r2, [pc, #168]	; (8006760 <prvAddNewTaskToReadyList+0xc8>)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066bc:	4b27      	ldr	r3, [pc, #156]	; (800675c <prvAddNewTaskToReadyList+0xc4>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d110      	bne.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066c4:	f000 fcc0 	bl	8007048 <prvInitialiseTaskLists>
 80066c8:	e00d      	b.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066ca:	4b26      	ldr	r3, [pc, #152]	; (8006764 <prvAddNewTaskToReadyList+0xcc>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d109      	bne.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066d2:	4b23      	ldr	r3, [pc, #140]	; (8006760 <prvAddNewTaskToReadyList+0xc8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	429a      	cmp	r2, r3
 80066de:	d802      	bhi.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066e0:	4a1f      	ldr	r2, [pc, #124]	; (8006760 <prvAddNewTaskToReadyList+0xc8>)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066e6:	4b20      	ldr	r3, [pc, #128]	; (8006768 <prvAddNewTaskToReadyList+0xd0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3301      	adds	r3, #1
 80066ec:	4a1e      	ldr	r2, [pc, #120]	; (8006768 <prvAddNewTaskToReadyList+0xd0>)
 80066ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066f0:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <prvAddNewTaskToReadyList+0xd0>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fc:	4b1b      	ldr	r3, [pc, #108]	; (800676c <prvAddNewTaskToReadyList+0xd4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d903      	bls.n	800670c <prvAddNewTaskToReadyList+0x74>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	4a18      	ldr	r2, [pc, #96]	; (800676c <prvAddNewTaskToReadyList+0xd4>)
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4a15      	ldr	r2, [pc, #84]	; (8006770 <prvAddNewTaskToReadyList+0xd8>)
 800671a:	441a      	add	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f7ff f8ff 	bl	8005926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006728:	f001 fadc 	bl	8007ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800672c:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <prvAddNewTaskToReadyList+0xcc>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00e      	beq.n	8006752 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006734:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <prvAddNewTaskToReadyList+0xc8>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673e:	429a      	cmp	r2, r3
 8006740:	d207      	bcs.n	8006752 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006742:	4b0c      	ldr	r3, [pc, #48]	; (8006774 <prvAddNewTaskToReadyList+0xdc>)
 8006744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20000bc4 	.word	0x20000bc4
 8006760:	200006f0 	.word	0x200006f0
 8006764:	20000bd0 	.word	0x20000bd0
 8006768:	20000be0 	.word	0x20000be0
 800676c:	20000bcc 	.word	0x20000bcc
 8006770:	200006f4 	.word	0x200006f4
 8006774:	e000ed04 	.word	0xe000ed04

08006778 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d016      	beq.n	80067b8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800678a:	4b13      	ldr	r3, [pc, #76]	; (80067d8 <vTaskDelay+0x60>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d009      	beq.n	80067a6 <vTaskDelay+0x2e>
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	60bb      	str	r3, [r7, #8]
 80067a4:	e7fe      	b.n	80067a4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80067a6:	f000 f87f 	bl	80068a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067aa:	2100      	movs	r1, #0
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fdab 	bl	8007308 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067b2:	f000 f887 	bl	80068c4 <xTaskResumeAll>
 80067b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d107      	bne.n	80067ce <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80067be:	4b07      	ldr	r3, [pc, #28]	; (80067dc <vTaskDelay+0x64>)
 80067c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000bec 	.word	0x20000bec
 80067dc:	e000ed04 	.word	0xe000ed04

080067e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08a      	sub	sp, #40	; 0x28
 80067e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067e6:	2300      	movs	r3, #0
 80067e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067ee:	463a      	mov	r2, r7
 80067f0:	1d39      	adds	r1, r7, #4
 80067f2:	f107 0308 	add.w	r3, r7, #8
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fe fe88 	bl	800550c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	9202      	str	r2, [sp, #8]
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	2300      	movs	r3, #0
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	2300      	movs	r3, #0
 800680c:	460a      	mov	r2, r1
 800680e:	4920      	ldr	r1, [pc, #128]	; (8006890 <vTaskStartScheduler+0xb0>)
 8006810:	4820      	ldr	r0, [pc, #128]	; (8006894 <vTaskStartScheduler+0xb4>)
 8006812:	f7ff fe1d 	bl	8006450 <xTaskCreateStatic>
 8006816:	4602      	mov	r2, r0
 8006818:	4b1f      	ldr	r3, [pc, #124]	; (8006898 <vTaskStartScheduler+0xb8>)
 800681a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800681c:	4b1e      	ldr	r3, [pc, #120]	; (8006898 <vTaskStartScheduler+0xb8>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006824:	2301      	movs	r3, #1
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	e001      	b.n	800682e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800682a:	2300      	movs	r3, #0
 800682c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d102      	bne.n	800683a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006834:	f000 fdbc 	bl	80073b0 <xTimerCreateTimerTask>
 8006838:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d115      	bne.n	800686c <vTaskStartScheduler+0x8c>
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <vTaskStartScheduler+0xbc>)
 8006854:	f04f 32ff 	mov.w	r2, #4294967295
 8006858:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800685a:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <vTaskStartScheduler+0xc0>)
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006860:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <vTaskStartScheduler+0xc4>)
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006866:	f001 f99f 	bl	8007ba8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800686a:	e00d      	b.n	8006888 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006872:	d109      	bne.n	8006888 <vTaskStartScheduler+0xa8>
 8006874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	e7fe      	b.n	8006886 <vTaskStartScheduler+0xa6>
}
 8006888:	bf00      	nop
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	08008560 	.word	0x08008560
 8006894:	08007015 	.word	0x08007015
 8006898:	20000be8 	.word	0x20000be8
 800689c:	20000be4 	.word	0x20000be4
 80068a0:	20000bd0 	.word	0x20000bd0
 80068a4:	20000bc8 	.word	0x20000bc8

080068a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80068ac:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <vTaskSuspendAll+0x18>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3301      	adds	r3, #1
 80068b2:	4a03      	ldr	r2, [pc, #12]	; (80068c0 <vTaskSuspendAll+0x18>)
 80068b4:	6013      	str	r3, [r2, #0]
}
 80068b6:	bf00      	nop
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bc80      	pop	{r7}
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	20000bec 	.word	0x20000bec

080068c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068d2:	4b41      	ldr	r3, [pc, #260]	; (80069d8 <xTaskResumeAll+0x114>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <xTaskResumeAll+0x2a>
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	603b      	str	r3, [r7, #0]
 80068ec:	e7fe      	b.n	80068ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068ee:	f001 f9cb 	bl	8007c88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068f2:	4b39      	ldr	r3, [pc, #228]	; (80069d8 <xTaskResumeAll+0x114>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	4a37      	ldr	r2, [pc, #220]	; (80069d8 <xTaskResumeAll+0x114>)
 80068fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068fc:	4b36      	ldr	r3, [pc, #216]	; (80069d8 <xTaskResumeAll+0x114>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d162      	bne.n	80069ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006904:	4b35      	ldr	r3, [pc, #212]	; (80069dc <xTaskResumeAll+0x118>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d05e      	beq.n	80069ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800690c:	e02f      	b.n	800696e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800690e:	4b34      	ldr	r3, [pc, #208]	; (80069e0 <xTaskResumeAll+0x11c>)
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3318      	adds	r3, #24
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff f85e 	bl	80059dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3304      	adds	r3, #4
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff f859 	bl	80059dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692e:	4b2d      	ldr	r3, [pc, #180]	; (80069e4 <xTaskResumeAll+0x120>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d903      	bls.n	800693e <xTaskResumeAll+0x7a>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	4a2a      	ldr	r2, [pc, #168]	; (80069e4 <xTaskResumeAll+0x120>)
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4a27      	ldr	r2, [pc, #156]	; (80069e8 <xTaskResumeAll+0x124>)
 800694c:	441a      	add	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3304      	adds	r3, #4
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f7fe ffe6 	bl	8005926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695e:	4b23      	ldr	r3, [pc, #140]	; (80069ec <xTaskResumeAll+0x128>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	429a      	cmp	r2, r3
 8006966:	d302      	bcc.n	800696e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006968:	4b21      	ldr	r3, [pc, #132]	; (80069f0 <xTaskResumeAll+0x12c>)
 800696a:	2201      	movs	r2, #1
 800696c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800696e:	4b1c      	ldr	r3, [pc, #112]	; (80069e0 <xTaskResumeAll+0x11c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1cb      	bne.n	800690e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800697c:	f000 fbfe 	bl	800717c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006980:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <xTaskResumeAll+0x130>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d010      	beq.n	80069ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800698c:	f000 f844 	bl	8006a18 <xTaskIncrementTick>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d002      	beq.n	800699c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006996:	4b16      	ldr	r3, [pc, #88]	; (80069f0 <xTaskResumeAll+0x12c>)
 8006998:	2201      	movs	r2, #1
 800699a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3b01      	subs	r3, #1
 80069a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1f1      	bne.n	800698c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80069a8:	4b12      	ldr	r3, [pc, #72]	; (80069f4 <xTaskResumeAll+0x130>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069ae:	4b10      	ldr	r3, [pc, #64]	; (80069f0 <xTaskResumeAll+0x12c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d009      	beq.n	80069ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069b6:	2301      	movs	r3, #1
 80069b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069ba:	4b0f      	ldr	r3, [pc, #60]	; (80069f8 <xTaskResumeAll+0x134>)
 80069bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069ca:	f001 f98b 	bl	8007ce4 <vPortExitCritical>

	return xAlreadyYielded;
 80069ce:	68bb      	ldr	r3, [r7, #8]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	20000bec 	.word	0x20000bec
 80069dc:	20000bc4 	.word	0x20000bc4
 80069e0:	20000b84 	.word	0x20000b84
 80069e4:	20000bcc 	.word	0x20000bcc
 80069e8:	200006f4 	.word	0x200006f4
 80069ec:	200006f0 	.word	0x200006f0
 80069f0:	20000bd8 	.word	0x20000bd8
 80069f4:	20000bd4 	.word	0x20000bd4
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a02:	4b04      	ldr	r3, [pc, #16]	; (8006a14 <xTaskGetTickCount+0x18>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a08:	687b      	ldr	r3, [r7, #4]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr
 8006a14:	20000bc8 	.word	0x20000bc8

08006a18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a22:	4b55      	ldr	r3, [pc, #340]	; (8006b78 <xTaskIncrementTick+0x160>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f040 8093 	bne.w	8006b52 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a2c:	4b53      	ldr	r3, [pc, #332]	; (8006b7c <xTaskIncrementTick+0x164>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3301      	adds	r3, #1
 8006a32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a34:	4a51      	ldr	r2, [pc, #324]	; (8006b7c <xTaskIncrementTick+0x164>)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d11f      	bne.n	8006a80 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a40:	4b4f      	ldr	r3, [pc, #316]	; (8006b80 <xTaskIncrementTick+0x168>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <xTaskIncrementTick+0x46>
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	e7fe      	b.n	8006a5c <xTaskIncrementTick+0x44>
 8006a5e:	4b48      	ldr	r3, [pc, #288]	; (8006b80 <xTaskIncrementTick+0x168>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	4b47      	ldr	r3, [pc, #284]	; (8006b84 <xTaskIncrementTick+0x16c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a45      	ldr	r2, [pc, #276]	; (8006b80 <xTaskIncrementTick+0x168>)
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	4a45      	ldr	r2, [pc, #276]	; (8006b84 <xTaskIncrementTick+0x16c>)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	4b45      	ldr	r3, [pc, #276]	; (8006b88 <xTaskIncrementTick+0x170>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3301      	adds	r3, #1
 8006a78:	4a43      	ldr	r2, [pc, #268]	; (8006b88 <xTaskIncrementTick+0x170>)
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	f000 fb7e 	bl	800717c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a80:	4b42      	ldr	r3, [pc, #264]	; (8006b8c <xTaskIncrementTick+0x174>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d34e      	bcc.n	8006b28 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a8a:	4b3d      	ldr	r3, [pc, #244]	; (8006b80 <xTaskIncrementTick+0x168>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <xTaskIncrementTick+0x80>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <xTaskIncrementTick+0x82>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d004      	beq.n	8006aa8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a9e:	4b3b      	ldr	r3, [pc, #236]	; (8006b8c <xTaskIncrementTick+0x174>)
 8006aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa4:	601a      	str	r2, [r3, #0]
					break;
 8006aa6:	e03f      	b.n	8006b28 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006aa8:	4b35      	ldr	r3, [pc, #212]	; (8006b80 <xTaskIncrementTick+0x168>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d203      	bcs.n	8006ac8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ac0:	4a32      	ldr	r2, [pc, #200]	; (8006b8c <xTaskIncrementTick+0x174>)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6013      	str	r3, [r2, #0]
						break;
 8006ac6:	e02f      	b.n	8006b28 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	3304      	adds	r3, #4
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fe ff85 	bl	80059dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d004      	beq.n	8006ae4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	3318      	adds	r3, #24
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe ff7c 	bl	80059dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae8:	4b29      	ldr	r3, [pc, #164]	; (8006b90 <xTaskIncrementTick+0x178>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d903      	bls.n	8006af8 <xTaskIncrementTick+0xe0>
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	4a26      	ldr	r2, [pc, #152]	; (8006b90 <xTaskIncrementTick+0x178>)
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4a23      	ldr	r2, [pc, #140]	; (8006b94 <xTaskIncrementTick+0x17c>)
 8006b06:	441a      	add	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	f7fe ff09 	bl	8005926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b18:	4b1f      	ldr	r3, [pc, #124]	; (8006b98 <xTaskIncrementTick+0x180>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d3b3      	bcc.n	8006a8a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006b22:	2301      	movs	r3, #1
 8006b24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b26:	e7b0      	b.n	8006a8a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b28:	4b1b      	ldr	r3, [pc, #108]	; (8006b98 <xTaskIncrementTick+0x180>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2e:	4919      	ldr	r1, [pc, #100]	; (8006b94 <xTaskIncrementTick+0x17c>)
 8006b30:	4613      	mov	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	440b      	add	r3, r1
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d901      	bls.n	8006b44 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8006b44:	4b15      	ldr	r3, [pc, #84]	; (8006b9c <xTaskIncrementTick+0x184>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d109      	bne.n	8006b60 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8006b4c:	f7f9 fe24 	bl	8000798 <vApplicationTickHook>
 8006b50:	e006      	b.n	8006b60 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006b52:	4b12      	ldr	r3, [pc, #72]	; (8006b9c <xTaskIncrementTick+0x184>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3301      	adds	r3, #1
 8006b58:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <xTaskIncrementTick+0x184>)
 8006b5a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8006b5c:	f7f9 fe1c 	bl	8000798 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006b60:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <xTaskIncrementTick+0x188>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006b6c:	697b      	ldr	r3, [r7, #20]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000bec 	.word	0x20000bec
 8006b7c:	20000bc8 	.word	0x20000bc8
 8006b80:	20000b7c 	.word	0x20000b7c
 8006b84:	20000b80 	.word	0x20000b80
 8006b88:	20000bdc 	.word	0x20000bdc
 8006b8c:	20000be4 	.word	0x20000be4
 8006b90:	20000bcc 	.word	0x20000bcc
 8006b94:	200006f4 	.word	0x200006f4
 8006b98:	200006f0 	.word	0x200006f0
 8006b9c:	20000bd4 	.word	0x20000bd4
 8006ba0:	20000bd8 	.word	0x20000bd8

08006ba4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006baa:	4b2f      	ldr	r3, [pc, #188]	; (8006c68 <vTaskSwitchContext+0xc4>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bb2:	4b2e      	ldr	r3, [pc, #184]	; (8006c6c <vTaskSwitchContext+0xc8>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bb8:	e051      	b.n	8006c5e <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 8006bba:	4b2c      	ldr	r3, [pc, #176]	; (8006c6c <vTaskSwitchContext+0xc8>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006bc0:	4b2b      	ldr	r3, [pc, #172]	; (8006c70 <vTaskSwitchContext+0xcc>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4b2a      	ldr	r3, [pc, #168]	; (8006c70 <vTaskSwitchContext+0xcc>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d808      	bhi.n	8006be2 <vTaskSwitchContext+0x3e>
 8006bd0:	4b27      	ldr	r3, [pc, #156]	; (8006c70 <vTaskSwitchContext+0xcc>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	4b26      	ldr	r3, [pc, #152]	; (8006c70 <vTaskSwitchContext+0xcc>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3334      	adds	r3, #52	; 0x34
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f7f9 fde1 	bl	80007a4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006be2:	4b24      	ldr	r3, [pc, #144]	; (8006c74 <vTaskSwitchContext+0xd0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	e00f      	b.n	8006c0a <vTaskSwitchContext+0x66>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d109      	bne.n	8006c04 <vTaskSwitchContext+0x60>
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	607b      	str	r3, [r7, #4]
 8006c02:	e7fe      	b.n	8006c02 <vTaskSwitchContext+0x5e>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	491b      	ldr	r1, [pc, #108]	; (8006c78 <vTaskSwitchContext+0xd4>)
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0e5      	beq.n	8006bea <vTaskSwitchContext+0x46>
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4a13      	ldr	r2, [pc, #76]	; (8006c78 <vTaskSwitchContext+0xd4>)
 8006c2a:	4413      	add	r3, r2
 8006c2c:	60bb      	str	r3, [r7, #8]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	605a      	str	r2, [r3, #4]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	3308      	adds	r3, #8
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d104      	bne.n	8006c4e <vTaskSwitchContext+0xaa>
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	605a      	str	r2, [r3, #4]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	4a06      	ldr	r2, [pc, #24]	; (8006c70 <vTaskSwitchContext+0xcc>)
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	4a06      	ldr	r2, [pc, #24]	; (8006c74 <vTaskSwitchContext+0xd0>)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6013      	str	r3, [r2, #0]
}
 8006c5e:	bf00      	nop
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000bec 	.word	0x20000bec
 8006c6c:	20000bd8 	.word	0x20000bd8
 8006c70:	200006f0 	.word	0x200006f0
 8006c74:	20000bcc 	.word	0x20000bcc
 8006c78:	200006f4 	.word	0x200006f4

08006c7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <vTaskPlaceOnEventList+0x24>
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	e7fe      	b.n	8006c9e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ca0:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <vTaskPlaceOnEventList+0x44>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3318      	adds	r3, #24
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7fe fe5f 	bl	800596c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cae:	2101      	movs	r1, #1
 8006cb0:	6838      	ldr	r0, [r7, #0]
 8006cb2:	f000 fb29 	bl	8007308 <prvAddCurrentTaskToDelayedList>
}
 8006cb6:	bf00      	nop
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	200006f0 	.word	0x200006f0

08006cc4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <vTaskPlaceOnUnorderedEventList+0x26>
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	617b      	str	r3, [r7, #20]
 8006ce8:	e7fe      	b.n	8006ce8 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006cea:	4b11      	ldr	r3, [pc, #68]	; (8006d30 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d109      	bne.n	8006d06 <vTaskPlaceOnUnorderedEventList+0x42>
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	e7fe      	b.n	8006d04 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006d06:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006d10:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d12:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3318      	adds	r3, #24
 8006d18:	4619      	mov	r1, r3
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f7fe fe03 	bl	8005926 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d20:	2101      	movs	r1, #1
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 faf0 	bl	8007308 <prvAddCurrentTaskToDelayedList>
}
 8006d28:	bf00      	nop
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20000bec 	.word	0x20000bec
 8006d34:	200006f0 	.word	0x200006f0

08006d38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d109      	bne.n	8006d5e <vTaskPlaceOnEventListRestricted+0x26>
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e7fe      	b.n	8006d5c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d5e:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <vTaskPlaceOnEventListRestricted+0x50>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3318      	adds	r3, #24
 8006d64:	4619      	mov	r1, r3
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f7fe fddd 	bl	8005926 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006d72:	f04f 33ff 	mov.w	r3, #4294967295
 8006d76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	68b8      	ldr	r0, [r7, #8]
 8006d7c:	f000 fac4 	bl	8007308 <prvAddCurrentTaskToDelayedList>
	}
 8006d80:	bf00      	nop
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	200006f0 	.word	0x200006f0

08006d8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <xTaskRemoveFromEventList+0x2a>
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e7fe      	b.n	8006db4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	3318      	adds	r3, #24
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fe fe0e 	bl	80059dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dc0:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <xTaskRemoveFromEventList+0xac>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d11d      	bne.n	8006e04 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fe fe05 	bl	80059dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd6:	4b19      	ldr	r3, [pc, #100]	; (8006e3c <xTaskRemoveFromEventList+0xb0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d903      	bls.n	8006de6 <xTaskRemoveFromEventList+0x5a>
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de2:	4a16      	ldr	r2, [pc, #88]	; (8006e3c <xTaskRemoveFromEventList+0xb0>)
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4a13      	ldr	r2, [pc, #76]	; (8006e40 <xTaskRemoveFromEventList+0xb4>)
 8006df4:	441a      	add	r2, r3
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f7fe fd92 	bl	8005926 <vListInsertEnd>
 8006e02:	e005      	b.n	8006e10 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	3318      	adds	r3, #24
 8006e08:	4619      	mov	r1, r3
 8006e0a:	480e      	ldr	r0, [pc, #56]	; (8006e44 <xTaskRemoveFromEventList+0xb8>)
 8006e0c:	f7fe fd8b 	bl	8005926 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e14:	4b0c      	ldr	r3, [pc, #48]	; (8006e48 <xTaskRemoveFromEventList+0xbc>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d905      	bls.n	8006e2a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e22:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <xTaskRemoveFromEventList+0xc0>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	e001      	b.n	8006e2e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006e2e:	697b      	ldr	r3, [r7, #20]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20000bec 	.word	0x20000bec
 8006e3c:	20000bcc 	.word	0x20000bcc
 8006e40:	200006f4 	.word	0x200006f4
 8006e44:	20000b84 	.word	0x20000b84
 8006e48:	200006f0 	.word	0x200006f0
 8006e4c:	20000bd8 	.word	0x20000bd8

08006e50 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006e5a:	4b28      	ldr	r3, [pc, #160]	; (8006efc <vTaskRemoveFromUnorderedEventList+0xac>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d109      	bne.n	8006e76 <vTaskRemoveFromUnorderedEventList+0x26>
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	613b      	str	r3, [r7, #16]
 8006e74:	e7fe      	b.n	8006e74 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d109      	bne.n	8006ea0 <vTaskRemoveFromUnorderedEventList+0x50>
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	e7fe      	b.n	8006e9e <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7fe fd9b 	bl	80059dc <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe fd96 	bl	80059dc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb4:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d903      	bls.n	8006ec4 <vTaskRemoveFromUnorderedEventList+0x74>
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	4a0f      	ldr	r2, [pc, #60]	; (8006f00 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4a0c      	ldr	r2, [pc, #48]	; (8006f04 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006ed2:	441a      	add	r2, r3
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f7fe fd23 	bl	8005926 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee4:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d902      	bls.n	8006ef4 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006eee:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
	}
}
 8006ef4:	bf00      	nop
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	20000bec 	.word	0x20000bec
 8006f00:	20000bcc 	.word	0x20000bcc
 8006f04:	200006f4 	.word	0x200006f4
 8006f08:	200006f0 	.word	0x200006f0
 8006f0c:	20000bd8 	.word	0x20000bd8

08006f10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f18:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <vTaskInternalSetTimeOutState+0x24>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <vTaskInternalSetTimeOutState+0x28>)
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	605a      	str	r2, [r3, #4]
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bc80      	pop	{r7}
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	20000bdc 	.word	0x20000bdc
 8006f38:	20000bc8 	.word	0x20000bc8

08006f3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b088      	sub	sp, #32
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d109      	bne.n	8006f60 <xTaskCheckForTimeOut+0x24>
 8006f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	613b      	str	r3, [r7, #16]
 8006f5e:	e7fe      	b.n	8006f5e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d109      	bne.n	8006f7a <xTaskCheckForTimeOut+0x3e>
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	e7fe      	b.n	8006f78 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006f7a:	f000 fe85 	bl	8007c88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f7e:	4b1d      	ldr	r3, [pc, #116]	; (8006ff4 <xTaskCheckForTimeOut+0xb8>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f96:	d102      	bne.n	8006f9e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	61fb      	str	r3, [r7, #28]
 8006f9c:	e023      	b.n	8006fe6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	4b15      	ldr	r3, [pc, #84]	; (8006ff8 <xTaskCheckForTimeOut+0xbc>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d007      	beq.n	8006fba <xTaskCheckForTimeOut+0x7e>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d302      	bcc.n	8006fba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	61fb      	str	r3, [r7, #28]
 8006fb8:	e015      	b.n	8006fe6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d20b      	bcs.n	8006fdc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	1ad2      	subs	r2, r2, r3
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff ff9d 	bl	8006f10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61fb      	str	r3, [r7, #28]
 8006fda:	e004      	b.n	8006fe6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006fe6:	f000 fe7d 	bl	8007ce4 <vPortExitCritical>

	return xReturn;
 8006fea:	69fb      	ldr	r3, [r7, #28]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3720      	adds	r7, #32
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20000bc8 	.word	0x20000bc8
 8006ff8:	20000bdc 	.word	0x20000bdc

08006ffc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007000:	4b03      	ldr	r3, [pc, #12]	; (8007010 <vTaskMissedYield+0x14>)
 8007002:	2201      	movs	r2, #1
 8007004:	601a      	str	r2, [r3, #0]
}
 8007006:	bf00      	nop
 8007008:	46bd      	mov	sp, r7
 800700a:	bc80      	pop	{r7}
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	20000bd8 	.word	0x20000bd8

08007014 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800701c:	f000 f854 	bl	80070c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007020:	4b07      	ldr	r3, [pc, #28]	; (8007040 <prvIdleTask+0x2c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d907      	bls.n	8007038 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007028:	4b06      	ldr	r3, [pc, #24]	; (8007044 <prvIdleTask+0x30>)
 800702a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800702e:	601a      	str	r2, [r3, #0]
 8007030:	f3bf 8f4f 	dsb	sy
 8007034:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007038:	f7f9 fba8 	bl	800078c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800703c:	e7ee      	b.n	800701c <prvIdleTask+0x8>
 800703e:	bf00      	nop
 8007040:	200006f4 	.word	0x200006f4
 8007044:	e000ed04 	.word	0xe000ed04

08007048 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800704e:	2300      	movs	r3, #0
 8007050:	607b      	str	r3, [r7, #4]
 8007052:	e00c      	b.n	800706e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4a12      	ldr	r2, [pc, #72]	; (80070a8 <prvInitialiseTaskLists+0x60>)
 8007060:	4413      	add	r3, r2
 8007062:	4618      	mov	r0, r3
 8007064:	f7fe fc34 	bl	80058d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3301      	adds	r3, #1
 800706c:	607b      	str	r3, [r7, #4]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b37      	cmp	r3, #55	; 0x37
 8007072:	d9ef      	bls.n	8007054 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007074:	480d      	ldr	r0, [pc, #52]	; (80070ac <prvInitialiseTaskLists+0x64>)
 8007076:	f7fe fc2b 	bl	80058d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800707a:	480d      	ldr	r0, [pc, #52]	; (80070b0 <prvInitialiseTaskLists+0x68>)
 800707c:	f7fe fc28 	bl	80058d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007080:	480c      	ldr	r0, [pc, #48]	; (80070b4 <prvInitialiseTaskLists+0x6c>)
 8007082:	f7fe fc25 	bl	80058d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007086:	480c      	ldr	r0, [pc, #48]	; (80070b8 <prvInitialiseTaskLists+0x70>)
 8007088:	f7fe fc22 	bl	80058d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800708c:	480b      	ldr	r0, [pc, #44]	; (80070bc <prvInitialiseTaskLists+0x74>)
 800708e:	f7fe fc1f 	bl	80058d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007092:	4b0b      	ldr	r3, [pc, #44]	; (80070c0 <prvInitialiseTaskLists+0x78>)
 8007094:	4a05      	ldr	r2, [pc, #20]	; (80070ac <prvInitialiseTaskLists+0x64>)
 8007096:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007098:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <prvInitialiseTaskLists+0x7c>)
 800709a:	4a05      	ldr	r2, [pc, #20]	; (80070b0 <prvInitialiseTaskLists+0x68>)
 800709c:	601a      	str	r2, [r3, #0]
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	200006f4 	.word	0x200006f4
 80070ac:	20000b54 	.word	0x20000b54
 80070b0:	20000b68 	.word	0x20000b68
 80070b4:	20000b84 	.word	0x20000b84
 80070b8:	20000b98 	.word	0x20000b98
 80070bc:	20000bb0 	.word	0x20000bb0
 80070c0:	20000b7c 	.word	0x20000b7c
 80070c4:	20000b80 	.word	0x20000b80

080070c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070ce:	e019      	b.n	8007104 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070d0:	f000 fdda 	bl	8007c88 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80070d4:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <prvCheckTasksWaitingTermination+0x4c>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3304      	adds	r3, #4
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe fc7b 	bl	80059dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070e6:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <prvCheckTasksWaitingTermination+0x50>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	4a0a      	ldr	r2, [pc, #40]	; (8007118 <prvCheckTasksWaitingTermination+0x50>)
 80070ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070f0:	4b0a      	ldr	r3, [pc, #40]	; (800711c <prvCheckTasksWaitingTermination+0x54>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	4a09      	ldr	r2, [pc, #36]	; (800711c <prvCheckTasksWaitingTermination+0x54>)
 80070f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070fa:	f000 fdf3 	bl	8007ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f80e 	bl	8007120 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007104:	4b05      	ldr	r3, [pc, #20]	; (800711c <prvCheckTasksWaitingTermination+0x54>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e1      	bne.n	80070d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	20000b98 	.word	0x20000b98
 8007118:	20000bc4 	.word	0x20000bc4
 800711c:	20000bac 	.word	0x20000bac

08007120 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800712e:	2b00      	cmp	r3, #0
 8007130:	d108      	bne.n	8007144 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007136:	4618      	mov	r0, r3
 8007138:	f000 ff62 	bl	8008000 <vPortFree>
				vPortFree( pxTCB );
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 ff5f 	bl	8008000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007142:	e017      	b.n	8007174 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800714a:	2b01      	cmp	r3, #1
 800714c:	d103      	bne.n	8007156 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 ff56 	bl	8008000 <vPortFree>
	}
 8007154:	e00e      	b.n	8007174 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800715c:	2b02      	cmp	r3, #2
 800715e:	d009      	beq.n	8007174 <prvDeleteTCB+0x54>
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	e7fe      	b.n	8007172 <prvDeleteTCB+0x52>
	}
 8007174:	bf00      	nop
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007182:	4b0e      	ldr	r3, [pc, #56]	; (80071bc <prvResetNextTaskUnblockTime+0x40>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <prvResetNextTaskUnblockTime+0x14>
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <prvResetNextTaskUnblockTime+0x16>
 8007190:	2300      	movs	r3, #0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d004      	beq.n	80071a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007196:	4b0a      	ldr	r3, [pc, #40]	; (80071c0 <prvResetNextTaskUnblockTime+0x44>)
 8007198:	f04f 32ff 	mov.w	r2, #4294967295
 800719c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800719e:	e008      	b.n	80071b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071a0:	4b06      	ldr	r3, [pc, #24]	; (80071bc <prvResetNextTaskUnblockTime+0x40>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	4a04      	ldr	r2, [pc, #16]	; (80071c0 <prvResetNextTaskUnblockTime+0x44>)
 80071b0:	6013      	str	r3, [r2, #0]
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr
 80071bc:	20000b7c 	.word	0x20000b7c
 80071c0:	20000be4 	.word	0x20000be4

080071c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071ca:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <xTaskGetSchedulerState+0x34>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d102      	bne.n	80071d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071d2:	2301      	movs	r3, #1
 80071d4:	607b      	str	r3, [r7, #4]
 80071d6:	e008      	b.n	80071ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071d8:	4b08      	ldr	r3, [pc, #32]	; (80071fc <xTaskGetSchedulerState+0x38>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d102      	bne.n	80071e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80071e0:	2302      	movs	r3, #2
 80071e2:	607b      	str	r3, [r7, #4]
 80071e4:	e001      	b.n	80071ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071e6:	2300      	movs	r3, #0
 80071e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071ea:	687b      	ldr	r3, [r7, #4]
	}
 80071ec:	4618      	mov	r0, r3
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bc80      	pop	{r7}
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	20000bd0 	.word	0x20000bd0
 80071fc:	20000bec 	.word	0x20000bec

08007200 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800720c:	2300      	movs	r3, #0
 800720e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d054      	beq.n	80072c0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007216:	4b2d      	ldr	r3, [pc, #180]	; (80072cc <xTaskPriorityDisinherit+0xcc>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	429a      	cmp	r2, r3
 800721e:	d009      	beq.n	8007234 <xTaskPriorityDisinherit+0x34>
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	e7fe      	b.n	8007232 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007238:	2b00      	cmp	r3, #0
 800723a:	d109      	bne.n	8007250 <xTaskPriorityDisinherit+0x50>
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	e7fe      	b.n	800724e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007254:	1e5a      	subs	r2, r3, #1
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007262:	429a      	cmp	r2, r3
 8007264:	d02c      	beq.n	80072c0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726a:	2b00      	cmp	r3, #0
 800726c:	d128      	bne.n	80072c0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	3304      	adds	r3, #4
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fbb2 	bl	80059dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007284:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007290:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <xTaskPriorityDisinherit+0xd0>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d903      	bls.n	80072a0 <xTaskPriorityDisinherit+0xa0>
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	4a0c      	ldr	r2, [pc, #48]	; (80072d0 <xTaskPriorityDisinherit+0xd0>)
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4a09      	ldr	r2, [pc, #36]	; (80072d4 <xTaskPriorityDisinherit+0xd4>)
 80072ae:	441a      	add	r2, r3
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	3304      	adds	r3, #4
 80072b4:	4619      	mov	r1, r3
 80072b6:	4610      	mov	r0, r2
 80072b8:	f7fe fb35 	bl	8005926 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072bc:	2301      	movs	r3, #1
 80072be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072c0:	697b      	ldr	r3, [r7, #20]
	}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	200006f0 	.word	0x200006f0
 80072d0:	20000bcc 	.word	0x20000bcc
 80072d4:	200006f4 	.word	0x200006f4

080072d8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80072de:	4b09      	ldr	r3, [pc, #36]	; (8007304 <uxTaskResetEventItemValue+0x2c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072e6:	4b07      	ldr	r3, [pc, #28]	; (8007304 <uxTaskResetEventItemValue+0x2c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ec:	4b05      	ldr	r3, [pc, #20]	; (8007304 <uxTaskResetEventItemValue+0x2c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80072f4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80072f6:	687b      	ldr	r3, [r7, #4]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	200006f0 	.word	0x200006f0

08007308 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007312:	4b21      	ldr	r3, [pc, #132]	; (8007398 <prvAddCurrentTaskToDelayedList+0x90>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007318:	4b20      	ldr	r3, [pc, #128]	; (800739c <prvAddCurrentTaskToDelayedList+0x94>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3304      	adds	r3, #4
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe fb5c 	bl	80059dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732a:	d10a      	bne.n	8007342 <prvAddCurrentTaskToDelayedList+0x3a>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d007      	beq.n	8007342 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007332:	4b1a      	ldr	r3, [pc, #104]	; (800739c <prvAddCurrentTaskToDelayedList+0x94>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3304      	adds	r3, #4
 8007338:	4619      	mov	r1, r3
 800733a:	4819      	ldr	r0, [pc, #100]	; (80073a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800733c:	f7fe faf3 	bl	8005926 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007340:	e026      	b.n	8007390 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4413      	add	r3, r2
 8007348:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800734a:	4b14      	ldr	r3, [pc, #80]	; (800739c <prvAddCurrentTaskToDelayedList+0x94>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	429a      	cmp	r2, r3
 8007358:	d209      	bcs.n	800736e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800735a:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	4b0f      	ldr	r3, [pc, #60]	; (800739c <prvAddCurrentTaskToDelayedList+0x94>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3304      	adds	r3, #4
 8007364:	4619      	mov	r1, r3
 8007366:	4610      	mov	r0, r2
 8007368:	f7fe fb00 	bl	800596c <vListInsert>
}
 800736c:	e010      	b.n	8007390 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800736e:	4b0e      	ldr	r3, [pc, #56]	; (80073a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	4b0a      	ldr	r3, [pc, #40]	; (800739c <prvAddCurrentTaskToDelayedList+0x94>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3304      	adds	r3, #4
 8007378:	4619      	mov	r1, r3
 800737a:	4610      	mov	r0, r2
 800737c:	f7fe faf6 	bl	800596c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007380:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	429a      	cmp	r2, r3
 8007388:	d202      	bcs.n	8007390 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800738a:	4a08      	ldr	r2, [pc, #32]	; (80073ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	6013      	str	r3, [r2, #0]
}
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	20000bc8 	.word	0x20000bc8
 800739c:	200006f0 	.word	0x200006f0
 80073a0:	20000bb0 	.word	0x20000bb0
 80073a4:	20000b80 	.word	0x20000b80
 80073a8:	20000b7c 	.word	0x20000b7c
 80073ac:	20000be4 	.word	0x20000be4

080073b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08a      	sub	sp, #40	; 0x28
 80073b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073ba:	f000 fb17 	bl	80079ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073be:	4b1c      	ldr	r3, [pc, #112]	; (8007430 <xTimerCreateTimerTask+0x80>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d021      	beq.n	800740a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073ce:	1d3a      	adds	r2, r7, #4
 80073d0:	f107 0108 	add.w	r1, r7, #8
 80073d4:	f107 030c 	add.w	r3, r7, #12
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fe f8af 	bl	800553c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	9202      	str	r2, [sp, #8]
 80073e6:	9301      	str	r3, [sp, #4]
 80073e8:	2302      	movs	r3, #2
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	2300      	movs	r3, #0
 80073ee:	460a      	mov	r2, r1
 80073f0:	4910      	ldr	r1, [pc, #64]	; (8007434 <xTimerCreateTimerTask+0x84>)
 80073f2:	4811      	ldr	r0, [pc, #68]	; (8007438 <xTimerCreateTimerTask+0x88>)
 80073f4:	f7ff f82c 	bl	8006450 <xTaskCreateStatic>
 80073f8:	4602      	mov	r2, r0
 80073fa:	4b10      	ldr	r3, [pc, #64]	; (800743c <xTimerCreateTimerTask+0x8c>)
 80073fc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80073fe:	4b0f      	ldr	r3, [pc, #60]	; (800743c <xTimerCreateTimerTask+0x8c>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007406:	2301      	movs	r3, #1
 8007408:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d109      	bne.n	8007424 <xTimerCreateTimerTask+0x74>
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	e7fe      	b.n	8007422 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007424:	697b      	ldr	r3, [r7, #20]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20000c20 	.word	0x20000c20
 8007434:	08008568 	.word	0x08008568
 8007438:	080075fd 	.word	0x080075fd
 800743c:	20000c24 	.word	0x20000c24

08007440 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af02      	add	r7, sp, #8
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800744e:	2030      	movs	r0, #48	; 0x30
 8007450:	f000 fd10 	bl	8007e74 <pvPortMalloc>
 8007454:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00d      	beq.n	8007478 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 f809 	bl	8007482 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007478:	697b      	ldr	r3, [r7, #20]
	}
 800747a:	4618      	mov	r0, r3
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b086      	sub	sp, #24
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	607a      	str	r2, [r7, #4]
 800748e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d109      	bne.n	80074aa <prvInitialiseNewTimer+0x28>
 8007496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	e7fe      	b.n	80074a8 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d015      	beq.n	80074dc <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80074b0:	f000 fa9c 	bl	80079ec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	6a3a      	ldr	r2, [r7, #32]
 80074d0:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d4:	3304      	adds	r3, #4
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fa19 	bl	800590e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80074dc:	bf00      	nop
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08a      	sub	sp, #40	; 0x28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d109      	bne.n	8007510 <xTimerGenericCommand+0x2c>
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	623b      	str	r3, [r7, #32]
 800750e:	e7fe      	b.n	800750e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007510:	4b19      	ldr	r3, [pc, #100]	; (8007578 <xTimerGenericCommand+0x94>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d02a      	beq.n	800756e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b05      	cmp	r3, #5
 8007528:	dc18      	bgt.n	800755c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800752a:	f7ff fe4b 	bl	80071c4 <xTaskGetSchedulerState>
 800752e:	4603      	mov	r3, r0
 8007530:	2b02      	cmp	r3, #2
 8007532:	d109      	bne.n	8007548 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007534:	4b10      	ldr	r3, [pc, #64]	; (8007578 <xTimerGenericCommand+0x94>)
 8007536:	6818      	ldr	r0, [r3, #0]
 8007538:	f107 0110 	add.w	r1, r7, #16
 800753c:	2300      	movs	r3, #0
 800753e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007540:	f7fe fbb0 	bl	8005ca4 <xQueueGenericSend>
 8007544:	6278      	str	r0, [r7, #36]	; 0x24
 8007546:	e012      	b.n	800756e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007548:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <xTimerGenericCommand+0x94>)
 800754a:	6818      	ldr	r0, [r3, #0]
 800754c:	f107 0110 	add.w	r1, r7, #16
 8007550:	2300      	movs	r3, #0
 8007552:	2200      	movs	r2, #0
 8007554:	f7fe fba6 	bl	8005ca4 <xQueueGenericSend>
 8007558:	6278      	str	r0, [r7, #36]	; 0x24
 800755a:	e008      	b.n	800756e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <xTimerGenericCommand+0x94>)
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	f107 0110 	add.w	r1, r7, #16
 8007564:	2300      	movs	r3, #0
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	f7fe fc96 	bl	8005e98 <xQueueGenericSendFromISR>
 800756c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007570:	4618      	mov	r0, r3
 8007572:	3728      	adds	r7, #40	; 0x28
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	20000c20 	.word	0x20000c20

0800757c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af02      	add	r7, sp, #8
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007586:	4b1c      	ldr	r3, [pc, #112]	; (80075f8 <prvProcessExpiredTimer+0x7c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	3304      	adds	r3, #4
 8007594:	4618      	mov	r0, r3
 8007596:	f7fe fa21 	bl	80059dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d121      	bne.n	80075e6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	699a      	ldr	r2, [r3, #24]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	18d1      	adds	r1, r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	6978      	ldr	r0, [r7, #20]
 80075b0:	f000 f8ca 	bl	8007748 <prvInsertTimerInActiveList>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d015      	beq.n	80075e6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075ba:	2300      	movs	r3, #0
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	2300      	movs	r3, #0
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	2100      	movs	r1, #0
 80075c4:	6978      	ldr	r0, [r7, #20]
 80075c6:	f7ff ff8d 	bl	80074e4 <xTimerGenericCommand>
 80075ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <prvProcessExpiredTimer+0x6a>
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	e7fe      	b.n	80075e4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	6978      	ldr	r0, [r7, #20]
 80075ec:	4798      	blx	r3
}
 80075ee:	bf00      	nop
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000c18 	.word	0x20000c18

080075fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 8007604:	f7f9 f8de 	bl	80007c4 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007608:	f107 0308 	add.w	r3, r7, #8
 800760c:	4618      	mov	r0, r3
 800760e:	f000 f857 	bl	80076c0 <prvGetNextExpireTime>
 8007612:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	4619      	mov	r1, r3
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f803 	bl	8007624 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800761e:	f000 f8d5 	bl	80077cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007622:	e7f1      	b.n	8007608 <prvTimerTask+0xc>

08007624 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800762e:	f7ff f93b 	bl	80068a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007632:	f107 0308 	add.w	r3, r7, #8
 8007636:	4618      	mov	r0, r3
 8007638:	f000 f866 	bl	8007708 <prvSampleTimeNow>
 800763c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d130      	bne.n	80076a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10a      	bne.n	8007660 <prvProcessTimerOrBlockTask+0x3c>
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	429a      	cmp	r2, r3
 8007650:	d806      	bhi.n	8007660 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007652:	f7ff f937 	bl	80068c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007656:	68f9      	ldr	r1, [r7, #12]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff ff8f 	bl	800757c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800765e:	e024      	b.n	80076aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d008      	beq.n	8007678 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007666:	4b13      	ldr	r3, [pc, #76]	; (80076b4 <prvProcessTimerOrBlockTask+0x90>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	bf0c      	ite	eq
 8007670:	2301      	moveq	r3, #1
 8007672:	2300      	movne	r3, #0
 8007674:	b2db      	uxtb	r3, r3
 8007676:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007678:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <prvProcessTimerOrBlockTask+0x94>)
 800767a:	6818      	ldr	r0, [r3, #0]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	4619      	mov	r1, r3
 8007686:	f7fe feaf 	bl	80063e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800768a:	f7ff f91b 	bl	80068c4 <xTaskResumeAll>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007694:	4b09      	ldr	r3, [pc, #36]	; (80076bc <prvProcessTimerOrBlockTask+0x98>)
 8007696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	f3bf 8f6f 	isb	sy
}
 80076a4:	e001      	b.n	80076aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076a6:	f7ff f90d 	bl	80068c4 <xTaskResumeAll>
}
 80076aa:	bf00      	nop
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20000c1c 	.word	0x20000c1c
 80076b8:	20000c20 	.word	0x20000c20
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076c8:	4b0e      	ldr	r3, [pc, #56]	; (8007704 <prvGetNextExpireTime+0x44>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	bf0c      	ite	eq
 80076d2:	2301      	moveq	r3, #1
 80076d4:	2300      	movne	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	461a      	mov	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d105      	bne.n	80076f2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076e6:	4b07      	ldr	r3, [pc, #28]	; (8007704 <prvGetNextExpireTime+0x44>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	e001      	b.n	80076f6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076f6:	68fb      	ldr	r3, [r7, #12]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bc80      	pop	{r7}
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20000c18 	.word	0x20000c18

08007708 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007710:	f7ff f974 	bl	80069fc <xTaskGetTickCount>
 8007714:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007716:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <prvSampleTimeNow+0x3c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	429a      	cmp	r2, r3
 800771e:	d205      	bcs.n	800772c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007720:	f000 f904 	bl	800792c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	e002      	b.n	8007732 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007732:	4a04      	ldr	r2, [pc, #16]	; (8007744 <prvSampleTimeNow+0x3c>)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007738:	68fb      	ldr	r3, [r7, #12]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20000c28 	.word	0x20000c28

08007748 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007756:	2300      	movs	r3, #0
 8007758:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	429a      	cmp	r2, r3
 800776c:	d812      	bhi.n	8007794 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	1ad2      	subs	r2, r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	429a      	cmp	r2, r3
 800777a:	d302      	bcc.n	8007782 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	e01b      	b.n	80077ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007782:	4b10      	ldr	r3, [pc, #64]	; (80077c4 <prvInsertTimerInActiveList+0x7c>)
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3304      	adds	r3, #4
 800778a:	4619      	mov	r1, r3
 800778c:	4610      	mov	r0, r2
 800778e:	f7fe f8ed 	bl	800596c <vListInsert>
 8007792:	e012      	b.n	80077ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	429a      	cmp	r2, r3
 800779a:	d206      	bcs.n	80077aa <prvInsertTimerInActiveList+0x62>
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d302      	bcc.n	80077aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077a4:	2301      	movs	r3, #1
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e007      	b.n	80077ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077aa:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <prvInsertTimerInActiveList+0x80>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3304      	adds	r3, #4
 80077b2:	4619      	mov	r1, r3
 80077b4:	4610      	mov	r0, r2
 80077b6:	f7fe f8d9 	bl	800596c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077ba:	697b      	ldr	r3, [r7, #20]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20000c1c 	.word	0x20000c1c
 80077c8:	20000c18 	.word	0x20000c18

080077cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08e      	sub	sp, #56	; 0x38
 80077d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077d2:	e099      	b.n	8007908 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	da17      	bge.n	800780a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80077da:	1d3b      	adds	r3, r7, #4
 80077dc:	3304      	adds	r3, #4
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d109      	bne.n	80077fa <prvProcessReceivedCommands+0x2e>
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	61fb      	str	r3, [r7, #28]
 80077f8:	e7fe      	b.n	80077f8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007800:	6850      	ldr	r0, [r2, #4]
 8007802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007804:	6892      	ldr	r2, [r2, #8]
 8007806:	4611      	mov	r1, r2
 8007808:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	db7a      	blt.n	8007906 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d004      	beq.n	8007826 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	3304      	adds	r3, #4
 8007820:	4618      	mov	r0, r3
 8007822:	f7fe f8db 	bl	80059dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007826:	463b      	mov	r3, r7
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff ff6d 	bl	8007708 <prvSampleTimeNow>
 800782e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b09      	cmp	r3, #9
 8007834:	d868      	bhi.n	8007908 <prvProcessReceivedCommands+0x13c>
 8007836:	a201      	add	r2, pc, #4	; (adr r2, 800783c <prvProcessReceivedCommands+0x70>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	08007865 	.word	0x08007865
 8007840:	08007865 	.word	0x08007865
 8007844:	08007865 	.word	0x08007865
 8007848:	08007909 	.word	0x08007909
 800784c:	080078bf 	.word	0x080078bf
 8007850:	080078f5 	.word	0x080078f5
 8007854:	08007865 	.word	0x08007865
 8007858:	08007865 	.word	0x08007865
 800785c:	08007909 	.word	0x08007909
 8007860:	080078bf 	.word	0x080078bf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	18d1      	adds	r1, r2, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007872:	f7ff ff69 	bl	8007748 <prvInsertTimerInActiveList>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d045      	beq.n	8007908 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007882:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d13d      	bne.n	8007908 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	441a      	add	r2, r3
 8007894:	2300      	movs	r3, #0
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	2300      	movs	r3, #0
 800789a:	2100      	movs	r1, #0
 800789c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800789e:	f7ff fe21 	bl	80074e4 <xTimerGenericCommand>
 80078a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d12e      	bne.n	8007908 <prvProcessReceivedCommands+0x13c>
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	e7fe      	b.n	80078bc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d109      	bne.n	80078e0 <prvProcessReceivedCommands+0x114>
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	617b      	str	r3, [r7, #20]
 80078de:	e7fe      	b.n	80078de <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	699a      	ldr	r2, [r3, #24]
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	18d1      	adds	r1, r2, r3
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ee:	f7ff ff2b 	bl	8007748 <prvInsertTimerInActiveList>
					break;
 80078f2:	e009      	b.n	8007908 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d104      	bne.n	8007908 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80078fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007900:	f000 fb7e 	bl	8008000 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007904:	e000      	b.n	8007908 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007906:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007908:	4b07      	ldr	r3, [pc, #28]	; (8007928 <prvProcessReceivedCommands+0x15c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	1d39      	adds	r1, r7, #4
 800790e:	2200      	movs	r2, #0
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe fb55 	bl	8005fc0 <xQueueReceive>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	f47f af5b 	bne.w	80077d4 <prvProcessReceivedCommands+0x8>
	}
}
 800791e:	bf00      	nop
 8007920:	3730      	adds	r7, #48	; 0x30
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20000c20 	.word	0x20000c20

0800792c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007932:	e044      	b.n	80079be <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007934:	4b2b      	ldr	r3, [pc, #172]	; (80079e4 <prvSwitchTimerLists+0xb8>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800793e:	4b29      	ldr	r3, [pc, #164]	; (80079e4 <prvSwitchTimerLists+0xb8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3304      	adds	r3, #4
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe f845 	bl	80059dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d12d      	bne.n	80079be <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	4413      	add	r3, r2
 800796a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	429a      	cmp	r2, r3
 8007972:	d90e      	bls.n	8007992 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007980:	4b18      	ldr	r3, [pc, #96]	; (80079e4 <prvSwitchTimerLists+0xb8>)
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3304      	adds	r3, #4
 8007988:	4619      	mov	r1, r3
 800798a:	4610      	mov	r0, r2
 800798c:	f7fd ffee 	bl	800596c <vListInsert>
 8007990:	e015      	b.n	80079be <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007992:	2300      	movs	r3, #0
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	2300      	movs	r3, #0
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	2100      	movs	r1, #0
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f7ff fda1 	bl	80074e4 <xTimerGenericCommand>
 80079a2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d109      	bne.n	80079be <prvSwitchTimerLists+0x92>
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	e7fe      	b.n	80079bc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079be:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <prvSwitchTimerLists+0xb8>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1b5      	bne.n	8007934 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079c8:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <prvSwitchTimerLists+0xb8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079ce:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <prvSwitchTimerLists+0xbc>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a04      	ldr	r2, [pc, #16]	; (80079e4 <prvSwitchTimerLists+0xb8>)
 80079d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079d6:	4a04      	ldr	r2, [pc, #16]	; (80079e8 <prvSwitchTimerLists+0xbc>)
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	6013      	str	r3, [r2, #0]
}
 80079dc:	bf00      	nop
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	20000c18 	.word	0x20000c18
 80079e8:	20000c1c 	.word	0x20000c1c

080079ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079f2:	f000 f949 	bl	8007c88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079f6:	4b15      	ldr	r3, [pc, #84]	; (8007a4c <prvCheckForValidListAndQueue+0x60>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d120      	bne.n	8007a40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80079fe:	4814      	ldr	r0, [pc, #80]	; (8007a50 <prvCheckForValidListAndQueue+0x64>)
 8007a00:	f7fd ff66 	bl	80058d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a04:	4813      	ldr	r0, [pc, #76]	; (8007a54 <prvCheckForValidListAndQueue+0x68>)
 8007a06:	f7fd ff63 	bl	80058d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a0a:	4b13      	ldr	r3, [pc, #76]	; (8007a58 <prvCheckForValidListAndQueue+0x6c>)
 8007a0c:	4a10      	ldr	r2, [pc, #64]	; (8007a50 <prvCheckForValidListAndQueue+0x64>)
 8007a0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a10:	4b12      	ldr	r3, [pc, #72]	; (8007a5c <prvCheckForValidListAndQueue+0x70>)
 8007a12:	4a10      	ldr	r2, [pc, #64]	; (8007a54 <prvCheckForValidListAndQueue+0x68>)
 8007a14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a16:	2300      	movs	r3, #0
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <prvCheckForValidListAndQueue+0x74>)
 8007a1c:	4a11      	ldr	r2, [pc, #68]	; (8007a64 <prvCheckForValidListAndQueue+0x78>)
 8007a1e:	2110      	movs	r1, #16
 8007a20:	200a      	movs	r0, #10
 8007a22:	f7fe f86d 	bl	8005b00 <xQueueGenericCreateStatic>
 8007a26:	4602      	mov	r2, r0
 8007a28:	4b08      	ldr	r3, [pc, #32]	; (8007a4c <prvCheckForValidListAndQueue+0x60>)
 8007a2a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a2c:	4b07      	ldr	r3, [pc, #28]	; (8007a4c <prvCheckForValidListAndQueue+0x60>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a34:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <prvCheckForValidListAndQueue+0x60>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	490b      	ldr	r1, [pc, #44]	; (8007a68 <prvCheckForValidListAndQueue+0x7c>)
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fe fcac 	bl	8006398 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a40:	f000 f950 	bl	8007ce4 <vPortExitCritical>
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20000c20 	.word	0x20000c20
 8007a50:	20000bf0 	.word	0x20000bf0
 8007a54:	20000c04 	.word	0x20000c04
 8007a58:	20000c18 	.word	0x20000c18
 8007a5c:	20000c1c 	.word	0x20000c1c
 8007a60:	20000ccc 	.word	0x20000ccc
 8007a64:	20000c2c 	.word	0x20000c2c
 8007a68:	08008570 	.word	0x08008570

08007a6c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08a      	sub	sp, #40	; 0x28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007a7a:	f06f 0301 	mvn.w	r3, #1
 8007a7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a8c:	4b06      	ldr	r3, [pc, #24]	; (8007aa8 <xTimerPendFunctionCallFromISR+0x3c>)
 8007a8e:	6818      	ldr	r0, [r3, #0]
 8007a90:	f107 0114 	add.w	r1, r7, #20
 8007a94:	2300      	movs	r3, #0
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	f7fe f9fe 	bl	8005e98 <xQueueGenericSendFromISR>
 8007a9c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3728      	adds	r7, #40	; 0x28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	20000c20 	.word	0x20000c20

08007aac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3b04      	subs	r3, #4
 8007abc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3b04      	subs	r3, #4
 8007aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f023 0201 	bic.w	r2, r3, #1
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3b04      	subs	r3, #4
 8007ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007adc:	4a08      	ldr	r2, [pc, #32]	; (8007b00 <pxPortInitialiseStack+0x54>)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3b14      	subs	r3, #20
 8007ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3b20      	subs	r3, #32
 8007af2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007af4:	68fb      	ldr	r3, [r7, #12]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bc80      	pop	{r7}
 8007afe:	4770      	bx	lr
 8007b00:	08007b05 	.word	0x08007b05

08007b04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b0e:	4b10      	ldr	r3, [pc, #64]	; (8007b50 <prvTaskExitError+0x4c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b16:	d009      	beq.n	8007b2c <prvTaskExitError+0x28>
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	60fb      	str	r3, [r7, #12]
 8007b2a:	e7fe      	b.n	8007b2a <prvTaskExitError+0x26>
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b3e:	bf00      	nop
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0fc      	beq.n	8007b40 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b46:	bf00      	nop
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bc80      	pop	{r7}
 8007b4e:	4770      	bx	lr
 8007b50:	2000000c 	.word	0x2000000c
	...

08007b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b60:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <pxCurrentTCBConst2>)
 8007b62:	6819      	ldr	r1, [r3, #0]
 8007b64:	6808      	ldr	r0, [r1, #0]
 8007b66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b6a:	f380 8809 	msr	PSP, r0
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f04f 0000 	mov.w	r0, #0
 8007b76:	f380 8811 	msr	BASEPRI, r0
 8007b7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007b7e:	4770      	bx	lr

08007b80 <pxCurrentTCBConst2>:
 8007b80:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop

08007b88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007b88:	4806      	ldr	r0, [pc, #24]	; (8007ba4 <prvPortStartFirstTask+0x1c>)
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	6800      	ldr	r0, [r0, #0]
 8007b8e:	f380 8808 	msr	MSP, r0
 8007b92:	b662      	cpsie	i
 8007b94:	b661      	cpsie	f
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	df00      	svc	0
 8007ba0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007ba2:	bf00      	nop
 8007ba4:	e000ed08 	.word	0xe000ed08

08007ba8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007bae:	4b31      	ldr	r3, [pc, #196]	; (8007c74 <xPortStartScheduler+0xcc>)
 8007bb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	22ff      	movs	r2, #255	; 0xff
 8007bbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	4b29      	ldr	r3, [pc, #164]	; (8007c78 <xPortStartScheduler+0xd0>)
 8007bd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bd6:	4b29      	ldr	r3, [pc, #164]	; (8007c7c <xPortStartScheduler+0xd4>)
 8007bd8:	2207      	movs	r2, #7
 8007bda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bdc:	e009      	b.n	8007bf2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007bde:	4b27      	ldr	r3, [pc, #156]	; (8007c7c <xPortStartScheduler+0xd4>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	4a25      	ldr	r2, [pc, #148]	; (8007c7c <xPortStartScheduler+0xd4>)
 8007be6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007be8:	78fb      	ldrb	r3, [r7, #3]
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bf2:	78fb      	ldrb	r3, [r7, #3]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bfa:	2b80      	cmp	r3, #128	; 0x80
 8007bfc:	d0ef      	beq.n	8007bde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bfe:	4b1f      	ldr	r3, [pc, #124]	; (8007c7c <xPortStartScheduler+0xd4>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f1c3 0307 	rsb	r3, r3, #7
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d009      	beq.n	8007c1e <xPortStartScheduler+0x76>
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	60bb      	str	r3, [r7, #8]
 8007c1c:	e7fe      	b.n	8007c1c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c1e:	4b17      	ldr	r3, [pc, #92]	; (8007c7c <xPortStartScheduler+0xd4>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	4a15      	ldr	r2, [pc, #84]	; (8007c7c <xPortStartScheduler+0xd4>)
 8007c26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c28:	4b14      	ldr	r3, [pc, #80]	; (8007c7c <xPortStartScheduler+0xd4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c30:	4a12      	ldr	r2, [pc, #72]	; (8007c7c <xPortStartScheduler+0xd4>)
 8007c32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c3c:	4b10      	ldr	r3, [pc, #64]	; (8007c80 <xPortStartScheduler+0xd8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a0f      	ldr	r2, [pc, #60]	; (8007c80 <xPortStartScheduler+0xd8>)
 8007c42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c48:	4b0d      	ldr	r3, [pc, #52]	; (8007c80 <xPortStartScheduler+0xd8>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a0c      	ldr	r2, [pc, #48]	; (8007c80 <xPortStartScheduler+0xd8>)
 8007c4e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c54:	f000 f8b0 	bl	8007db8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c58:	4b0a      	ldr	r3, [pc, #40]	; (8007c84 <xPortStartScheduler+0xdc>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c5e:	f7ff ff93 	bl	8007b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c62:	f7fe ff9f 	bl	8006ba4 <vTaskSwitchContext>
	prvTaskExitError();
 8007c66:	f7ff ff4d 	bl	8007b04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	e000e400 	.word	0xe000e400
 8007c78:	20000d1c 	.word	0x20000d1c
 8007c7c:	20000d20 	.word	0x20000d20
 8007c80:	e000ed20 	.word	0xe000ed20
 8007c84:	2000000c 	.word	0x2000000c

08007c88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ca0:	4b0e      	ldr	r3, [pc, #56]	; (8007cdc <vPortEnterCritical+0x54>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	4a0d      	ldr	r2, [pc, #52]	; (8007cdc <vPortEnterCritical+0x54>)
 8007ca8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007caa:	4b0c      	ldr	r3, [pc, #48]	; (8007cdc <vPortEnterCritical+0x54>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d10e      	bne.n	8007cd0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cb2:	4b0b      	ldr	r3, [pc, #44]	; (8007ce0 <vPortEnterCritical+0x58>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d009      	beq.n	8007cd0 <vPortEnterCritical+0x48>
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	603b      	str	r3, [r7, #0]
 8007cce:	e7fe      	b.n	8007cce <vPortEnterCritical+0x46>
	}
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bc80      	pop	{r7}
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	2000000c 	.word	0x2000000c
 8007ce0:	e000ed04 	.word	0xe000ed04

08007ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cea:	4b10      	ldr	r3, [pc, #64]	; (8007d2c <vPortExitCritical+0x48>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d109      	bne.n	8007d06 <vPortExitCritical+0x22>
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	607b      	str	r3, [r7, #4]
 8007d04:	e7fe      	b.n	8007d04 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007d06:	4b09      	ldr	r3, [pc, #36]	; (8007d2c <vPortExitCritical+0x48>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	4a07      	ldr	r2, [pc, #28]	; (8007d2c <vPortExitCritical+0x48>)
 8007d0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d10:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <vPortExitCritical+0x48>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d104      	bne.n	8007d22 <vPortExitCritical+0x3e>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr
 8007d2c:	2000000c 	.word	0x2000000c

08007d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d30:	f3ef 8009 	mrs	r0, PSP
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	4b0d      	ldr	r3, [pc, #52]	; (8007d70 <pxCurrentTCBConst>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d40:	6010      	str	r0, [r2, #0]
 8007d42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007d46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d4a:	f380 8811 	msr	BASEPRI, r0
 8007d4e:	f7fe ff29 	bl	8006ba4 <vTaskSwitchContext>
 8007d52:	f04f 0000 	mov.w	r0, #0
 8007d56:	f380 8811 	msr	BASEPRI, r0
 8007d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d5e:	6819      	ldr	r1, [r3, #0]
 8007d60:	6808      	ldr	r0, [r1, #0]
 8007d62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d66:	f380 8809 	msr	PSP, r0
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	4770      	bx	lr

08007d70 <pxCurrentTCBConst>:
 8007d70:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop

08007d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d90:	f7fe fe42 	bl	8006a18 <xTaskIncrementTick>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d9a:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <SysTick_Handler+0x3c>)
 8007d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	2300      	movs	r3, #0
 8007da4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	e000ed04 	.word	0xe000ed04

08007db8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <vPortSetupTimerInterrupt+0x30>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <vPortSetupTimerInterrupt+0x34>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dc8:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <vPortSetupTimerInterrupt+0x38>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a09      	ldr	r2, [pc, #36]	; (8007df4 <vPortSetupTimerInterrupt+0x3c>)
 8007dce:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd2:	099b      	lsrs	r3, r3, #6
 8007dd4:	4a08      	ldr	r2, [pc, #32]	; (8007df8 <vPortSetupTimerInterrupt+0x40>)
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dda:	4b03      	ldr	r3, [pc, #12]	; (8007de8 <vPortSetupTimerInterrupt+0x30>)
 8007ddc:	2207      	movs	r2, #7
 8007dde:	601a      	str	r2, [r3, #0]
}
 8007de0:	bf00      	nop
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bc80      	pop	{r7}
 8007de6:	4770      	bx	lr
 8007de8:	e000e010 	.word	0xe000e010
 8007dec:	e000e018 	.word	0xe000e018
 8007df0:	20000000 	.word	0x20000000
 8007df4:	10624dd3 	.word	0x10624dd3
 8007df8:	e000e014 	.word	0xe000e014

08007dfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e02:	f3ef 8305 	mrs	r3, IPSR
 8007e06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b0f      	cmp	r3, #15
 8007e0c:	d913      	bls.n	8007e36 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e0e:	4a15      	ldr	r2, [pc, #84]	; (8007e64 <vPortValidateInterruptPriority+0x68>)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4413      	add	r3, r2
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e18:	4b13      	ldr	r3, [pc, #76]	; (8007e68 <vPortValidateInterruptPriority+0x6c>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	7afa      	ldrb	r2, [r7, #11]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d209      	bcs.n	8007e36 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	607b      	str	r3, [r7, #4]
 8007e34:	e7fe      	b.n	8007e34 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e36:	4b0d      	ldr	r3, [pc, #52]	; (8007e6c <vPortValidateInterruptPriority+0x70>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e3e:	4b0c      	ldr	r3, [pc, #48]	; (8007e70 <vPortValidateInterruptPriority+0x74>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d909      	bls.n	8007e5a <vPortValidateInterruptPriority+0x5e>
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	e7fe      	b.n	8007e58 <vPortValidateInterruptPriority+0x5c>
	}
 8007e5a:	bf00      	nop
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bc80      	pop	{r7}
 8007e62:	4770      	bx	lr
 8007e64:	e000e3f0 	.word	0xe000e3f0
 8007e68:	20000d1c 	.word	0x20000d1c
 8007e6c:	e000ed0c 	.word	0xe000ed0c
 8007e70:	20000d20 	.word	0x20000d20

08007e74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08a      	sub	sp, #40	; 0x28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e80:	f7fe fd12 	bl	80068a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e84:	4b59      	ldr	r3, [pc, #356]	; (8007fec <pvPortMalloc+0x178>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e8c:	f000 f910 	bl	80080b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e90:	4b57      	ldr	r3, [pc, #348]	; (8007ff0 <pvPortMalloc+0x17c>)
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4013      	ands	r3, r2
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f040 808c 	bne.w	8007fb6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01c      	beq.n	8007ede <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007ea4:	2208      	movs	r2, #8
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f003 0307 	and.w	r3, r3, #7
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d013      	beq.n	8007ede <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f023 0307 	bic.w	r3, r3, #7
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d009      	beq.n	8007ede <pvPortMalloc+0x6a>
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	617b      	str	r3, [r7, #20]
 8007edc:	e7fe      	b.n	8007edc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d068      	beq.n	8007fb6 <pvPortMalloc+0x142>
 8007ee4:	4b43      	ldr	r3, [pc, #268]	; (8007ff4 <pvPortMalloc+0x180>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d863      	bhi.n	8007fb6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007eee:	4b42      	ldr	r3, [pc, #264]	; (8007ff8 <pvPortMalloc+0x184>)
 8007ef0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ef2:	4b41      	ldr	r3, [pc, #260]	; (8007ff8 <pvPortMalloc+0x184>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ef8:	e004      	b.n	8007f04 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d903      	bls.n	8007f16 <pvPortMalloc+0xa2>
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1f1      	bne.n	8007efa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f16:	4b35      	ldr	r3, [pc, #212]	; (8007fec <pvPortMalloc+0x178>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d04a      	beq.n	8007fb6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2208      	movs	r2, #8
 8007f26:	4413      	add	r3, r2
 8007f28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	1ad2      	subs	r2, r2, r3
 8007f3a:	2308      	movs	r3, #8
 8007f3c:	005b      	lsls	r3, r3, #1
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d91e      	bls.n	8007f80 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4413      	add	r3, r2
 8007f48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	f003 0307 	and.w	r3, r3, #7
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d009      	beq.n	8007f68 <pvPortMalloc+0xf4>
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	613b      	str	r3, [r7, #16]
 8007f66:	e7fe      	b.n	8007f66 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	1ad2      	subs	r2, r2, r3
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f7a:	69b8      	ldr	r0, [r7, #24]
 8007f7c:	f000 f8fa 	bl	8008174 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f80:	4b1c      	ldr	r3, [pc, #112]	; (8007ff4 <pvPortMalloc+0x180>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	4a1a      	ldr	r2, [pc, #104]	; (8007ff4 <pvPortMalloc+0x180>)
 8007f8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f8e:	4b19      	ldr	r3, [pc, #100]	; (8007ff4 <pvPortMalloc+0x180>)
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	4b1a      	ldr	r3, [pc, #104]	; (8007ffc <pvPortMalloc+0x188>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d203      	bcs.n	8007fa2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f9a:	4b16      	ldr	r3, [pc, #88]	; (8007ff4 <pvPortMalloc+0x180>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a17      	ldr	r2, [pc, #92]	; (8007ffc <pvPortMalloc+0x188>)
 8007fa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	4b12      	ldr	r3, [pc, #72]	; (8007ff0 <pvPortMalloc+0x17c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	431a      	orrs	r2, r3
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fb6:	f7fe fc85 	bl	80068c4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8007fc0:	f7f8 fbfa 	bl	80007b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d009      	beq.n	8007fe2 <pvPortMalloc+0x16e>
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	e7fe      	b.n	8007fe0 <pvPortMalloc+0x16c>
	return pvReturn;
 8007fe2:	69fb      	ldr	r3, [r7, #28]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3728      	adds	r7, #40	; 0x28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	2000352c 	.word	0x2000352c
 8007ff0:	20003538 	.word	0x20003538
 8007ff4:	20003530 	.word	0x20003530
 8007ff8:	20003524 	.word	0x20003524
 8007ffc:	20003534 	.word	0x20003534

08008000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d046      	beq.n	80080a0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008012:	2308      	movs	r3, #8
 8008014:	425b      	negs	r3, r3
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	4413      	add	r3, r2
 800801a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	4b20      	ldr	r3, [pc, #128]	; (80080a8 <vPortFree+0xa8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4013      	ands	r3, r2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d109      	bne.n	8008042 <vPortFree+0x42>
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	e7fe      	b.n	8008040 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d009      	beq.n	800805e <vPortFree+0x5e>
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	60bb      	str	r3, [r7, #8]
 800805c:	e7fe      	b.n	800805c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	4b11      	ldr	r3, [pc, #68]	; (80080a8 <vPortFree+0xa8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4013      	ands	r3, r2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d019      	beq.n	80080a0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d115      	bne.n	80080a0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <vPortFree+0xa8>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	43db      	mvns	r3, r3
 800807e:	401a      	ands	r2, r3
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008084:	f7fe fc10 	bl	80068a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	4b07      	ldr	r3, [pc, #28]	; (80080ac <vPortFree+0xac>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4413      	add	r3, r2
 8008092:	4a06      	ldr	r2, [pc, #24]	; (80080ac <vPortFree+0xac>)
 8008094:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008096:	6938      	ldr	r0, [r7, #16]
 8008098:	f000 f86c 	bl	8008174 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800809c:	f7fe fc12 	bl	80068c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080a0:	bf00      	nop
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	20003538 	.word	0x20003538
 80080ac:	20003530 	.word	0x20003530

080080b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80080ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080bc:	4b27      	ldr	r3, [pc, #156]	; (800815c <prvHeapInit+0xac>)
 80080be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00c      	beq.n	80080e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3307      	adds	r3, #7
 80080ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 0307 	bic.w	r3, r3, #7
 80080d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	4a1f      	ldr	r2, [pc, #124]	; (800815c <prvHeapInit+0xac>)
 80080e0:	4413      	add	r3, r2
 80080e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080e8:	4a1d      	ldr	r2, [pc, #116]	; (8008160 <prvHeapInit+0xb0>)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080ee:	4b1c      	ldr	r3, [pc, #112]	; (8008160 <prvHeapInit+0xb0>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	4413      	add	r3, r2
 80080fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080fc:	2208      	movs	r2, #8
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	1a9b      	subs	r3, r3, r2
 8008102:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f023 0307 	bic.w	r3, r3, #7
 800810a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4a15      	ldr	r2, [pc, #84]	; (8008164 <prvHeapInit+0xb4>)
 8008110:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008112:	4b14      	ldr	r3, [pc, #80]	; (8008164 <prvHeapInit+0xb4>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2200      	movs	r2, #0
 8008118:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800811a:	4b12      	ldr	r3, [pc, #72]	; (8008164 <prvHeapInit+0xb4>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	1ad2      	subs	r2, r2, r3
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008130:	4b0c      	ldr	r3, [pc, #48]	; (8008164 <prvHeapInit+0xb4>)
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	4a0a      	ldr	r2, [pc, #40]	; (8008168 <prvHeapInit+0xb8>)
 800813e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	4a09      	ldr	r2, [pc, #36]	; (800816c <prvHeapInit+0xbc>)
 8008146:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008148:	4b09      	ldr	r3, [pc, #36]	; (8008170 <prvHeapInit+0xc0>)
 800814a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800814e:	601a      	str	r2, [r3, #0]
}
 8008150:	bf00      	nop
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	bc80      	pop	{r7}
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	20000d24 	.word	0x20000d24
 8008160:	20003524 	.word	0x20003524
 8008164:	2000352c 	.word	0x2000352c
 8008168:	20003534 	.word	0x20003534
 800816c:	20003530 	.word	0x20003530
 8008170:	20003538 	.word	0x20003538

08008174 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800817c:	4b27      	ldr	r3, [pc, #156]	; (800821c <prvInsertBlockIntoFreeList+0xa8>)
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	e002      	b.n	8008188 <prvInsertBlockIntoFreeList+0x14>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	429a      	cmp	r2, r3
 8008190:	d8f7      	bhi.n	8008182 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	4413      	add	r3, r2
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d108      	bne.n	80081b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	441a      	add	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	441a      	add	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d118      	bne.n	80081fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	4b14      	ldr	r3, [pc, #80]	; (8008220 <prvInsertBlockIntoFreeList+0xac>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d00d      	beq.n	80081f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	441a      	add	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	e008      	b.n	8008204 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081f2:	4b0b      	ldr	r3, [pc, #44]	; (8008220 <prvInsertBlockIntoFreeList+0xac>)
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	e003      	b.n	8008204 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	429a      	cmp	r2, r3
 800820a:	d002      	beq.n	8008212 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008212:	bf00      	nop
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	bc80      	pop	{r7}
 800821a:	4770      	bx	lr
 800821c:	20003524 	.word	0x20003524
 8008220:	2000352c 	.word	0x2000352c

08008224 <__libc_init_array>:
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	2500      	movs	r5, #0
 8008228:	4e0c      	ldr	r6, [pc, #48]	; (800825c <__libc_init_array+0x38>)
 800822a:	4c0d      	ldr	r4, [pc, #52]	; (8008260 <__libc_init_array+0x3c>)
 800822c:	1ba4      	subs	r4, r4, r6
 800822e:	10a4      	asrs	r4, r4, #2
 8008230:	42a5      	cmp	r5, r4
 8008232:	d109      	bne.n	8008248 <__libc_init_array+0x24>
 8008234:	f000 f842 	bl	80082bc <_init>
 8008238:	2500      	movs	r5, #0
 800823a:	4e0a      	ldr	r6, [pc, #40]	; (8008264 <__libc_init_array+0x40>)
 800823c:	4c0a      	ldr	r4, [pc, #40]	; (8008268 <__libc_init_array+0x44>)
 800823e:	1ba4      	subs	r4, r4, r6
 8008240:	10a4      	asrs	r4, r4, #2
 8008242:	42a5      	cmp	r5, r4
 8008244:	d105      	bne.n	8008252 <__libc_init_array+0x2e>
 8008246:	bd70      	pop	{r4, r5, r6, pc}
 8008248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800824c:	4798      	blx	r3
 800824e:	3501      	adds	r5, #1
 8008250:	e7ee      	b.n	8008230 <__libc_init_array+0xc>
 8008252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008256:	4798      	blx	r3
 8008258:	3501      	adds	r5, #1
 800825a:	e7f2      	b.n	8008242 <__libc_init_array+0x1e>
 800825c:	08008664 	.word	0x08008664
 8008260:	08008664 	.word	0x08008664
 8008264:	08008664 	.word	0x08008664
 8008268:	08008668 	.word	0x08008668

0800826c <memcpy>:
 800826c:	b510      	push	{r4, lr}
 800826e:	1e43      	subs	r3, r0, #1
 8008270:	440a      	add	r2, r1
 8008272:	4291      	cmp	r1, r2
 8008274:	d100      	bne.n	8008278 <memcpy+0xc>
 8008276:	bd10      	pop	{r4, pc}
 8008278:	f811 4b01 	ldrb.w	r4, [r1], #1
 800827c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008280:	e7f7      	b.n	8008272 <memcpy+0x6>

08008282 <memset>:
 8008282:	4603      	mov	r3, r0
 8008284:	4402      	add	r2, r0
 8008286:	4293      	cmp	r3, r2
 8008288:	d100      	bne.n	800828c <memset+0xa>
 800828a:	4770      	bx	lr
 800828c:	f803 1b01 	strb.w	r1, [r3], #1
 8008290:	e7f9      	b.n	8008286 <memset+0x4>

08008292 <strncpy>:
 8008292:	b570      	push	{r4, r5, r6, lr}
 8008294:	4604      	mov	r4, r0
 8008296:	3901      	subs	r1, #1
 8008298:	b902      	cbnz	r2, 800829c <strncpy+0xa>
 800829a:	bd70      	pop	{r4, r5, r6, pc}
 800829c:	4623      	mov	r3, r4
 800829e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80082a2:	1e56      	subs	r6, r2, #1
 80082a4:	f803 5b01 	strb.w	r5, [r3], #1
 80082a8:	b92d      	cbnz	r5, 80082b6 <strncpy+0x24>
 80082aa:	4414      	add	r4, r2
 80082ac:	42a3      	cmp	r3, r4
 80082ae:	d0f4      	beq.n	800829a <strncpy+0x8>
 80082b0:	f803 5b01 	strb.w	r5, [r3], #1
 80082b4:	e7fa      	b.n	80082ac <strncpy+0x1a>
 80082b6:	461c      	mov	r4, r3
 80082b8:	4632      	mov	r2, r6
 80082ba:	e7ed      	b.n	8008298 <strncpy+0x6>

080082bc <_init>:
 80082bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082be:	bf00      	nop
 80082c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c2:	bc08      	pop	{r3}
 80082c4:	469e      	mov	lr, r3
 80082c6:	4770      	bx	lr

080082c8 <_fini>:
 80082c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ca:	bf00      	nop
 80082cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ce:	bc08      	pop	{r3}
 80082d0:	469e      	mov	lr, r3
 80082d2:	4770      	bx	lr
