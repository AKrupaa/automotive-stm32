
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096ec  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800982c  0800982c  0001982c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b64  08009b64  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009b64  08009b64  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b64  08009b64  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b64  08009b64  00019b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b68  08009b68  00019b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003778  20000010  08009b7c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003788  08009b7c  00023788  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029829  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005004  00000000  00000000  00049862  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019c0  00000000  00000000  0004e868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001760  00000000  00000000  00050228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e4ec  00000000  00000000  00051988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cfd9  00000000  00000000  0006fe74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aa74f  00000000  00000000  0008ce4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013759c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006708  00000000  00000000  00137618  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08009814 	.word	0x08009814

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08009814 	.word	0x08009814

08000180 <h_bridge_set_left_duty>:
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

	return true;
}

void h_bridge_set_left_duty(uint8_t percent) {
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
	if (percent > 100)
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	2b64      	cmp	r3, #100	; 0x64
 800018e:	d901      	bls.n	8000194 <h_bridge_set_left_duty+0x14>
		percent = 100;
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	71fb      	strb	r3, [r7, #7]

	if (percent < 1)
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d101      	bne.n	800019e <h_bridge_set_left_duty+0x1e>
		percent = 0;
 800019a:	2300      	movs	r3, #0
 800019c:	71fb      	strb	r3, [r7, #7]

	uint32_t value = percent * htim2.Init.Period / 100;
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	4a08      	ldr	r2, [pc, #32]	; (80001c4 <h_bridge_set_left_duty+0x44>)
 80001a2:	68d2      	ldr	r2, [r2, #12]
 80001a4:	fb02 f303 	mul.w	r3, r2, r3
 80001a8:	4a07      	ldr	r2, [pc, #28]	; (80001c8 <h_bridge_set_left_duty+0x48>)
 80001aa:	fba2 2303 	umull	r2, r3, r2, r3
 80001ae:	095b      	lsrs	r3, r3, #5
 80001b0:	60fb      	str	r3, [r7, #12]
//	htim2.Instance->CCR1 = value;
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 80001b2:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <h_bridge_set_left_duty+0x44>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	68fa      	ldr	r2, [r7, #12]
 80001b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80001ba:	bf00      	nop
 80001bc:	3714      	adds	r7, #20
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	200036c8 	.word	0x200036c8
 80001c8:	51eb851f 	.word	0x51eb851f

080001cc <h_bridge_set_right_duty>:

void h_bridge_set_right_duty(uint8_t percent) {
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
	if (percent > 100)
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	2b64      	cmp	r3, #100	; 0x64
 80001da:	d901      	bls.n	80001e0 <h_bridge_set_right_duty+0x14>
		percent = 100;
 80001dc:	2364      	movs	r3, #100	; 0x64
 80001de:	71fb      	strb	r3, [r7, #7]

	if (percent < 1)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d101      	bne.n	80001ea <h_bridge_set_right_duty+0x1e>
		percent = 0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	71fb      	strb	r3, [r7, #7]

	uint32_t value = percent * htim3.Init.Period / 100;
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	4a08      	ldr	r2, [pc, #32]	; (8000210 <h_bridge_set_right_duty+0x44>)
 80001ee:	68d2      	ldr	r2, [r2, #12]
 80001f0:	fb02 f303 	mul.w	r3, r2, r3
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <h_bridge_set_right_duty+0x48>)
 80001f6:	fba2 2303 	umull	r2, r3, r2, r3
 80001fa:	095b      	lsrs	r3, r3, #5
 80001fc:	60fb      	str	r3, [r7, #12]
//	htim3.Instance->CCR3 = value;
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 80001fe:	4b04      	ldr	r3, [pc, #16]	; (8000210 <h_bridge_set_right_duty+0x44>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	68fa      	ldr	r2, [r7, #12]
 8000204:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	20003650 	.word	0x20003650
 8000214:	51eb851f 	.word	0x51eb851f

08000218 <h_bridge_cw_left>:

void h_bridge_cw_left(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 800021c:	2201      	movs	r2, #1
 800021e:	2102      	movs	r1, #2
 8000220:	4804      	ldr	r0, [pc, #16]	; (8000234 <h_bridge_cw_left+0x1c>)
 8000222:	f002 fc3b 	bl	8002a9c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 8000226:	2200      	movs	r2, #0
 8000228:	2104      	movs	r1, #4
 800022a:	4802      	ldr	r0, [pc, #8]	; (8000234 <h_bridge_cw_left+0x1c>)
 800022c:	f002 fc36 	bl	8002a9c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40020800 	.word	0x40020800

08000238 <h_bridge_cw_right>:

void h_bridge_cw_right(void) {
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 800023c:	2201      	movs	r2, #1
 800023e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000242:	4805      	ldr	r0, [pc, #20]	; (8000258 <h_bridge_cw_right+0x20>)
 8000244:	f002 fc2a 	bl	8002a9c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 8000248:	2200      	movs	r2, #0
 800024a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800024e:	4803      	ldr	r0, [pc, #12]	; (800025c <h_bridge_cw_right+0x24>)
 8000250:	f002 fc24 	bl	8002a9c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40020000 	.word	0x40020000
 800025c:	40020800 	.word	0x40020800

08000260 <h_bridge_ccw_left>:

void h_bridge_ccw_left(void) {
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 8000264:	2200      	movs	r2, #0
 8000266:	2102      	movs	r1, #2
 8000268:	4804      	ldr	r0, [pc, #16]	; (800027c <h_bridge_ccw_left+0x1c>)
 800026a:	f002 fc17 	bl	8002a9c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 800026e:	2201      	movs	r2, #1
 8000270:	2104      	movs	r1, #4
 8000272:	4802      	ldr	r0, [pc, #8]	; (800027c <h_bridge_ccw_left+0x1c>)
 8000274:	f002 fc12 	bl	8002a9c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40020800 	.word	0x40020800

08000280 <h_bridge_ccw_right>:

void h_bridge_ccw_right(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028a:	4805      	ldr	r0, [pc, #20]	; (80002a0 <h_bridge_ccw_right+0x20>)
 800028c:	f002 fc06 	bl	8002a9c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <h_bridge_ccw_right+0x24>)
 8000298:	f002 fc00 	bl	8002a9c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40020000 	.word	0x40020000
 80002a4:	40020800 	.word	0x40020800

080002a8 <h_bridge_coast>:

/// Lets the motor coast
void h_bridge_coast(void) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 80002ac:	2200      	movs	r2, #0
 80002ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b2:	480a      	ldr	r0, [pc, #40]	; (80002dc <h_bridge_coast+0x34>)
 80002b4:	f002 fbf2 	bl	8002a9c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 80002b8:	2200      	movs	r2, #0
 80002ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002be:	4808      	ldr	r0, [pc, #32]	; (80002e0 <h_bridge_coast+0x38>)
 80002c0:	f002 fbec 	bl	8002a9c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 80002c4:	2200      	movs	r2, #0
 80002c6:	2102      	movs	r1, #2
 80002c8:	4805      	ldr	r0, [pc, #20]	; (80002e0 <h_bridge_coast+0x38>)
 80002ca:	f002 fbe7 	bl	8002a9c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 80002ce:	2200      	movs	r2, #0
 80002d0:	2104      	movs	r1, #4
 80002d2:	4803      	ldr	r0, [pc, #12]	; (80002e0 <h_bridge_coast+0x38>)
 80002d4:	f002 fbe2 	bl	8002a9c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40020000 	.word	0x40020000
 80002e0:	40020800 	.word	0x40020800

080002e4 <ble_send_data>:

/*
 * PUBLIC ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

bool ble_send_data(char *pData, uint16_t size) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	807b      	strh	r3, [r7, #2]
	ble_turn_on_transmittion;
 80002f0:	2200      	movs	r2, #0
 80002f2:	2110      	movs	r1, #16
 80002f4:	480e      	ldr	r0, [pc, #56]	; (8000330 <ble_send_data+0x4c>)
 80002f6:	f002 fbd1 	bl	8002a9c <HAL_GPIO_WritePin>
	if (HAL_UART_Transmit(&huart3, (uint8_t*) pData, size, 100) != HAL_OK) {
 80002fa:	887a      	ldrh	r2, [r7, #2]
 80002fc:	2364      	movs	r3, #100	; 0x64
 80002fe:	6879      	ldr	r1, [r7, #4]
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <ble_send_data+0x50>)
 8000302:	f005 fe15 	bl	8005f30 <HAL_UART_Transmit>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d006      	beq.n	800031a <ble_send_data+0x36>
		ble_turn_off_transmittion;
 800030c:	2201      	movs	r2, #1
 800030e:	2110      	movs	r1, #16
 8000310:	4807      	ldr	r0, [pc, #28]	; (8000330 <ble_send_data+0x4c>)
 8000312:	f002 fbc3 	bl	8002a9c <HAL_GPIO_WritePin>
		return false;
 8000316:	2300      	movs	r3, #0
 8000318:	e005      	b.n	8000326 <ble_send_data+0x42>
	}
	ble_turn_off_transmittion;
 800031a:	2201      	movs	r2, #1
 800031c:	2110      	movs	r1, #16
 800031e:	4804      	ldr	r0, [pc, #16]	; (8000330 <ble_send_data+0x4c>)
 8000320:	f002 fbbc 	bl	8002a9c <HAL_GPIO_WritePin>
	return true;
 8000324:	2301      	movs	r3, #1
}
 8000326:	4618      	mov	r0, r3
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40020800 	.word	0x40020800
 8000334:	20003704 	.word	0x20003704

08000338 <ble_receive_data>:

bool ble_receive_data(char *pData) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	ble_turn_on_transmittion;
 8000340:	2200      	movs	r2, #0
 8000342:	2110      	movs	r1, #16
 8000344:	480b      	ldr	r0, [pc, #44]	; (8000374 <ble_receive_data+0x3c>)
 8000346:	f002 fba9 	bl	8002a9c <HAL_GPIO_WritePin>
	uint16_t size = sizeof(pData);
 800034a:	2304      	movs	r3, #4
 800034c:	81fb      	strh	r3, [r7, #14]

	if (HAL_UART_Receive(&huart3, (uint8_t*) pData, size - 1, 1000) != HAL_OK) {
 800034e:	89fb      	ldrh	r3, [r7, #14]
 8000350:	3b01      	subs	r3, #1
 8000352:	b29a      	uxth	r2, r3
 8000354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000358:	6879      	ldr	r1, [r7, #4]
 800035a:	4807      	ldr	r0, [pc, #28]	; (8000378 <ble_receive_data+0x40>)
 800035c:	f005 fe81 	bl	8006062 <HAL_UART_Receive>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <ble_receive_data+0x32>
//		ble_turn_off_transmittion;
		return false;
 8000366:	2300      	movs	r3, #0
 8000368:	e000      	b.n	800036c <ble_receive_data+0x34>
	}
//	ble_turn_off_transmittion;
	return true;
 800036a:	2301      	movs	r3, #1
}
 800036c:	4618      	mov	r0, r3
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40020800 	.word	0x40020800
 8000378:	20003704 	.word	0x20003704

0800037c <QMC5883L_Read_Reg>:
	uint16_t buf = ((buff[1] << 8) | buff[0]);	// U2
	buf = (~buf) + 1; // decimal
	return (int) buf / 100; // our value
}

uint8_t QMC5883L_Read_Reg(uint8_t reg) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af04      	add	r7, sp, #16
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[1];
	HAL_I2C_Mem_Read(QMC5883L_I2C_PORT, QMC5883L_ADDRESS, reg, 1, Buffer, 1,
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	b29a      	uxth	r2, r3
 800038a:	230a      	movs	r3, #10
 800038c:	9302      	str	r3, [sp, #8]
 800038e:	2301      	movs	r3, #1
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	f107 030c 	add.w	r3, r7, #12
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2301      	movs	r3, #1
 800039a:	213c      	movs	r1, #60	; 0x3c
 800039c:	4803      	ldr	r0, [pc, #12]	; (80003ac <QMC5883L_Read_Reg+0x30>)
 800039e:	f002 fe6f 	bl	8003080 <HAL_I2C_Mem_Read>
			10);
	return Buffer[0];
 80003a2:	7b3b      	ldrb	r3, [r7, #12]
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	3710      	adds	r7, #16
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	200035c0 	.word	0x200035c0

080003b0 <QMC5883L_Write_Reg>:

void QMC5883L_Write_Reg(uint8_t reg, uint8_t data) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af02      	add	r7, sp, #8
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
	uint8_t Buffer[2] = { reg, data };
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	733b      	strb	r3, [r7, #12]
 80003c4:	79bb      	ldrb	r3, [r7, #6]
 80003c6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(QMC5883L_I2C_PORT, QMC5883L_ADDRESS, Buffer, 2, 10);
 80003c8:	f107 020c 	add.w	r2, r7, #12
 80003cc:	230a      	movs	r3, #10
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	2302      	movs	r3, #2
 80003d2:	213c      	movs	r1, #60	; 0x3c
 80003d4:	4803      	ldr	r0, [pc, #12]	; (80003e4 <QMC5883L_Write_Reg+0x34>)
 80003d6:	f002 fd55 	bl	8002e84 <HAL_I2C_Master_Transmit>
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	200035c0 	.word	0x200035c0

080003e8 <QMC5883L_Read_Data>:

void QMC5883L_Read_Data(int16_t *MagX, int16_t *MagY, int16_t *MagZ) // (-32768 / +32768)
{
 80003e8:	b590      	push	{r4, r7, lr}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 80003f4:	2004      	movs	r0, #4
 80003f6:	f7ff ffc1 	bl	800037c <QMC5883L_Read_Reg>
 80003fa:	4603      	mov	r3, r0
 80003fc:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_MSB)) << 8));
 80003fe:	2003      	movs	r0, #3
 8000400:	f7ff ffbc 	bl	800037c <QMC5883L_Read_Reg>
 8000404:	4603      	mov	r3, r0
 8000406:	021b      	lsls	r3, r3, #8
 8000408:	b21b      	sxth	r3, r3
 800040a:	4323      	orrs	r3, r4
 800040c:	b21a      	sxth	r2, r3
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	801a      	strh	r2, [r3, #0]
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 8000412:	2008      	movs	r0, #8
 8000414:	f7ff ffb2 	bl	800037c <QMC5883L_Read_Reg>
 8000418:	4603      	mov	r3, r0
 800041a:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_MSB)) << 8));
 800041c:	2007      	movs	r0, #7
 800041e:	f7ff ffad 	bl	800037c <QMC5883L_Read_Reg>
 8000422:	4603      	mov	r3, r0
 8000424:	021b      	lsls	r3, r3, #8
 8000426:	b21b      	sxth	r3, r3
 8000428:	4323      	orrs	r3, r4
 800042a:	b21a      	sxth	r2, r3
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	801a      	strh	r2, [r3, #0]
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 8000430:	2006      	movs	r0, #6
 8000432:	f7ff ffa3 	bl	800037c <QMC5883L_Read_Reg>
 8000436:	4603      	mov	r3, r0
 8000438:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_MSB)) << 8));
 800043a:	2005      	movs	r0, #5
 800043c:	f7ff ff9e 	bl	800037c <QMC5883L_Read_Reg>
 8000440:	4603      	mov	r3, r0
 8000442:	021b      	lsls	r3, r3, #8
 8000444:	b21b      	sxth	r3, r3
 8000446:	4323      	orrs	r3, r4
 8000448:	b21a      	sxth	r2, r3
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	801a      	strh	r2, [r3, #0]
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bd90      	pop	{r4, r7, pc}

08000456 <QMC5883L_Initialize>:
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_TEMP_READ_MSB)) << 8))
			/ 100;
}

void QMC5883L_Initialize(_qmc5883l_MODE MODE, _qmc5883l_ODR ODR,
		_qmc5883l_RNG RNG, _qmc5883l_OSR OSR) {
 8000456:	b590      	push	{r4, r7, lr}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	4604      	mov	r4, r0
 800045e:	4608      	mov	r0, r1
 8000460:	4611      	mov	r1, r2
 8000462:	461a      	mov	r2, r3
 8000464:	4623      	mov	r3, r4
 8000466:	71fb      	strb	r3, [r7, #7]
 8000468:	4603      	mov	r3, r0
 800046a:	71bb      	strb	r3, [r7, #6]
 800046c:	460b      	mov	r3, r1
 800046e:	717b      	strb	r3, [r7, #5]
 8000470:	4613      	mov	r3, r2
 8000472:	713b      	strb	r3, [r7, #4]
	QMC5883L_Write_Reg(QMC5883L_CONFIG_3, 0x01);
 8000474:	2101      	movs	r1, #1
 8000476:	200b      	movs	r0, #11
 8000478:	f7ff ff9a 	bl	80003b0 <QMC5883L_Write_Reg>
	QMC5883L_Write_Reg(QMC5883L_CONFIG_1, MODE | ODR | RNG | OSR);
 800047c:	79fa      	ldrb	r2, [r7, #7]
 800047e:	79bb      	ldrb	r3, [r7, #6]
 8000480:	4313      	orrs	r3, r2
 8000482:	b2da      	uxtb	r2, r3
 8000484:	797b      	ldrb	r3, [r7, #5]
 8000486:	4313      	orrs	r3, r2
 8000488:	b2da      	uxtb	r2, r3
 800048a:	793b      	ldrb	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	b2db      	uxtb	r3, r3
 8000490:	4619      	mov	r1, r3
 8000492:	2009      	movs	r0, #9
 8000494:	f7ff ff8c 	bl	80003b0 <QMC5883L_Write_Reg>
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bd90      	pop	{r4, r7, pc}

080004a0 <QMC5883L_InterruptConfig>:

void QMC5883L_Reset() {
	QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x81);
}

void QMC5883L_InterruptConfig(_qmc5883l_INT INT) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
	if (INT == INTERRUPT_ENABLE) {
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d104      	bne.n	80004ba <QMC5883L_InterruptConfig+0x1a>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x00);
 80004b0:	2100      	movs	r1, #0
 80004b2:	200a      	movs	r0, #10
 80004b4:	f7ff ff7c 	bl	80003b0 <QMC5883L_Write_Reg>
	} else {
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
	}
}
 80004b8:	e003      	b.n	80004c2 <QMC5883L_InterruptConfig+0x22>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
 80004ba:	2101      	movs	r1, #1
 80004bc:	200a      	movs	r0, #10
 80004be:	f7ff ff77 	bl	80003b0 <QMC5883L_Write_Reg>
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}

080004ca <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < /*mod_N*/mod_0; i++) {
 80004d8:	2300      	movs	r3, #0
 80004da:	807b      	strh	r3, [r7, #2]
 80004dc:	bf00      	nop
		}

		modsToInit++;
	}

	if (modsToInit != successCnt) {
 80004de:	88ba      	ldrh	r2, [r7, #4]
 80004e0:	88fb      	ldrh	r3, [r7, #6]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d000      	beq.n	80004e8 <device_init+0x1e>
		// some kind of error
		while (1)
 80004e6:	e7fe      	b.n	80004e6 <device_init+0x1c>
			; //TODO: call some error handler
	}

}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
	...

080004f4 <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b08a      	sub	sp, #40	; 0x28
 80004f8:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 80004fa:	2300      	movs	r3, #0
 80004fc:	77fb      	strb	r3, [r7, #31]
 80004fe:	e02c      	b.n	800055a <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 8000500:	7ffa      	ldrb	r2, [r7, #31]
 8000502:	4613      	mov	r3, r2
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	4413      	add	r3, r2
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	461a      	mov	r2, r3
 800050c:	4b47      	ldr	r3, [pc, #284]	; (800062c <rt_init+0x138>)
 800050e:	4413      	add	r3, r2
 8000510:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 8000512:	7ffb      	ldrb	r3, [r7, #31]
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4a46      	ldr	r2, [pc, #280]	; (8000630 <rt_init+0x13c>)
 8000518:	4413      	add	r3, r2
 800051a:	603b      	str	r3, [r7, #0]
		if (def->active) {
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	7c9b      	ldrb	r3, [r3, #18]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d014      	beq.n	800054e <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6818      	ldr	r0, [r3, #0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6859      	ldr	r1, [r3, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	8a1c      	ldrh	r4, [r3, #16]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	689d      	ldr	r5, [r3, #8]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	683a      	ldr	r2, [r7, #0]
 800053a:	9201      	str	r2, [sp, #4]
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	462b      	mov	r3, r5
 8000540:	4622      	mov	r2, r4
 8000542:	f007 f980 	bl	8007846 <xTaskCreate>
 8000546:	4603      	mov	r3, r0
 8000548:	2b01      	cmp	r3, #1
 800054a:	d003      	beq.n	8000554 <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 800054c:	e7fe      	b.n	800054c <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000554:	7ffb      	ldrb	r3, [r7, #31]
 8000556:	3301      	adds	r3, #1
 8000558:	77fb      	strb	r3, [r7, #31]
 800055a:	7ffb      	ldrb	r3, [r7, #31]
 800055c:	2b04      	cmp	r3, #4
 800055e:	d9cf      	bls.n	8000500 <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 8000560:	2300      	movs	r3, #0
 8000562:	77bb      	strb	r3, [r7, #30]
 8000564:	e01c      	b.n	80005a0 <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 8000566:	7fbb      	ldrb	r3, [r7, #30]
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	4a32      	ldr	r2, [pc, #200]	; (8000634 <rt_init+0x140>)
 800056c:	4413      	add	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 8000570:	7fbb      	ldrb	r3, [r7, #30]
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4a30      	ldr	r2, [pc, #192]	; (8000638 <rt_init+0x144>)
 8000576:	4413      	add	r3, r2
 8000578:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	6818      	ldr	r0, [r3, #0]
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	2200      	movs	r2, #0
 8000584:	4619      	mov	r1, r3
 8000586:	f006 fccf 	bl	8006f28 <xQueueGenericCreate>
 800058a:	4602      	mov	r2, r0
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d100      	bne.n	800059a <rt_init+0xa6>
				== 0) {
			while (1)
 8000598:	e7fe      	b.n	8000598 <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 800059a:	7fbb      	ldrb	r3, [r7, #30]
 800059c:	3301      	adds	r3, #1
 800059e:	77bb      	strb	r3, [r7, #30]
 80005a0:	7fbb      	ldrb	r3, [r7, #30]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d9df      	bls.n	8000566 <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 80005a6:	2300      	movs	r3, #0
 80005a8:	777b      	strb	r3, [r7, #29]
 80005aa:	e020      	b.n	80005ee <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 80005ac:	7f7b      	ldrb	r3, [r7, #29]
 80005ae:	011b      	lsls	r3, r3, #4
 80005b0:	4a22      	ldr	r2, [pc, #136]	; (800063c <rt_init+0x148>)
 80005b2:	4413      	add	r3, r2
 80005b4:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 80005b6:	7f7b      	ldrb	r3, [r7, #29]
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4a21      	ldr	r2, [pc, #132]	; (8000640 <rt_init+0x14c>)
 80005bc:	4413      	add	r3, r2
 80005be:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	6859      	ldr	r1, [r3, #4]
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	f008 f9f4 	bl	80089c0 <xTimerCreate>
 80005d8:	4602      	mov	r2, r0
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d100      	bne.n	80005e8 <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 80005e6:	e7fe      	b.n	80005e6 <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 80005e8:	7f7b      	ldrb	r3, [r7, #29]
 80005ea:	3301      	adds	r3, #1
 80005ec:	777b      	strb	r3, [r7, #29]
 80005ee:	7f7b      	ldrb	r3, [r7, #29]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0db      	beq.n	80005ac <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 80005f4:	2300      	movs	r3, #0
 80005f6:	773b      	strb	r3, [r7, #28]
 80005f8:	e011      	b.n	800061e <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 80005fa:	7f3b      	ldrb	r3, [r7, #28]
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	4a11      	ldr	r2, [pc, #68]	; (8000644 <rt_init+0x150>)
 8000600:	4413      	add	r3, r2
 8000602:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 8000604:	f006 f956 	bl	80068b4 <xEventGroupCreate>
 8000608:	4602      	mov	r2, r0
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d100      	bne.n	8000618 <rt_init+0x124>
			while (1)
 8000616:	e7fe      	b.n	8000616 <rt_init+0x122>
			evgroup++) {
 8000618:	7f3b      	ldrb	r3, [r7, #28]
 800061a:	3301      	adds	r3, #1
 800061c:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 800061e:	7f3b      	ldrb	r3, [r7, #28]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d9ea      	bls.n	80005fa <rt_init+0x106>
				;
		}
	}

}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bdb0      	pop	{r4, r5, r7, pc}
 800062c:	08009a88 	.word	0x08009a88
 8000630:	2000353c 	.word	0x2000353c
 8000634:	08009aec 	.word	0x08009aec
 8000638:	20003560 	.word	0x20003560
 800063c:	08009b0c 	.word	0x08009b0c
 8000640:	20003550 	.word	0x20003550
 8000644:	20003554 	.word	0x20003554

08000648 <rt_evbitwait_any>:

uint32_t rt_evbitwait_any(rt_evgroup_t Ev) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af02      	add	r7, sp, #8
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a09      	ldr	r2, [pc, #36]	; (800067c <rt_evbitwait_any+0x34>)
 8000656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065a:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdTRUE, pdFALSE, portMAX_DELAY);
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	2201      	movs	r2, #1
 8000666:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f006 f93c 	bl	80068e8 <xEventGroupWaitBits>
 8000670:	4603      	mov	r3, r0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20003554 	.word	0x20003554

08000680 <rt_evbit_set>:

void rt_evbit_set(rt_evgroup_t Ev, uint32_t bit) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 800068c:	2201      	movs	r2, #1
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	4a05      	ldr	r2, [pc, #20]	; (80006b0 <rt_evbit_set+0x30>)
 800069a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069e:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBits(Evh, msk);
 80006a0:	68f9      	ldr	r1, [r7, #12]
 80006a2:	68b8      	ldr	r0, [r7, #8]
 80006a4:	f006 f9ea 	bl	8006a7c <xEventGroupSetBits>
}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20003554 	.word	0x20003554

080006b4 <rt_evbit_set_from_ISR>:

void rt_evbit_set_from_ISR(rt_evgroup_t Ev, uint32_t bit) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 80006c0:	2201      	movs	r2, #1
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
 80006c8:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <rt_evbit_set_from_ISR+0x34>)
 80006ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d2:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBitsFromISR(Evh, msk, pdFALSE);
 80006d4:	2200      	movs	r2, #0
 80006d6:	68f9      	ldr	r1, [r7, #12]
 80006d8:	68b8      	ldr	r0, [r7, #8]
 80006da:	f006 fa87 	bl	8006bec <xEventGroupSetBitsFromISR>
	portYIELD_FROM_ISR(pdFALSE);
}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20003554 	.word	0x20003554

080006ec <rt_enqueue_ISR>:
	}

	return false;
}

bool rt_enqueue_ISR(rt_queue_t Q, void const *bf) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <rt_enqueue_ISR+0x3c>)
 80006fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000700:	60fb      	str	r3, [r7, #12]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
	if (xQueueSendToBackFromISR(Qh, bf, &xHigherPriorityTaskWoken) == pdPASS) {
 8000706:	f107 0208 	add.w	r2, r7, #8
 800070a:	2300      	movs	r3, #0
 800070c:	6839      	ldr	r1, [r7, #0]
 800070e:	68f8      	ldr	r0, [r7, #12]
 8000710:	f006 fd64 	bl	80071dc <xQueueGenericSendFromISR>
 8000714:	4603      	mov	r3, r0
 8000716:	2b01      	cmp	r3, #1
 8000718:	d101      	bne.n	800071e <rt_enqueue_ISR+0x32>
		return true;
 800071a:	2301      	movs	r3, #1
 800071c:	e000      	b.n	8000720 <rt_enqueue_ISR+0x34>
	}

	return false;
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20003560 	.word	0x20003560

0800072c <rt_dequeue>:

bool rt_dequeue(rt_queue_t Q, void *bf) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	6039      	str	r1, [r7, #0]
 8000736:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <rt_dequeue+0x44>)
 800073c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000740:	60fb      	str	r3, [r7, #12]
	TickType_t to = rt_queue_def[Q].timeout_deq;
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <rt_dequeue+0x48>)
 8000746:	011b      	lsls	r3, r3, #4
 8000748:	4413      	add	r3, r2
 800074a:	330c      	adds	r3, #12
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	60bb      	str	r3, [r7, #8]

	if (xQueueReceive(Qh, bf, to) == pdPASS) {
 8000750:	68ba      	ldr	r2, [r7, #8]
 8000752:	6839      	ldr	r1, [r7, #0]
 8000754:	68f8      	ldr	r0, [r7, #12]
 8000756:	f006 fdd5 	bl	8007304 <xQueueReceive>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d101      	bne.n	8000764 <rt_dequeue+0x38>
		return true;
 8000760:	2301      	movs	r3, #1
 8000762:	e000      	b.n	8000766 <rt_dequeue+0x3a>
	}

	return false;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20003560 	.word	0x20003560
 8000774:	08009aec 	.word	0x08009aec

08000778 <rt_queue_peek>:

bool rt_queue_peek(rt_queue_t Q, void *bf) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	71fb      	strb	r3, [r7, #7]

	QueueHandle_t Qh = rt_queues[Q];
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	4a09      	ldr	r2, [pc, #36]	; (80007ac <rt_queue_peek+0x34>)
 8000788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078c:	60fb      	str	r3, [r7, #12]

	if (xQueueReceive(Qh, bf, pdMS_TO_TICKS(portMAX_DELAY)) == pdPASS) {
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <rt_queue_peek+0x38>)
 8000790:	6839      	ldr	r1, [r7, #0]
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	f006 fdb6 	bl	8007304 <xQueueReceive>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d101      	bne.n	80007a2 <rt_queue_peek+0x2a>
		return true;
 800079e:	2301      	movs	r3, #1
 80007a0:	e000      	b.n	80007a4 <rt_queue_peek+0x2c>
	}

	return false;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20003560 	.word	0x20003560
 80007b0:	00418936 	.word	0x00418936

080007b4 <rt_timer_start_ISR>:

bool rt_timer_start(rt_timer_t t, uint32_t timeout) {
	return xTimerStart(rt_timers[t], timeout);
}

bool rt_timer_start_ISR(rt_timer_t t, BaseType_t *pxHigherPriorityTaskWoken) {
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	4603      	mov	r3, r0
 80007bc:	6039      	str	r1, [r7, #0]
 80007be:	71fb      	strb	r3, [r7, #7]
	return xTimerStartFromISR(rt_timers[t], pxHigherPriorityTaskWoken);
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <rt_timer_start_ISR+0x3c>)
 80007c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80007c8:	f007 fbd4 	bl	8007f74 <xTaskGetTickCountFromISR>
 80007cc:	4602      	mov	r2, r0
 80007ce:	2300      	movs	r3, #0
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2106      	movs	r1, #6
 80007d6:	4620      	mov	r0, r4
 80007d8:	f008 f944 	bl	8008a64 <xTimerGenericCommand>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2301      	movne	r3, #1
 80007e4:	2300      	moveq	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	20003550 	.word	0x20003550

080007f4 <timer_BLE>:
// working all the time, checking if something is received or sending data to android device

/* ************************************************************************** */
// callback
/* ************************************************************************** */
void timer_BLE(TimerHandle_t xTimer) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	char ble_pData[BLE_MAX_SIZE];
	memset(ble_pData, 1, BLE_MAX_SIZE);
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	2218      	movs	r2, #24
 8000802:	2101      	movs	r1, #1
 8000804:	4618      	mov	r0, r3
 8000806:	f008 fffc 	bl	8009802 <memset>
	ble_receive_data(ble_pData);
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fd92 	bl	8000338 <ble_receive_data>
	xQueueBleData ble_queue = { 0 };
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]

	ble_queue.info = ble_received;
 8000818:	2300      	movs	r3, #0
 800081a:	733b      	strb	r3, [r7, #12]

	memcpy(&ble_queue.command, ble_pData, 1);
 800081c:	7c3b      	ldrb	r3, [r7, #16]
 800081e:	737b      	strb	r3, [r7, #13]
	memcpy(&ble_queue.valueReg1, ble_pData + 1, 1);
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	3301      	adds	r3, #1
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	73bb      	strb	r3, [r7, #14]
	memcpy(&ble_queue.valueReg2, ble_pData + 2, 1);
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	3302      	adds	r3, #2
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	73fb      	strb	r3, [r7, #15]

	rt_enqueue_ISR(rt_queue_ble, &ble_queue);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff ff56 	bl	80006ec <rt_enqueue_ISR>

}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <task_ble>:

void task_ble(void *pvParameters) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

//	int i = 0;
//	const TickType_t xDelay1000ms = pdMS_TO_TICKS(5000);
	bool status;
	xQueueBleData receivedBleData = { 0 };
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
	char ble_pData[BLE_MAX_SIZE] = { 0 };
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
 8000864:	615a      	str	r2, [r3, #20]
	for (;;) {

//		vTaskDelay(xDelay1000ms);

		status = rt_queue_peek(rt_queue_ble, &receivedBleData);
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	4619      	mov	r1, r3
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff ff83 	bl	8000778 <rt_queue_peek>
 8000872:	4603      	mov	r3, r0
 8000874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (status) {
 8000878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800087c:	2b00      	cmp	r3, #0
 800087e:	d0f2      	beq.n	8000866 <task_ble+0x1e>
			if (receivedBleData.info == ble_received) {
 8000880:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d11d      	bne.n	80008c4 <task_ble+0x7c>
//				memcpy(ble_pData, receivedBleData.value, BLE_MAX_SIZE);

				switch (receivedBleData.command) {
 8000888:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800088c:	2b02      	cmp	r3, #2
 800088e:	d008      	beq.n	80008a2 <task_ble+0x5a>
 8000890:	2b03      	cmp	r3, #3
 8000892:	d00b      	beq.n	80008ac <task_ble+0x64>
 8000894:	2b01      	cmp	r3, #1
 8000896:	d10e      	bne.n	80008b6 <task_ble+0x6e>
				case BLE_RECEIVED_DO_NOTHING:
					rt_evbit_set(rt_evgroup_state_machine,
 8000898:	2100      	movs	r1, #0
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff fef0 	bl	8000680 <rt_evbit_set>
							evgroup_state_m_do_nothing);
					break;
 80008a0:	e011      	b.n	80008c6 <task_ble+0x7e>
				case BLE_RECEIVED_AUTO_MANUAL:
					rt_evbit_set(rt_evgroup_state_machine,
 80008a2:	2101      	movs	r1, #1
 80008a4:	2001      	movs	r0, #1
 80008a6:	f7ff feeb 	bl	8000680 <rt_evbit_set>
							evgroup_state_m_auto_manual);
					break;
 80008aa:	e00c      	b.n	80008c6 <task_ble+0x7e>
				case BLE_RECEIVED_MOVEMENT:
					rt_evbit_set(rt_evgroup_state_machine,
 80008ac:	2102      	movs	r1, #2
 80008ae:	2001      	movs	r0, #1
 80008b0:	f7ff fee6 	bl	8000680 <rt_evbit_set>
							evgroup_state_m_movement);
					break;
 80008b4:	e007      	b.n	80008c6 <task_ble+0x7e>
				default:
					// unknow -> free
					rt_dequeue(rt_queue_ble, &receivedBleData);
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	4619      	mov	r1, r3
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff ff35 	bl	800072c <rt_dequeue>
					break;
 80008c2:	e000      	b.n	80008c6 <task_ble+0x7e>
				}

			}
 80008c4:	bf00      	nop

			if (receivedBleData.info == ble_transmit) {
 80008c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d1cb      	bne.n	8000866 <task_ble+0x1e>

//				memcpy(ble_pData, data + sizeof(Śmieci),4);

				memcpy(ble_pData, &receivedBleData.command, 1);
 80008ce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80008d2:	723b      	strb	r3, [r7, #8]
				memcpy(ble_pData + 1, &receivedBleData.valueReg1, 1);
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	3301      	adds	r3, #1
 80008da:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80008de:	701a      	strb	r2, [r3, #0]
				memcpy(ble_pData + 2, &receivedBleData.valueReg2, 1);
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	3302      	adds	r3, #2
 80008e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80008ea:	701a      	strb	r2, [r3, #0]
//				memcpy(ble_pData + 3, &receivedBleData.valueReg3, 1);
//				memcpy(ble_pData + 4, &receivedBleData.valueReg4, 1);

				ble_send_data(ble_pData, BLE_MAX_SIZE);
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	2118      	movs	r1, #24
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fcf6 	bl	80002e4 <ble_send_data>
		status = rt_queue_peek(rt_queue_ble, &receivedBleData);
 80008f8:	e7b5      	b.n	8000866 <task_ble+0x1e>

080008fa <task_eyes>:
 *      Author: Arkadiusz
 */

//#include "task_eyes.h"

void task_eyes(void *pvParameters) {
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 8000902:	e7fe      	b.n	8000902 <task_eyes+0x8>

08000904 <task_memory>:
 *      Author: Arkadiusz
 */

//#include "task_memory.h"

void task_memory(void *pvParameters) {
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 800090c:	e7fe      	b.n	800090c <task_memory+0x8>
	...

08000910 <HAL_GPIO_EXTI_Callback>:
static uint32_t ultrasound_time = 0U;
bool ultrasound_was = false;
bool ultrasound_done = false;
uint8_t pData[BLE_MAX_SIZE];
// interrupt pin callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
//	IRQ_ULTRASOUND_ECHO_Pin
	if (GPIO_Pin & IRQ_ULTRASOUND_ECHO_Pin) {
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	2b00      	cmp	r3, #0
 8000922:	d01e      	beq.n	8000962 <HAL_GPIO_EXTI_Callback+0x52>

		if (ultrasound_was == false) {
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_GPIO_EXTI_Callback+0x78>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	f083 0301 	eor.w	r3, r3, #1
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d008      	beq.n	8000944 <HAL_GPIO_EXTI_Callback+0x34>
			ultrasound_time = HAL_GetTick();
 8000932:	f000 ffeb 	bl	800190c <HAL_GetTick>
 8000936:	4602      	mov	r2, r0
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_GPIO_EXTI_Callback+0x7c>)
 800093a:	601a      	str	r2, [r3, #0]
			ultrasound_was = true;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_GPIO_EXTI_Callback+0x78>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	e00e      	b.n	8000962 <HAL_GPIO_EXTI_Callback+0x52>
		} else {
			ultrasound_time = HAL_GetTick() - ultrasound_time;
 8000944:	f000 ffe2 	bl	800190c <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <HAL_GPIO_EXTI_Callback+0x7c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000952:	6013      	str	r3, [r2, #0]
			ultrasound_was = false;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_GPIO_EXTI_Callback+0x78>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
			rt_evbit_set_from_ISR(rt_evgroup_sensors,
 800095a:	2100      	movs	r1, #0
 800095c:	2000      	movs	r0, #0
 800095e:	f7ff fea9 	bl	80006b4 <rt_evbit_set_from_ISR>
//			ultrasound_done = true;
		}
	}

//	BLE INTERRUPT -> SOMETHING IS RECEIVED
	if (GPIO_Pin & IRQ_BLE_Pin) {
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x70>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]

//		ble_receive_data(pData);
		pxHigherPriorityTaskWoken = pdTRUE;
 8000970:	2301      	movs	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
		rt_timer_start_ISR(rt_timer_BLE, &pxHigherPriorityTaskWoken);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4619      	mov	r1, r3
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff ff1a 	bl	80007b4 <rt_timer_start_ISR>
//			xTimerStartFromISR(rt_timers[T], pxHigherPriorityTaskWoken);

	}
}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000030 	.word	0x20000030
 800098c:	2000002c 	.word	0x2000002c

08000990 <task_sensors>:

void task_sensors(void *pvParameters) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]

//	uint32_t evgroup = 0;

// TODO: delete this line!
//	magnetometer_init();
	QMC5883L_Initialize(MODE_CONTROL_CONTINUOUS, OUTPUT_DATA_RATE_200HZ,
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	2200      	movs	r2, #0
 800099c:	210c      	movs	r1, #12
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff fd59 	bl	8000456 <QMC5883L_Initialize>
			FULL_SCALE_2G, OVER_SAMPLE_RATIO_128);
	QMC5883L_InterruptConfig(INTERRUPT_DISABLE);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f7ff fd7b 	bl	80004a0 <QMC5883L_InterruptConfig>

	//Mode Register
	//Continuous-Measurement Mode
	QMC5883L_Write_Reg(0x02, 0x00);
 80009aa:	2100      	movs	r1, #0
 80009ac:	2002      	movs	r0, #2
 80009ae:	f7ff fcff 	bl	80003b0 <QMC5883L_Write_Reg>
		// na podstawie na danych zareaguj :)

		// jakis tam bit do ustawienia, np skret w lewo - uzupelnic
//			rt_evbit_set(rt_evgroup_state_machine, (1 << 8));
//		}
		int16_t X = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	823b      	strh	r3, [r7, #16]
		int16_t Y = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	81fb      	strh	r3, [r7, #14]
		int16_t Z = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	81bb      	strh	r3, [r7, #12]

		uint8_t status = QMC5883L_Read_Reg(0x09);
 80009be:	2009      	movs	r0, #9
 80009c0:	f7ff fcdc 	bl	800037c <QMC5883L_Read_Reg>
 80009c4:	4603      	mov	r3, r0
 80009c6:	75fb      	strb	r3, [r7, #23]
		uint8_t temp1 = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	75bb      	strb	r3, [r7, #22]
		uint8_t temp2 = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	757b      	strb	r3, [r7, #21]

		temp1 = QMC5883L_Read_Reg(0x07);
 80009d0:	2007      	movs	r0, #7
 80009d2:	f7ff fcd3 	bl	800037c <QMC5883L_Read_Reg>
 80009d6:	4603      	mov	r3, r0
 80009d8:	75bb      	strb	r3, [r7, #22]
		temp2 = QMC5883L_Read_Reg(0x08);
 80009da:	2008      	movs	r0, #8
 80009dc:	f7ff fcce 	bl	800037c <QMC5883L_Read_Reg>
 80009e0:	4603      	mov	r3, r0
 80009e2:	757b      	strb	r3, [r7, #21]

		uint16_t temp = ~((temp2 << 8) | temp1) + 1;
 80009e4:	7d7b      	ldrb	r3, [r7, #21]
 80009e6:	021b      	lsls	r3, r3, #8
 80009e8:	b21a      	sxth	r2, r3
 80009ea:	7dbb      	ldrb	r3, [r7, #22]
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b21b      	sxth	r3, r3
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	425b      	negs	r3, r3
 80009f6:	827b      	strh	r3, [r7, #18]
		temp /= 100;
 80009f8:	8a7b      	ldrh	r3, [r7, #18]
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <task_sensors+0xb4>)
 80009fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000a00:	095b      	lsrs	r3, r3, #5
 8000a02:	827b      	strh	r3, [r7, #18]

		temp += 1;
 8000a04:	8a7b      	ldrh	r3, [r7, #18]
 8000a06:	3301      	adds	r3, #1
 8000a08:	827b      	strh	r3, [r7, #18]

		if (status & (1 << 0)) {
 8000a0a:	7dfb      	ldrb	r3, [r7, #23]
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d009      	beq.n	8000a28 <task_sensors+0x98>
			QMC5883L_Read_Data(&X, &Y, &Z);
 8000a14:	f107 020c 	add.w	r2, r7, #12
 8000a18:	f107 010e 	add.w	r1, r7, #14
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fce1 	bl	80003e8 <QMC5883L_Read_Data>
 8000a26:	e005      	b.n	8000a34 <task_sensors+0xa4>
		} else {
			X = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	823b      	strh	r3, [r7, #16]
			Y = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	81fb      	strh	r3, [r7, #14]
			Z = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	81bb      	strh	r3, [r7, #12]
		}

		X++;
 8000a34:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	823b      	strh	r3, [r7, #16]
	for (;;) {
 8000a42:	e7b6      	b.n	80009b2 <task_sensors+0x22>
 8000a44:	51eb851f 	.word	0x51eb851f

08000a48 <task_state_machine>:
#include "runtime.h"
#include "state_machine.h"
#include "h_bridge.h"
#include "bluetooth_le.h"

void task_state_machine(void *pvParameters) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	uint32_t evgroup = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
	bool tasks_disabled = false;
 8000a54:	2300      	movs	r3, #0
 8000a56:	74fb      	strb	r3, [r7, #19]
	xQueueBleData receivedBleData = { 0 };
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]

	for (;;) {

		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f7ff fdf3 	bl	8000648 <rt_evbitwait_any>
 8000a62:	6178      	str	r0, [r7, #20]

		if (evgroup & (1 << evgroup_state_m_do_nothing)) {
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d007      	beq.n	8000a7e <task_state_machine+0x36>

			h_bridge_coast();
 8000a6e:	f7ff fc1b 	bl	80002a8 <h_bridge_coast>
			h_bridge_set_left_duty(0);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f7ff fb84 	bl	8000180 <h_bridge_set_left_duty>
			h_bridge_set_right_duty(0);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff fba7 	bl	80001cc <h_bridge_set_right_duty>
		}
		if (evgroup & (1 << evgroup_state_m_auto_manual)) {
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d021      	beq.n	8000acc <task_state_machine+0x84>
			if (tasks_disabled) {
 8000a88:	7cfb      	ldrb	r3, [r7, #19]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d00f      	beq.n	8000aae <task_state_machine+0x66>
				vTaskResume(rt_tasks[rt_task_eyes]);
 8000a8e:	4b32      	ldr	r3, [pc, #200]	; (8000b58 <task_state_machine+0x110>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 f8f4 	bl	8007c80 <vTaskResume>
				vTaskResume(rt_tasks[rt_task_memory]);
 8000a98:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <task_state_machine+0x110>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f007 f8ef 	bl	8007c80 <vTaskResume>
				vTaskResume(rt_tasks[rt_task_sensors]);
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <task_state_machine+0x110>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 f8ea 	bl	8007c80 <vTaskResume>
 8000aac:	e00e      	b.n	8000acc <task_state_machine+0x84>
			} else {
				vTaskSuspend(rt_tasks[rt_task_eyes]);
 8000aae:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <task_state_machine+0x110>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f007 f836 	bl	8007b24 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_memory]);
 8000ab8:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <task_state_machine+0x110>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 f831 	bl	8007b24 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_sensors]);
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <task_state_machine+0x110>)
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f007 f82c 	bl	8007b24 <vTaskSuspend>
			}
		}
		if (evgroup & (1 << evgroup_state_m_movement)) {
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0c2      	beq.n	8000a5c <task_state_machine+0x14>

			bool status = rt_dequeue(rt_queue_ble, &receivedBleData);
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4619      	mov	r1, r3
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff fe25 	bl	800072c <rt_dequeue>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	74bb      	strb	r3, [r7, #18]
			if (status) {
 8000ae6:	7cbb      	ldrb	r3, [r7, #18]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0b7      	beq.n	8000a5c <task_state_machine+0x14>

				uint8_t left_engine = receivedBleData.valueReg1;
 8000aec:	7bbb      	ldrb	r3, [r7, #14]
 8000aee:	747b      	strb	r3, [r7, #17]
				uint8_t right_engine = receivedBleData.valueReg2;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	743b      	strb	r3, [r7, #16]
				// ^
				// ccw
				// --- |        PERCENTAGE       |

				// left engine
				if (left_engine & (1 << 8)) {
 8000af4:	7c7b      	ldrb	r3, [r7, #17]
 8000af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d009      	beq.n	8000b12 <task_state_machine+0xca>
					h_bridge_cw_left();
 8000afe:	f7ff fb8b 	bl	8000218 <h_bridge_cw_left>
					h_bridge_set_left_duty(left_engine & 0b01111111);
 8000b02:	7c7b      	ldrb	r3, [r7, #17]
 8000b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fb38 	bl	8000180 <h_bridge_set_left_duty>
 8000b10:	e008      	b.n	8000b24 <task_state_machine+0xdc>
				} else {
					h_bridge_ccw_left();
 8000b12:	f7ff fba5 	bl	8000260 <h_bridge_ccw_left>
					h_bridge_set_left_duty(right_engine & 0b01111111);
 8000b16:	7c3b      	ldrb	r3, [r7, #16]
 8000b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fb2e 	bl	8000180 <h_bridge_set_left_duty>
				}

				// right engine
				if (right_engine & (1 << 8)) {
 8000b24:	7c3b      	ldrb	r3, [r7, #16]
 8000b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d009      	beq.n	8000b42 <task_state_machine+0xfa>
					h_bridge_cw_right();
 8000b2e:	f7ff fb83 	bl	8000238 <h_bridge_cw_right>
					h_bridge_set_right_duty(right_engine & 0b01111111);
 8000b32:	7c3b      	ldrb	r3, [r7, #16]
 8000b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fb46 	bl	80001cc <h_bridge_set_right_duty>
 8000b40:	e78c      	b.n	8000a5c <task_state_machine+0x14>
				} else {
					h_bridge_ccw_right();
 8000b42:	f7ff fb9d 	bl	8000280 <h_bridge_ccw_right>
					h_bridge_set_right_duty(right_engine & 0b01111111);
 8000b46:	7c3b      	ldrb	r3, [r7, #16]
 8000b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fb3c 	bl	80001cc <h_bridge_set_right_duty>
		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8000b54:	e782      	b.n	8000a5c <task_state_machine+0x14>
 8000b56:	bf00      	nop
 8000b58:	2000353c 	.word	0x2000353c

08000b5c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000b6c:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000b6e:	4a26      	ldr	r2, [pc, #152]	; (8000c08 <MX_ADC_Init+0xac>)
 8000b70:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b72:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000bba:	2210      	movs	r2, #16
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000bcc:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000bce:	f000 fea7 	bl	8001920 <HAL_ADC_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000bd8:	f000 fab8 	bl	800114c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be0:	2301      	movs	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_ADC_Init+0xa8>)
 8000bee:	f001 f93b 	bl	8001e68 <HAL_ADC_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000bf8:	f000 faa8 	bl	800114c <Error_Handler>
  }

}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20003568 	.word	0x20003568
 8000c08:	40012400 	.word	0x40012400

08000c0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	; 0x30
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a2d      	ldr	r2, [pc, #180]	; (8000ce0 <HAL_ADC_MspInit+0xd4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d154      	bne.n	8000cd8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <HAL_ADC_MspInit+0xd8>)
 8000c30:	6a1b      	ldr	r3, [r3, #32]
 8000c32:	4a2c      	ldr	r2, [pc, #176]	; (8000ce4 <HAL_ADC_MspInit+0xd8>)
 8000c34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c38:	6213      	str	r3, [r2, #32]
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <HAL_ADC_MspInit+0xd8>)
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <HAL_ADC_MspInit+0xd8>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a26      	ldr	r2, [pc, #152]	; (8000ce4 <HAL_ADC_MspInit+0xd8>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	61d3      	str	r3, [r2, #28]
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <HAL_ADC_MspInit+0xd8>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <HAL_ADC_MspInit+0xd8>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	4a20      	ldr	r2, [pc, #128]	; (8000ce4 <HAL_ADC_MspInit+0xd8>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	61d3      	str	r3, [r2, #28]
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <HAL_ADC_MspInit+0xd8>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_ADC_MspInit+0xd8>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ce4 <HAL_ADC_MspInit+0xd8>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	61d3      	str	r3, [r2, #28]
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_ADC_MspInit+0xd8>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <HAL_ADC_MspInit+0xdc>)
 8000ca2:	f001 fc89 	bl	80025b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 8000ca6:	2386      	movs	r3, #134	; 0x86
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000caa:	2303      	movs	r3, #3
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <HAL_ADC_MspInit+0xe0>)
 8000cba:	f001 fc7d 	bl	80025b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 8000cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <HAL_ADC_MspInit+0xe4>)
 8000cd4:	f001 fc70 	bl	80025b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3730      	adds	r7, #48	; 0x30
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40012400 	.word	0x40012400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d3c:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <MX_FREERTOS_Init+0x1c>)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_FREERTOS_Init+0x20>)
 8000d42:	f005 fcad 	bl	80066a0 <osThreadNew>
 8000d46:	4602      	mov	r2, r0
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <MX_FREERTOS_Init+0x24>)
 8000d4a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 8000d4c:	f7ff fbd2 	bl	80004f4 <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	08009b1c 	.word	0x08009b1c
 8000d58:	08000d61 	.word	0x08000d61
 8000d5c:	200035bc 	.word	0x200035bc

08000d60 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f005 fd43 	bl	80067f4 <osDelay>
 8000d6e:	e7fb      	b.n	8000d68 <StartDefaultTask+0x8>

08000d70 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b72      	ldr	r3, [pc, #456]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	4a71      	ldr	r2, [pc, #452]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	61d3      	str	r3, [r2, #28]
 8000d92:	4b6f      	ldr	r3, [pc, #444]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9e:	4b6c      	ldr	r3, [pc, #432]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	4a6b      	ldr	r2, [pc, #428]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000da4:	f043 0320 	orr.w	r3, r3, #32
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b69      	ldr	r3, [pc, #420]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f003 0320 	and.w	r3, r3, #32
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b66      	ldr	r3, [pc, #408]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a65      	ldr	r2, [pc, #404]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b60      	ldr	r3, [pc, #384]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a5f      	ldr	r2, [pc, #380]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b5d      	ldr	r3, [pc, #372]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	4b5a      	ldr	r3, [pc, #360]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a59      	ldr	r2, [pc, #356]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b57      	ldr	r3, [pc, #348]	; (8000f50 <MX_GPIO_Init+0x1e0>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f640 616e 	movw	r1, #3694	; 0xe6e
 8000e04:	4853      	ldr	r0, [pc, #332]	; (8000f54 <MX_GPIO_Init+0x1e4>)
 8000e06:	f001 fe49 	bl	8002a9c <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f248 7108 	movw	r1, #34568	; 0x8708
 8000e10:	4851      	ldr	r0, [pc, #324]	; (8000f58 <MX_GPIO_Init+0x1e8>)
 8000e12:	f001 fe43 	bl	8002a9c <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2110      	movs	r1, #16
 8000e1a:	484e      	ldr	r0, [pc, #312]	; (8000f54 <MX_GPIO_Init+0x1e4>)
 8000e1c:	f001 fe3e 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 8000e20:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e26:	2303      	movs	r3, #3
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4847      	ldr	r0, [pc, #284]	; (8000f54 <MX_GPIO_Init+0x1e4>)
 8000e36:	f001 fbbf 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 8000e3a:	f640 637e 	movw	r3, #3710	; 0xe7e
 8000e3e:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4840      	ldr	r0, [pc, #256]	; (8000f54 <MX_GPIO_Init+0x1e4>)
 8000e54:	f001 fbb0 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000e58:	f248 7308 	movw	r3, #34568	; 0x8708
 8000e5c:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4839      	ldr	r0, [pc, #228]	; (8000f58 <MX_GPIO_Init+0x1e8>)
 8000e72:	f001 fba1 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8000e76:	f241 0370 	movw	r3, #4208	; 0x1070
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4833      	ldr	r0, [pc, #204]	; (8000f58 <MX_GPIO_Init+0x1e8>)
 8000e8c:	f001 fb94 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin|IRQ_ULTRASOUND_ECHO_Pin;
 8000e90:	2303      	movs	r3, #3
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e94:	4b31      	ldr	r3, [pc, #196]	; (8000f5c <MX_GPIO_Init+0x1ec>)
 8000e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	482f      	ldr	r0, [pc, #188]	; (8000f60 <MX_GPIO_Init+0x1f0>)
 8000ea4:	f001 fb88 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 8000ea8:	f242 333c 	movw	r3, #9020	; 0x233c
 8000eac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4828      	ldr	r0, [pc, #160]	; (8000f60 <MX_GPIO_Init+0x1f0>)
 8000ebe:	f001 fb7b 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_LEFT_Pin;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4822      	ldr	r0, [pc, #136]	; (8000f60 <MX_GPIO_Init+0x1f0>)
 8000ed8:	f001 fb6e 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	4819      	ldr	r0, [pc, #100]	; (8000f54 <MX_GPIO_Init+0x1e4>)
 8000ef0:	f001 fb62 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 8000ef4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4813      	ldr	r0, [pc, #76]	; (8000f58 <MX_GPIO_Init+0x1e8>)
 8000f0a:	f001 fb55 	bl	80025b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f12:	2303      	movs	r3, #3
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4810      	ldr	r0, [pc, #64]	; (8000f64 <MX_GPIO_Init+0x1f4>)
 8000f22:	f001 fb49 	bl	80025b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2105      	movs	r1, #5
 8000f2a:	2006      	movs	r0, #6
 8000f2c:	f001 fb00 	bl	8002530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f30:	2006      	movs	r0, #6
 8000f32:	f001 fb29 	bl	8002588 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2105      	movs	r1, #5
 8000f3a:	2007      	movs	r0, #7
 8000f3c:	f001 faf8 	bl	8002530 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f40:	2007      	movs	r0, #7
 8000f42:	f001 fb21 	bl	8002588 <HAL_NVIC_EnableIRQ>

}
 8000f46:	bf00      	nop
 8000f48:	3728      	adds	r7, #40	; 0x28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020800 	.word	0x40020800
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	10110000 	.word	0x10110000
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40020c00 	.word	0x40020c00

08000f68 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f6e:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <MX_I2C1_Init+0x54>)
 8000f70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f74:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <MX_I2C1_Init+0x58>)
 8000f76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_I2C1_Init+0x50>)
 8000fa6:	f001 fdc3 	bl	8002b30 <HAL_I2C_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fb0:	f000 f8cc 	bl	800114c <Error_Handler>
  }

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200035c0 	.word	0x200035c0
 8000fbc:	40005400 	.word	0x40005400
 8000fc0:	000186a0 	.word	0x000186a0

08000fc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_I2C_MspInit+0x7c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d127      	bne.n	8001036 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_I2C_MspInit+0x80>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a16      	ldr	r2, [pc, #88]	; (8001044 <HAL_I2C_MspInit+0x80>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	61d3      	str	r3, [r2, #28]
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_I2C_MspInit+0x80>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ffe:	23c0      	movs	r3, #192	; 0xc0
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001002:	2312      	movs	r3, #18
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001006:	2301      	movs	r3, #1
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800100e:	2304      	movs	r3, #4
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	480b      	ldr	r0, [pc, #44]	; (8001048 <HAL_I2C_MspInit+0x84>)
 800101a:	f001 facd 	bl	80025b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_I2C_MspInit+0x80>)
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <HAL_I2C_MspInit+0x80>)
 8001024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001028:	6253      	str	r3, [r2, #36]	; 0x24
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_I2C_MspInit+0x80>)
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40005400 	.word	0x40005400
 8001044:	40023800 	.word	0x40023800
 8001048:	40020400 	.word	0x40020400

0800104c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001050:	f000 fc31 	bl	80018b6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001054:	f000 f818 	bl	8001088 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001058:	f7ff fe8a 	bl	8000d70 <MX_GPIO_Init>
	MX_ADC_Init();
 800105c:	f7ff fd7e 	bl	8000b5c <MX_ADC_Init>
	MX_I2C1_Init();
 8001060:	f7ff ff82 	bl	8000f68 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001064:	f000 f970 	bl	8001348 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001068:	f000 f9e2 	bl	8001430 <MX_TIM3_Init>
	MX_TIM9_Init();
 800106c:	f000 fa54 	bl	8001518 <MX_TIM9_Init>
	MX_USART3_UART_Init();
 8001070:	f000 fb8e 	bl	8001790 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	device_init();
 8001074:	f7ff fa29 	bl	80004ca <device_init>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 8001078:	f005 faac 	bl	80065d4 <osKernelInitialize>
	MX_FREERTOS_Init();
 800107c:	f7ff fe5c 	bl	8000d38 <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 8001080:	f005 fada 	bl	8006638 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001084:	e7fe      	b.n	8001084 <main+0x38>
	...

08001088 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b092      	sub	sp, #72	; 0x48
 800108c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2234      	movs	r2, #52	; 0x34
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f008 fbb3 	bl	8009802 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <SystemClock_Config+0x9c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <SystemClock_Config+0x9c>)
 80010b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010b8:	6013      	str	r3, [r2, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80010ba:	2303      	movs	r3, #3
 80010bc:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010be:	2301      	movs	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c6:	2310      	movs	r3, #16
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80010d4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80010d8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80010da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 fd1f 	bl	8003b28 <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x6c>
		Error_Handler();
 80010f0:	f000 f82c 	bl	800114c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010f4:	230f      	movs	r3, #15
 80010f6:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f8:	2303      	movs	r3, #3
 80010fa:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001108:	463b      	mov	r3, r7
 800110a:	2101      	movs	r1, #1
 800110c:	4618      	mov	r0, r3
 800110e:	f003 f989 	bl	8004424 <HAL_RCC_ClockConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x94>
		Error_Handler();
 8001118:	f000 f818 	bl	800114c <Error_Handler>
	}
}
 800111c:	bf00      	nop
 800111e:	3748      	adds	r7, #72	; 0x48
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40007000 	.word	0x40007000

08001128 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800113a:	f000 fbd5 	bl	80018e8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40000c00 	.word	0x40000c00

0800114c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_MspInit+0x64>)
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <HAL_MspInit+0x64>)
 8001178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800117c:	6253      	str	r3, [r2, #36]	; 0x24
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_MspInit+0x64>)
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_MspInit+0x64>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_MspInit+0x64>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6213      	str	r3, [r2, #32]
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_MspInit+0x64>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_MspInit+0x64>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_MspInit+0x64>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	6253      	str	r3, [r2, #36]	; 0x24
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_MspInit+0x64>)
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	210f      	movs	r1, #15
 80011be:	f06f 0001 	mvn.w	r0, #1
 80011c2:	f001 f9b5 	bl	8002530 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	; 0x30
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	202e      	movs	r0, #46	; 0x2e
 80011ea:	f001 f9a1 	bl	8002530 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 80011ee:	202e      	movs	r0, #46	; 0x2e
 80011f0:	f001 f9ca 	bl	8002588 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <HAL_InitTick+0x9c>)
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	4a1d      	ldr	r2, [pc, #116]	; (8001270 <HAL_InitTick+0x9c>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	6253      	str	r3, [r2, #36]	; 0x24
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_InitTick+0x9c>)
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800120c:	f107 0210 	add.w	r2, r7, #16
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f003 fb4c 	bl	80048b4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800121c:	f003 fb22 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
 8001220:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001224:	4a13      	ldr	r2, [pc, #76]	; (8001274 <HAL_InitTick+0xa0>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c9b      	lsrs	r3, r3, #18
 800122c:	3b01      	subs	r3, #1
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_InitTick+0xa4>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <HAL_InitTick+0xa8>)
 8001234:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_InitTick+0xa4>)
 8001238:	f240 32e7 	movw	r2, #999	; 0x3e7
 800123c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800123e:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <HAL_InitTick+0xa4>)
 8001240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001242:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_InitTick+0xa4>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_InitTick+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001250:	4809      	ldr	r0, [pc, #36]	; (8001278 <HAL_InitTick+0xa4>)
 8001252:	f003 fbd1 	bl	80049f8 <HAL_TIM_Base_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d104      	bne.n	8001266 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 800125c:	4806      	ldr	r0, [pc, #24]	; (8001278 <HAL_InitTick+0xa4>)
 800125e:	f003 fc73 	bl	8004b48 <HAL_TIM_Base_Start_IT>
 8001262:	4603      	mov	r3, r0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3730      	adds	r7, #48	; 0x30
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	431bde83 	.word	0x431bde83
 8001278:	20003614 	.word	0x20003614
 800127c:	40000c00 	.word	0x40000c00

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <HardFault_Handler+0x4>

08001292 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <MemManage_Handler+0x4>

08001298 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <BusFault_Handler+0x4>

0800129e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <UsageFault_Handler+0x4>

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f001 fc23 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}

080012be <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80012c2:	2002      	movs	r0, #2
 80012c4:	f001 fc1c 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <TIM5_IRQHandler+0x10>)
 80012d2:	f003 fd50 	bl	8004d76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20003614 	.word	0x20003614

080012e0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <SystemInit+0x5c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a14      	ldr	r2, [pc, #80]	; (800133c <SystemInit+0x5c>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <SystemInit+0x5c>)
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	4911      	ldr	r1, [pc, #68]	; (800133c <SystemInit+0x5c>)
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <SystemInit+0x60>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <SystemInit+0x5c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0e      	ldr	r2, [pc, #56]	; (800133c <SystemInit+0x5c>)
 8001302:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001306:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800130a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <SystemInit+0x5c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <SystemInit+0x5c>)
 8001312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001316:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <SystemInit+0x5c>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <SystemInit+0x5c>)
 800131e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001322:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <SystemInit+0x5c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <SystemInit+0x64>)
 800132c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001330:	609a      	str	r2, [r3, #8]
#endif
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	88ffc00c 	.word	0x88ffc00c
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001366:	463b      	mov	r3, r7
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <MX_TIM2_Init+0xe4>)
 8001374:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001378:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <MX_TIM2_Init+0xe4>)
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b2a      	ldr	r3, [pc, #168]	; (800142c <MX_TIM2_Init+0xe4>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <MX_TIM2_Init+0xe4>)
 8001388:	f640 427f 	movw	r2, #3199	; 0xc7f
 800138c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <MX_TIM2_Init+0xe4>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <MX_TIM2_Init+0xe4>)
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800139a:	4824      	ldr	r0, [pc, #144]	; (800142c <MX_TIM2_Init+0xe4>)
 800139c:	f003 fb2c 	bl	80049f8 <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80013a6:	f7ff fed1 	bl	800114c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	4619      	mov	r1, r3
 80013b6:	481d      	ldr	r0, [pc, #116]	; (800142c <MX_TIM2_Init+0xe4>)
 80013b8:	f003 ff4a 	bl	8005250 <HAL_TIM_ConfigClockSource>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013c2:	f7ff fec3 	bl	800114c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013c6:	4819      	ldr	r0, [pc, #100]	; (800142c <MX_TIM2_Init+0xe4>)
 80013c8:	f003 fc24 	bl	8004c14 <HAL_TIM_PWM_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013d2:	f7ff febb 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	4619      	mov	r1, r3
 80013e4:	4811      	ldr	r0, [pc, #68]	; (800142c <MX_TIM2_Init+0xe4>)
 80013e6:	f004 fc45 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80013f0:	f7ff feac 	bl	800114c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f4:	2360      	movs	r3, #96	; 0x60
 80013f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1599;
 80013f8:	f240 633f 	movw	r3, #1599	; 0x63f
 80013fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001402:	2304      	movs	r3, #4
 8001404:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	4619      	mov	r1, r3
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <MX_TIM2_Init+0xe4>)
 800140e:	f003 fd8f 	bl	8004f30 <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001418:	f7ff fe98 	bl	800114c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <MX_TIM2_Init+0xe4>)
 800141e:	f000 f933 	bl	8001688 <HAL_TIM_MspPostInit>

}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	; 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200036c8 	.word	0x200036c8

08001430 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800144e:	463b      	mov	r3, r7
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <MX_TIM3_Init+0xe0>)
 800145c:	4a2d      	ldr	r2, [pc, #180]	; (8001514 <MX_TIM3_Init+0xe4>)
 800145e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <MX_TIM3_Init+0xe0>)
 8001462:	2200      	movs	r2, #0
 8001464:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_TIM3_Init+0xe0>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <MX_TIM3_Init+0xe0>)
 800146e:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001472:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001474:	4b26      	ldr	r3, [pc, #152]	; (8001510 <MX_TIM3_Init+0xe0>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_TIM3_Init+0xe0>)
 800147c:	2280      	movs	r2, #128	; 0x80
 800147e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001480:	4823      	ldr	r0, [pc, #140]	; (8001510 <MX_TIM3_Init+0xe0>)
 8001482:	f003 fab9 	bl	80049f8 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800148c:	f7ff fe5e 	bl	800114c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001494:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	4619      	mov	r1, r3
 800149c:	481c      	ldr	r0, [pc, #112]	; (8001510 <MX_TIM3_Init+0xe0>)
 800149e:	f003 fed7 	bl	8005250 <HAL_TIM_ConfigClockSource>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014a8:	f7ff fe50 	bl	800114c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014ac:	4818      	ldr	r0, [pc, #96]	; (8001510 <MX_TIM3_Init+0xe0>)
 80014ae:	f003 fbb1 	bl	8004c14 <HAL_TIM_PWM_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014b8:	f7ff fe48 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	4619      	mov	r1, r3
 80014ca:	4811      	ldr	r0, [pc, #68]	; (8001510 <MX_TIM3_Init+0xe0>)
 80014cc:	f004 fbd2 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80014d6:	f7ff fe39 	bl	800114c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014da:	2360      	movs	r3, #96	; 0x60
 80014dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 80014de:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80014e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80014e8:	2304      	movs	r3, #4
 80014ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ec:	463b      	mov	r3, r7
 80014ee:	2208      	movs	r2, #8
 80014f0:	4619      	mov	r1, r3
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <MX_TIM3_Init+0xe0>)
 80014f4:	f003 fd1c 	bl	8004f30 <HAL_TIM_PWM_ConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80014fe:	f7ff fe25 	bl	800114c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001502:	4803      	ldr	r0, [pc, #12]	; (8001510 <MX_TIM3_Init+0xe0>)
 8001504:	f000 f8c0 	bl	8001688 <HAL_TIM_MspPostInit>

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20003650 	.word	0x20003650
 8001514:	40000400 	.word	0x40000400

08001518 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001536:	463b      	mov	r3, r7
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8001542:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <MX_TIM9_Init+0xe0>)
 8001544:	4a2d      	ldr	r2, [pc, #180]	; (80015fc <MX_TIM9_Init+0xe4>)
 8001546:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <MX_TIM9_Init+0xe0>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <MX_TIM9_Init+0xe0>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3200;
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <MX_TIM9_Init+0xe0>)
 8001556:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 800155a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <MX_TIM9_Init+0xe0>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <MX_TIM9_Init+0xe0>)
 8001564:	2280      	movs	r2, #128	; 0x80
 8001566:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001568:	4823      	ldr	r0, [pc, #140]	; (80015f8 <MX_TIM9_Init+0xe0>)
 800156a:	f003 fa45 	bl	80049f8 <HAL_TIM_Base_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8001574:	f7ff fdea 	bl	800114c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800157e:	f107 0318 	add.w	r3, r7, #24
 8001582:	4619      	mov	r1, r3
 8001584:	481c      	ldr	r0, [pc, #112]	; (80015f8 <MX_TIM9_Init+0xe0>)
 8001586:	f003 fe63 	bl	8005250 <HAL_TIM_ConfigClockSource>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM9_Init+0x7c>
  {
    Error_Handler();
 8001590:	f7ff fddc 	bl	800114c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001594:	4818      	ldr	r0, [pc, #96]	; (80015f8 <MX_TIM9_Init+0xe0>)
 8001596:	f003 fb3d 	bl	8004c14 <HAL_TIM_PWM_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 80015a0:	f7ff fdd4 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	4619      	mov	r1, r3
 80015b2:	4811      	ldr	r0, [pc, #68]	; (80015f8 <MX_TIM9_Init+0xe0>)
 80015b4:	f004 fb5e 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM9_Init+0xaa>
  {
    Error_Handler();
 80015be:	f7ff fdc5 	bl	800114c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c2:	2360      	movs	r3, #96	; 0x60
 80015c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 80015c6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80015ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	2204      	movs	r2, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4807      	ldr	r0, [pc, #28]	; (80015f8 <MX_TIM9_Init+0xe0>)
 80015dc:	f003 fca8 	bl	8004f30 <HAL_TIM_PWM_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM9_Init+0xd2>
  {
    Error_Handler();
 80015e6:	f7ff fdb1 	bl	800114c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 80015ea:	4803      	ldr	r0, [pc, #12]	; (80015f8 <MX_TIM9_Init+0xe0>)
 80015ec:	f000 f84c 	bl	8001688 <HAL_TIM_MspPostInit>

}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	2000368c 	.word	0x2000368c
 80015fc:	40010800 	.word	0x40010800

08001600 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001610:	d10c      	bne.n	800162c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <HAL_TIM_Base_MspInit+0x7c>)
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_TIM_Base_MspInit+0x7c>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6253      	str	r3, [r2, #36]	; 0x24
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_TIM_Base_MspInit+0x7c>)
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800162a:	e022      	b.n	8001672 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a13      	ldr	r2, [pc, #76]	; (8001680 <HAL_TIM_Base_MspInit+0x80>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d10c      	bne.n	8001650 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_TIM_Base_MspInit+0x7c>)
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	4a10      	ldr	r2, [pc, #64]	; (800167c <HAL_TIM_Base_MspInit+0x7c>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6253      	str	r3, [r2, #36]	; 0x24
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_TIM_Base_MspInit+0x7c>)
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
}
 800164e:	e010      	b.n	8001672 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM9)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <HAL_TIM_Base_MspInit+0x84>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d10b      	bne.n	8001672 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_TIM_Base_MspInit+0x7c>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_TIM_Base_MspInit+0x7c>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6213      	str	r3, [r2, #32]
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_TIM_Base_MspInit+0x7c>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
}
 8001672:	bf00      	nop
 8001674:	371c      	adds	r7, #28
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	40023800 	.word	0x40023800
 8001680:	40000400 	.word	0x40000400
 8001684:	40010800 	.word	0x40010800

08001688 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a8:	d11c      	bne.n	80016e4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a32      	ldr	r2, [pc, #200]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 80016c2:	2301      	movs	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016d2:	2301      	movs	r3, #1
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4827      	ldr	r0, [pc, #156]	; (800177c <HAL_TIM_MspPostInit+0xf4>)
 80016de:	f000 ff6b 	bl	80025b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80016e2:	e044      	b.n	800176e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a25      	ldr	r2, [pc, #148]	; (8001780 <HAL_TIM_MspPostInit+0xf8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d11d      	bne.n	800172a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a21      	ldr	r2, [pc, #132]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 8001706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001718:	2302      	movs	r3, #2
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4818      	ldr	r0, [pc, #96]	; (8001784 <HAL_TIM_MspPostInit+0xfc>)
 8001724:	f000 ff48 	bl	80025b8 <HAL_GPIO_Init>
}
 8001728:	e021      	b.n	800176e <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a16      	ldr	r2, [pc, #88]	; (8001788 <HAL_TIM_MspPostInit+0x100>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d11c      	bne.n	800176e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	61d3      	str	r3, [r2, #28]
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_TIM_MspPostInit+0xf0>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 800174c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800175e:	2303      	movs	r3, #3
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	4808      	ldr	r0, [pc, #32]	; (800178c <HAL_TIM_MspPostInit+0x104>)
 800176a:	f000 ff25 	bl	80025b8 <HAL_GPIO_Init>
}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000
 8001780:	40000400 	.word	0x40000400
 8001784:	40020800 	.word	0x40020800
 8001788:	40010800 	.word	0x40010800
 800178c:	40020400 	.word	0x40020400

08001790 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MX_USART3_UART_Init+0x4c>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <MX_USART3_UART_Init+0x50>)
 8001798:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <MX_USART3_UART_Init+0x4c>)
 800179c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_USART3_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_USART3_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_USART3_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_USART3_UART_Init+0x4c>)
 80017b6:	220c      	movs	r2, #12
 80017b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_USART3_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_USART3_UART_Init+0x4c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_USART3_UART_Init+0x4c>)
 80017c8:	f004 faee 	bl	8005da8 <HAL_UART_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017d2:	f7ff fcbb 	bl	800114c <Error_Handler>
  }

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20003704 	.word	0x20003704
 80017e0:	40004800 	.word	0x40004800

080017e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a17      	ldr	r2, [pc, #92]	; (8001860 <HAL_UART_MspInit+0x7c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d128      	bne.n	8001858 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <HAL_UART_MspInit+0x80>)
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	4a16      	ldr	r2, [pc, #88]	; (8001864 <HAL_UART_MspInit+0x80>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6253      	str	r3, [r2, #36]	; 0x24
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_UART_MspInit+0x80>)
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_UART_MspInit+0x80>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_UART_MspInit+0x80>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_UART_MspInit+0x80>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001836:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001848:	2307      	movs	r3, #7
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_UART_MspInit+0x84>)
 8001854:	f000 feb0 	bl	80025b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40004800 	.word	0x40004800
 8001864:	40023800 	.word	0x40023800
 8001868:	40020400 	.word	0x40020400

0800186c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800186c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800186e:	e003      	b.n	8001878 <LoopCopyDataInit>

08001870 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001872:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001874:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001876:	3104      	adds	r1, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001878:	480a      	ldr	r0, [pc, #40]	; (80018a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800187c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800187e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001880:	d3f6      	bcc.n	8001870 <CopyDataInit>
  ldr r2, =_sbss
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001884:	e002      	b.n	800188c <LoopFillZerobss>

08001886 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001888:	f842 3b04 	str.w	r3, [r2], #4

0800188c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800188e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001890:	d3f9      	bcc.n	8001886 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001892:	f7ff fd25 	bl	80012e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001896:	f007 ff85 	bl	80097a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800189a:	f7ff fbd7 	bl	800104c <main>
  bx lr
 800189e:	4770      	bx	lr
  ldr r3, =_sidata
 80018a0:	08009b6c 	.word	0x08009b6c
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018a8:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80018ac:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80018b0:	20003788 	.word	0x20003788

080018b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC1_IRQHandler>

080018b6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 fe15 	bl	80024f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7ff fc84 	bl	80011d4 <HAL_InitTick>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	71fb      	strb	r3, [r7, #7]
 80018d6:	e001      	b.n	80018dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018d8:	f7ff fc48 	bl	800116c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018dc:	79fb      	ldrb	r3, [r7, #7]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_IncTick+0x1c>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_IncTick+0x20>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a03      	ldr	r2, [pc, #12]	; (8001904 <HAL_IncTick+0x1c>)
 80018f8:	6013      	str	r3, [r2, #0]
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20003744 	.word	0x20003744
 8001908:	20000008 	.word	0x20000008

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_GetTick+0x10>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	20003744 	.word	0x20003744

08001920 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08e      	sub	sp, #56	; 0x38
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e282      	b.n	8001e46 <HAL_ADC_Init+0x526>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a9d      	ldr	r2, [pc, #628]	; (8001bbc <HAL_ADC_Init+0x29c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d004      	beq.n	8001954 <HAL_ADC_Init+0x34>
 800194a:	f240 11bd 	movw	r1, #445	; 0x1bd
 800194e:	489c      	ldr	r0, [pc, #624]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 8001950:	f7ff fc02 	bl	8001158 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00e      	beq.n	800197a <HAL_ADC_Init+0x5a>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001964:	d009      	beq.n	800197a <HAL_ADC_Init+0x5a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800196e:	d004      	beq.n	800197a <HAL_ADC_Init+0x5a>
 8001970:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8001974:	4892      	ldr	r0, [pc, #584]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 8001976:	f7ff fbef 	bl	8001158 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d013      	beq.n	80019aa <HAL_ADC_Init+0x8a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198a:	d00e      	beq.n	80019aa <HAL_ADC_Init+0x8a>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001994:	d009      	beq.n	80019aa <HAL_ADC_Init+0x8a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800199e:	d004      	beq.n	80019aa <HAL_ADC_Init+0x8a>
 80019a0:	f240 11bf 	movw	r1, #447	; 0x1bf
 80019a4:	4886      	ldr	r0, [pc, #536]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 80019a6:	f7ff fbd7 	bl	8001158 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_ADC_Init+0xa6>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019ba:	d004      	beq.n	80019c6 <HAL_ADC_Init+0xa6>
 80019bc:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80019c0:	487f      	ldr	r0, [pc, #508]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 80019c2:	f7ff fbc9 	bl	8001158 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_ADC_Init+0xc2>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d6:	d004      	beq.n	80019e2 <HAL_ADC_Init+0xc2>
 80019d8:	f240 11c1 	movw	r1, #449	; 0x1c1
 80019dc:	4878      	ldr	r0, [pc, #480]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 80019de:	f7ff fbbb 	bl	8001158 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ea:	d008      	beq.n	80019fe <HAL_ADC_Init+0xde>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d004      	beq.n	80019fe <HAL_ADC_Init+0xde>
 80019f4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80019f8:	4871      	ldr	r0, [pc, #452]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 80019fa:	f7ff fbad 	bl	8001158 <assert_failed>
  assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d020      	beq.n	8001a48 <HAL_ADC_Init+0x128>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d01c      	beq.n	8001a48 <HAL_ADC_Init+0x128>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b20      	cmp	r3, #32
 8001a14:	d018      	beq.n	8001a48 <HAL_ADC_Init+0x128>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b30      	cmp	r3, #48	; 0x30
 8001a1c:	d014      	beq.n	8001a48 <HAL_ADC_Init+0x128>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b40      	cmp	r3, #64	; 0x40
 8001a24:	d010      	beq.n	8001a48 <HAL_ADC_Init+0x128>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b50      	cmp	r3, #80	; 0x50
 8001a2c:	d00c      	beq.n	8001a48 <HAL_ADC_Init+0x128>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b60      	cmp	r3, #96	; 0x60
 8001a34:	d008      	beq.n	8001a48 <HAL_ADC_Init+0x128>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b70      	cmp	r3, #112	; 0x70
 8001a3c:	d004      	beq.n	8001a48 <HAL_ADC_Init+0x128>
 8001a3e:	f240 11c3 	movw	r1, #451	; 0x1c3
 8001a42:	485f      	ldr	r0, [pc, #380]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 8001a44:	f7ff fb88 	bl	8001158 <assert_failed>
  assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d013      	beq.n	8001a78 <HAL_ADC_Init+0x158>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a58:	d00e      	beq.n	8001a78 <HAL_ADC_Init+0x158>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a62:	d009      	beq.n	8001a78 <HAL_ADC_Init+0x158>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001a6c:	d004      	beq.n	8001a78 <HAL_ADC_Init+0x158>
 8001a6e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001a72:	4853      	ldr	r0, [pc, #332]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 8001a74:	f7ff fb70 	bl	8001158 <assert_failed>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_ADC_Init+0x172>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d004      	beq.n	8001a92 <HAL_ADC_Init+0x172>
 8001a88:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001a8c:	484c      	ldr	r0, [pc, #304]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 8001a8e:	f7ff fb63 	bl	8001158 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d009      	beq.n	8001ab0 <HAL_ADC_Init+0x190>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d004      	beq.n	8001ab0 <HAL_ADC_Init+0x190>
 8001aa6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8001aaa:	4845      	ldr	r0, [pc, #276]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 8001aac:	f7ff fb54 	bl	8001158 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ab8:	d03e      	beq.n	8001b38 <HAL_ADC_Init+0x218>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ac2:	d039      	beq.n	8001b38 <HAL_ADC_Init+0x218>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001acc:	d034      	beq.n	8001b38 <HAL_ADC_Init+0x218>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad2:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8001ad6:	d02f      	beq.n	8001b38 <HAL_ADC_Init+0x218>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ae0:	d02a      	beq.n	8001b38 <HAL_ADC_Init+0x218>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001aea:	d025      	beq.n	8001b38 <HAL_ADC_Init+0x218>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001af4:	d020      	beq.n	8001b38 <HAL_ADC_Init+0x218>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afa:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8001afe:	d01b      	beq.n	8001b38 <HAL_ADC_Init+0x218>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b04:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001b08:	d016      	beq.n	8001b38 <HAL_ADC_Init+0x218>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d012      	beq.n	8001b38 <HAL_ADC_Init+0x218>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b1a:	d00d      	beq.n	8001b38 <HAL_ADC_Init+0x218>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b20:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8001b24:	d008      	beq.n	8001b38 <HAL_ADC_Init+0x218>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d004      	beq.n	8001b38 <HAL_ADC_Init+0x218>
 8001b2e:	f240 11c7 	movw	r1, #455	; 0x1c7
 8001b32:	4823      	ldr	r0, [pc, #140]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 8001b34:	f7ff fb10 	bl	8001158 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <HAL_ADC_Init+0x236>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d004      	beq.n	8001b56 <HAL_ADC_Init+0x236>
 8001b4c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8001b50:	481b      	ldr	r0, [pc, #108]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 8001b52:	f7ff fb01 	bl	8001158 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d032      	beq.n	8001bc4 <HAL_ADC_Init+0x2a4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_ADC_Init+0x24e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	2b1c      	cmp	r3, #28
 8001b6c:	d904      	bls.n	8001b78 <HAL_ADC_Init+0x258>
 8001b6e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8001b72:	4813      	ldr	r0, [pc, #76]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 8001b74:	f7ff faf0 	bl	8001158 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_ADC_Init+0x276>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d004      	beq.n	8001b96 <HAL_ADC_Init+0x276>
 8001b8c:	f240 11cd 	movw	r1, #461	; 0x1cd
 8001b90:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 8001b92:	f7ff fae1 	bl	8001158 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d011      	beq.n	8001bc4 <HAL_ADC_Init+0x2a4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_ADC_Init+0x290>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d909      	bls.n	8001bc4 <HAL_ADC_Init+0x2a4>
 8001bb0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <HAL_ADC_Init+0x2a0>)
 8001bb6:	f7ff facf 	bl	8001158 <assert_failed>
 8001bba:	e003      	b.n	8001bc4 <HAL_ADC_Init+0x2a4>
 8001bbc:	40012400 	.word	0x40012400
 8001bc0:	080098a0 	.word	0x080098a0
    }
  }
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc8:	2b10      	cmp	r3, #16
 8001bca:	d017      	beq.n	8001bfc <HAL_ADC_Init+0x2dc>
  {
    assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_ADC_Init+0x2dc>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bdc:	d00e      	beq.n	8001bfc <HAL_ADC_Init+0x2dc>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001be6:	d009      	beq.n	8001bfc <HAL_ADC_Init+0x2dc>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001bf0:	d004      	beq.n	8001bfc <HAL_ADC_Init+0x2dc>
 8001bf2:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8001bf6:	4896      	ldr	r0, [pc, #600]	; (8001e50 <HAL_ADC_Init+0x530>)
 8001bf8:	f7ff faae 	bl	8001158 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d115      	bne.n	8001c30 <HAL_ADC_Init+0x310>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	4b90      	ldr	r3, [pc, #576]	; (8001e54 <HAL_ADC_Init+0x534>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a8f      	ldr	r2, [pc, #572]	; (8001e54 <HAL_ADC_Init+0x534>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6213      	str	r3, [r2, #32]
 8001c1e:	4b8d      	ldr	r3, [pc, #564]	; (8001e54 <HAL_ADC_Init+0x534>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe ffee 	bl	8000c0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 80ff 	bne.w	8001e3c <HAL_ADC_Init+0x51c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c46:	f023 0302 	bic.w	r3, r3, #2
 8001c4a:	f043 0202 	orr.w	r2, r3, #2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001c52:	4b81      	ldr	r3, [pc, #516]	; (8001e58 <HAL_ADC_Init+0x538>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	497e      	ldr	r1, [pc, #504]	; (8001e58 <HAL_ADC_Init+0x538>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c6c:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c7a:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	fab3 f383 	clz	r3, r3
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001c90:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c96:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca6:	fa93 f3a3 	rbit	r3, r3
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001cb8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc4:	2b10      	cmp	r3, #16
 8001cc6:	d007      	beq.n	8001cd8 <HAL_ADC_Init+0x3b8>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce2:	2b40      	cmp	r3, #64	; 0x40
 8001ce4:	d04f      	beq.n	8001d86 <HAL_ADC_Init+0x466>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cec:	4313      	orrs	r3, r2
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001cf8:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6912      	ldr	r2, [r2, #16]
 8001cfe:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001d02:	d003      	beq.n	8001d0c <HAL_ADC_Init+0x3ec>
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6912      	ldr	r2, [r2, #16]
 8001d08:	2a01      	cmp	r2, #1
 8001d0a:	d102      	bne.n	8001d12 <HAL_ADC_Init+0x3f2>
 8001d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d10:	e000      	b.n	8001d14 <HAL_ADC_Init+0x3f4>
 8001d12:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001d14:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d125      	bne.n	8001d72 <HAL_ADC_Init+0x452>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d114      	bne.n	8001d5a <HAL_ADC_Init+0x43a>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	3b01      	subs	r3, #1
 8001d36:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001d3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	fa92 f2a2 	rbit	r2, r2
 8001d42:	617a      	str	r2, [r7, #20]
  return result;
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	fab2 f282 	clz	r2, r2
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	4093      	lsls	r3, r2
 8001d4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d54:	4313      	orrs	r3, r2
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
 8001d58:	e00b      	b.n	8001d72 <HAL_ADC_Init+0x452>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f043 0220 	orr.w	r2, r3, #32
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6a:	f043 0201 	orr.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_ADC_Init+0x53c>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d82:	430b      	orrs	r3, r1
 8001d84:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	4b34      	ldr	r3, [pc, #208]	; (8001e60 <HAL_ADC_Init+0x540>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d96:	430b      	orrs	r3, r1
 8001d98:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da2:	d003      	beq.n	8001dac <HAL_ADC_Init+0x48c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d119      	bne.n	8001de0 <HAL_ADC_Init+0x4c0>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001dc0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	fa92 f2a2 	rbit	r2, r2
 8001dc8:	60fa      	str	r2, [r7, #12]
  return result;
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	fab2 f282 	clz	r2, r2
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	fa03 f202 	lsl.w	r2, r3, r2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
 8001dde:	e007      	b.n	8001df0 <HAL_ADC_Init+0x4d0>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_ADC_Init+0x544>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d10b      	bne.n	8001e18 <HAL_ADC_Init+0x4f8>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	f023 0303 	bic.w	r3, r3, #3
 8001e0e:	f043 0201 	orr.w	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e16:	e014      	b.n	8001e42 <HAL_ADC_Init+0x522>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1c:	f023 0312 	bic.w	r3, r3, #18
 8001e20:	f043 0210 	orr.w	r2, r3, #16
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001e3a:	e002      	b.n	8001e42 <HAL_ADC_Init+0x522>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3738      	adds	r7, #56	; 0x38
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	080098a0 	.word	0x080098a0
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40012700 	.word	0x40012700
 8001e5c:	fcfc16ff 	.word	0xfcfc16ff
 8001e60:	c0fff189 	.word	0xc0fff189
 8001e64:	bf80fffe 	.word	0xbf80fffe

08001e68 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a94      	ldr	r2, [pc, #592]	; (80020d0 <HAL_ADC_ConfigChannel+0x268>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d004      	beq.n	8001e8e <HAL_ADC_ConfigChannel+0x26>
 8001e84:	f240 7191 	movw	r1, #1937	; 0x791
 8001e88:	4892      	ldr	r0, [pc, #584]	; (80020d4 <HAL_ADC_ConfigChannel+0x26c>)
 8001e8a:	f7ff f965 	bl	8001158 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8081 	beq.w	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d07c      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d078      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d074      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d070      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d06c      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b06      	cmp	r3, #6
 8001ec6:	d068      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b07      	cmp	r3, #7
 8001ece:	d064      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d060      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b09      	cmp	r3, #9
 8001ede:	d05c      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b0a      	cmp	r3, #10
 8001ee6:	d058      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b0b      	cmp	r3, #11
 8001eee:	d054      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b0c      	cmp	r3, #12
 8001ef6:	d050      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b0d      	cmp	r3, #13
 8001efe:	d04c      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b0e      	cmp	r3, #14
 8001f06:	d048      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b0f      	cmp	r3, #15
 8001f0e:	d044      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b10      	cmp	r3, #16
 8001f16:	d040      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b11      	cmp	r3, #17
 8001f1e:	d03c      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b12      	cmp	r3, #18
 8001f26:	d038      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b13      	cmp	r3, #19
 8001f2e:	d034      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b14      	cmp	r3, #20
 8001f36:	d030      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b15      	cmp	r3, #21
 8001f3e:	d02c      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b16      	cmp	r3, #22
 8001f46:	d028      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b17      	cmp	r3, #23
 8001f4e:	d024      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b18      	cmp	r3, #24
 8001f56:	d020      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b19      	cmp	r3, #25
 8001f5e:	d01c      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b1a      	cmp	r3, #26
 8001f66:	d018      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b1b      	cmp	r3, #27
 8001f6e:	d014      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b1c      	cmp	r3, #28
 8001f76:	d010      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b1d      	cmp	r3, #29
 8001f7e:	d00c      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b1e      	cmp	r3, #30
 8001f86:	d008      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b1f      	cmp	r3, #31
 8001f8e:	d004      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x132>
 8001f90:	f240 7192 	movw	r1, #1938	; 0x792
 8001f94:	484f      	ldr	r0, [pc, #316]	; (80020d4 <HAL_ADC_ConfigChannel+0x26c>)
 8001f96:	f7ff f8df 	bl	8001158 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d070      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d06c      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d068      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d064      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d060      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d05c      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b07      	cmp	r3, #7
 8001fd0:	d058      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d054      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b09      	cmp	r3, #9
 8001fe0:	d050      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b0a      	cmp	r3, #10
 8001fe8:	d04c      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b0b      	cmp	r3, #11
 8001ff0:	d048      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d044      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b0d      	cmp	r3, #13
 8002000:	d040      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b0e      	cmp	r3, #14
 8002008:	d03c      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b0f      	cmp	r3, #15
 8002010:	d038      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b10      	cmp	r3, #16
 8002018:	d034      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b11      	cmp	r3, #17
 8002020:	d030      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b12      	cmp	r3, #18
 8002028:	d02c      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b13      	cmp	r3, #19
 8002030:	d028      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b14      	cmp	r3, #20
 8002038:	d024      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b15      	cmp	r3, #21
 8002040:	d020      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b16      	cmp	r3, #22
 8002048:	d01c      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b17      	cmp	r3, #23
 8002050:	d018      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b18      	cmp	r3, #24
 8002058:	d014      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b19      	cmp	r3, #25
 8002060:	d010      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b1a      	cmp	r3, #26
 8002068:	d00c      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b1b      	cmp	r3, #27
 8002070:	d008      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b1c      	cmp	r3, #28
 8002078:	d004      	beq.n	8002084 <HAL_ADC_ConfigChannel+0x21c>
 800207a:	f240 7193 	movw	r1, #1939	; 0x793
 800207e:	4815      	ldr	r0, [pc, #84]	; (80020d4 <HAL_ADC_ConfigChannel+0x26c>)
 8002080:	f7ff f86a 	bl	8001158 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d025      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x270>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d021      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x270>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d01d      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x270>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d019      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x270>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d015      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x270>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b05      	cmp	r3, #5
 80020b2:	d011      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x270>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b06      	cmp	r3, #6
 80020ba:	d00d      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x270>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b07      	cmp	r3, #7
 80020c2:	d009      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x270>
 80020c4:	f240 7194 	movw	r1, #1940	; 0x794
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <HAL_ADC_ConfigChannel+0x26c>)
 80020ca:	f7ff f845 	bl	8001158 <assert_failed>
 80020ce:	e003      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x270>
 80020d0:	40012400 	.word	0x40012400
 80020d4:	080098a0 	.word	0x080098a0
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x27e>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e14f      	b.n	8002386 <HAL_ADC_ConfigChannel+0x51e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b06      	cmp	r3, #6
 80020f4:	d81c      	bhi.n	8002130 <HAL_ADC_ConfigChannel+0x2c8>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	3b05      	subs	r3, #5
 8002108:	221f      	movs	r2, #31
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	4019      	ands	r1, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	3b05      	subs	r3, #5
 8002122:	fa00 f203 	lsl.w	r2, r0, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
 800212e:	e07e      	b.n	800222e <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b0c      	cmp	r3, #12
 8002136:	d81c      	bhi.n	8002172 <HAL_ADC_ConfigChannel+0x30a>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	3b23      	subs	r3, #35	; 0x23
 800214a:	221f      	movs	r2, #31
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	4019      	ands	r1, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	3b23      	subs	r3, #35	; 0x23
 8002164:	fa00 f203 	lsl.w	r2, r0, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002170:	e05d      	b.n	800222e <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b12      	cmp	r3, #18
 8002178:	d81c      	bhi.n	80021b4 <HAL_ADC_ConfigChannel+0x34c>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	3b41      	subs	r3, #65	; 0x41
 800218c:	221f      	movs	r2, #31
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	4019      	ands	r1, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	3b41      	subs	r3, #65	; 0x41
 80021a6:	fa00 f203 	lsl.w	r2, r0, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38
 80021b2:	e03c      	b.n	800222e <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b18      	cmp	r3, #24
 80021ba:	d81c      	bhi.n	80021f6 <HAL_ADC_ConfigChannel+0x38e>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	3b5f      	subs	r3, #95	; 0x5f
 80021ce:	221f      	movs	r2, #31
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	4019      	ands	r1, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	3b5f      	subs	r3, #95	; 0x5f
 80021e8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34
 80021f4:	e01b      	b.n	800222e <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	3b7d      	subs	r3, #125	; 0x7d
 8002208:	221f      	movs	r2, #31
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	4019      	ands	r1, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	3b7d      	subs	r3, #125	; 0x7d
 8002222:	fa00 f203 	lsl.w	r2, r0, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b09      	cmp	r3, #9
 8002234:	d81a      	bhi.n	800226c <HAL_ADC_ConfigChannel+0x404>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6959      	ldr	r1, [r3, #20]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	2207      	movs	r2, #7
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	4019      	ands	r1, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6898      	ldr	r0, [r3, #8]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	fa00 f203 	lsl.w	r2, r0, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	615a      	str	r2, [r3, #20]
 800226a:	e05d      	b.n	8002328 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b13      	cmp	r3, #19
 8002272:	d81c      	bhi.n	80022ae <HAL_ADC_ConfigChannel+0x446>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6919      	ldr	r1, [r3, #16]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	3b1e      	subs	r3, #30
 8002286:	2207      	movs	r2, #7
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	4019      	ands	r1, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6898      	ldr	r0, [r3, #8]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	3b1e      	subs	r3, #30
 80022a0:	fa00 f203 	lsl.w	r2, r0, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	611a      	str	r2, [r3, #16]
 80022ac:	e03c      	b.n	8002328 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b1d      	cmp	r3, #29
 80022b4:	d81c      	bhi.n	80022f0 <HAL_ADC_ConfigChannel+0x488>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68d9      	ldr	r1, [r3, #12]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	3b3c      	subs	r3, #60	; 0x3c
 80022c8:	2207      	movs	r2, #7
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	4019      	ands	r1, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6898      	ldr	r0, [r3, #8]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	3b3c      	subs	r3, #60	; 0x3c
 80022e2:	fa00 f203 	lsl.w	r2, r0, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	e01b      	b.n	8002328 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4613      	mov	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	3b5a      	subs	r3, #90	; 0x5a
 8002302:	2207      	movs	r2, #7
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	4019      	ands	r1, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	6898      	ldr	r0, [r3, #8]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	3b5a      	subs	r3, #90	; 0x5a
 800231c:	fa00 f203 	lsl.w	r2, r0, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b10      	cmp	r3, #16
 800232e:	d003      	beq.n	8002338 <HAL_ADC_ConfigChannel+0x4d0>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002334:	2b11      	cmp	r3, #17
 8002336:	d121      	bne.n	800237c <HAL_ADC_ConfigChannel+0x514>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_ADC_ConfigChannel+0x528>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d11b      	bne.n	800237c <HAL_ADC_ConfigChannel+0x514>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_ADC_ConfigChannel+0x528>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a11      	ldr	r2, [pc, #68]	; (8002390 <HAL_ADC_ConfigChannel+0x528>)
 800234a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800234e:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b10      	cmp	r3, #16
 8002356:	d111      	bne.n	800237c <HAL_ADC_ConfigChannel+0x514>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_ADC_ConfigChannel+0x52c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <HAL_ADC_ConfigChannel+0x530>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0c9a      	lsrs	r2, r3, #18
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800236e:	e002      	b.n	8002376 <HAL_ADC_ConfigChannel+0x50e>
          {
            wait_loop_index--;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	3b01      	subs	r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f9      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x508>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002384:	7bfb      	ldrb	r3, [r7, #15]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40012700 	.word	0x40012700
 8002394:	20000000 	.word	0x20000000
 8002398:	431bde83 	.word	0x431bde83

0800239c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <__NVIC_SetPriorityGrouping+0x44>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b8:	4013      	ands	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ce:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <__NVIC_SetPriorityGrouping+0x44>)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	60d3      	str	r3, [r2, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <__NVIC_GetPriorityGrouping+0x18>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	0a1b      	lsrs	r3, r3, #8
 80023ee:	f003 0307 	and.w	r3, r3, #7
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	2b00      	cmp	r3, #0
 8002410:	db0b      	blt.n	800242a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	4906      	ldr	r1, [pc, #24]	; (8002434 <__NVIC_EnableIRQ+0x34>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2001      	movs	r0, #1
 8002422:	fa00 f202 	lsl.w	r2, r0, r2
 8002426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100

08002438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db0a      	blt.n	8002462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	490c      	ldr	r1, [pc, #48]	; (8002484 <__NVIC_SetPriority+0x4c>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	440b      	add	r3, r1
 800245c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002460:	e00a      	b.n	8002478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4908      	ldr	r1, [pc, #32]	; (8002488 <__NVIC_SetPriority+0x50>)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3b04      	subs	r3, #4
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	440b      	add	r3, r1
 8002476:	761a      	strb	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000e100 	.word	0xe000e100
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f1c3 0307 	rsb	r3, r3, #7
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	bf28      	it	cs
 80024aa:	2304      	movcs	r3, #4
 80024ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d902      	bls.n	80024bc <NVIC_EncodePriority+0x30>
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3b03      	subs	r3, #3
 80024ba:	e000      	b.n	80024be <NVIC_EncodePriority+0x32>
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	401a      	ands	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43d9      	mvns	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	4313      	orrs	r3, r2
         );
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b07      	cmp	r3, #7
 80024fc:	d00f      	beq.n	800251e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b06      	cmp	r3, #6
 8002502:	d00c      	beq.n	800251e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b05      	cmp	r3, #5
 8002508:	d009      	beq.n	800251e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d006      	beq.n	800251e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d003      	beq.n	800251e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002516:	21ac      	movs	r1, #172	; 0xac
 8002518:	4804      	ldr	r0, [pc, #16]	; (800252c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800251a:	f7fe fe1d 	bl	8001158 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ff3c 	bl	800239c <__NVIC_SetPriorityGrouping>
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	080098d8 	.word	0x080098d8

08002530 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b0f      	cmp	r3, #15
 8002546:	d903      	bls.n	8002550 <HAL_NVIC_SetPriority+0x20>
 8002548:	21c4      	movs	r1, #196	; 0xc4
 800254a:	480e      	ldr	r0, [pc, #56]	; (8002584 <HAL_NVIC_SetPriority+0x54>)
 800254c:	f7fe fe04 	bl	8001158 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	d903      	bls.n	800255e <HAL_NVIC_SetPriority+0x2e>
 8002556:	21c5      	movs	r1, #197	; 0xc5
 8002558:	480a      	ldr	r0, [pc, #40]	; (8002584 <HAL_NVIC_SetPriority+0x54>)
 800255a:	f7fe fdfd 	bl	8001158 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800255e:	f7ff ff41 	bl	80023e4 <__NVIC_GetPriorityGrouping>
 8002562:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	6978      	ldr	r0, [r7, #20]
 800256a:	f7ff ff8f 	bl	800248c <NVIC_EncodePriority>
 800256e:	4602      	mov	r2, r0
 8002570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ff5e 	bl	8002438 <__NVIC_SetPriority>
}
 800257c:	bf00      	nop
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	080098d8 	.word	0x080098d8

08002588 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	2b00      	cmp	r3, #0
 8002598:	da03      	bge.n	80025a2 <HAL_NVIC_EnableIRQ+0x1a>
 800259a:	21d8      	movs	r1, #216	; 0xd8
 800259c:	4805      	ldr	r0, [pc, #20]	; (80025b4 <HAL_NVIC_EnableIRQ+0x2c>)
 800259e:	f7fe fddb 	bl	8001158 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ff2a 	bl	8002400 <__NVIC_EnableIRQ>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	080098d8 	.word	0x080098d8

080025b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a3f      	ldr	r2, [pc, #252]	; (80026d0 <HAL_GPIO_Init+0x118>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01f      	beq.n	8002616 <HAL_GPIO_Init+0x5e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a3e      	ldr	r2, [pc, #248]	; (80026d4 <HAL_GPIO_Init+0x11c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01b      	beq.n	8002616 <HAL_GPIO_Init+0x5e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a3d      	ldr	r2, [pc, #244]	; (80026d8 <HAL_GPIO_Init+0x120>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d017      	beq.n	8002616 <HAL_GPIO_Init+0x5e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a3c      	ldr	r2, [pc, #240]	; (80026dc <HAL_GPIO_Init+0x124>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_GPIO_Init+0x5e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a3b      	ldr	r2, [pc, #236]	; (80026e0 <HAL_GPIO_Init+0x128>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00f      	beq.n	8002616 <HAL_GPIO_Init+0x5e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a3a      	ldr	r2, [pc, #232]	; (80026e4 <HAL_GPIO_Init+0x12c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00b      	beq.n	8002616 <HAL_GPIO_Init+0x5e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a39      	ldr	r2, [pc, #228]	; (80026e8 <HAL_GPIO_Init+0x130>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d007      	beq.n	8002616 <HAL_GPIO_Init+0x5e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a38      	ldr	r2, [pc, #224]	; (80026ec <HAL_GPIO_Init+0x134>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x5e>
 800260e:	21b9      	movs	r1, #185	; 0xb9
 8002610:	4837      	ldr	r0, [pc, #220]	; (80026f0 <HAL_GPIO_Init+0x138>)
 8002612:	f7fe fda1 	bl	8001158 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_GPIO_Init+0x74>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	041b      	lsls	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x7c>
 800262c:	21ba      	movs	r1, #186	; 0xba
 800262e:	4830      	ldr	r0, [pc, #192]	; (80026f0 <HAL_GPIO_Init+0x138>)
 8002630:	f7fe fd92 	bl	8001158 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d035      	beq.n	80026a8 <HAL_GPIO_Init+0xf0>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d031      	beq.n	80026a8 <HAL_GPIO_Init+0xf0>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b11      	cmp	r3, #17
 800264a:	d02d      	beq.n	80026a8 <HAL_GPIO_Init+0xf0>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d029      	beq.n	80026a8 <HAL_GPIO_Init+0xf0>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b12      	cmp	r3, #18
 800265a:	d025      	beq.n	80026a8 <HAL_GPIO_Init+0xf0>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a24      	ldr	r2, [pc, #144]	; (80026f4 <HAL_GPIO_Init+0x13c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d020      	beq.n	80026a8 <HAL_GPIO_Init+0xf0>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <HAL_GPIO_Init+0x140>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d01b      	beq.n	80026a8 <HAL_GPIO_Init+0xf0>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a21      	ldr	r2, [pc, #132]	; (80026fc <HAL_GPIO_Init+0x144>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d016      	beq.n	80026a8 <HAL_GPIO_Init+0xf0>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4a20      	ldr	r2, [pc, #128]	; (8002700 <HAL_GPIO_Init+0x148>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d011      	beq.n	80026a8 <HAL_GPIO_Init+0xf0>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a1e      	ldr	r2, [pc, #120]	; (8002704 <HAL_GPIO_Init+0x14c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00c      	beq.n	80026a8 <HAL_GPIO_Init+0xf0>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <HAL_GPIO_Init+0x150>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d007      	beq.n	80026a8 <HAL_GPIO_Init+0xf0>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0xf0>
 80026a0:	21bb      	movs	r1, #187	; 0xbb
 80026a2:	4813      	ldr	r0, [pc, #76]	; (80026f0 <HAL_GPIO_Init+0x138>)
 80026a4:	f7fe fd58 	bl	8001158 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 81e4 	beq.w	8002a7a <HAL_GPIO_Init+0x4c2>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	f000 81df 	beq.w	8002a7a <HAL_GPIO_Init+0x4c2>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	f000 81da 	beq.w	8002a7a <HAL_GPIO_Init+0x4c2>
 80026c6:	21bc      	movs	r1, #188	; 0xbc
 80026c8:	4809      	ldr	r0, [pc, #36]	; (80026f0 <HAL_GPIO_Init+0x138>)
 80026ca:	f7fe fd45 	bl	8001158 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80026ce:	e1d4      	b.n	8002a7a <HAL_GPIO_Init+0x4c2>
 80026d0:	40020000 	.word	0x40020000
 80026d4:	40020400 	.word	0x40020400
 80026d8:	40020800 	.word	0x40020800
 80026dc:	40020c00 	.word	0x40020c00
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40021800 	.word	0x40021800
 80026e8:	40021c00 	.word	0x40021c00
 80026ec:	40021400 	.word	0x40021400
 80026f0:	08009914 	.word	0x08009914
 80026f4:	10110000 	.word	0x10110000
 80026f8:	10210000 	.word	0x10210000
 80026fc:	10310000 	.word	0x10310000
 8002700:	10120000 	.word	0x10120000
 8002704:	10220000 	.word	0x10220000
 8002708:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2101      	movs	r1, #1
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 81a8 	beq.w	8002a74 <HAL_GPIO_Init+0x4bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x17c>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b12      	cmp	r3, #18
 8002732:	d14f      	bne.n	80027d4 <HAL_GPIO_Init+0x21c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a92      	ldr	r2, [pc, #584]	; (8002980 <HAL_GPIO_Init+0x3c8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d01f      	beq.n	800277c <HAL_GPIO_Init+0x1c4>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a91      	ldr	r2, [pc, #580]	; (8002984 <HAL_GPIO_Init+0x3cc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d01b      	beq.n	800277c <HAL_GPIO_Init+0x1c4>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a90      	ldr	r2, [pc, #576]	; (8002988 <HAL_GPIO_Init+0x3d0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d017      	beq.n	800277c <HAL_GPIO_Init+0x1c4>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a8f      	ldr	r2, [pc, #572]	; (800298c <HAL_GPIO_Init+0x3d4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d013      	beq.n	800277c <HAL_GPIO_Init+0x1c4>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a8e      	ldr	r2, [pc, #568]	; (8002990 <HAL_GPIO_Init+0x3d8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00f      	beq.n	800277c <HAL_GPIO_Init+0x1c4>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a8d      	ldr	r2, [pc, #564]	; (8002994 <HAL_GPIO_Init+0x3dc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00b      	beq.n	800277c <HAL_GPIO_Init+0x1c4>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a8c      	ldr	r2, [pc, #560]	; (8002998 <HAL_GPIO_Init+0x3e0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d007      	beq.n	800277c <HAL_GPIO_Init+0x1c4>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a8b      	ldr	r2, [pc, #556]	; (800299c <HAL_GPIO_Init+0x3e4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x1c4>
 8002774:	21cb      	movs	r1, #203	; 0xcb
 8002776:	488a      	ldr	r0, [pc, #552]	; (80029a0 <HAL_GPIO_Init+0x3e8>)
 8002778:	f7fe fcee 	bl	8001158 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	2b0f      	cmp	r3, #15
 8002782:	d903      	bls.n	800278c <HAL_GPIO_Init+0x1d4>
 8002784:	21cc      	movs	r1, #204	; 0xcc
 8002786:	4886      	ldr	r0, [pc, #536]	; (80029a0 <HAL_GPIO_Init+0x3e8>)
 8002788:	f7fe fce6 	bl	8001158 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	08da      	lsrs	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3208      	adds	r2, #8
 8002794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002798:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	220f      	movs	r2, #15
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	08da      	lsrs	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3208      	adds	r2, #8
 80027ce:	6939      	ldr	r1, [r7, #16]
 80027d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0203 	and.w	r2, r3, #3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d00b      	beq.n	8002828 <HAL_GPIO_Init+0x270>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d007      	beq.n	8002828 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800281c:	2b11      	cmp	r3, #17
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b12      	cmp	r3, #18
 8002826:	d144      	bne.n	80028b2 <HAL_GPIO_Init+0x2fa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00f      	beq.n	8002850 <HAL_GPIO_Init+0x298>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d00b      	beq.n	8002850 <HAL_GPIO_Init+0x298>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d007      	beq.n	8002850 <HAL_GPIO_Init+0x298>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x298>
 8002848:	21e1      	movs	r1, #225	; 0xe1
 800284a:	4855      	ldr	r0, [pc, #340]	; (80029a0 <HAL_GPIO_Init+0x3e8>)
 800284c:	f7fe fc84 	bl	8001158 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002886:	2201      	movs	r2, #1
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f003 0201 	and.w	r2, r3, #1
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80c2 	beq.w	8002a74 <HAL_GPIO_Init+0x4bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f0:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <HAL_GPIO_Init+0x3ec>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4a2b      	ldr	r2, [pc, #172]	; (80029a4 <HAL_GPIO_Init+0x3ec>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6213      	str	r3, [r2, #32]
 80028fc:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <HAL_GPIO_Init+0x3ec>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8002908:	4a27      	ldr	r2, [pc, #156]	; (80029a8 <HAL_GPIO_Init+0x3f0>)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	3302      	adds	r3, #2
 8002910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002914:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	220f      	movs	r2, #15
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a14      	ldr	r2, [pc, #80]	; (8002980 <HAL_GPIO_Init+0x3c8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d03b      	beq.n	80029ac <HAL_GPIO_Init+0x3f4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a13      	ldr	r2, [pc, #76]	; (8002984 <HAL_GPIO_Init+0x3cc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d01f      	beq.n	800297c <HAL_GPIO_Init+0x3c4>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a12      	ldr	r2, [pc, #72]	; (8002988 <HAL_GPIO_Init+0x3d0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d019      	beq.n	8002978 <HAL_GPIO_Init+0x3c0>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a11      	ldr	r2, [pc, #68]	; (800298c <HAL_GPIO_Init+0x3d4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_GPIO_Init+0x3bc>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a10      	ldr	r2, [pc, #64]	; (8002990 <HAL_GPIO_Init+0x3d8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00d      	beq.n	8002970 <HAL_GPIO_Init+0x3b8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a11      	ldr	r2, [pc, #68]	; (800299c <HAL_GPIO_Init+0x3e4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d007      	beq.n	800296c <HAL_GPIO_Init+0x3b4>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <HAL_GPIO_Init+0x3dc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d101      	bne.n	8002968 <HAL_GPIO_Init+0x3b0>
 8002964:	2306      	movs	r3, #6
 8002966:	e022      	b.n	80029ae <HAL_GPIO_Init+0x3f6>
 8002968:	2307      	movs	r3, #7
 800296a:	e020      	b.n	80029ae <HAL_GPIO_Init+0x3f6>
 800296c:	2305      	movs	r3, #5
 800296e:	e01e      	b.n	80029ae <HAL_GPIO_Init+0x3f6>
 8002970:	2304      	movs	r3, #4
 8002972:	e01c      	b.n	80029ae <HAL_GPIO_Init+0x3f6>
 8002974:	2303      	movs	r3, #3
 8002976:	e01a      	b.n	80029ae <HAL_GPIO_Init+0x3f6>
 8002978:	2302      	movs	r3, #2
 800297a:	e018      	b.n	80029ae <HAL_GPIO_Init+0x3f6>
 800297c:	2301      	movs	r3, #1
 800297e:	e016      	b.n	80029ae <HAL_GPIO_Init+0x3f6>
 8002980:	40020000 	.word	0x40020000
 8002984:	40020400 	.word	0x40020400
 8002988:	40020800 	.word	0x40020800
 800298c:	40020c00 	.word	0x40020c00
 8002990:	40021000 	.word	0x40021000
 8002994:	40021800 	.word	0x40021800
 8002998:	40021c00 	.word	0x40021c00
 800299c:	40021400 	.word	0x40021400
 80029a0:	08009914 	.word	0x08009914
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40010000 	.word	0x40010000
 80029ac:	2300      	movs	r3, #0
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	f002 0203 	and.w	r2, r2, #3
 80029b4:	0092      	lsls	r2, r2, #2
 80029b6:	4093      	lsls	r3, r2
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029be:	4935      	ldr	r1, [pc, #212]	; (8002a94 <HAL_GPIO_Init+0x4dc>)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029cc:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <HAL_GPIO_Init+0x4e0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_GPIO_Init+0x438>
        {
          SET_BIT(temp, iocurrent); 
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029f0:	4a29      	ldr	r2, [pc, #164]	; (8002a98 <HAL_GPIO_Init+0x4e0>)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029f6:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_GPIO_Init+0x4e0>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4013      	ands	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_Init+0x462>
        {
          SET_BIT(temp, iocurrent); 
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a1a:	4a1f      	ldr	r2, [pc, #124]	; (8002a98 <HAL_GPIO_Init+0x4e0>)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <HAL_GPIO_Init+0x4e0>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x48c>
        {
          SET_BIT(temp, iocurrent); 
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a44:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <HAL_GPIO_Init+0x4e0>)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_GPIO_Init+0x4e0>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4013      	ands	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x4b6>
        {
          SET_BIT(temp, iocurrent); 
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_GPIO_Init+0x4e0>)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	3301      	adds	r3, #1
 8002a78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f47f ae41 	bne.w	800270c <HAL_GPIO_Init+0x154>
  } 
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40010400 	.word	0x40010400

08002a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d004      	beq.n	8002abc <HAL_GPIO_WritePin+0x20>
 8002ab2:	887b      	ldrh	r3, [r7, #2]
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	041b      	lsls	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d004      	beq.n	8002ac6 <HAL_GPIO_WritePin+0x2a>
 8002abc:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8002ac0:	480e      	ldr	r0, [pc, #56]	; (8002afc <HAL_GPIO_WritePin+0x60>)
 8002ac2:	f7fe fb49 	bl	8001158 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002ac6:	787b      	ldrb	r3, [r7, #1]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <HAL_GPIO_WritePin+0x40>
 8002acc:	787b      	ldrb	r3, [r7, #1]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d004      	beq.n	8002adc <HAL_GPIO_WritePin+0x40>
 8002ad2:	f240 11a5 	movw	r1, #421	; 0x1a5
 8002ad6:	4809      	ldr	r0, [pc, #36]	; (8002afc <HAL_GPIO_WritePin+0x60>)
 8002ad8:	f7fe fb3e 	bl	8001158 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002adc:	787b      	ldrb	r3, [r7, #1]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002ae8:	e003      	b.n	8002af2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	041a      	lsls	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	619a      	str	r2, [r3, #24]
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	08009914 	.word	0x08009914

08002b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d006      	beq.n	8002b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b16:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fef6 	bl	8000910 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40010400 	.word	0x40010400

08002b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e19b      	b.n	8002e7a <HAL_I2C_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a98      	ldr	r2, [pc, #608]	; (8002da8 <HAL_I2C_Init+0x278>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d009      	beq.n	8002b60 <HAL_I2C_Init+0x30>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a96      	ldr	r2, [pc, #600]	; (8002dac <HAL_I2C_Init+0x27c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d004      	beq.n	8002b60 <HAL_I2C_Init+0x30>
 8002b56:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002b5a:	4895      	ldr	r0, [pc, #596]	; (8002db0 <HAL_I2C_Init+0x280>)
 8002b5c:	f7fe fafc 	bl	8001158 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <HAL_I2C_Init+0x42>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a91      	ldr	r2, [pc, #580]	; (8002db4 <HAL_I2C_Init+0x284>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d904      	bls.n	8002b7c <HAL_I2C_Init+0x4c>
 8002b72:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002b76:	488e      	ldr	r0, [pc, #568]	; (8002db0 <HAL_I2C_Init+0x280>)
 8002b78:	f7fe faee 	bl	8001158 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d009      	beq.n	8002b98 <HAL_I2C_Init+0x68>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b8c:	d004      	beq.n	8002b98 <HAL_I2C_Init+0x68>
 8002b8e:	f240 11bd 	movw	r1, #445	; 0x1bd
 8002b92:	4887      	ldr	r0, [pc, #540]	; (8002db0 <HAL_I2C_Init+0x280>)
 8002b94:	f7fe fae0 	bl	8001158 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ba0:	f023 0303 	bic.w	r3, r3, #3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d004      	beq.n	8002bb2 <HAL_I2C_Init+0x82>
 8002ba8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002bac:	4880      	ldr	r0, [pc, #512]	; (8002db0 <HAL_I2C_Init+0x280>)
 8002bae:	f7fe fad3 	bl	8001158 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bba:	d009      	beq.n	8002bd0 <HAL_I2C_Init+0xa0>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002bc4:	d004      	beq.n	8002bd0 <HAL_I2C_Init+0xa0>
 8002bc6:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002bca:	4879      	ldr	r0, [pc, #484]	; (8002db0 <HAL_I2C_Init+0x280>)
 8002bcc:	f7fe fac4 	bl	8001158 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_I2C_Init+0xba>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d004      	beq.n	8002bea <HAL_I2C_Init+0xba>
 8002be0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002be4:	4872      	ldr	r0, [pc, #456]	; (8002db0 <HAL_I2C_Init+0x280>)
 8002be6:	f7fe fab7 	bl	8001158 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d004      	beq.n	8002c00 <HAL_I2C_Init+0xd0>
 8002bf6:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002bfa:	486d      	ldr	r0, [pc, #436]	; (8002db0 <HAL_I2C_Init+0x280>)
 8002bfc:	f7fe faac 	bl	8001158 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_I2C_Init+0xea>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d004      	beq.n	8002c1a <HAL_I2C_Init+0xea>
 8002c10:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002c14:	4866      	ldr	r0, [pc, #408]	; (8002db0 <HAL_I2C_Init+0x280>)
 8002c16:	f7fe fa9f 	bl	8001158 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_I2C_Init+0x104>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	2b80      	cmp	r3, #128	; 0x80
 8002c28:	d004      	beq.n	8002c34 <HAL_I2C_Init+0x104>
 8002c2a:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002c2e:	4860      	ldr	r0, [pc, #384]	; (8002db0 <HAL_I2C_Init+0x280>)
 8002c30:	f7fe fa92 	bl	8001158 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d106      	bne.n	8002c4e <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fe f9bb 	bl	8000fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2224      	movs	r2, #36	; 0x24
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c66:	f001 fdfd 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
 8002c6a:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4a51      	ldr	r2, [pc, #324]	; (8002db8 <HAL_I2C_Init+0x288>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d807      	bhi.n	8002c86 <HAL_I2C_Init+0x156>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a50      	ldr	r2, [pc, #320]	; (8002dbc <HAL_I2C_Init+0x28c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	bf94      	ite	ls
 8002c7e:	2301      	movls	r3, #1
 8002c80:	2300      	movhi	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	e006      	b.n	8002c94 <HAL_I2C_Init+0x164>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4a4d      	ldr	r2, [pc, #308]	; (8002dc0 <HAL_I2C_Init+0x290>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	bf94      	ite	ls
 8002c8e:	2301      	movls	r3, #1
 8002c90:	2300      	movhi	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_I2C_Init+0x16c>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0ee      	b.n	8002e7a <HAL_I2C_Init+0x34a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a49      	ldr	r2, [pc, #292]	; (8002dc4 <HAL_I2C_Init+0x294>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	0c9b      	lsrs	r3, r3, #18
 8002ca6:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4a3b      	ldr	r2, [pc, #236]	; (8002db8 <HAL_I2C_Init+0x288>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d802      	bhi.n	8002cd6 <HAL_I2C_Init+0x1a6>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	e009      	b.n	8002cea <HAL_I2C_Init+0x1ba>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	4a39      	ldr	r2, [pc, #228]	; (8002dc8 <HAL_I2C_Init+0x298>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	3301      	adds	r3, #1
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cfc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	492c      	ldr	r1, [pc, #176]	; (8002db8 <HAL_I2C_Init+0x288>)
 8002d06:	428b      	cmp	r3, r1
 8002d08:	d80d      	bhi.n	8002d26 <HAL_I2C_Init+0x1f6>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1e59      	subs	r1, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	bf38      	it	cc
 8002d22:	2304      	movcc	r3, #4
 8002d24:	e062      	b.n	8002dec <HAL_I2C_Init+0x2bc>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d111      	bne.n	8002d52 <HAL_I2C_Init+0x222>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1e58      	subs	r0, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	440b      	add	r3, r1
 8002d3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bf0c      	ite	eq
 8002d4a:	2301      	moveq	r3, #1
 8002d4c:	2300      	movne	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e012      	b.n	8002d78 <HAL_I2C_Init+0x248>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1e58      	subs	r0, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	0099      	lsls	r1, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf0c      	ite	eq
 8002d72:	2301      	moveq	r3, #1
 8002d74:	2300      	movne	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_I2C_Init+0x250>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e035      	b.n	8002dec <HAL_I2C_Init+0x2bc>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d121      	bne.n	8002dcc <HAL_I2C_Init+0x29c>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e58      	subs	r0, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	440b      	add	r3, r1
 8002d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da4:	e022      	b.n	8002dec <HAL_I2C_Init+0x2bc>
 8002da6:	bf00      	nop
 8002da8:	40005400 	.word	0x40005400
 8002dac:	40005800 	.word	0x40005800
 8002db0:	08009950 	.word	0x08009950
 8002db4:	00061a80 	.word	0x00061a80
 8002db8:	000186a0 	.word	0x000186a0
 8002dbc:	001e847f 	.word	0x001e847f
 8002dc0:	003d08ff 	.word	0x003d08ff
 8002dc4:	431bde83 	.word	0x431bde83
 8002dc8:	10624dd3 	.word	0x10624dd3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1e58      	subs	r0, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	0099      	lsls	r1, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de2:	3301      	adds	r3, #1
 8002de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	6809      	ldr	r1, [r1, #0]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6911      	ldr	r1, [r2, #16]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68d2      	ldr	r2, [r2, #12]
 8002e26:	4311      	orrs	r1, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop

08002e84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	460b      	mov	r3, r1
 8002e92:	817b      	strh	r3, [r7, #10]
 8002e94:	4613      	mov	r3, r2
 8002e96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7fe fd38 	bl	800190c <HAL_GetTick>
 8002e9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	f040 80e0 	bne.w	800306c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2319      	movs	r3, #25
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4970      	ldr	r1, [pc, #448]	; (8003078 <HAL_I2C_Master_Transmit+0x1f4>)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fc5a 	bl	8003770 <I2C_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e0d3      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_I2C_Master_Transmit+0x50>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e0cc      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d007      	beq.n	8002efa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2221      	movs	r2, #33	; 0x21
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2210      	movs	r2, #16
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	893a      	ldrh	r2, [r7, #8]
 8002f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4a50      	ldr	r2, [pc, #320]	; (800307c <HAL_I2C_Master_Transmit+0x1f8>)
 8002f3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f3c:	8979      	ldrh	r1, [r7, #10]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	6a3a      	ldr	r2, [r7, #32]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 face 	bl	80034e4 <I2C_MasterRequestWrite>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e08d      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f68:	e066      	b.n	8003038 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	6a39      	ldr	r1, [r7, #32]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fcd4 	bl	800391c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d107      	bne.n	8002f92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e06b      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d11b      	bne.n	800300c <HAL_I2C_Master_Transmit+0x188>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d017      	beq.n	800300c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	781a      	ldrb	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	6a39      	ldr	r1, [r7, #32]
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fcc4 	bl	800399e <I2C_WaitOnBTFFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00d      	beq.n	8003038 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	2b04      	cmp	r3, #4
 8003022:	d107      	bne.n	8003034 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003032:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e01a      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	d194      	bne.n	8002f6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
  }
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	00100002 	.word	0x00100002
 800307c:	ffff0000 	.word	0xffff0000

08003080 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08c      	sub	sp, #48	; 0x30
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	817b      	strh	r3, [r7, #10]
 8003092:	460b      	mov	r3, r1
 8003094:	813b      	strh	r3, [r7, #8]
 8003096:	4613      	mov	r3, r2
 8003098:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800309a:	f7fe fc37 	bl	800190c <HAL_GetTick>
 800309e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d007      	beq.n	80030b6 <HAL_I2C_Mem_Read+0x36>
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d004      	beq.n	80030b6 <HAL_I2C_Mem_Read+0x36>
 80030ac:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 80030b0:	4881      	ldr	r0, [pc, #516]	; (80032b8 <HAL_I2C_Mem_Read+0x238>)
 80030b2:	f7fe f851 	bl	8001158 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b20      	cmp	r3, #32
 80030c0:	f040 8209 	bne.w	80034d6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	2319      	movs	r3, #25
 80030ca:	2201      	movs	r2, #1
 80030cc:	497b      	ldr	r1, [pc, #492]	; (80032bc <HAL_I2C_Mem_Read+0x23c>)
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fb4e 	bl	8003770 <I2C_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 80030da:	2302      	movs	r3, #2
 80030dc:	e1fc      	b.n	80034d8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d101      	bne.n	80030ec <HAL_I2C_Mem_Read+0x6c>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e1f5      	b.n	80034d8 <HAL_I2C_Mem_Read+0x458>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d007      	beq.n	8003112 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003120:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2222      	movs	r2, #34	; 0x22
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2240      	movs	r2, #64	; 0x40
 800312e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003142:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4a5b      	ldr	r2, [pc, #364]	; (80032c0 <HAL_I2C_Mem_Read+0x240>)
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003154:	88f8      	ldrh	r0, [r7, #6]
 8003156:	893a      	ldrh	r2, [r7, #8]
 8003158:	8979      	ldrh	r1, [r7, #10]
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	4603      	mov	r3, r0
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fa33 	bl	80035d0 <I2C_RequestMemoryRead>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e1b1      	b.n	80034d8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	2b00      	cmp	r3, #0
 800317a:	d113      	bne.n	80031a4 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317c:	2300      	movs	r3, #0
 800317e:	623b      	str	r3, [r7, #32]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	623b      	str	r3, [r7, #32]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	623b      	str	r3, [r7, #32]
 8003190:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	e185      	b.n	80034b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d11b      	bne.n	80031e4 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ba:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031bc:	2300      	movs	r3, #0
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	e165      	b.n	80034b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d11b      	bne.n	8003224 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031fa:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800320a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320c:	2300      	movs	r3, #0
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	e145      	b.n	80034b0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800323a:	e139      	b.n	80034b0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	2b03      	cmp	r3, #3
 8003242:	f200 80f2 	bhi.w	800342a <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324a:	2b01      	cmp	r3, #1
 800324c:	d123      	bne.n	8003296 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800324e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003250:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fbe4 	bl	8003a20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e13a      	b.n	80034d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003294:	e10c      	b.n	80034b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	2b02      	cmp	r3, #2
 800329c:	d14f      	bne.n	800333e <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a4:	2200      	movs	r2, #0
 80032a6:	4907      	ldr	r1, [pc, #28]	; (80032c4 <HAL_I2C_Mem_Read+0x244>)
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fa61 	bl	8003770 <I2C_WaitOnFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d009      	beq.n	80032c8 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e10f      	b.n	80034d8 <HAL_I2C_Mem_Read+0x458>
 80032b8:	08009950 	.word	0x08009950
 80032bc:	00100002 	.word	0x00100002
 80032c0:	ffff0000 	.word	0xffff0000
 80032c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800333c:	e0b8      	b.n	80034b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003344:	2200      	movs	r2, #0
 8003346:	4966      	ldr	r1, [pc, #408]	; (80034e0 <HAL_I2C_Mem_Read+0x460>)
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 fa11 	bl	8003770 <I2C_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0bf      	b.n	80034d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	2200      	movs	r2, #0
 80033a2:	494f      	ldr	r1, [pc, #316]	; (80034e0 <HAL_I2C_Mem_Read+0x460>)
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f9e3 	bl	8003770 <I2C_WaitOnFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e091      	b.n	80034d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003428:	e042      	b.n	80034b0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800342a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 faf6 	bl	8003a20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e04c      	b.n	80034d8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b04      	cmp	r3, #4
 800347c:	d118      	bne.n	80034b0 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f47f aec1 	bne.w	800323c <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e000      	b.n	80034d8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3728      	adds	r7, #40	; 0x28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	00010004 	.word	0x00010004

080034e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	460b      	mov	r3, r1
 80034f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d006      	beq.n	800350e <I2C_MasterRequestWrite+0x2a>
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d003      	beq.n	800350e <I2C_MasterRequestWrite+0x2a>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800350c:	d108      	bne.n	8003520 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e00b      	b.n	8003538 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	2b12      	cmp	r3, #18
 8003526:	d107      	bne.n	8003538 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003536:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f913 	bl	8003770 <I2C_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e035      	b.n	80035c0 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800355c:	d108      	bne.n	8003570 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800355e:	897b      	ldrh	r3, [r7, #10]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800356c:	611a      	str	r2, [r3, #16]
 800356e:	e01b      	b.n	80035a8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003570:	897b      	ldrh	r3, [r7, #10]
 8003572:	11db      	asrs	r3, r3, #7
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f003 0306 	and.w	r3, r3, #6
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f063 030f 	orn	r3, r3, #15
 8003580:	b2da      	uxtb	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	490e      	ldr	r1, [pc, #56]	; (80035c8 <I2C_MasterRequestWrite+0xe4>)
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f945 	bl	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e010      	b.n	80035c0 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800359e:	897b      	ldrh	r3, [r7, #10]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4907      	ldr	r1, [pc, #28]	; (80035cc <I2C_MasterRequestWrite+0xe8>)
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f935 	bl	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	00010008 	.word	0x00010008
 80035cc:	00010002 	.word	0x00010002

080035d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	4608      	mov	r0, r1
 80035da:	4611      	mov	r1, r2
 80035dc:	461a      	mov	r2, r3
 80035de:	4603      	mov	r3, r0
 80035e0:	817b      	strh	r3, [r7, #10]
 80035e2:	460b      	mov	r3, r1
 80035e4:	813b      	strh	r3, [r7, #8]
 80035e6:	4613      	mov	r3, r2
 80035e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003608:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	2200      	movs	r2, #0
 8003612:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f8aa 	bl	8003770 <I2C_WaitOnFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e09e      	b.n	8003764 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003626:	897b      	ldrh	r3, [r7, #10]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003634:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	6a3a      	ldr	r2, [r7, #32]
 800363a:	494c      	ldr	r1, [pc, #304]	; (800376c <I2C_RequestMemoryRead+0x19c>)
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f8ee 	bl	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e08b      	b.n	8003764 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003664:	6a39      	ldr	r1, [r7, #32]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f958 	bl	800391c <I2C_WaitOnTXEFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00d      	beq.n	800368e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	2b04      	cmp	r3, #4
 8003678:	d107      	bne.n	800368a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003688:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e06a      	b.n	8003764 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d105      	bne.n	80036a0 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003694:	893b      	ldrh	r3, [r7, #8]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	611a      	str	r2, [r3, #16]
 800369e:	e021      	b.n	80036e4 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036a0:	893b      	ldrh	r3, [r7, #8]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b0:	6a39      	ldr	r1, [r7, #32]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f932 	bl	800391c <I2C_WaitOnTXEFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d107      	bne.n	80036d6 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e044      	b.n	8003764 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036da:	893b      	ldrh	r3, [r7, #8]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e6:	6a39      	ldr	r1, [r7, #32]
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f917 	bl	800391c <I2C_WaitOnTXEFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00d      	beq.n	8003710 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d107      	bne.n	800370c <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e029      	b.n	8003764 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800371e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	2200      	movs	r2, #0
 8003728:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f81f 	bl	8003770 <I2C_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e013      	b.n	8003764 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800373c:	897b      	ldrh	r3, [r7, #10]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	b2da      	uxtb	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	6a3a      	ldr	r2, [r7, #32]
 8003750:	4906      	ldr	r1, [pc, #24]	; (800376c <I2C_RequestMemoryRead+0x19c>)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f863 	bl	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	00010002 	.word	0x00010002

08003770 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	4613      	mov	r3, r2
 800377e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003780:	e025      	b.n	80037ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d021      	beq.n	80037ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378a:	f7fe f8bf 	bl	800190c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d302      	bcc.n	80037a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d116      	bne.n	80037ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f043 0220 	orr.w	r2, r3, #32
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e023      	b.n	8003816 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d10d      	bne.n	80037f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	43da      	mvns	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4013      	ands	r3, r2
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bf0c      	ite	eq
 80037ea:	2301      	moveq	r3, #1
 80037ec:	2300      	movne	r3, #0
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	e00c      	b.n	800380e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	43da      	mvns	r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4013      	ands	r3, r2
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	bf0c      	ite	eq
 8003806:	2301      	moveq	r3, #1
 8003808:	2300      	movne	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	429a      	cmp	r2, r3
 8003812:	d0b6      	beq.n	8003782 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800382c:	e051      	b.n	80038d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383c:	d123      	bne.n	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003856:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f043 0204 	orr.w	r2, r3, #4
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e046      	b.n	8003914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d021      	beq.n	80038d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388e:	f7fe f83d 	bl	800190c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	429a      	cmp	r2, r3
 800389c:	d302      	bcc.n	80038a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d116      	bne.n	80038d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f043 0220 	orr.w	r2, r3, #32
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e020      	b.n	8003914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d10c      	bne.n	80038f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	43da      	mvns	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4013      	ands	r3, r2
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	bf14      	ite	ne
 80038ee:	2301      	movne	r3, #1
 80038f0:	2300      	moveq	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	e00b      	b.n	800390e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	43da      	mvns	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4013      	ands	r3, r2
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf14      	ite	ne
 8003908:	2301      	movne	r3, #1
 800390a:	2300      	moveq	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d18d      	bne.n	800382e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003928:	e02d      	b.n	8003986 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f8ce 	bl	8003acc <I2C_IsAcknowledgeFailed>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e02d      	b.n	8003996 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d021      	beq.n	8003986 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003942:	f7fd ffe3 	bl	800190c <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	d302      	bcc.n	8003958 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d116      	bne.n	8003986 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0220 	orr.w	r2, r3, #32
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e007      	b.n	8003996 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003990:	2b80      	cmp	r3, #128	; 0x80
 8003992:	d1ca      	bne.n	800392a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039aa:	e02d      	b.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f88d 	bl	8003acc <I2C_IsAcknowledgeFailed>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e02d      	b.n	8003a18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c2:	d021      	beq.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c4:	f7fd ffa2 	bl	800190c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d302      	bcc.n	80039da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d116      	bne.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	f043 0220 	orr.w	r2, r3, #32
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e007      	b.n	8003a18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d1ca      	bne.n	80039ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a2c:	e042      	b.n	8003ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d119      	bne.n	8003a70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0210 	mvn.w	r2, #16
 8003a44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e029      	b.n	8003ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a70:	f7fd ff4c 	bl	800190c <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d302      	bcc.n	8003a86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d116      	bne.n	8003ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e007      	b.n	8003ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d1b5      	bne.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae2:	d11b      	bne.n	8003b1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f043 0204 	orr.w	r2, r3, #4
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d102      	bne.n	8003b3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f000 bc6c 	b.w	8004414 <HAL_RCC_OscConfig+0x8ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d022      	beq.n	8003b8a <HAL_RCC_OscConfig+0x62>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d11c      	bne.n	8003b8a <HAL_RCC_OscConfig+0x62>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d116      	bne.n	8003b8a <HAL_RCC_OscConfig+0x62>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d110      	bne.n	8003b8a <HAL_RCC_OscConfig+0x62>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <HAL_RCC_OscConfig+0x62>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d104      	bne.n	8003b8a <HAL_RCC_OscConfig+0x62>
 8003b80:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003b84:	4897      	ldr	r0, [pc, #604]	; (8003de4 <HAL_RCC_OscConfig+0x2bc>)
 8003b86:	f7fd fae7 	bl	8001158 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b8a:	4b97      	ldr	r3, [pc, #604]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b94:	4b94      	ldr	r3, [pc, #592]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 808e 	beq.w	8003cc8 <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00c      	beq.n	8003bce <HAL_RCC_OscConfig+0xa6>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d008      	beq.n	8003bce <HAL_RCC_OscConfig+0xa6>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	d004      	beq.n	8003bce <HAL_RCC_OscConfig+0xa6>
 8003bc4:	f240 1159 	movw	r1, #345	; 0x159
 8003bc8:	4886      	ldr	r0, [pc, #536]	; (8003de4 <HAL_RCC_OscConfig+0x2bc>)
 8003bca:	f7fd fac5 	bl	8001158 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d006      	beq.n	8003be2 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b0c      	cmp	r3, #12
 8003bd8:	d110      	bne.n	8003bfc <HAL_RCC_OscConfig+0xd4>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be2:	4b81      	ldr	r3, [pc, #516]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d06b      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x19e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d167      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f000 bc0c 	b.w	8004414 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0xea>
 8003c04:	4b78      	ldr	r3, [pc, #480]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a77      	ldr	r2, [pc, #476]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e02d      	b.n	8003c6e <HAL_RCC_OscConfig+0x146>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x10c>
 8003c1a:	4b73      	ldr	r3, [pc, #460]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a72      	ldr	r2, [pc, #456]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b70      	ldr	r3, [pc, #448]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a6f      	ldr	r2, [pc, #444]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	e01c      	b.n	8003c6e <HAL_RCC_OscConfig+0x146>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b05      	cmp	r3, #5
 8003c3a:	d10c      	bne.n	8003c56 <HAL_RCC_OscConfig+0x12e>
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a69      	ldr	r2, [pc, #420]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	4b67      	ldr	r3, [pc, #412]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a66      	ldr	r2, [pc, #408]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	e00b      	b.n	8003c6e <HAL_RCC_OscConfig+0x146>
 8003c56:	4b64      	ldr	r3, [pc, #400]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a63      	ldr	r2, [pc, #396]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b61      	ldr	r3, [pc, #388]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a60      	ldr	r2, [pc, #384]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d013      	beq.n	8003c9e <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c76:	f7fd fe49 	bl	800190c <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7e:	f7fd fe45 	bl	800190c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b64      	cmp	r3, #100	; 0x64
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e3c1      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c90:	4b55      	ldr	r3, [pc, #340]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x156>
 8003c9c:	e014      	b.n	8003cc8 <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9e:	f7fd fe35 	bl	800190c <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca6:	f7fd fe31 	bl	800190c <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b64      	cmp	r3, #100	; 0x64
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e3ad      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003cb8:	4b4b      	ldr	r3, [pc, #300]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f0      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x17e>
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d070      	beq.n	8003db6 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_OscConfig+0x1c6>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d004      	beq.n	8003cee <HAL_RCC_OscConfig+0x1c6>
 8003ce4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003ce8:	483e      	ldr	r0, [pc, #248]	; (8003de4 <HAL_RCC_OscConfig+0x2bc>)
 8003cea:	f7fd fa35 	bl	8001158 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b1f      	cmp	r3, #31
 8003cf4:	d904      	bls.n	8003d00 <HAL_RCC_OscConfig+0x1d8>
 8003cf6:	f240 118d 	movw	r1, #397	; 0x18d
 8003cfa:	483a      	ldr	r0, [pc, #232]	; (8003de4 <HAL_RCC_OscConfig+0x2bc>)
 8003cfc:	f7fd fa2c 	bl	8001158 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d005      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b0c      	cmp	r3, #12
 8003d0a:	d119      	bne.n	8003d40 <HAL_RCC_OscConfig+0x218>
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d116      	bne.n	8003d40 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d12:	4b35      	ldr	r3, [pc, #212]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_RCC_OscConfig+0x202>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e374      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2a:	4b2f      	ldr	r3, [pc, #188]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	492b      	ldr	r1, [pc, #172]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3e:	e03a      	b.n	8003db6 <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d020      	beq.n	8003d8a <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d48:	4b28      	ldr	r3, [pc, #160]	; (8003dec <HAL_RCC_OscConfig+0x2c4>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4e:	f7fd fddd 	bl	800190c <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d56:	f7fd fdd9 	bl	800190c <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e355      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d68:	4b1f      	ldr	r3, [pc, #124]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d74:	4b1c      	ldr	r3, [pc, #112]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	4919      	ldr	r1, [pc, #100]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
 8003d88:	e015      	b.n	8003db6 <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8a:	4b18      	ldr	r3, [pc, #96]	; (8003dec <HAL_RCC_OscConfig+0x2c4>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fd fdbc 	bl	800190c <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d98:	f7fd fdb8 	bl	800190c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e334      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003daa:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 8129 	beq.w	8004016 <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f040 80a4 	bne.w	8003f14 <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_RCC_OscConfig+0x2c0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00b      	beq.n	8003df0 <HAL_RCC_OscConfig+0x2c8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d107      	bne.n	8003df0 <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e317      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
 8003de4:	08009988 	.word	0x08009988
 8003de8:	40023800 	.word	0x40023800
 8003dec:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	2bff      	cmp	r3, #255	; 0xff
 8003df6:	d904      	bls.n	8003e02 <HAL_RCC_OscConfig+0x2da>
 8003df8:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003dfc:	48a5      	ldr	r0, [pc, #660]	; (8004094 <HAL_RCC_OscConfig+0x56c>)
 8003dfe:	f7fd f9ab 	bl	8001158 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d022      	beq.n	8003e50 <HAL_RCC_OscConfig+0x328>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e12:	d01d      	beq.n	8003e50 <HAL_RCC_OscConfig+0x328>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e1c:	d018      	beq.n	8003e50 <HAL_RCC_OscConfig+0x328>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e26:	d013      	beq.n	8003e50 <HAL_RCC_OscConfig+0x328>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e30:	d00e      	beq.n	8003e50 <HAL_RCC_OscConfig+0x328>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e3a:	d009      	beq.n	8003e50 <HAL_RCC_OscConfig+0x328>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e44:	d004      	beq.n	8003e50 <HAL_RCC_OscConfig+0x328>
 8003e46:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003e4a:	4892      	ldr	r0, [pc, #584]	; (8004094 <HAL_RCC_OscConfig+0x56c>)
 8003e4c:	f7fd f984 	bl	8001158 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	4b90      	ldr	r3, [pc, #576]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d91d      	bls.n	8003e9c <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fd67 	bl	8004938 <RCC_SetFlashLatencyFromMSIRange>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e2cf      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e74:	4b88      	ldr	r3, [pc, #544]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	4985      	ldr	r1, [pc, #532]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e86:	4b84      	ldr	r3, [pc, #528]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	061b      	lsls	r3, r3, #24
 8003e94:	4980      	ldr	r1, [pc, #512]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	604b      	str	r3, [r1, #4]
 8003e9a:	e01c      	b.n	8003ed6 <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e9c:	4b7e      	ldr	r3, [pc, #504]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	497b      	ldr	r1, [pc, #492]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eae:	4b7a      	ldr	r3, [pc, #488]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	061b      	lsls	r3, r3, #24
 8003ebc:	4976      	ldr	r1, [pc, #472]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fd36 	bl	8004938 <RCC_SetFlashLatencyFromMSIRange>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e29e      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	0b5b      	lsrs	r3, r3, #13
 8003edc:	3301      	adds	r3, #1
 8003ede:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003ee6:	4a6c      	ldr	r2, [pc, #432]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003ee8:	6892      	ldr	r2, [r2, #8]
 8003eea:	0912      	lsrs	r2, r2, #4
 8003eec:	f002 020f 	and.w	r2, r2, #15
 8003ef0:	496a      	ldr	r1, [pc, #424]	; (800409c <HAL_RCC_OscConfig+0x574>)
 8003ef2:	5c8a      	ldrb	r2, [r1, r2]
 8003ef4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ef6:	4a6a      	ldr	r2, [pc, #424]	; (80040a0 <HAL_RCC_OscConfig+0x578>)
 8003ef8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003efa:	4b6a      	ldr	r3, [pc, #424]	; (80040a4 <HAL_RCC_OscConfig+0x57c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fd f968 	bl	80011d4 <HAL_InitTick>
 8003f04:	4603      	mov	r3, r0
 8003f06:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8083 	beq.w	8004016 <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	e27f      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_RCC_OscConfig+0x406>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d004      	beq.n	8003f2e <HAL_RCC_OscConfig+0x406>
 8003f24:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003f28:	485a      	ldr	r0, [pc, #360]	; (8004094 <HAL_RCC_OscConfig+0x56c>)
 8003f2a:	f7fd f915 	bl	8001158 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d059      	beq.n	8003fea <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f36:	4b5c      	ldr	r3, [pc, #368]	; (80040a8 <HAL_RCC_OscConfig+0x580>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fd fce6 	bl	800190c <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f44:	f7fd fce2 	bl	800190c <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e25e      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f56:	4b50      	ldr	r3, [pc, #320]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	2bff      	cmp	r3, #255	; 0xff
 8003f68:	d904      	bls.n	8003f74 <HAL_RCC_OscConfig+0x44c>
 8003f6a:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8003f6e:	4849      	ldr	r0, [pc, #292]	; (8004094 <HAL_RCC_OscConfig+0x56c>)
 8003f70:	f7fd f8f2 	bl	8001158 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d022      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x49a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f84:	d01d      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x49a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f8e:	d018      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x49a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f98:	d013      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x49a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x49a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fac:	d009      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x49a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fb6:	d004      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x49a>
 8003fb8:	f240 211d 	movw	r1, #541	; 0x21d
 8003fbc:	4835      	ldr	r0, [pc, #212]	; (8004094 <HAL_RCC_OscConfig+0x56c>)
 8003fbe:	f7fd f8cb 	bl	8001158 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fc2:	4b35      	ldr	r3, [pc, #212]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	4932      	ldr	r1, [pc, #200]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fd4:	4b30      	ldr	r3, [pc, #192]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	061b      	lsls	r3, r3, #24
 8003fe2:	492d      	ldr	r1, [pc, #180]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
 8003fe8:	e015      	b.n	8004016 <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fea:	4b2f      	ldr	r3, [pc, #188]	; (80040a8 <HAL_RCC_OscConfig+0x580>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fc8c 	bl	800190c <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ff8:	f7fd fc88 	bl	800190c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e204      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800400a:	4b23      	ldr	r3, [pc, #140]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d04c      	beq.n	80040bc <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d008      	beq.n	800403c <HAL_RCC_OscConfig+0x514>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d004      	beq.n	800403c <HAL_RCC_OscConfig+0x514>
 8004032:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8004036:	4817      	ldr	r0, [pc, #92]	; (8004094 <HAL_RCC_OscConfig+0x56c>)
 8004038:	f7fd f88e 	bl	8001158 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d016      	beq.n	8004072 <HAL_RCC_OscConfig+0x54a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004044:	4b19      	ldr	r3, [pc, #100]	; (80040ac <HAL_RCC_OscConfig+0x584>)
 8004046:	2201      	movs	r2, #1
 8004048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404a:	f7fd fc5f 	bl	800190c <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004052:	f7fd fc5b 	bl	800190c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e1d7      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <HAL_RCC_OscConfig+0x570>)
 8004066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x52a>
 8004070:	e024      	b.n	80040bc <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004072:	4b0e      	ldr	r3, [pc, #56]	; (80040ac <HAL_RCC_OscConfig+0x584>)
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004078:	f7fd fc48 	bl	800190c <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800407e:	e017      	b.n	80040b0 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004080:	f7fd fc44 	bl	800190c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d910      	bls.n	80040b0 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e1c0      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
 8004092:	bf00      	nop
 8004094:	08009988 	.word	0x08009988
 8004098:	40023800 	.word	0x40023800
 800409c:	08009b4c 	.word	0x08009b4c
 80040a0:	20000000 	.word	0x20000000
 80040a4:	20000004 	.word	0x20000004
 80040a8:	42470020 	.word	0x42470020
 80040ac:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80040b0:	4ba2      	ldr	r3, [pc, #648]	; (800433c <HAL_RCC_OscConfig+0x814>)
 80040b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e1      	bne.n	8004080 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80b7 	beq.w	8004238 <HAL_RCC_OscConfig+0x710>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ca:	2300      	movs	r3, #0
 80040cc:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00c      	beq.n	80040f0 <HAL_RCC_OscConfig+0x5c8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d008      	beq.n	80040f0 <HAL_RCC_OscConfig+0x5c8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b05      	cmp	r3, #5
 80040e4:	d004      	beq.n	80040f0 <HAL_RCC_OscConfig+0x5c8>
 80040e6:	f44f 711a 	mov.w	r1, #616	; 0x268
 80040ea:	4895      	ldr	r0, [pc, #596]	; (8004340 <HAL_RCC_OscConfig+0x818>)
 80040ec:	f7fd f834 	bl	8001158 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f0:	4b92      	ldr	r3, [pc, #584]	; (800433c <HAL_RCC_OscConfig+0x814>)
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10d      	bne.n	8004118 <HAL_RCC_OscConfig+0x5f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040fc:	4b8f      	ldr	r3, [pc, #572]	; (800433c <HAL_RCC_OscConfig+0x814>)
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	4a8e      	ldr	r2, [pc, #568]	; (800433c <HAL_RCC_OscConfig+0x814>)
 8004102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004106:	6253      	str	r3, [r2, #36]	; 0x24
 8004108:	4b8c      	ldr	r3, [pc, #560]	; (800433c <HAL_RCC_OscConfig+0x814>)
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004114:	2301      	movs	r3, #1
 8004116:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	4b8a      	ldr	r3, [pc, #552]	; (8004344 <HAL_RCC_OscConfig+0x81c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d118      	bne.n	8004156 <HAL_RCC_OscConfig+0x62e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004124:	4b87      	ldr	r3, [pc, #540]	; (8004344 <HAL_RCC_OscConfig+0x81c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a86      	ldr	r2, [pc, #536]	; (8004344 <HAL_RCC_OscConfig+0x81c>)
 800412a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004130:	f7fd fbec 	bl	800190c <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004138:	f7fd fbe8 	bl	800190c <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	; 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e164      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414a:	4b7e      	ldr	r3, [pc, #504]	; (8004344 <HAL_RCC_OscConfig+0x81c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x610>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d106      	bne.n	800416c <HAL_RCC_OscConfig+0x644>
 800415e:	4b77      	ldr	r3, [pc, #476]	; (800433c <HAL_RCC_OscConfig+0x814>)
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004162:	4a76      	ldr	r2, [pc, #472]	; (800433c <HAL_RCC_OscConfig+0x814>)
 8004164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004168:	6353      	str	r3, [r2, #52]	; 0x34
 800416a:	e02d      	b.n	80041c8 <HAL_RCC_OscConfig+0x6a0>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10c      	bne.n	800418e <HAL_RCC_OscConfig+0x666>
 8004174:	4b71      	ldr	r3, [pc, #452]	; (800433c <HAL_RCC_OscConfig+0x814>)
 8004176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004178:	4a70      	ldr	r2, [pc, #448]	; (800433c <HAL_RCC_OscConfig+0x814>)
 800417a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800417e:	6353      	str	r3, [r2, #52]	; 0x34
 8004180:	4b6e      	ldr	r3, [pc, #440]	; (800433c <HAL_RCC_OscConfig+0x814>)
 8004182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004184:	4a6d      	ldr	r2, [pc, #436]	; (800433c <HAL_RCC_OscConfig+0x814>)
 8004186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800418a:	6353      	str	r3, [r2, #52]	; 0x34
 800418c:	e01c      	b.n	80041c8 <HAL_RCC_OscConfig+0x6a0>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b05      	cmp	r3, #5
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x688>
 8004196:	4b69      	ldr	r3, [pc, #420]	; (800433c <HAL_RCC_OscConfig+0x814>)
 8004198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419a:	4a68      	ldr	r2, [pc, #416]	; (800433c <HAL_RCC_OscConfig+0x814>)
 800419c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041a0:	6353      	str	r3, [r2, #52]	; 0x34
 80041a2:	4b66      	ldr	r3, [pc, #408]	; (800433c <HAL_RCC_OscConfig+0x814>)
 80041a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a6:	4a65      	ldr	r2, [pc, #404]	; (800433c <HAL_RCC_OscConfig+0x814>)
 80041a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ac:	6353      	str	r3, [r2, #52]	; 0x34
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0x6a0>
 80041b0:	4b62      	ldr	r3, [pc, #392]	; (800433c <HAL_RCC_OscConfig+0x814>)
 80041b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b4:	4a61      	ldr	r2, [pc, #388]	; (800433c <HAL_RCC_OscConfig+0x814>)
 80041b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ba:	6353      	str	r3, [r2, #52]	; 0x34
 80041bc:	4b5f      	ldr	r3, [pc, #380]	; (800433c <HAL_RCC_OscConfig+0x814>)
 80041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c0:	4a5e      	ldr	r2, [pc, #376]	; (800433c <HAL_RCC_OscConfig+0x814>)
 80041c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041c6:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d015      	beq.n	80041fc <HAL_RCC_OscConfig+0x6d4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d0:	f7fd fb9c 	bl	800190c <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d8:	f7fd fb98 	bl	800190c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e112      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ee:	4b53      	ldr	r3, [pc, #332]	; (800433c <HAL_RCC_OscConfig+0x814>)
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ee      	beq.n	80041d8 <HAL_RCC_OscConfig+0x6b0>
 80041fa:	e014      	b.n	8004226 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fc:	f7fd fb86 	bl	800190c <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004202:	e00a      	b.n	800421a <HAL_RCC_OscConfig+0x6f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fd fb82 	bl	800190c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0fc      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800421a:	4b48      	ldr	r3, [pc, #288]	; (800433c <HAL_RCC_OscConfig+0x814>)
 800421c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1ee      	bne.n	8004204 <HAL_RCC_OscConfig+0x6dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004226:	7ffb      	ldrb	r3, [r7, #31]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d105      	bne.n	8004238 <HAL_RCC_OscConfig+0x710>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800422c:	4b43      	ldr	r3, [pc, #268]	; (800433c <HAL_RCC_OscConfig+0x814>)
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	4a42      	ldr	r2, [pc, #264]	; (800433c <HAL_RCC_OscConfig+0x814>)
 8004232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004236:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00c      	beq.n	800425a <HAL_RCC_OscConfig+0x732>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	2b01      	cmp	r3, #1
 8004246:	d008      	beq.n	800425a <HAL_RCC_OscConfig+0x732>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	2b02      	cmp	r3, #2
 800424e:	d004      	beq.n	800425a <HAL_RCC_OscConfig+0x732>
 8004250:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8004254:	483a      	ldr	r0, [pc, #232]	; (8004340 <HAL_RCC_OscConfig+0x818>)
 8004256:	f7fc ff7f 	bl	8001158 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 80d7 	beq.w	8004412 <HAL_RCC_OscConfig+0x8ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b0c      	cmp	r3, #12
 8004268:	f000 80b3 	beq.w	80043d2 <HAL_RCC_OscConfig+0x8aa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	2b02      	cmp	r3, #2
 8004272:	f040 8097 	bne.w	80043a4 <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_RCC_OscConfig+0x76a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004286:	d004      	beq.n	8004292 <HAL_RCC_OscConfig+0x76a>
 8004288:	f240 21b5 	movw	r1, #693	; 0x2b5
 800428c:	482c      	ldr	r0, [pc, #176]	; (8004340 <HAL_RCC_OscConfig+0x818>)
 800428e:	f7fc ff63 	bl	8001158 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d02c      	beq.n	80042f4 <HAL_RCC_OscConfig+0x7cc>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042a2:	d027      	beq.n	80042f4 <HAL_RCC_OscConfig+0x7cc>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042ac:	d022      	beq.n	80042f4 <HAL_RCC_OscConfig+0x7cc>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042b6:	d01d      	beq.n	80042f4 <HAL_RCC_OscConfig+0x7cc>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042c0:	d018      	beq.n	80042f4 <HAL_RCC_OscConfig+0x7cc>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80042ca:	d013      	beq.n	80042f4 <HAL_RCC_OscConfig+0x7cc>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80042d4:	d00e      	beq.n	80042f4 <HAL_RCC_OscConfig+0x7cc>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80042de:	d009      	beq.n	80042f4 <HAL_RCC_OscConfig+0x7cc>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042e8:	d004      	beq.n	80042f4 <HAL_RCC_OscConfig+0x7cc>
 80042ea:	f240 21b6 	movw	r1, #694	; 0x2b6
 80042ee:	4814      	ldr	r0, [pc, #80]	; (8004340 <HAL_RCC_OscConfig+0x818>)
 80042f0:	f7fc ff32 	bl	8001158 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fc:	d00e      	beq.n	800431c <HAL_RCC_OscConfig+0x7f4>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004306:	d009      	beq.n	800431c <HAL_RCC_OscConfig+0x7f4>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004310:	d004      	beq.n	800431c <HAL_RCC_OscConfig+0x7f4>
 8004312:	f240 21b7 	movw	r1, #695	; 0x2b7
 8004316:	480a      	ldr	r0, [pc, #40]	; (8004340 <HAL_RCC_OscConfig+0x818>)
 8004318:	f7fc ff1e 	bl	8001158 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <HAL_RCC_OscConfig+0x820>)
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004322:	f7fd faf3 	bl	800190c <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004328:	e010      	b.n	800434c <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800432a:	f7fd faef 	bl	800190c <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d909      	bls.n	800434c <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e06b      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
 800433c:	40023800 	.word	0x40023800
 8004340:	08009988 	.word	0x08009988
 8004344:	40007000 	.word	0x40007000
 8004348:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800434c:	4b33      	ldr	r3, [pc, #204]	; (800441c <HAL_RCC_OscConfig+0x8f4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e8      	bne.n	800432a <HAL_RCC_OscConfig+0x802>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004358:	4b30      	ldr	r3, [pc, #192]	; (800441c <HAL_RCC_OscConfig+0x8f4>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	4319      	orrs	r1, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	430b      	orrs	r3, r1
 8004370:	492a      	ldr	r1, [pc, #168]	; (800441c <HAL_RCC_OscConfig+0x8f4>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004376:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <HAL_RCC_OscConfig+0x8f8>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fd fac6 	bl	800190c <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004384:	f7fd fac2 	bl	800190c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e03e      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004396:	4b21      	ldr	r3, [pc, #132]	; (800441c <HAL_RCC_OscConfig+0x8f4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x85c>
 80043a2:	e036      	b.n	8004412 <HAL_RCC_OscConfig+0x8ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a4:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <HAL_RCC_OscConfig+0x8f8>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043aa:	f7fd faaf 	bl	800190c <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x89c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b2:	f7fd faab 	bl	800190c <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x89c>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e027      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043c4:	4b15      	ldr	r3, [pc, #84]	; (800441c <HAL_RCC_OscConfig+0x8f4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f0      	bne.n	80043b2 <HAL_RCC_OscConfig+0x88a>
 80043d0:	e01f      	b.n	8004412 <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_RCC_OscConfig+0x8b6>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e01a      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043de:	4b0f      	ldr	r3, [pc, #60]	; (800441c <HAL_RCC_OscConfig+0x8f4>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d10d      	bne.n	800440e <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d106      	bne.n	800440e <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x8ea>
        {
          return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <HAL_RCC_OscConfig+0x8ec>
        }
      }
    }
  }

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3720      	adds	r7, #32
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	42470060 	.word	0x42470060

08004424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e1a4      	b.n	8004782 <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <HAL_RCC_ClockConfig+0x2a>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d004      	beq.n	800444e <HAL_RCC_ClockConfig+0x2a>
 8004444:	f240 312a 	movw	r1, #810	; 0x32a
 8004448:	4893      	ldr	r0, [pc, #588]	; (8004698 <HAL_RCC_ClockConfig+0x274>)
 800444a:	f7fc fe85 	bl	8001158 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800444e:	4b93      	ldr	r3, [pc, #588]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d919      	bls.n	8004490 <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d105      	bne.n	800446e <HAL_RCC_ClockConfig+0x4a>
 8004462:	4b8e      	ldr	r3, [pc, #568]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a8d      	ldr	r2, [pc, #564]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004468:	f043 0304 	orr.w	r3, r3, #4
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	4b8b      	ldr	r3, [pc, #556]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 0201 	bic.w	r2, r3, #1
 8004476:	4989      	ldr	r1, [pc, #548]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b87      	ldr	r3, [pc, #540]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e178      	b.n	8004782 <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d031      	beq.n	8004500 <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d024      	beq.n	80044ee <HAL_RCC_ClockConfig+0xca>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b80      	cmp	r3, #128	; 0x80
 80044aa:	d020      	beq.n	80044ee <HAL_RCC_ClockConfig+0xca>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b90      	cmp	r3, #144	; 0x90
 80044b2:	d01c      	beq.n	80044ee <HAL_RCC_ClockConfig+0xca>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2ba0      	cmp	r3, #160	; 0xa0
 80044ba:	d018      	beq.n	80044ee <HAL_RCC_ClockConfig+0xca>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2bb0      	cmp	r3, #176	; 0xb0
 80044c2:	d014      	beq.n	80044ee <HAL_RCC_ClockConfig+0xca>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2bc0      	cmp	r3, #192	; 0xc0
 80044ca:	d010      	beq.n	80044ee <HAL_RCC_ClockConfig+0xca>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2bd0      	cmp	r3, #208	; 0xd0
 80044d2:	d00c      	beq.n	80044ee <HAL_RCC_ClockConfig+0xca>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2be0      	cmp	r3, #224	; 0xe0
 80044da:	d008      	beq.n	80044ee <HAL_RCC_ClockConfig+0xca>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2bf0      	cmp	r3, #240	; 0xf0
 80044e2:	d004      	beq.n	80044ee <HAL_RCC_ClockConfig+0xca>
 80044e4:	f240 3141 	movw	r1, #833	; 0x341
 80044e8:	486b      	ldr	r0, [pc, #428]	; (8004698 <HAL_RCC_ClockConfig+0x274>)
 80044ea:	f7fc fe35 	bl	8001158 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ee:	4b6c      	ldr	r3, [pc, #432]	; (80046a0 <HAL_RCC_ClockConfig+0x27c>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	4969      	ldr	r1, [pc, #420]	; (80046a0 <HAL_RCC_ClockConfig+0x27c>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80a3 	beq.w	8004654 <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d010      	beq.n	8004538 <HAL_RCC_ClockConfig+0x114>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d00c      	beq.n	8004538 <HAL_RCC_ClockConfig+0x114>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d008      	beq.n	8004538 <HAL_RCC_ClockConfig+0x114>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b03      	cmp	r3, #3
 800452c:	d004      	beq.n	8004538 <HAL_RCC_ClockConfig+0x114>
 800452e:	f44f 7152 	mov.w	r1, #840	; 0x348
 8004532:	4859      	ldr	r0, [pc, #356]	; (8004698 <HAL_RCC_ClockConfig+0x274>)
 8004534:	f7fc fe10 	bl	8001158 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d107      	bne.n	8004550 <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004540:	4b57      	ldr	r3, [pc, #348]	; (80046a0 <HAL_RCC_ClockConfig+0x27c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d121      	bne.n	8004590 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e118      	b.n	8004782 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d107      	bne.n	8004568 <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004558:	4b51      	ldr	r3, [pc, #324]	; (80046a0 <HAL_RCC_ClockConfig+0x27c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d115      	bne.n	8004590 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e10c      	b.n	8004782 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d107      	bne.n	8004580 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004570:	4b4b      	ldr	r3, [pc, #300]	; (80046a0 <HAL_RCC_ClockConfig+0x27c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e100      	b.n	8004782 <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004580:	4b47      	ldr	r3, [pc, #284]	; (80046a0 <HAL_RCC_ClockConfig+0x27c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e0f8      	b.n	8004782 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004590:	4b43      	ldr	r3, [pc, #268]	; (80046a0 <HAL_RCC_ClockConfig+0x27c>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f023 0203 	bic.w	r2, r3, #3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4940      	ldr	r1, [pc, #256]	; (80046a0 <HAL_RCC_ClockConfig+0x27c>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a2:	f7fd f9b3 	bl	800190c <HAL_GetTick>
 80045a6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d112      	bne.n	80045d6 <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045b0:	e00a      	b.n	80045c8 <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b2:	f7fd f9ab 	bl	800190c <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e0dc      	b.n	8004782 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045c8:	4b35      	ldr	r3, [pc, #212]	; (80046a0 <HAL_RCC_ClockConfig+0x27c>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d1ee      	bne.n	80045b2 <HAL_RCC_ClockConfig+0x18e>
 80045d4:	e03e      	b.n	8004654 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d112      	bne.n	8004604 <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e0:	f7fd f994 	bl	800190c <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e0c5      	b.n	8004782 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045f6:	4b2a      	ldr	r3, [pc, #168]	; (80046a0 <HAL_RCC_ClockConfig+0x27c>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b0c      	cmp	r3, #12
 8004600:	d1ee      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x1bc>
 8004602:	e027      	b.n	8004654 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d11d      	bne.n	8004648 <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800460c:	e00a      	b.n	8004624 <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800460e:	f7fd f97d 	bl	800190c <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	f241 3288 	movw	r2, #5000	; 0x1388
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e0ae      	b.n	8004782 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004624:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <HAL_RCC_ClockConfig+0x27c>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b04      	cmp	r3, #4
 800462e:	d1ee      	bne.n	800460e <HAL_RCC_ClockConfig+0x1ea>
 8004630:	e010      	b.n	8004654 <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004632:	f7fd f96b 	bl	800190c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e09c      	b.n	8004782 <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004648:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <HAL_RCC_ClockConfig+0x27c>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 030c 	and.w	r3, r3, #12
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1ee      	bne.n	8004632 <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004654:	4b11      	ldr	r3, [pc, #68]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d220      	bcs.n	80046a4 <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d105      	bne.n	8004674 <HAL_RCC_ClockConfig+0x250>
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a0b      	ldr	r2, [pc, #44]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 800466e:	f043 0304 	orr.w	r3, r3, #4
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f023 0201 	bic.w	r2, r3, #1
 800467c:	4907      	ldr	r1, [pc, #28]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	4313      	orrs	r3, r2
 8004682:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004684:	4b05      	ldr	r3, [pc, #20]	; (800469c <HAL_RCC_ClockConfig+0x278>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d008      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e075      	b.n	8004782 <HAL_RCC_ClockConfig+0x35e>
 8004696:	bf00      	nop
 8004698:	08009988 	.word	0x08009988
 800469c:	40023c00 	.word	0x40023c00
 80046a0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d025      	beq.n	80046fc <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d018      	beq.n	80046ea <HAL_RCC_ClockConfig+0x2c6>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c0:	d013      	beq.n	80046ea <HAL_RCC_ClockConfig+0x2c6>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80046ca:	d00e      	beq.n	80046ea <HAL_RCC_ClockConfig+0x2c6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046d4:	d009      	beq.n	80046ea <HAL_RCC_ClockConfig+0x2c6>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046de:	d004      	beq.n	80046ea <HAL_RCC_ClockConfig+0x2c6>
 80046e0:	f240 31ad 	movw	r1, #941	; 0x3ad
 80046e4:	4829      	ldr	r0, [pc, #164]	; (800478c <HAL_RCC_ClockConfig+0x368>)
 80046e6:	f7fc fd37 	bl	8001158 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ea:	4b29      	ldr	r3, [pc, #164]	; (8004790 <HAL_RCC_ClockConfig+0x36c>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	4926      	ldr	r1, [pc, #152]	; (8004790 <HAL_RCC_ClockConfig+0x36c>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d026      	beq.n	8004756 <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d018      	beq.n	8004742 <HAL_RCC_ClockConfig+0x31e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004718:	d013      	beq.n	8004742 <HAL_RCC_ClockConfig+0x31e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004722:	d00e      	beq.n	8004742 <HAL_RCC_ClockConfig+0x31e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x31e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004736:	d004      	beq.n	8004742 <HAL_RCC_ClockConfig+0x31e>
 8004738:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 800473c:	4813      	ldr	r0, [pc, #76]	; (800478c <HAL_RCC_ClockConfig+0x368>)
 800473e:	f7fc fd0b 	bl	8001158 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004742:	4b13      	ldr	r3, [pc, #76]	; (8004790 <HAL_RCC_ClockConfig+0x36c>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	490f      	ldr	r1, [pc, #60]	; (8004790 <HAL_RCC_ClockConfig+0x36c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004756:	f000 f823 	bl	80047a0 <HAL_RCC_GetSysClockFreq>
 800475a:	4601      	mov	r1, r0
 800475c:	4b0c      	ldr	r3, [pc, #48]	; (8004790 <HAL_RCC_ClockConfig+0x36c>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	4a0b      	ldr	r2, [pc, #44]	; (8004794 <HAL_RCC_ClockConfig+0x370>)
 8004768:	5cd3      	ldrb	r3, [r2, r3]
 800476a:	fa21 f303 	lsr.w	r3, r1, r3
 800476e:	4a0a      	ldr	r2, [pc, #40]	; (8004798 <HAL_RCC_ClockConfig+0x374>)
 8004770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <HAL_RCC_ClockConfig+0x378>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7fc fd2c 	bl	80011d4 <HAL_InitTick>
 800477c:	4603      	mov	r3, r0
 800477e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004780:	7afb      	ldrb	r3, [r7, #11]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	08009988 	.word	0x08009988
 8004790:	40023800 	.word	0x40023800
 8004794:	08009b4c 	.word	0x08009b4c
 8004798:	20000000 	.word	0x20000000
 800479c:	20000004 	.word	0x20000004

080047a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80047a6:	4b26      	ldr	r3, [pc, #152]	; (8004840 <HAL_RCC_GetSysClockFreq+0xa0>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d006      	beq.n	80047c4 <HAL_RCC_GetSysClockFreq+0x24>
 80047b6:	2b0c      	cmp	r3, #12
 80047b8:	d007      	beq.n	80047ca <HAL_RCC_GetSysClockFreq+0x2a>
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d12c      	bne.n	8004818 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047be:	4b21      	ldr	r3, [pc, #132]	; (8004844 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047c0:	613b      	str	r3, [r7, #16]
      break;
 80047c2:	e037      	b.n	8004834 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047c4:	4b20      	ldr	r3, [pc, #128]	; (8004848 <HAL_RCC_GetSysClockFreq+0xa8>)
 80047c6:	613b      	str	r3, [r7, #16]
      break;
 80047c8:	e034      	b.n	8004834 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	0c9b      	lsrs	r3, r3, #18
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	4a1e      	ldr	r2, [pc, #120]	; (800484c <HAL_RCC_GetSysClockFreq+0xac>)
 80047d4:	5cd3      	ldrb	r3, [r2, r3]
 80047d6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	0d9b      	lsrs	r3, r3, #22
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	3301      	adds	r3, #1
 80047e2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047e4:	4b16      	ldr	r3, [pc, #88]	; (8004840 <HAL_RCC_GetSysClockFreq+0xa0>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4a15      	ldr	r2, [pc, #84]	; (8004848 <HAL_RCC_GetSysClockFreq+0xa8>)
 80047f4:	fb02 f203 	mul.w	r2, r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	e007      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4a0f      	ldr	r2, [pc, #60]	; (8004844 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004806:	fb02 f203 	mul.w	r2, r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	613b      	str	r3, [r7, #16]
      break;
 8004816:	e00d      	b.n	8004834 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <HAL_RCC_GetSysClockFreq+0xa0>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	0b5b      	lsrs	r3, r3, #13
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	3301      	adds	r3, #1
 8004828:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	613b      	str	r3, [r7, #16]
      break;
 8004832:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004834:	693b      	ldr	r3, [r7, #16]
}
 8004836:	4618      	mov	r0, r3
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr
 8004840:	40023800 	.word	0x40023800
 8004844:	00f42400 	.word	0x00f42400
 8004848:	007a1200 	.word	0x007a1200
 800484c:	08009b40 	.word	0x08009b40

08004850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004854:	4b02      	ldr	r3, [pc, #8]	; (8004860 <HAL_RCC_GetHCLKFreq+0x10>)
 8004856:	681b      	ldr	r3, [r3, #0]
}
 8004858:	4618      	mov	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	20000000 	.word	0x20000000

08004864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004868:	f7ff fff2 	bl	8004850 <HAL_RCC_GetHCLKFreq>
 800486c:	4601      	mov	r1, r0
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	0a1b      	lsrs	r3, r3, #8
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	4a03      	ldr	r2, [pc, #12]	; (8004888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800487a:	5cd3      	ldrb	r3, [r2, r3]
 800487c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40023800 	.word	0x40023800
 8004888:	08009b5c 	.word	0x08009b5c

0800488c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004890:	f7ff ffde 	bl	8004850 <HAL_RCC_GetHCLKFreq>
 8004894:	4601      	mov	r1, r0
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	0adb      	lsrs	r3, r3, #11
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	4a03      	ldr	r2, [pc, #12]	; (80048b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048a2:	5cd3      	ldrb	r3, [r2, r3]
 80048a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40023800 	.word	0x40023800
 80048b0:	08009b5c 	.word	0x08009b5c

080048b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d104      	bne.n	80048ce <HAL_RCC_GetClockConfig+0x1a>
 80048c4:	f240 41fa 	movw	r1, #1274	; 0x4fa
 80048c8:	4818      	ldr	r0, [pc, #96]	; (800492c <HAL_RCC_GetClockConfig+0x78>)
 80048ca:	f7fc fc45 	bl	8001158 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <HAL_RCC_GetClockConfig+0x2a>
 80048d4:	f240 41fb 	movw	r1, #1275	; 0x4fb
 80048d8:	4814      	ldr	r0, [pc, #80]	; (800492c <HAL_RCC_GetClockConfig+0x78>)
 80048da:	f7fc fc3d 	bl	8001158 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	220f      	movs	r2, #15
 80048e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048e4:	4b12      	ldr	r3, [pc, #72]	; (8004930 <HAL_RCC_GetClockConfig+0x7c>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0203 	and.w	r2, r3, #3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048f0:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <HAL_RCC_GetClockConfig+0x7c>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <HAL_RCC_GetClockConfig+0x7c>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <HAL_RCC_GetClockConfig+0x7c>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	08db      	lsrs	r3, r3, #3
 800490e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004916:	4b07      	ldr	r3, [pc, #28]	; (8004934 <HAL_RCC_GetClockConfig+0x80>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0201 	and.w	r2, r3, #1
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	601a      	str	r2, [r3, #0]
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	08009988 	.word	0x08009988
 8004930:	40023800 	.word	0x40023800
 8004934:	40023c00 	.word	0x40023c00

08004938 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004940:	2300      	movs	r3, #0
 8004942:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004944:	4b29      	ldr	r3, [pc, #164]	; (80049ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d12c      	bne.n	80049aa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004950:	4b26      	ldr	r3, [pc, #152]	; (80049ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800495c:	4b24      	ldr	r3, [pc, #144]	; (80049f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	e016      	b.n	8004996 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004968:	4b20      	ldr	r3, [pc, #128]	; (80049ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800496e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004972:	6253      	str	r3, [r2, #36]	; 0x24
 8004974:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004980:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004988:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800498a:	4b18      	ldr	r3, [pc, #96]	; (80049ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	4a17      	ldr	r2, [pc, #92]	; (80049ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004994:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800499c:	d105      	bne.n	80049aa <RCC_SetFlashLatencyFromMSIRange+0x72>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049a4:	d101      	bne.n	80049aa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80049a6:	2301      	movs	r3, #1
 80049a8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d105      	bne.n	80049bc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80049b0:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a0f      	ldr	r2, [pc, #60]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049b6:	f043 0304 	orr.w	r3, r3, #4
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f023 0201 	bic.w	r2, r3, #1
 80049c4:	490b      	ldr	r1, [pc, #44]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049cc:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d001      	beq.n	80049de <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40007000 	.word	0x40007000
 80049f4:	40023c00 	.word	0x40023c00

080049f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e088      	b.n	8004b1c <HAL_TIM_Base_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a12:	d02c      	beq.n	8004a6e <HAL_TIM_Base_Init+0x76>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a42      	ldr	r2, [pc, #264]	; (8004b24 <HAL_TIM_Base_Init+0x12c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d027      	beq.n	8004a6e <HAL_TIM_Base_Init+0x76>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a41      	ldr	r2, [pc, #260]	; (8004b28 <HAL_TIM_Base_Init+0x130>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d022      	beq.n	8004a6e <HAL_TIM_Base_Init+0x76>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a3f      	ldr	r2, [pc, #252]	; (8004b2c <HAL_TIM_Base_Init+0x134>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d01d      	beq.n	8004a6e <HAL_TIM_Base_Init+0x76>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a3e      	ldr	r2, [pc, #248]	; (8004b30 <HAL_TIM_Base_Init+0x138>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d018      	beq.n	8004a6e <HAL_TIM_Base_Init+0x76>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a3c      	ldr	r2, [pc, #240]	; (8004b34 <HAL_TIM_Base_Init+0x13c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d013      	beq.n	8004a6e <HAL_TIM_Base_Init+0x76>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a3b      	ldr	r2, [pc, #236]	; (8004b38 <HAL_TIM_Base_Init+0x140>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00e      	beq.n	8004a6e <HAL_TIM_Base_Init+0x76>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a39      	ldr	r2, [pc, #228]	; (8004b3c <HAL_TIM_Base_Init+0x144>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d009      	beq.n	8004a6e <HAL_TIM_Base_Init+0x76>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a38      	ldr	r2, [pc, #224]	; (8004b40 <HAL_TIM_Base_Init+0x148>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d004      	beq.n	8004a6e <HAL_TIM_Base_Init+0x76>
 8004a64:	f240 110b 	movw	r1, #267	; 0x10b
 8004a68:	4836      	ldr	r0, [pc, #216]	; (8004b44 <HAL_TIM_Base_Init+0x14c>)
 8004a6a:	f7fc fb75 	bl	8001158 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d014      	beq.n	8004aa0 <HAL_TIM_Base_Init+0xa8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b10      	cmp	r3, #16
 8004a7c:	d010      	beq.n	8004aa0 <HAL_TIM_Base_Init+0xa8>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d00c      	beq.n	8004aa0 <HAL_TIM_Base_Init+0xa8>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d008      	beq.n	8004aa0 <HAL_TIM_Base_Init+0xa8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b60      	cmp	r3, #96	; 0x60
 8004a94:	d004      	beq.n	8004aa0 <HAL_TIM_Base_Init+0xa8>
 8004a96:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8004a9a:	482a      	ldr	r0, [pc, #168]	; (8004b44 <HAL_TIM_Base_Init+0x14c>)
 8004a9c:	f7fc fb5c 	bl	8001158 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_TIM_Base_Init+0xce>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ab0:	d009      	beq.n	8004ac6 <HAL_TIM_Base_Init+0xce>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aba:	d004      	beq.n	8004ac6 <HAL_TIM_Base_Init+0xce>
 8004abc:	f240 110d 	movw	r1, #269	; 0x10d
 8004ac0:	4820      	ldr	r0, [pc, #128]	; (8004b44 <HAL_TIM_Base_Init+0x14c>)
 8004ac2:	f7fc fb49 	bl	8001158 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_TIM_Base_Init+0xe8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	2b80      	cmp	r3, #128	; 0x80
 8004ad4:	d004      	beq.n	8004ae0 <HAL_TIM_Base_Init+0xe8>
 8004ad6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004ada:	481a      	ldr	r0, [pc, #104]	; (8004b44 <HAL_TIM_Base_Init+0x14c>)
 8004adc:	f7fc fb3c 	bl	8001158 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7fc fd83 	bl	8001600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f000 feb5 	bl	800587c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40000400 	.word	0x40000400
 8004b28:	40000800 	.word	0x40000800
 8004b2c:	40000c00 	.word	0x40000c00
 8004b30:	40001000 	.word	0x40001000
 8004b34:	40001400 	.word	0x40001400
 8004b38:	40010800 	.word	0x40010800
 8004b3c:	40010c00 	.word	0x40010c00
 8004b40:	40011000 	.word	0x40011000
 8004b44:	080099c0 	.word	0x080099c0

08004b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b58:	d02c      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a24      	ldr	r2, [pc, #144]	; (8004bf0 <HAL_TIM_Base_Start_IT+0xa8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d027      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a22      	ldr	r2, [pc, #136]	; (8004bf4 <HAL_TIM_Base_Start_IT+0xac>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d022      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a21      	ldr	r2, [pc, #132]	; (8004bf8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d01d      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a1f      	ldr	r2, [pc, #124]	; (8004bfc <HAL_TIM_Base_Start_IT+0xb4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d018      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a1e      	ldr	r2, [pc, #120]	; (8004c00 <HAL_TIM_Base_Start_IT+0xb8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d013      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1c      	ldr	r2, [pc, #112]	; (8004c04 <HAL_TIM_Base_Start_IT+0xbc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00e      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <HAL_TIM_Base_Start_IT+0xc0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d009      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <HAL_TIM_Base_Start_IT+0xc4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x6c>
 8004baa:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8004bae:	4818      	ldr	r0, [pc, #96]	; (8004c10 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bb0:	f7fc fad2 	bl	8001158 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b06      	cmp	r3, #6
 8004bd4:	d007      	beq.n	8004be6 <HAL_TIM_Base_Start_IT+0x9e>
  {
    __HAL_TIM_ENABLE(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0201 	orr.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	40001000 	.word	0x40001000
 8004c00:	40001400 	.word	0x40001400
 8004c04:	40010800 	.word	0x40010800
 8004c08:	40010c00 	.word	0x40010c00
 8004c0c:	40011000 	.word	0x40011000
 8004c10:	080099c0 	.word	0x080099c0

08004c14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e088      	b.n	8004d38 <HAL_TIM_PWM_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2e:	d02c      	beq.n	8004c8a <HAL_TIM_PWM_Init+0x76>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a42      	ldr	r2, [pc, #264]	; (8004d40 <HAL_TIM_PWM_Init+0x12c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d027      	beq.n	8004c8a <HAL_TIM_PWM_Init+0x76>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a41      	ldr	r2, [pc, #260]	; (8004d44 <HAL_TIM_PWM_Init+0x130>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d022      	beq.n	8004c8a <HAL_TIM_PWM_Init+0x76>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a3f      	ldr	r2, [pc, #252]	; (8004d48 <HAL_TIM_PWM_Init+0x134>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01d      	beq.n	8004c8a <HAL_TIM_PWM_Init+0x76>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a3e      	ldr	r2, [pc, #248]	; (8004d4c <HAL_TIM_PWM_Init+0x138>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d018      	beq.n	8004c8a <HAL_TIM_PWM_Init+0x76>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a3c      	ldr	r2, [pc, #240]	; (8004d50 <HAL_TIM_PWM_Init+0x13c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <HAL_TIM_PWM_Init+0x76>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a3b      	ldr	r2, [pc, #236]	; (8004d54 <HAL_TIM_PWM_Init+0x140>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00e      	beq.n	8004c8a <HAL_TIM_PWM_Init+0x76>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a39      	ldr	r2, [pc, #228]	; (8004d58 <HAL_TIM_PWM_Init+0x144>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d009      	beq.n	8004c8a <HAL_TIM_PWM_Init+0x76>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a38      	ldr	r2, [pc, #224]	; (8004d5c <HAL_TIM_PWM_Init+0x148>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_TIM_PWM_Init+0x76>
 8004c80:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8004c84:	4836      	ldr	r0, [pc, #216]	; (8004d60 <HAL_TIM_PWM_Init+0x14c>)
 8004c86:	f7fc fa67 	bl	8001158 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d014      	beq.n	8004cbc <HAL_TIM_PWM_Init+0xa8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b10      	cmp	r3, #16
 8004c98:	d010      	beq.n	8004cbc <HAL_TIM_PWM_Init+0xa8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d00c      	beq.n	8004cbc <HAL_TIM_PWM_Init+0xa8>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b40      	cmp	r3, #64	; 0x40
 8004ca8:	d008      	beq.n	8004cbc <HAL_TIM_PWM_Init+0xa8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2b60      	cmp	r3, #96	; 0x60
 8004cb0:	d004      	beq.n	8004cbc <HAL_TIM_PWM_Init+0xa8>
 8004cb2:	f240 4171 	movw	r1, #1137	; 0x471
 8004cb6:	482a      	ldr	r0, [pc, #168]	; (8004d60 <HAL_TIM_PWM_Init+0x14c>)
 8004cb8:	f7fc fa4e 	bl	8001158 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_TIM_PWM_Init+0xce>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ccc:	d009      	beq.n	8004ce2 <HAL_TIM_PWM_Init+0xce>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd6:	d004      	beq.n	8004ce2 <HAL_TIM_PWM_Init+0xce>
 8004cd8:	f240 4172 	movw	r1, #1138	; 0x472
 8004cdc:	4820      	ldr	r0, [pc, #128]	; (8004d60 <HAL_TIM_PWM_Init+0x14c>)
 8004cde:	f7fc fa3b 	bl	8001158 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_TIM_PWM_Init+0xe8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	2b80      	cmp	r3, #128	; 0x80
 8004cf0:	d004      	beq.n	8004cfc <HAL_TIM_PWM_Init+0xe8>
 8004cf2:	f240 4173 	movw	r1, #1139	; 0x473
 8004cf6:	481a      	ldr	r0, [pc, #104]	; (8004d60 <HAL_TIM_PWM_Init+0x14c>)
 8004cf8:	f7fc fa2e 	bl	8001158 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <HAL_TIM_PWM_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f827 	bl	8004d64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f000 fda7 	bl	800587c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40000800 	.word	0x40000800
 8004d48:	40000c00 	.word	0x40000c00
 8004d4c:	40001000 	.word	0x40001000
 8004d50:	40001400 	.word	0x40001400
 8004d54:	40010800 	.word	0x40010800
 8004d58:	40010c00 	.word	0x40010c00
 8004d5c:	40011000 	.word	0x40011000
 8004d60:	080099c0 	.word	0x080099c0

08004d64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d122      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d11b      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f06f 0202 	mvn.w	r2, #2
 8004da2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fd44 	bl	8005846 <HAL_TIM_IC_CaptureCallback>
 8004dbe:	e005      	b.n	8004dcc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fd37 	bl	8005834 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fd46 	bl	8005858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d122      	bne.n	8004e26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d11b      	bne.n	8004e26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f06f 0204 	mvn.w	r2, #4
 8004df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fd1a 	bl	8005846 <HAL_TIM_IC_CaptureCallback>
 8004e12:	e005      	b.n	8004e20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fd0d 	bl	8005834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fd1c 	bl	8005858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d122      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d11b      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f06f 0208 	mvn.w	r2, #8
 8004e4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2204      	movs	r2, #4
 8004e50:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fcf0 	bl	8005846 <HAL_TIM_IC_CaptureCallback>
 8004e66:	e005      	b.n	8004e74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fce3 	bl	8005834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fcf2 	bl	8005858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	d122      	bne.n	8004ece <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b10      	cmp	r3, #16
 8004e94:	d11b      	bne.n	8004ece <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f06f 0210 	mvn.w	r2, #16
 8004e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2208      	movs	r2, #8
 8004ea4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fcc6 	bl	8005846 <HAL_TIM_IC_CaptureCallback>
 8004eba:	e005      	b.n	8004ec8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fcb9 	bl	8005834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fcc8 	bl	8005858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d10e      	bne.n	8004efa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d107      	bne.n	8004efa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f06f 0201 	mvn.w	r2, #1
 8004ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7fc f917 	bl	8001128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f04:	2b40      	cmp	r3, #64	; 0x40
 8004f06:	d10e      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b40      	cmp	r3, #64	; 0x40
 8004f14:	d107      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fca2 	bl	800586a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d010      	beq.n	8004f64 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b04      	cmp	r3, #4
 8004f46:	d00d      	beq.n	8004f64 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d00a      	beq.n	8004f64 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b0c      	cmp	r3, #12
 8004f52:	d007      	beq.n	8004f64 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b3c      	cmp	r3, #60	; 0x3c
 8004f58:	d004      	beq.n	8004f64 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004f5a:	f640 5169 	movw	r1, #3433	; 0xd69
 8004f5e:	488d      	ldr	r0, [pc, #564]	; (8005194 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004f60:	f7fc f8fa 	bl	8001158 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b60      	cmp	r3, #96	; 0x60
 8004f6a:	d008      	beq.n	8004f7e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b70      	cmp	r3, #112	; 0x70
 8004f72:	d004      	beq.n	8004f7e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8004f74:	f640 516a 	movw	r1, #3434	; 0xd6a
 8004f78:	4886      	ldr	r0, [pc, #536]	; (8005194 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004f7a:	f7fc f8ed 	bl	8001158 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <HAL_TIM_PWM_ConfigChannel+0x68>
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d004      	beq.n	8004f98 <HAL_TIM_PWM_ConfigChannel+0x68>
 8004f8e:	f640 516b 	movw	r1, #3435	; 0xd6b
 8004f92:	4880      	ldr	r0, [pc, #512]	; (8005194 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004f94:	f7fc f8e0 	bl	8001158 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_TIM_PWM_ConfigChannel+0x82>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d004      	beq.n	8004fb2 <HAL_TIM_PWM_ConfigChannel+0x82>
 8004fa8:	f640 516c 	movw	r1, #3436	; 0xd6c
 8004fac:	4879      	ldr	r0, [pc, #484]	; (8005194 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004fae:	f7fc f8d3 	bl	8001158 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_TIM_PWM_ConfigChannel+0x90>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e13b      	b.n	8005238 <HAL_TIM_PWM_ConfigChannel+0x308>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b0c      	cmp	r3, #12
 8004fd4:	f200 8126 	bhi.w	8005224 <HAL_TIM_PWM_ConfigChannel+0x2f4>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005015 	.word	0x08005015
 8004fe4:	08005225 	.word	0x08005225
 8004fe8:	08005225 	.word	0x08005225
 8004fec:	08005225 	.word	0x08005225
 8004ff0:	080050a5 	.word	0x080050a5
 8004ff4:	08005225 	.word	0x08005225
 8004ff8:	08005225 	.word	0x08005225
 8004ffc:	08005225 	.word	0x08005225
 8005000:	08005123 	.word	0x08005123
 8005004:	08005225 	.word	0x08005225
 8005008:	08005225 	.word	0x08005225
 800500c:	08005225 	.word	0x08005225
 8005010:	080051b1 	.word	0x080051b1
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501c:	d022      	beq.n	8005064 <HAL_TIM_PWM_ConfigChannel+0x134>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a5d      	ldr	r2, [pc, #372]	; (8005198 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d01d      	beq.n	8005064 <HAL_TIM_PWM_ConfigChannel+0x134>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a5b      	ldr	r2, [pc, #364]	; (800519c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d018      	beq.n	8005064 <HAL_TIM_PWM_ConfigChannel+0x134>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a5a      	ldr	r2, [pc, #360]	; (80051a0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d013      	beq.n	8005064 <HAL_TIM_PWM_ConfigChannel+0x134>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a58      	ldr	r2, [pc, #352]	; (80051a4 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00e      	beq.n	8005064 <HAL_TIM_PWM_ConfigChannel+0x134>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a57      	ldr	r2, [pc, #348]	; (80051a8 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d009      	beq.n	8005064 <HAL_TIM_PWM_ConfigChannel+0x134>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a55      	ldr	r2, [pc, #340]	; (80051ac <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <HAL_TIM_PWM_ConfigChannel+0x134>
 800505a:	f640 5178 	movw	r1, #3448	; 0xd78
 800505e:	484d      	ldr	r0, [pc, #308]	; (8005194 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005060:	f7fc f87a 	bl	8001158 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fc76 	bl	800595c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699a      	ldr	r2, [r3, #24]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0208 	orr.w	r2, r2, #8
 800507e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0204 	bic.w	r2, r2, #4
 800508e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6999      	ldr	r1, [r3, #24]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	619a      	str	r2, [r3, #24]
      break;
 80050a2:	e0c0      	b.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ac:	d018      	beq.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a39      	ldr	r2, [pc, #228]	; (8005198 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a37      	ldr	r2, [pc, #220]	; (800519c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00e      	beq.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a36      	ldr	r2, [pc, #216]	; (80051a0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a34      	ldr	r2, [pc, #208]	; (80051a4 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 80050d6:	f640 5189 	movw	r1, #3465	; 0xd89
 80050da:	482e      	ldr	r0, [pc, #184]	; (8005194 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80050dc:	f7fc f83c 	bl	8001158 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fc74 	bl	80059d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6999      	ldr	r1, [r3, #24]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	021a      	lsls	r2, r3, #8
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	619a      	str	r2, [r3, #24]
      break;
 8005120:	e081      	b.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512a:	d013      	beq.n	8005154 <HAL_TIM_PWM_ConfigChannel+0x224>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a19      	ldr	r2, [pc, #100]	; (8005198 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <HAL_TIM_PWM_ConfigChannel+0x224>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a18      	ldr	r2, [pc, #96]	; (800519c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_TIM_PWM_ConfigChannel+0x224>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a16      	ldr	r2, [pc, #88]	; (80051a0 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_TIM_PWM_ConfigChannel+0x224>
 800514a:	f640 519a 	movw	r1, #3482	; 0xd9a
 800514e:	4811      	ldr	r0, [pc, #68]	; (8005194 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005150:	f7fc f802 	bl	8001158 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fc78 	bl	8005a50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69da      	ldr	r2, [r3, #28]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0208 	orr.w	r2, r2, #8
 800516e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69da      	ldr	r2, [r3, #28]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0204 	bic.w	r2, r2, #4
 800517e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	69d9      	ldr	r1, [r3, #28]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	61da      	str	r2, [r3, #28]
      break;
 8005192:	e048      	b.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8005194:	080099c0 	.word	0x080099c0
 8005198:	40000400 	.word	0x40000400
 800519c:	40000800 	.word	0x40000800
 80051a0:	40000c00 	.word	0x40000c00
 80051a4:	40010800 	.word	0x40010800
 80051a8:	40010c00 	.word	0x40010c00
 80051ac:	40011000 	.word	0x40011000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b8:	d013      	beq.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a20      	ldr	r2, [pc, #128]	; (8005240 <HAL_TIM_PWM_ConfigChannel+0x310>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00e      	beq.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1e      	ldr	r2, [pc, #120]	; (8005244 <HAL_TIM_PWM_ConfigChannel+0x314>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d009      	beq.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a1d      	ldr	r2, [pc, #116]	; (8005248 <HAL_TIM_PWM_ConfigChannel+0x318>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d004      	beq.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 80051d8:	f640 51ab 	movw	r1, #3499	; 0xdab
 80051dc:	481b      	ldr	r0, [pc, #108]	; (800524c <HAL_TIM_PWM_ConfigChannel+0x31c>)
 80051de:	f7fb ffbb 	bl	8001158 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fc6e 	bl	8005aca <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69d9      	ldr	r1, [r3, #28]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	021a      	lsls	r2, r3, #8
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	61da      	str	r2, [r3, #28]
      break;
 8005222:	e000      	b.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    default:
      break;
 8005224:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40000400 	.word	0x40000400
 8005244:	40000800 	.word	0x40000800
 8005248:	40000c00 	.word	0x40000c00
 800524c:	080099c0 	.word	0x080099c0

08005250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_TIM_ConfigClockSource+0x18>
 8005264:	2302      	movs	r3, #2
 8005266:	e2d7      	b.n	8005818 <HAL_TIM_ConfigClockSource+0x5c8>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005280:	d029      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x86>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800528a:	d024      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x86>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d020      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x86>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b10      	cmp	r3, #16
 800529a:	d01c      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x86>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d018      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x86>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b30      	cmp	r3, #48	; 0x30
 80052aa:	d014      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x86>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d010      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x86>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b50      	cmp	r3, #80	; 0x50
 80052ba:	d00c      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x86>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b60      	cmp	r3, #96	; 0x60
 80052c2:	d008      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x86>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b70      	cmp	r3, #112	; 0x70
 80052ca:	d004      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x86>
 80052cc:	f241 01d0 	movw	r1, #4304	; 0x10d0
 80052d0:	4874      	ldr	r0, [pc, #464]	; (80054a4 <HAL_TIM_ConfigClockSource+0x254>)
 80052d2:	f7fb ff41 	bl	8001158 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ec:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	f000 820a 	beq.w	8005714 <HAL_TIM_ConfigClockSource+0x4c4>
 8005300:	2b40      	cmp	r3, #64	; 0x40
 8005302:	d80f      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0xd4>
 8005304:	2b10      	cmp	r3, #16
 8005306:	f000 8256 	beq.w	80057b6 <HAL_TIM_ConfigClockSource+0x566>
 800530a:	2b10      	cmp	r3, #16
 800530c:	d803      	bhi.n	8005316 <HAL_TIM_ConfigClockSource+0xc6>
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 8251 	beq.w	80057b6 <HAL_TIM_ConfigClockSource+0x566>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005314:	e277      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8005316:	2b20      	cmp	r3, #32
 8005318:	f000 824d 	beq.w	80057b6 <HAL_TIM_ConfigClockSource+0x566>
 800531c:	2b30      	cmp	r3, #48	; 0x30
 800531e:	f000 824a 	beq.w	80057b6 <HAL_TIM_ConfigClockSource+0x566>
      break;
 8005322:	e270      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8005324:	2b70      	cmp	r3, #112	; 0x70
 8005326:	d04c      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x172>
 8005328:	2b70      	cmp	r3, #112	; 0x70
 800532a:	d806      	bhi.n	800533a <HAL_TIM_ConfigClockSource+0xea>
 800532c:	2b50      	cmp	r3, #80	; 0x50
 800532e:	f000 8141 	beq.w	80055b4 <HAL_TIM_ConfigClockSource+0x364>
 8005332:	2b60      	cmp	r3, #96	; 0x60
 8005334:	f000 818f 	beq.w	8005656 <HAL_TIM_ConfigClockSource+0x406>
      break;
 8005338:	e265      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 800533a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533e:	d004      	beq.n	800534a <HAL_TIM_ConfigClockSource+0xfa>
 8005340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005344:	f000 80c0 	beq.w	80054c8 <HAL_TIM_ConfigClockSource+0x278>
      break;
 8005348:	e25d      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005352:	f000 8257 	beq.w	8005804 <HAL_TIM_ConfigClockSource+0x5b4>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a53      	ldr	r2, [pc, #332]	; (80054a8 <HAL_TIM_ConfigClockSource+0x258>)
 800535c:	4293      	cmp	r3, r2
 800535e:	f000 8251 	beq.w	8005804 <HAL_TIM_ConfigClockSource+0x5b4>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a51      	ldr	r2, [pc, #324]	; (80054ac <HAL_TIM_ConfigClockSource+0x25c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	f000 824b 	beq.w	8005804 <HAL_TIM_ConfigClockSource+0x5b4>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a4f      	ldr	r2, [pc, #316]	; (80054b0 <HAL_TIM_ConfigClockSource+0x260>)
 8005374:	4293      	cmp	r3, r2
 8005376:	f000 8245 	beq.w	8005804 <HAL_TIM_ConfigClockSource+0x5b4>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a4d      	ldr	r2, [pc, #308]	; (80054b4 <HAL_TIM_ConfigClockSource+0x264>)
 8005380:	4293      	cmp	r3, r2
 8005382:	f000 823f 	beq.w	8005804 <HAL_TIM_ConfigClockSource+0x5b4>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a4b      	ldr	r2, [pc, #300]	; (80054b8 <HAL_TIM_ConfigClockSource+0x268>)
 800538c:	4293      	cmp	r3, r2
 800538e:	f000 8239 	beq.w	8005804 <HAL_TIM_ConfigClockSource+0x5b4>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a49      	ldr	r2, [pc, #292]	; (80054bc <HAL_TIM_ConfigClockSource+0x26c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	f000 8233 	beq.w	8005804 <HAL_TIM_ConfigClockSource+0x5b4>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a47      	ldr	r2, [pc, #284]	; (80054c0 <HAL_TIM_ConfigClockSource+0x270>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	f000 822d 	beq.w	8005804 <HAL_TIM_ConfigClockSource+0x5b4>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a45      	ldr	r2, [pc, #276]	; (80054c4 <HAL_TIM_ConfigClockSource+0x274>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	f000 8227 	beq.w	8005804 <HAL_TIM_ConfigClockSource+0x5b4>
 80053b6:	f241 01dc 	movw	r1, #4316	; 0x10dc
 80053ba:	483a      	ldr	r0, [pc, #232]	; (80054a4 <HAL_TIM_ConfigClockSource+0x254>)
 80053bc:	f7fb fecc 	bl	8001158 <assert_failed>
      break;
 80053c0:	e220      	b.n	8005804 <HAL_TIM_ConfigClockSource+0x5b4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ca:	d018      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x1ae>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a35      	ldr	r2, [pc, #212]	; (80054a8 <HAL_TIM_ConfigClockSource+0x258>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x1ae>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a34      	ldr	r2, [pc, #208]	; (80054ac <HAL_TIM_ConfigClockSource+0x25c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00e      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x1ae>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a32      	ldr	r2, [pc, #200]	; (80054b0 <HAL_TIM_ConfigClockSource+0x260>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x1ae>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a33      	ldr	r2, [pc, #204]	; (80054bc <HAL_TIM_ConfigClockSource+0x26c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x1ae>
 80053f4:	f241 01e3 	movw	r1, #4323	; 0x10e3
 80053f8:	482a      	ldr	r0, [pc, #168]	; (80054a4 <HAL_TIM_ConfigClockSource+0x254>)
 80053fa:	f7fb fead 	bl	8001158 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d013      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x1de>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540e:	d00e      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x1de>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005418:	d009      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x1de>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005422:	d004      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x1de>
 8005424:	f241 01e6 	movw	r1, #4326	; 0x10e6
 8005428:	481e      	ldr	r0, [pc, #120]	; (80054a4 <HAL_TIM_ConfigClockSource+0x254>)
 800542a:	f7fb fe95 	bl	8001158 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005436:	d014      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x212>
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d010      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x212>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00c      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x212>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d008      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x212>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b0a      	cmp	r3, #10
 8005456:	d004      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0x212>
 8005458:	f241 01e7 	movw	r1, #4327	; 0x10e7
 800545c:	4811      	ldr	r0, [pc, #68]	; (80054a4 <HAL_TIM_ConfigClockSource+0x254>)
 800545e:	f7fb fe7b 	bl	8001158 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	2b0f      	cmp	r3, #15
 8005468:	d904      	bls.n	8005474 <HAL_TIM_ConfigClockSource+0x224>
 800546a:	f241 01e8 	movw	r1, #4328	; 0x10e8
 800546e:	480d      	ldr	r0, [pc, #52]	; (80054a4 <HAL_TIM_ConfigClockSource+0x254>)
 8005470:	f7fb fe72 	bl	8001158 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	6899      	ldr	r1, [r3, #8]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f000 fbd6 	bl	8005c34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005496:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	609a      	str	r2, [r3, #8]
      break;
 80054a0:	e1b1      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x5b6>
 80054a2:	bf00      	nop
 80054a4:	080099c0 	.word	0x080099c0
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40000c00 	.word	0x40000c00
 80054b4:	40001000 	.word	0x40001000
 80054b8:	40001400 	.word	0x40001400
 80054bc:	40010800 	.word	0x40010800
 80054c0:	40010c00 	.word	0x40010c00
 80054c4:	40011000 	.word	0x40011000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d0:	d022      	beq.n	8005518 <HAL_TIM_ConfigClockSource+0x2c8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a88      	ldr	r2, [pc, #544]	; (80056f8 <HAL_TIM_ConfigClockSource+0x4a8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d01d      	beq.n	8005518 <HAL_TIM_ConfigClockSource+0x2c8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a86      	ldr	r2, [pc, #536]	; (80056fc <HAL_TIM_ConfigClockSource+0x4ac>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d018      	beq.n	8005518 <HAL_TIM_ConfigClockSource+0x2c8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a85      	ldr	r2, [pc, #532]	; (8005700 <HAL_TIM_ConfigClockSource+0x4b0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d013      	beq.n	8005518 <HAL_TIM_ConfigClockSource+0x2c8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a83      	ldr	r2, [pc, #524]	; (8005704 <HAL_TIM_ConfigClockSource+0x4b4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00e      	beq.n	8005518 <HAL_TIM_ConfigClockSource+0x2c8>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a82      	ldr	r2, [pc, #520]	; (8005708 <HAL_TIM_ConfigClockSource+0x4b8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d009      	beq.n	8005518 <HAL_TIM_ConfigClockSource+0x2c8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a80      	ldr	r2, [pc, #512]	; (800570c <HAL_TIM_ConfigClockSource+0x4bc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_TIM_ConfigClockSource+0x2c8>
 800550e:	f241 01fb 	movw	r1, #4347	; 0x10fb
 8005512:	487f      	ldr	r0, [pc, #508]	; (8005710 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005514:	f7fb fe20 	bl	8001158 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d013      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0x2f8>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005528:	d00e      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0x2f8>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005532:	d009      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0x2f8>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800553c:	d004      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0x2f8>
 800553e:	f241 01fe 	movw	r1, #4350	; 0x10fe
 8005542:	4873      	ldr	r0, [pc, #460]	; (8005710 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005544:	f7fb fe08 	bl	8001158 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005550:	d014      	beq.n	800557c <HAL_TIM_ConfigClockSource+0x32c>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d010      	beq.n	800557c <HAL_TIM_ConfigClockSource+0x32c>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00c      	beq.n	800557c <HAL_TIM_ConfigClockSource+0x32c>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d008      	beq.n	800557c <HAL_TIM_ConfigClockSource+0x32c>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b0a      	cmp	r3, #10
 8005570:	d004      	beq.n	800557c <HAL_TIM_ConfigClockSource+0x32c>
 8005572:	f241 01ff 	movw	r1, #4351	; 0x10ff
 8005576:	4866      	ldr	r0, [pc, #408]	; (8005710 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005578:	f7fb fdee 	bl	8001158 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2b0f      	cmp	r3, #15
 8005582:	d904      	bls.n	800558e <HAL_TIM_ConfigClockSource+0x33e>
 8005584:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8005588:	4861      	ldr	r0, [pc, #388]	; (8005710 <HAL_TIM_ConfigClockSource+0x4c0>)
 800558a:	f7fb fde5 	bl	8001158 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6899      	ldr	r1, [r3, #8]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f000 fb49 	bl	8005c34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055b0:	609a      	str	r2, [r3, #8]
      break;
 80055b2:	e128      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055bc:	d018      	beq.n	80055f0 <HAL_TIM_ConfigClockSource+0x3a0>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a4d      	ldr	r2, [pc, #308]	; (80056f8 <HAL_TIM_ConfigClockSource+0x4a8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d013      	beq.n	80055f0 <HAL_TIM_ConfigClockSource+0x3a0>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a4b      	ldr	r2, [pc, #300]	; (80056fc <HAL_TIM_ConfigClockSource+0x4ac>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00e      	beq.n	80055f0 <HAL_TIM_ConfigClockSource+0x3a0>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a4a      	ldr	r2, [pc, #296]	; (8005700 <HAL_TIM_ConfigClockSource+0x4b0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d009      	beq.n	80055f0 <HAL_TIM_ConfigClockSource+0x3a0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a48      	ldr	r2, [pc, #288]	; (8005704 <HAL_TIM_ConfigClockSource+0x4b4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d004      	beq.n	80055f0 <HAL_TIM_ConfigClockSource+0x3a0>
 80055e6:	f241 110f 	movw	r1, #4367	; 0x110f
 80055ea:	4849      	ldr	r0, [pc, #292]	; (8005710 <HAL_TIM_ConfigClockSource+0x4c0>)
 80055ec:	f7fb fdb4 	bl	8001158 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f8:	d014      	beq.n	8005624 <HAL_TIM_ConfigClockSource+0x3d4>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d010      	beq.n	8005624 <HAL_TIM_ConfigClockSource+0x3d4>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00c      	beq.n	8005624 <HAL_TIM_ConfigClockSource+0x3d4>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d008      	beq.n	8005624 <HAL_TIM_ConfigClockSource+0x3d4>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b0a      	cmp	r3, #10
 8005618:	d004      	beq.n	8005624 <HAL_TIM_ConfigClockSource+0x3d4>
 800561a:	f241 1112 	movw	r1, #4370	; 0x1112
 800561e:	483c      	ldr	r0, [pc, #240]	; (8005710 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005620:	f7fb fd9a 	bl	8001158 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	2b0f      	cmp	r3, #15
 800562a:	d904      	bls.n	8005636 <HAL_TIM_ConfigClockSource+0x3e6>
 800562c:	f241 1113 	movw	r1, #4371	; 0x1113
 8005630:	4837      	ldr	r0, [pc, #220]	; (8005710 <HAL_TIM_ConfigClockSource+0x4c0>)
 8005632:	f7fb fd91 	bl	8001158 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6859      	ldr	r1, [r3, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	461a      	mov	r2, r3
 8005644:	f000 fa7f 	bl	8005b46 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2150      	movs	r1, #80	; 0x50
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fad6 	bl	8005c00 <TIM_ITRx_SetConfig>
      break;
 8005654:	e0d7      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565e:	d018      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x442>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a24      	ldr	r2, [pc, #144]	; (80056f8 <HAL_TIM_ConfigClockSource+0x4a8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x442>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a23      	ldr	r2, [pc, #140]	; (80056fc <HAL_TIM_ConfigClockSource+0x4ac>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00e      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x442>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a21      	ldr	r2, [pc, #132]	; (8005700 <HAL_TIM_ConfigClockSource+0x4b0>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d009      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x442>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a20      	ldr	r2, [pc, #128]	; (8005704 <HAL_TIM_ConfigClockSource+0x4b4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d004      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x442>
 8005688:	f241 111f 	movw	r1, #4383	; 0x111f
 800568c:	4820      	ldr	r0, [pc, #128]	; (8005710 <HAL_TIM_ConfigClockSource+0x4c0>)
 800568e:	f7fb fd63 	bl	8001158 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569a:	d014      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x476>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d010      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x476>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00c      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x476>
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d008      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x476>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b0a      	cmp	r3, #10
 80056ba:	d004      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x476>
 80056bc:	f241 1122 	movw	r1, #4386	; 0x1122
 80056c0:	4813      	ldr	r0, [pc, #76]	; (8005710 <HAL_TIM_ConfigClockSource+0x4c0>)
 80056c2:	f7fb fd49 	bl	8001158 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	2b0f      	cmp	r3, #15
 80056cc:	d904      	bls.n	80056d8 <HAL_TIM_ConfigClockSource+0x488>
 80056ce:	f241 1123 	movw	r1, #4387	; 0x1123
 80056d2:	480f      	ldr	r0, [pc, #60]	; (8005710 <HAL_TIM_ConfigClockSource+0x4c0>)
 80056d4:	f7fb fd40 	bl	8001158 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	6859      	ldr	r1, [r3, #4]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	461a      	mov	r2, r3
 80056e6:	f000 fa5c 	bl	8005ba2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2160      	movs	r1, #96	; 0x60
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fa85 	bl	8005c00 <TIM_ITRx_SetConfig>
      break;
 80056f6:	e086      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x5b6>
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00
 8005704:	40010800 	.word	0x40010800
 8005708:	40010c00 	.word	0x40010c00
 800570c:	40011000 	.word	0x40011000
 8005710:	080099c0 	.word	0x080099c0
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571c:	d018      	beq.n	8005750 <HAL_TIM_ConfigClockSource+0x500>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a3f      	ldr	r2, [pc, #252]	; (8005820 <HAL_TIM_ConfigClockSource+0x5d0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d013      	beq.n	8005750 <HAL_TIM_ConfigClockSource+0x500>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a3d      	ldr	r2, [pc, #244]	; (8005824 <HAL_TIM_ConfigClockSource+0x5d4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00e      	beq.n	8005750 <HAL_TIM_ConfigClockSource+0x500>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a3c      	ldr	r2, [pc, #240]	; (8005828 <HAL_TIM_ConfigClockSource+0x5d8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d009      	beq.n	8005750 <HAL_TIM_ConfigClockSource+0x500>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a3a      	ldr	r2, [pc, #232]	; (800582c <HAL_TIM_ConfigClockSource+0x5dc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d004      	beq.n	8005750 <HAL_TIM_ConfigClockSource+0x500>
 8005746:	f241 112f 	movw	r1, #4399	; 0x112f
 800574a:	4839      	ldr	r0, [pc, #228]	; (8005830 <HAL_TIM_ConfigClockSource+0x5e0>)
 800574c:	f7fb fd04 	bl	8001158 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005758:	d014      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0x534>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d010      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0x534>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00c      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0x534>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b02      	cmp	r3, #2
 8005770:	d008      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0x534>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2b0a      	cmp	r3, #10
 8005778:	d004      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0x534>
 800577a:	f241 1132 	movw	r1, #4402	; 0x1132
 800577e:	482c      	ldr	r0, [pc, #176]	; (8005830 <HAL_TIM_ConfigClockSource+0x5e0>)
 8005780:	f7fb fcea 	bl	8001158 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	2b0f      	cmp	r3, #15
 800578a:	d904      	bls.n	8005796 <HAL_TIM_ConfigClockSource+0x546>
 800578c:	f241 1133 	movw	r1, #4403	; 0x1133
 8005790:	4827      	ldr	r0, [pc, #156]	; (8005830 <HAL_TIM_ConfigClockSource+0x5e0>)
 8005792:	f7fb fce1 	bl	8001158 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	6859      	ldr	r1, [r3, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	461a      	mov	r2, r3
 80057a4:	f000 f9cf 	bl	8005b46 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2140      	movs	r1, #64	; 0x40
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fa26 	bl	8005c00 <TIM_ITRx_SetConfig>
      break;
 80057b4:	e027      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057be:	d018      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x5a2>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a16      	ldr	r2, [pc, #88]	; (8005820 <HAL_TIM_ConfigClockSource+0x5d0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d013      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x5a2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a15      	ldr	r2, [pc, #84]	; (8005824 <HAL_TIM_ConfigClockSource+0x5d4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00e      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x5a2>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a13      	ldr	r2, [pc, #76]	; (8005828 <HAL_TIM_ConfigClockSource+0x5d8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d009      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x5a2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a12      	ldr	r2, [pc, #72]	; (800582c <HAL_TIM_ConfigClockSource+0x5dc>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d004      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x5a2>
 80057e8:	f241 1142 	movw	r1, #4418	; 0x1142
 80057ec:	4810      	ldr	r0, [pc, #64]	; (8005830 <HAL_TIM_ConfigClockSource+0x5e0>)
 80057ee:	f7fb fcb3 	bl	8001158 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4619      	mov	r1, r3
 80057fc:	4610      	mov	r0, r2
 80057fe:	f000 f9ff 	bl	8005c00 <TIM_ITRx_SetConfig>
      break;
 8005802:	e000      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x5b6>
      break;
 8005804:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40000400 	.word	0x40000400
 8005824:	40000800 	.word	0x40000800
 8005828:	40000c00 	.word	0x40000c00
 800582c:	40010800 	.word	0x40010800
 8005830:	080099c0 	.word	0x080099c0

08005834 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr

08005846 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr

08005858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	bc80      	pop	{r7}
 8005868:	4770      	bx	lr

0800586a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr

0800587c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005892:	d00f      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a2b      	ldr	r2, [pc, #172]	; (8005944 <TIM_Base_SetConfig+0xc8>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00b      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a2a      	ldr	r2, [pc, #168]	; (8005948 <TIM_Base_SetConfig+0xcc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a29      	ldr	r2, [pc, #164]	; (800594c <TIM_Base_SetConfig+0xd0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a28      	ldr	r2, [pc, #160]	; (8005950 <TIM_Base_SetConfig+0xd4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d108      	bne.n	80058c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058cc:	d017      	beq.n	80058fe <TIM_Base_SetConfig+0x82>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <TIM_Base_SetConfig+0xc8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d013      	beq.n	80058fe <TIM_Base_SetConfig+0x82>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a1b      	ldr	r2, [pc, #108]	; (8005948 <TIM_Base_SetConfig+0xcc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00f      	beq.n	80058fe <TIM_Base_SetConfig+0x82>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a1a      	ldr	r2, [pc, #104]	; (800594c <TIM_Base_SetConfig+0xd0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00b      	beq.n	80058fe <TIM_Base_SetConfig+0x82>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a19      	ldr	r2, [pc, #100]	; (8005950 <TIM_Base_SetConfig+0xd4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d007      	beq.n	80058fe <TIM_Base_SetConfig+0x82>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a18      	ldr	r2, [pc, #96]	; (8005954 <TIM_Base_SetConfig+0xd8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d003      	beq.n	80058fe <TIM_Base_SetConfig+0x82>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a17      	ldr	r2, [pc, #92]	; (8005958 <TIM_Base_SetConfig+0xdc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d108      	bne.n	8005910 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	615a      	str	r2, [r3, #20]
}
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr
 8005944:	40000400 	.word	0x40000400
 8005948:	40000800 	.word	0x40000800
 800594c:	40000c00 	.word	0x40000c00
 8005950:	40010800 	.word	0x40010800
 8005954:	40010c00 	.word	0x40010c00
 8005958:	40011000 	.word	0x40011000

0800595c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f023 0201 	bic.w	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0303 	bic.w	r3, r3, #3
 8005992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f023 0302 	bic.w	r3, r3, #2
 80059a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	621a      	str	r2, [r3, #32]
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f023 0210 	bic.w	r2, r3, #16
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f023 0320 	bic.w	r3, r3, #32
 8005a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	621a      	str	r2, [r3, #32]
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr

08005a50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0303 	bic.w	r3, r3, #3
 8005a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	621a      	str	r2, [r3, #32]
}
 8005ac0:	bf00      	nop
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b087      	sub	sp, #28
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	031b      	lsls	r3, r3, #12
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	621a      	str	r2, [r3, #32]
}
 8005b3c:	bf00      	nop
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b087      	sub	sp, #28
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	f023 0201 	bic.w	r2, r3, #1
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f023 030a 	bic.w	r3, r3, #10
 8005b82:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	621a      	str	r2, [r3, #32]
}
 8005b98:	bf00      	nop
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr

08005ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b087      	sub	sp, #28
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f023 0210 	bic.w	r2, r3, #16
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	031b      	lsls	r3, r3, #12
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f043 0307 	orr.w	r3, r3, #7
 8005c22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	609a      	str	r2, [r3, #8]
}
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr

08005c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	021a      	lsls	r2, r3, #8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	609a      	str	r2, [r3, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr
	...

08005c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c86:	d017      	beq.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a41      	ldr	r2, [pc, #260]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d012      	beq.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a40      	ldr	r2, [pc, #256]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00d      	beq.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a3e      	ldr	r2, [pc, #248]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d008      	beq.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a3d      	ldr	r2, [pc, #244]	; (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005cb0:	215a      	movs	r1, #90	; 0x5a
 8005cb2:	483c      	ldr	r0, [pc, #240]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8005cb4:	f7fb fa50 	bl	8001158 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01f      	beq.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b10      	cmp	r3, #16
 8005cc6:	d01b      	beq.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d017      	beq.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b30      	cmp	r3, #48	; 0x30
 8005cd6:	d013      	beq.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	d00f      	beq.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b50      	cmp	r3, #80	; 0x50
 8005ce6:	d00b      	beq.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b60      	cmp	r3, #96	; 0x60
 8005cee:	d007      	beq.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b70      	cmp	r3, #112	; 0x70
 8005cf6:	d003      	beq.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005cf8:	215b      	movs	r1, #91	; 0x5b
 8005cfa:	482a      	ldr	r0, [pc, #168]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8005cfc:	f7fb fa2c 	bl	8001158 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b80      	cmp	r3, #128	; 0x80
 8005d06:	d007      	beq.n	8005d18 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8005d10:	215c      	movs	r1, #92	; 0x5c
 8005d12:	4824      	ldr	r0, [pc, #144]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8005d14:	f7fb fa20 	bl	8001158 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e032      	b.n	8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x118>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2202      	movs	r2, #2
 8005d32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d5e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	40000c00 	.word	0x40000c00
 8005da0:	40010800 	.word	0x40010800
 8005da4:	080099f8 	.word	0x080099f8

08005da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e0aa      	b.n	8005f10 <HAL_UART_Init+0x168>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d02c      	beq.n	8005e1c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a54      	ldr	r2, [pc, #336]	; (8005f18 <HAL_UART_Init+0x170>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00e      	beq.n	8005dea <HAL_UART_Init+0x42>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a52      	ldr	r2, [pc, #328]	; (8005f1c <HAL_UART_Init+0x174>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d009      	beq.n	8005dea <HAL_UART_Init+0x42>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a51      	ldr	r2, [pc, #324]	; (8005f20 <HAL_UART_Init+0x178>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d004      	beq.n	8005dea <HAL_UART_Init+0x42>
 8005de0:	f240 1145 	movw	r1, #325	; 0x145
 8005de4:	484f      	ldr	r0, [pc, #316]	; (8005f24 <HAL_UART_Init+0x17c>)
 8005de6:	f7fb f9b7 	bl	8001158 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d032      	beq.n	8005e58 <HAL_UART_Init+0xb0>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfa:	d02d      	beq.n	8005e58 <HAL_UART_Init+0xb0>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e04:	d028      	beq.n	8005e58 <HAL_UART_Init+0xb0>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e0e:	d023      	beq.n	8005e58 <HAL_UART_Init+0xb0>
 8005e10:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005e14:	4843      	ldr	r0, [pc, #268]	; (8005f24 <HAL_UART_Init+0x17c>)
 8005e16:	f7fb f99f 	bl	8001158 <assert_failed>
 8005e1a:	e01d      	b.n	8005e58 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a3d      	ldr	r2, [pc, #244]	; (8005f18 <HAL_UART_Init+0x170>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d018      	beq.n	8005e58 <HAL_UART_Init+0xb0>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a3c      	ldr	r2, [pc, #240]	; (8005f1c <HAL_UART_Init+0x174>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d013      	beq.n	8005e58 <HAL_UART_Init+0xb0>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a3a      	ldr	r2, [pc, #232]	; (8005f20 <HAL_UART_Init+0x178>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00e      	beq.n	8005e58 <HAL_UART_Init+0xb0>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a3a      	ldr	r2, [pc, #232]	; (8005f28 <HAL_UART_Init+0x180>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_UART_Init+0xb0>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a38      	ldr	r2, [pc, #224]	; (8005f2c <HAL_UART_Init+0x184>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_UART_Init+0xb0>
 8005e4e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005e52:	4834      	ldr	r0, [pc, #208]	; (8005f24 <HAL_UART_Init+0x17c>)
 8005e54:	f7fb f980 	bl	8001158 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d009      	beq.n	8005e74 <HAL_UART_Init+0xcc>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e68:	d004      	beq.n	8005e74 <HAL_UART_Init+0xcc>
 8005e6a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005e6e:	482d      	ldr	r0, [pc, #180]	; (8005f24 <HAL_UART_Init+0x17c>)
 8005e70:	f7fb f972 	bl	8001158 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d009      	beq.n	8005e90 <HAL_UART_Init+0xe8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e84:	d004      	beq.n	8005e90 <HAL_UART_Init+0xe8>
 8005e86:	f240 114d 	movw	r1, #333	; 0x14d
 8005e8a:	4826      	ldr	r0, [pc, #152]	; (8005f24 <HAL_UART_Init+0x17c>)
 8005e8c:	f7fb f964 	bl	8001158 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d106      	bne.n	8005eaa <HAL_UART_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7fb fc9d 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2224      	movs	r2, #36	; 0x24
 8005eae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ec0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f9be 	bl	8006244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ed6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695a      	ldr	r2, [r3, #20]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ee6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ef6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40013800 	.word	0x40013800
 8005f1c:	40004400 	.word	0x40004400
 8005f20:	40004800 	.word	0x40004800
 8005f24:	08009a34 	.word	0x08009a34
 8005f28:	40004c00 	.word	0x40004c00
 8005f2c:	40005000 	.word	0x40005000

08005f30 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b20      	cmp	r3, #32
 8005f4e:	f040 8083 	bne.w	8006058 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_UART_Transmit+0x2e>
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e07b      	b.n	800605a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_UART_Transmit+0x40>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e074      	b.n	800605a <HAL_UART_Transmit+0x12a>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2221      	movs	r2, #33	; 0x21
 8005f82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005f86:	f7fb fcc1 	bl	800190c <HAL_GetTick>
 8005f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	88fa      	ldrh	r2, [r7, #6]
 8005f90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	88fa      	ldrh	r2, [r7, #6]
 8005f96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f98:	e042      	b.n	8006020 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb0:	d122      	bne.n	8005ff8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2180      	movs	r1, #128	; 0x80
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f8f6 	bl	80061ae <UART_WaitOnFlagUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e046      	b.n	800605a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fde:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d103      	bne.n	8005ff0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	3302      	adds	r3, #2
 8005fec:	60bb      	str	r3, [r7, #8]
 8005fee:	e017      	b.n	8006020 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	60bb      	str	r3, [r7, #8]
 8005ff6:	e013      	b.n	8006020 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2200      	movs	r2, #0
 8006000:	2180      	movs	r1, #128	; 0x80
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 f8d3 	bl	80061ae <UART_WaitOnFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e023      	b.n	800605a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	60ba      	str	r2, [r7, #8]
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006024:	b29b      	uxth	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1b7      	bne.n	8005f9a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2200      	movs	r2, #0
 8006032:	2140      	movs	r1, #64	; 0x40
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f8ba 	bl	80061ae <UART_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e00a      	b.n	800605a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	e000      	b.n	800605a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006058:	2302      	movs	r3, #2
  }
}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b088      	sub	sp, #32
 8006066:	af02      	add	r7, sp, #8
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	603b      	str	r3, [r7, #0]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b20      	cmp	r3, #32
 8006080:	f040 8090 	bne.w	80061a4 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <HAL_UART_Receive+0x2e>
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e088      	b.n	80061a6 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_UART_Receive+0x40>
 800609e:	2302      	movs	r3, #2
 80060a0:	e081      	b.n	80061a6 <HAL_UART_Receive+0x144>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2222      	movs	r2, #34	; 0x22
 80060b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80060b8:	f7fb fc28 	bl	800190c <HAL_GetTick>
 80060bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	88fa      	ldrh	r2, [r7, #6]
 80060c2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	88fa      	ldrh	r2, [r7, #6]
 80060c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80060ca:	e05c      	b.n	8006186 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e2:	d12b      	bne.n	800613c <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2200      	movs	r2, #0
 80060ec:	2120      	movs	r1, #32
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 f85d 	bl	80061ae <UART_WaitOnFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e053      	b.n	80061a6 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10c      	bne.n	8006124 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	b29b      	uxth	r3, r3
 8006112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006116:	b29a      	uxth	r2, r3
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	3302      	adds	r3, #2
 8006120:	60bb      	str	r3, [r7, #8]
 8006122:	e030      	b.n	8006186 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	b29b      	uxth	r3, r3
 800612c:	b2db      	uxtb	r3, r3
 800612e:	b29a      	uxth	r2, r3
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	3301      	adds	r3, #1
 8006138:	60bb      	str	r3, [r7, #8]
 800613a:	e024      	b.n	8006186 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2200      	movs	r2, #0
 8006144:	2120      	movs	r1, #32
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f831 	bl	80061ae <UART_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e027      	b.n	80061a6 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d108      	bne.n	8006170 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6859      	ldr	r1, [r3, #4]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	60ba      	str	r2, [r7, #8]
 800616a:	b2ca      	uxtb	r2, r1
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	e00a      	b.n	8006186 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	b2da      	uxtb	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	1c59      	adds	r1, r3, #1
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d19d      	bne.n	80060cc <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e000      	b.n	80061a6 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80061a4:	2302      	movs	r3, #2
  }
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	603b      	str	r3, [r7, #0]
 80061ba:	4613      	mov	r3, r2
 80061bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061be:	e02c      	b.n	800621a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c6:	d028      	beq.n	800621a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d007      	beq.n	80061de <UART_WaitOnFlagUntilTimeout+0x30>
 80061ce:	f7fb fb9d 	bl	800190c <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d21d      	bcs.n	800621a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061ec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695a      	ldr	r2, [r3, #20]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0201 	bic.w	r2, r2, #1
 80061fc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2220      	movs	r2, #32
 8006202:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e00f      	b.n	800623a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	4013      	ands	r3, r2
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	429a      	cmp	r2, r3
 8006228:	bf0c      	ite	eq
 800622a:	2301      	moveq	r3, #1
 800622c:	2300      	movne	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	429a      	cmp	r2, r3
 8006236:	d0c3      	beq.n	80061c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	4ab2      	ldr	r2, [pc, #712]	; (800651c <UART_SetConfig+0x2d8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d904      	bls.n	8006260 <UART_SetConfig+0x1c>
 8006256:	f640 31e2 	movw	r1, #3042	; 0xbe2
 800625a:	48b1      	ldr	r0, [pc, #708]	; (8006520 <UART_SetConfig+0x2dc>)
 800625c:	f7fa ff7c 	bl	8001158 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d009      	beq.n	800627c <UART_SetConfig+0x38>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006270:	d004      	beq.n	800627c <UART_SetConfig+0x38>
 8006272:	f640 31e3 	movw	r1, #3043	; 0xbe3
 8006276:	48aa      	ldr	r0, [pc, #680]	; (8006520 <UART_SetConfig+0x2dc>)
 8006278:	f7fa ff6e 	bl	8001158 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00e      	beq.n	80062a2 <UART_SetConfig+0x5e>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628c:	d009      	beq.n	80062a2 <UART_SetConfig+0x5e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006296:	d004      	beq.n	80062a2 <UART_SetConfig+0x5e>
 8006298:	f640 31e4 	movw	r1, #3044	; 0xbe4
 800629c:	48a0      	ldr	r0, [pc, #640]	; (8006520 <UART_SetConfig+0x2dc>)
 800629e:	f7fa ff5b 	bl	8001158 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695a      	ldr	r2, [r3, #20]
 80062a6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80062aa:	4013      	ands	r3, r2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <UART_SetConfig+0x74>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <UART_SetConfig+0x7e>
 80062b8:	f640 31e5 	movw	r1, #3045	; 0xbe5
 80062bc:	4898      	ldr	r0, [pc, #608]	; (8006520 <UART_SetConfig+0x2dc>)
 80062be:	f7fa ff4b 	bl	8001158 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80062fa:	f023 030c 	bic.w	r3, r3, #12
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6812      	ldr	r2, [r2, #0]
 8006302:	68f9      	ldr	r1, [r7, #12]
 8006304:	430b      	orrs	r3, r1
 8006306:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006326:	f040 80a5 	bne.w	8006474 <UART_SetConfig+0x230>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a7d      	ldr	r2, [pc, #500]	; (8006524 <UART_SetConfig+0x2e0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d14f      	bne.n	80063d4 <UART_SetConfig+0x190>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006334:	f7fe faaa 	bl	800488c <HAL_RCC_GetPCLK2Freq>
 8006338:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	009a      	lsls	r2, r3, #2
 8006344:	441a      	add	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006350:	4a75      	ldr	r2, [pc, #468]	; (8006528 <UART_SetConfig+0x2e4>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	0119      	lsls	r1, r3, #4
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	4613      	mov	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	009a      	lsls	r2, r3, #2
 8006364:	441a      	add	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006370:	4b6d      	ldr	r3, [pc, #436]	; (8006528 <UART_SetConfig+0x2e4>)
 8006372:	fba3 0302 	umull	r0, r3, r3, r2
 8006376:	095b      	lsrs	r3, r3, #5
 8006378:	2064      	movs	r0, #100	; 0x64
 800637a:	fb00 f303 	mul.w	r3, r0, r3
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	3332      	adds	r3, #50	; 0x32
 8006384:	4a68      	ldr	r2, [pc, #416]	; (8006528 <UART_SetConfig+0x2e4>)
 8006386:	fba2 2303 	umull	r2, r3, r2, r3
 800638a:	095b      	lsrs	r3, r3, #5
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006392:	4419      	add	r1, r3
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	009a      	lsls	r2, r3, #2
 800639e:	441a      	add	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80063aa:	4b5f      	ldr	r3, [pc, #380]	; (8006528 <UART_SetConfig+0x2e4>)
 80063ac:	fba3 0302 	umull	r0, r3, r3, r2
 80063b0:	095b      	lsrs	r3, r3, #5
 80063b2:	2064      	movs	r0, #100	; 0x64
 80063b4:	fb00 f303 	mul.w	r3, r0, r3
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	3332      	adds	r3, #50	; 0x32
 80063be:	4a5a      	ldr	r2, [pc, #360]	; (8006528 <UART_SetConfig+0x2e4>)
 80063c0:	fba2 2303 	umull	r2, r3, r2, r3
 80063c4:	095b      	lsrs	r3, r3, #5
 80063c6:	f003 0207 	and.w	r2, r3, #7
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	440a      	add	r2, r1
 80063d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80063d2:	e0f9      	b.n	80065c8 <UART_SetConfig+0x384>
      pclk = HAL_RCC_GetPCLK1Freq();
 80063d4:	f7fe fa46 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
 80063d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	009a      	lsls	r2, r3, #2
 80063e4:	441a      	add	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f0:	4a4d      	ldr	r2, [pc, #308]	; (8006528 <UART_SetConfig+0x2e4>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	0119      	lsls	r1, r3, #4
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	009a      	lsls	r2, r3, #2
 8006404:	441a      	add	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006410:	4b45      	ldr	r3, [pc, #276]	; (8006528 <UART_SetConfig+0x2e4>)
 8006412:	fba3 0302 	umull	r0, r3, r3, r2
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	2064      	movs	r0, #100	; 0x64
 800641a:	fb00 f303 	mul.w	r3, r0, r3
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	3332      	adds	r3, #50	; 0x32
 8006424:	4a40      	ldr	r2, [pc, #256]	; (8006528 <UART_SetConfig+0x2e4>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006432:	4419      	add	r1, r3
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	009a      	lsls	r2, r3, #2
 800643e:	441a      	add	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	fbb2 f2f3 	udiv	r2, r2, r3
 800644a:	4b37      	ldr	r3, [pc, #220]	; (8006528 <UART_SetConfig+0x2e4>)
 800644c:	fba3 0302 	umull	r0, r3, r3, r2
 8006450:	095b      	lsrs	r3, r3, #5
 8006452:	2064      	movs	r0, #100	; 0x64
 8006454:	fb00 f303 	mul.w	r3, r0, r3
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	3332      	adds	r3, #50	; 0x32
 800645e:	4a32      	ldr	r2, [pc, #200]	; (8006528 <UART_SetConfig+0x2e4>)
 8006460:	fba2 2303 	umull	r2, r3, r2, r3
 8006464:	095b      	lsrs	r3, r3, #5
 8006466:	f003 0207 	and.w	r2, r3, #7
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	440a      	add	r2, r1
 8006470:	609a      	str	r2, [r3, #8]
}
 8006472:	e0a9      	b.n	80065c8 <UART_SetConfig+0x384>
    if((huart->Instance == USART1))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a2a      	ldr	r2, [pc, #168]	; (8006524 <UART_SetConfig+0x2e0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d156      	bne.n	800652c <UART_SetConfig+0x2e8>
      pclk = HAL_RCC_GetPCLK2Freq();
 800647e:	f7fe fa05 	bl	800488c <HAL_RCC_GetPCLK2Freq>
 8006482:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	4613      	mov	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	009a      	lsls	r2, r3, #2
 800648e:	441a      	add	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	fbb2 f3f3 	udiv	r3, r2, r3
 800649a:	4a23      	ldr	r2, [pc, #140]	; (8006528 <UART_SetConfig+0x2e4>)
 800649c:	fba2 2303 	umull	r2, r3, r2, r3
 80064a0:	095b      	lsrs	r3, r3, #5
 80064a2:	0119      	lsls	r1, r3, #4
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	009a      	lsls	r2, r3, #2
 80064ae:	441a      	add	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80064ba:	4b1b      	ldr	r3, [pc, #108]	; (8006528 <UART_SetConfig+0x2e4>)
 80064bc:	fba3 0302 	umull	r0, r3, r3, r2
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	2064      	movs	r0, #100	; 0x64
 80064c4:	fb00 f303 	mul.w	r3, r0, r3
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	3332      	adds	r3, #50	; 0x32
 80064ce:	4a16      	ldr	r2, [pc, #88]	; (8006528 <UART_SetConfig+0x2e4>)
 80064d0:	fba2 2303 	umull	r2, r3, r2, r3
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064da:	4419      	add	r1, r3
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	009a      	lsls	r2, r3, #2
 80064e6:	441a      	add	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80064f2:	4b0d      	ldr	r3, [pc, #52]	; (8006528 <UART_SetConfig+0x2e4>)
 80064f4:	fba3 0302 	umull	r0, r3, r3, r2
 80064f8:	095b      	lsrs	r3, r3, #5
 80064fa:	2064      	movs	r0, #100	; 0x64
 80064fc:	fb00 f303 	mul.w	r3, r0, r3
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	3332      	adds	r3, #50	; 0x32
 8006506:	4a08      	ldr	r2, [pc, #32]	; (8006528 <UART_SetConfig+0x2e4>)
 8006508:	fba2 2303 	umull	r2, r3, r2, r3
 800650c:	095b      	lsrs	r3, r3, #5
 800650e:	f003 020f 	and.w	r2, r3, #15
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	440a      	add	r2, r1
 8006518:	609a      	str	r2, [r3, #8]
}
 800651a:	e055      	b.n	80065c8 <UART_SetConfig+0x384>
 800651c:	003d0900 	.word	0x003d0900
 8006520:	08009a34 	.word	0x08009a34
 8006524:	40013800 	.word	0x40013800
 8006528:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800652c:	f7fe f99a 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
 8006530:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	4613      	mov	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	009a      	lsls	r2, r3, #2
 800653c:	441a      	add	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	fbb2 f3f3 	udiv	r3, r2, r3
 8006548:	4a21      	ldr	r2, [pc, #132]	; (80065d0 <UART_SetConfig+0x38c>)
 800654a:	fba2 2303 	umull	r2, r3, r2, r3
 800654e:	095b      	lsrs	r3, r3, #5
 8006550:	0119      	lsls	r1, r3, #4
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	009a      	lsls	r2, r3, #2
 800655c:	441a      	add	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	fbb2 f2f3 	udiv	r2, r2, r3
 8006568:	4b19      	ldr	r3, [pc, #100]	; (80065d0 <UART_SetConfig+0x38c>)
 800656a:	fba3 0302 	umull	r0, r3, r3, r2
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	2064      	movs	r0, #100	; 0x64
 8006572:	fb00 f303 	mul.w	r3, r0, r3
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	3332      	adds	r3, #50	; 0x32
 800657c:	4a14      	ldr	r2, [pc, #80]	; (80065d0 <UART_SetConfig+0x38c>)
 800657e:	fba2 2303 	umull	r2, r3, r2, r3
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006588:	4419      	add	r1, r3
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	009a      	lsls	r2, r3, #2
 8006594:	441a      	add	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	fbb2 f2f3 	udiv	r2, r2, r3
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <UART_SetConfig+0x38c>)
 80065a2:	fba3 0302 	umull	r0, r3, r3, r2
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	2064      	movs	r0, #100	; 0x64
 80065aa:	fb00 f303 	mul.w	r3, r0, r3
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	3332      	adds	r3, #50	; 0x32
 80065b4:	4a06      	ldr	r2, [pc, #24]	; (80065d0 <UART_SetConfig+0x38c>)
 80065b6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	f003 020f 	and.w	r2, r3, #15
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	440a      	add	r2, r1
 80065c6:	609a      	str	r2, [r3, #8]
}
 80065c8:	bf00      	nop
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	51eb851f 	.word	0x51eb851f

080065d4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065da:	f3ef 8305 	mrs	r3, IPSR
 80065de:	60bb      	str	r3, [r7, #8]
  return(result);
 80065e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10f      	bne.n	8006606 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065e6:	f3ef 8310 	mrs	r3, PRIMASK
 80065ea:	607b      	str	r3, [r7, #4]
  return(result);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <osKernelInitialize+0x32>
 80065f2:	4b10      	ldr	r3, [pc, #64]	; (8006634 <osKernelInitialize+0x60>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d109      	bne.n	800660e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065fa:	f3ef 8311 	mrs	r3, BASEPRI
 80065fe:	603b      	str	r3, [r7, #0]
  return(result);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006606:	f06f 0305 	mvn.w	r3, #5
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	e00c      	b.n	8006628 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800660e:	4b09      	ldr	r3, [pc, #36]	; (8006634 <osKernelInitialize+0x60>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d105      	bne.n	8006622 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006616:	4b07      	ldr	r3, [pc, #28]	; (8006634 <osKernelInitialize+0x60>)
 8006618:	2201      	movs	r2, #1
 800661a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	e002      	b.n	8006628 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006622:	f04f 33ff 	mov.w	r3, #4294967295
 8006626:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006628:	68fb      	ldr	r3, [r7, #12]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr
 8006634:	20000034 	.word	0x20000034

08006638 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800663e:	f3ef 8305 	mrs	r3, IPSR
 8006642:	60bb      	str	r3, [r7, #8]
  return(result);
 8006644:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10f      	bne.n	800666a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800664a:	f3ef 8310 	mrs	r3, PRIMASK
 800664e:	607b      	str	r3, [r7, #4]
  return(result);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d109      	bne.n	800666a <osKernelStart+0x32>
 8006656:	4b11      	ldr	r3, [pc, #68]	; (800669c <osKernelStart+0x64>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b02      	cmp	r3, #2
 800665c:	d109      	bne.n	8006672 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800665e:	f3ef 8311 	mrs	r3, BASEPRI
 8006662:	603b      	str	r3, [r7, #0]
  return(result);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <osKernelStart+0x3a>
    stat = osErrorISR;
 800666a:	f06f 0305 	mvn.w	r3, #5
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	e00e      	b.n	8006690 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006672:	4b0a      	ldr	r3, [pc, #40]	; (800669c <osKernelStart+0x64>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d107      	bne.n	800668a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800667a:	4b08      	ldr	r3, [pc, #32]	; (800669c <osKernelStart+0x64>)
 800667c:	2202      	movs	r2, #2
 800667e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006680:	f001 fb5c 	bl	8007d3c <vTaskStartScheduler>
      stat = osOK;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e002      	b.n	8006690 <osKernelStart+0x58>
    } else {
      stat = osError;
 800668a:	f04f 33ff 	mov.w	r3, #4294967295
 800668e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006690:	68fb      	ldr	r3, [r7, #12]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20000034 	.word	0x20000034

080066a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b092      	sub	sp, #72	; 0x48
 80066a4:	af04      	add	r7, sp, #16
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066b0:	f3ef 8305 	mrs	r3, IPSR
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f040 8094 	bne.w	80067e6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066be:	f3ef 8310 	mrs	r3, PRIMASK
 80066c2:	623b      	str	r3, [r7, #32]
  return(result);
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f040 808d 	bne.w	80067e6 <osThreadNew+0x146>
 80066cc:	4b48      	ldr	r3, [pc, #288]	; (80067f0 <osThreadNew+0x150>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d106      	bne.n	80066e2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066d4:	f3ef 8311 	mrs	r3, BASEPRI
 80066d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f040 8082 	bne.w	80067e6 <osThreadNew+0x146>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d07e      	beq.n	80067e6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80066e8:	2380      	movs	r3, #128	; 0x80
 80066ea:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80066ec:	2318      	movs	r3, #24
 80066ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80066f0:	2300      	movs	r3, #0
 80066f2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80066f4:	f107 031b 	add.w	r3, r7, #27
 80066f8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80066fa:	f04f 33ff 	mov.w	r3, #4294967295
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d045      	beq.n	8006792 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d002      	beq.n	8006714 <osThreadNew+0x74>
        name = attr->name;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d008      	beq.n	800673a <osThreadNew+0x9a>
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	2b38      	cmp	r3, #56	; 0x38
 800672c:	d805      	bhi.n	800673a <osThreadNew+0x9a>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <osThreadNew+0x9e>
        return (NULL);
 800673a:	2300      	movs	r3, #0
 800673c:	e054      	b.n	80067e8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	089b      	lsrs	r3, r3, #2
 800674c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00e      	beq.n	8006774 <osThreadNew+0xd4>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	2b5b      	cmp	r3, #91	; 0x5b
 800675c:	d90a      	bls.n	8006774 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006762:	2b00      	cmp	r3, #0
 8006764:	d006      	beq.n	8006774 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <osThreadNew+0xd4>
        mem = 1;
 800676e:	2301      	movs	r3, #1
 8006770:	62bb      	str	r3, [r7, #40]	; 0x28
 8006772:	e010      	b.n	8006796 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10c      	bne.n	8006796 <osThreadNew+0xf6>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d108      	bne.n	8006796 <osThreadNew+0xf6>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d104      	bne.n	8006796 <osThreadNew+0xf6>
          mem = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006790:	e001      	b.n	8006796 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	2b01      	cmp	r3, #1
 800679a:	d110      	bne.n	80067be <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067a4:	9202      	str	r2, [sp, #8]
 80067a6:	9301      	str	r3, [sp, #4]
 80067a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 ffee 	bl	8007794 <xTaskCreateStatic>
 80067b8:	4603      	mov	r3, r0
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	e013      	b.n	80067e6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80067be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d110      	bne.n	80067e6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f107 0314 	add.w	r3, r7, #20
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f001 f835 	bl	8007846 <xTaskCreate>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d001      	beq.n	80067e6 <osThreadNew+0x146>
          hTask = NULL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80067e6:	697b      	ldr	r3, [r7, #20]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3738      	adds	r7, #56	; 0x38
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20000034 	.word	0x20000034

080067f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067fc:	f3ef 8305 	mrs	r3, IPSR
 8006800:	613b      	str	r3, [r7, #16]
  return(result);
 8006802:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10f      	bne.n	8006828 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006808:	f3ef 8310 	mrs	r3, PRIMASK
 800680c:	60fb      	str	r3, [r7, #12]
  return(result);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d109      	bne.n	8006828 <osDelay+0x34>
 8006814:	4b0d      	ldr	r3, [pc, #52]	; (800684c <osDelay+0x58>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d109      	bne.n	8006830 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800681c:	f3ef 8311 	mrs	r3, BASEPRI
 8006820:	60bb      	str	r3, [r7, #8]
  return(result);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <osDelay+0x3c>
    stat = osErrorISR;
 8006828:	f06f 0305 	mvn.w	r3, #5
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	e007      	b.n	8006840 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <osDelay+0x4c>
      vTaskDelay(ticks);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f001 f93e 	bl	8007abc <vTaskDelay>
    }
  }

  return (stat);
 8006840:	697b      	ldr	r3, [r7, #20]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000034 	.word	0x20000034

08006850 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	4a06      	ldr	r2, [pc, #24]	; (8006878 <vApplicationGetIdleTaskMemory+0x28>)
 8006860:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	4a05      	ldr	r2, [pc, #20]	; (800687c <vApplicationGetIdleTaskMemory+0x2c>)
 8006866:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2280      	movs	r2, #128	; 0x80
 800686c:	601a      	str	r2, [r3, #0]
}
 800686e:	bf00      	nop
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr
 8006878:	20000038 	.word	0x20000038
 800687c:	20000094 	.word	0x20000094

08006880 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a07      	ldr	r2, [pc, #28]	; (80068ac <vApplicationGetTimerTaskMemory+0x2c>)
 8006890:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	4a06      	ldr	r2, [pc, #24]	; (80068b0 <vApplicationGetTimerTaskMemory+0x30>)
 8006896:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800689e:	601a      	str	r2, [r3, #0]
}
 80068a0:	bf00      	nop
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bc80      	pop	{r7}
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	20000294 	.word	0x20000294
 80068b0:	200002f0 	.word	0x200002f0

080068b4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80068ba:	2020      	movs	r0, #32
 80068bc:	f002 fd9a 	bl	80093f4 <pvPortMalloc>
 80068c0:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00a      	beq.n	80068de <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 f99e 	bl	8006c14 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80068de:	687b      	ldr	r3, [r7, #4]
	}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b090      	sub	sp, #64	; 0x40
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80068fe:	2300      	movs	r3, #0
 8006900:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d109      	bne.n	800691c <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	623b      	str	r3, [r7, #32]
 800691a:	e7fe      	b.n	800691a <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d009      	beq.n	800693a <xEventGroupWaitBits+0x52>
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	61fb      	str	r3, [r7, #28]
 8006938:	e7fe      	b.n	8006938 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d109      	bne.n	8006954 <xEventGroupWaitBits+0x6c>
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	e7fe      	b.n	8006952 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006954:	f001 fef6 	bl	8008744 <xTaskGetSchedulerState>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d102      	bne.n	8006964 <xEventGroupWaitBits+0x7c>
 800695e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <xEventGroupWaitBits+0x80>
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <xEventGroupWaitBits+0x82>
 8006968:	2300      	movs	r3, #0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d109      	bne.n	8006982 <xEventGroupWaitBits+0x9a>
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e7fe      	b.n	8006980 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8006982:	f001 fa3f 	bl	8007e04 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	68b9      	ldr	r1, [r7, #8]
 8006990:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006992:	f000 f909 	bl	8006ba8 <prvTestWaitCondition>
 8006996:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00e      	beq.n	80069bc <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d028      	beq.n	80069fe <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80069ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	43db      	mvns	r3, r3
 80069b4:	401a      	ands	r2, r3
 80069b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	e020      	b.n	80069fe <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80069bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d104      	bne.n	80069cc <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80069c6:	2301      	movs	r3, #1
 80069c8:	633b      	str	r3, [r7, #48]	; 0x30
 80069ca:	e018      	b.n	80069fe <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069d8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80069e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069e6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80069e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ea:	1d18      	adds	r0, r3, #4
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	4313      	orrs	r3, r2
 80069f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069f4:	4619      	mov	r1, r3
 80069f6:	f001 fc25 	bl	8008244 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80069fa:	2300      	movs	r3, #0
 80069fc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80069fe:	f001 fa0f 	bl	8007e20 <xTaskResumeAll>
 8006a02:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d031      	beq.n	8006a6e <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d107      	bne.n	8006a20 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8006a10:	4b19      	ldr	r3, [pc, #100]	; (8006a78 <xEventGroupWaitBits+0x190>)
 8006a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006a20:	f001 ff1a 	bl	8008858 <uxTaskResetEventItemValue>
 8006a24:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d11a      	bne.n	8006a66 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8006a30:	f002 fbea 	bl	8009208 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a40:	f000 f8b2 	bl	8006ba8 <prvTestWaitCondition>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d006      	beq.n	8006a5e <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	43db      	mvns	r3, r3
 8006a58:	401a      	ands	r2, r3
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006a62:	f002 fbff 	bl	8009264 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3740      	adds	r7, #64	; 0x40
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	e000ed04 	.word	0xe000ed04

08006a7c <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08e      	sub	sp, #56	; 0x38
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006a86:	2300      	movs	r3, #0
 8006a88:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <xEventGroupSetBits+0x30>
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	613b      	str	r3, [r7, #16]
 8006aaa:	e7fe      	b.n	8006aaa <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d009      	beq.n	8006aca <xEventGroupSetBits+0x4e>
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	e7fe      	b.n	8006ac8 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	3304      	adds	r3, #4
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	3308      	adds	r3, #8
 8006ad4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006ad6:	f001 f995 	bl	8007e04 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aea:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006aec:	e03c      	b.n	8006b68 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006afa:	2300      	movs	r3, #0
 8006afc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006b04:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b0c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d108      	bne.n	8006b2a <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8006b24:	2301      	movs	r3, #1
 8006b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b28:	e008      	b.n	8006b3c <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	4013      	ands	r3, r2
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d101      	bne.n	8006b3c <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d010      	beq.n	8006b64 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006b60:	f001 fc36 	bl	80083d0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d1be      	bne.n	8006aee <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	43db      	mvns	r3, r3
 8006b78:	401a      	ands	r2, r3
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006b7e:	f001 f94f 	bl	8007e20 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	681b      	ldr	r3, [r3, #0]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3738      	adds	r7, #56	; 0x38
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff ff6e 	bl	8006a7c <xEventGroupSetBits>
}
 8006ba0:	bf00      	nop
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d107      	bne.n	8006bce <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00a      	beq.n	8006bde <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	e007      	b.n	8006bde <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d101      	bne.n	8006bde <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006bde:	697b      	ldr	r3, [r7, #20]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc80      	pop	{r7}
 8006be8:	4770      	bx	lr
	...

08006bec <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	68f9      	ldr	r1, [r7, #12]
 8006bfe:	4804      	ldr	r0, [pc, #16]	; (8006c10 <xEventGroupSetBitsFromISR+0x24>)
 8006c00:	f002 f9f4 	bl	8008fec <xTimerPendFunctionCallFromISR>
 8006c04:	6178      	str	r0, [r7, #20]

		return xReturn;
 8006c06:	697b      	ldr	r3, [r7, #20]
	}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	08006b8f 	.word	0x08006b8f

08006c14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f103 0208 	add.w	r2, r3, #8
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f103 0208 	add.w	r2, r3, #8
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f103 0208 	add.w	r2, r3, #8
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bc80      	pop	{r7}
 8006c50:	4770      	bx	lr

08006c52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr

08006c6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	601a      	str	r2, [r3, #0]
}
 8006ca6:	bf00      	nop
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc6:	d103      	bne.n	8006cd0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	e00c      	b.n	8006cea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3308      	adds	r3, #8
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	e002      	b.n	8006cde <vListInsert+0x2e>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d2f6      	bcs.n	8006cd8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	601a      	str	r2, [r3, #0]
}
 8006d16:	bf00      	nop
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bc80      	pop	{r7}
 8006d1e:	4770      	bx	lr

08006d20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6892      	ldr	r2, [r2, #8]
 8006d36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6852      	ldr	r2, [r2, #4]
 8006d40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d103      	bne.n	8006d54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	1e5a      	subs	r2, r3, #1
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr
	...

08006d74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d109      	bne.n	8006d9c <xQueueGenericReset+0x28>
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	60bb      	str	r3, [r7, #8]
 8006d9a:	e7fe      	b.n	8006d9a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006d9c:	f002 fa34 	bl	8009208 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da8:	68f9      	ldr	r1, [r7, #12]
 8006daa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	441a      	add	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006dd2:	fb01 f303 	mul.w	r3, r1, r3
 8006dd6:	441a      	add	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	22ff      	movs	r2, #255	; 0xff
 8006de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	22ff      	movs	r2, #255	; 0xff
 8006de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d114      	bne.n	8006e1c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d01a      	beq.n	8006e30 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3310      	adds	r3, #16
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f001 fa84 	bl	800830c <xTaskRemoveFromEventList>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d012      	beq.n	8006e30 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e0a:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <xQueueGenericReset+0xcc>)
 8006e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	e009      	b.n	8006e30 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3310      	adds	r3, #16
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff fef7 	bl	8006c14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	3324      	adds	r3, #36	; 0x24
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff fef2 	bl	8006c14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e30:	f002 fa18 	bl	8009264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e34:	2301      	movs	r3, #1
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	e000ed04 	.word	0xe000ed04

08006e44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08e      	sub	sp, #56	; 0x38
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d109      	bne.n	8006e6c <xQueueGenericCreateStatic+0x28>
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e6a:	e7fe      	b.n	8006e6a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d109      	bne.n	8006e86 <xQueueGenericCreateStatic+0x42>
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
 8006e84:	e7fe      	b.n	8006e84 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <xQueueGenericCreateStatic+0x4e>
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <xQueueGenericCreateStatic+0x52>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <xQueueGenericCreateStatic+0x54>
 8006e96:	2300      	movs	r3, #0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d109      	bne.n	8006eb0 <xQueueGenericCreateStatic+0x6c>
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	623b      	str	r3, [r7, #32]
 8006eae:	e7fe      	b.n	8006eae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d102      	bne.n	8006ebc <xQueueGenericCreateStatic+0x78>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <xQueueGenericCreateStatic+0x7c>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e000      	b.n	8006ec2 <xQueueGenericCreateStatic+0x7e>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d109      	bne.n	8006eda <xQueueGenericCreateStatic+0x96>
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	61fb      	str	r3, [r7, #28]
 8006ed8:	e7fe      	b.n	8006ed8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006eda:	2350      	movs	r3, #80	; 0x50
 8006edc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b50      	cmp	r3, #80	; 0x50
 8006ee2:	d009      	beq.n	8006ef8 <xQueueGenericCreateStatic+0xb4>
 8006ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	61bb      	str	r3, [r7, #24]
 8006ef6:	e7fe      	b.n	8006ef6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00d      	beq.n	8006f1e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	4613      	mov	r3, r2
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	68b9      	ldr	r1, [r7, #8]
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 f842 	bl	8006fa2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3730      	adds	r7, #48	; 0x30
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08a      	sub	sp, #40	; 0x28
 8006f2c:	af02      	add	r7, sp, #8
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	4613      	mov	r3, r2
 8006f34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d109      	bne.n	8006f50 <xQueueGenericCreate+0x28>
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	613b      	str	r3, [r7, #16]
 8006f4e:	e7fe      	b.n	8006f4e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d102      	bne.n	8006f5c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	61fb      	str	r3, [r7, #28]
 8006f5a:	e004      	b.n	8006f66 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	fb02 f303 	mul.w	r3, r2, r3
 8006f64:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	3350      	adds	r3, #80	; 0x50
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f002 fa42 	bl	80093f4 <pvPortMalloc>
 8006f70:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00f      	beq.n	8006f98 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	3350      	adds	r3, #80	; 0x50
 8006f7c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f86:	79fa      	ldrb	r2, [r7, #7]
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	68b9      	ldr	r1, [r7, #8]
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 f805 	bl	8006fa2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006f98:	69bb      	ldr	r3, [r7, #24]
	}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3720      	adds	r7, #32
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	607a      	str	r2, [r7, #4]
 8006fae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d103      	bne.n	8006fbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	e002      	b.n	8006fc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	69b8      	ldr	r0, [r7, #24]
 8006fd4:	f7ff fece 	bl	8006d74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	78fa      	ldrb	r2, [r7, #3]
 8006fdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006fe0:	bf00      	nop
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08e      	sub	sp, #56	; 0x38
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	2b00      	cmp	r3, #0
 8007002:	d109      	bne.n	8007018 <xQueueGenericSend+0x30>
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	62bb      	str	r3, [r7, #40]	; 0x28
 8007016:	e7fe      	b.n	8007016 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d103      	bne.n	8007026 <xQueueGenericSend+0x3e>
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <xQueueGenericSend+0x42>
 8007026:	2301      	movs	r3, #1
 8007028:	e000      	b.n	800702c <xQueueGenericSend+0x44>
 800702a:	2300      	movs	r3, #0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d109      	bne.n	8007044 <xQueueGenericSend+0x5c>
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	627b      	str	r3, [r7, #36]	; 0x24
 8007042:	e7fe      	b.n	8007042 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d103      	bne.n	8007052 <xQueueGenericSend+0x6a>
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704e:	2b01      	cmp	r3, #1
 8007050:	d101      	bne.n	8007056 <xQueueGenericSend+0x6e>
 8007052:	2301      	movs	r3, #1
 8007054:	e000      	b.n	8007058 <xQueueGenericSend+0x70>
 8007056:	2300      	movs	r3, #0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d109      	bne.n	8007070 <xQueueGenericSend+0x88>
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	623b      	str	r3, [r7, #32]
 800706e:	e7fe      	b.n	800706e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007070:	f001 fb68 	bl	8008744 <xTaskGetSchedulerState>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <xQueueGenericSend+0x98>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <xQueueGenericSend+0x9c>
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <xQueueGenericSend+0x9e>
 8007084:	2300      	movs	r3, #0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d109      	bne.n	800709e <xQueueGenericSend+0xb6>
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	e7fe      	b.n	800709c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800709e:	f002 f8b3 	bl	8009208 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d302      	bcc.n	80070b4 <xQueueGenericSend+0xcc>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d129      	bne.n	8007108 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	68b9      	ldr	r1, [r7, #8]
 80070b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070ba:	f000 f9ff 	bl	80074bc <prvCopyDataToQueue>
 80070be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d010      	beq.n	80070ea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	3324      	adds	r3, #36	; 0x24
 80070cc:	4618      	mov	r0, r3
 80070ce:	f001 f91d 	bl	800830c <xTaskRemoveFromEventList>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d013      	beq.n	8007100 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80070d8:	4b3f      	ldr	r3, [pc, #252]	; (80071d8 <xQueueGenericSend+0x1f0>)
 80070da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	e00a      	b.n	8007100 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d007      	beq.n	8007100 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80070f0:	4b39      	ldr	r3, [pc, #228]	; (80071d8 <xQueueGenericSend+0x1f0>)
 80070f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007100:	f002 f8b0 	bl	8009264 <vPortExitCritical>
				return pdPASS;
 8007104:	2301      	movs	r3, #1
 8007106:	e063      	b.n	80071d0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d103      	bne.n	8007116 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800710e:	f002 f8a9 	bl	8009264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007112:	2300      	movs	r3, #0
 8007114:	e05c      	b.n	80071d0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007118:	2b00      	cmp	r3, #0
 800711a:	d106      	bne.n	800712a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800711c:	f107 0314 	add.w	r3, r7, #20
 8007120:	4618      	mov	r0, r3
 8007122:	f001 f9b5 	bl	8008490 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007126:	2301      	movs	r3, #1
 8007128:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800712a:	f002 f89b 	bl	8009264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800712e:	f000 fe69 	bl	8007e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007132:	f002 f869 	bl	8009208 <vPortEnterCritical>
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800713c:	b25b      	sxtb	r3, r3
 800713e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007142:	d103      	bne.n	800714c <xQueueGenericSend+0x164>
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007152:	b25b      	sxtb	r3, r3
 8007154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007158:	d103      	bne.n	8007162 <xQueueGenericSend+0x17a>
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007162:	f002 f87f 	bl	8009264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007166:	1d3a      	adds	r2, r7, #4
 8007168:	f107 0314 	add.w	r3, r7, #20
 800716c:	4611      	mov	r1, r2
 800716e:	4618      	mov	r0, r3
 8007170:	f001 f9a4 	bl	80084bc <xTaskCheckForTimeOut>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d124      	bne.n	80071c4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800717a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800717c:	f000 fa96 	bl	80076ac <prvIsQueueFull>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d018      	beq.n	80071b8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	3310      	adds	r3, #16
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	4611      	mov	r1, r2
 800718e:	4618      	mov	r0, r3
 8007190:	f001 f834 	bl	80081fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007196:	f000 fa21 	bl	80075dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800719a:	f000 fe41 	bl	8007e20 <xTaskResumeAll>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f47f af7c 	bne.w	800709e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80071a6:	4b0c      	ldr	r3, [pc, #48]	; (80071d8 <xQueueGenericSend+0x1f0>)
 80071a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	e772      	b.n	800709e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80071b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ba:	f000 fa0f 	bl	80075dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071be:	f000 fe2f 	bl	8007e20 <xTaskResumeAll>
 80071c2:	e76c      	b.n	800709e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80071c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071c6:	f000 fa09 	bl	80075dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071ca:	f000 fe29 	bl	8007e20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80071ce:	2300      	movs	r3, #0
		}
	}
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3738      	adds	r7, #56	; 0x38
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	e000ed04 	.word	0xe000ed04

080071dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08e      	sub	sp, #56	; 0x38
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d109      	bne.n	8007208 <xQueueGenericSendFromISR+0x2c>
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	627b      	str	r3, [r7, #36]	; 0x24
 8007206:	e7fe      	b.n	8007206 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d103      	bne.n	8007216 <xQueueGenericSendFromISR+0x3a>
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <xQueueGenericSendFromISR+0x3e>
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <xQueueGenericSendFromISR+0x40>
 800721a:	2300      	movs	r3, #0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d109      	bne.n	8007234 <xQueueGenericSendFromISR+0x58>
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	623b      	str	r3, [r7, #32]
 8007232:	e7fe      	b.n	8007232 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b02      	cmp	r3, #2
 8007238:	d103      	bne.n	8007242 <xQueueGenericSendFromISR+0x66>
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <xQueueGenericSendFromISR+0x6a>
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <xQueueGenericSendFromISR+0x6c>
 8007246:	2300      	movs	r3, #0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d109      	bne.n	8007260 <xQueueGenericSendFromISR+0x84>
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	61fb      	str	r3, [r7, #28]
 800725e:	e7fe      	b.n	800725e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007260:	f002 f88c 	bl	800937c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007264:	f3ef 8211 	mrs	r2, BASEPRI
 8007268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	61ba      	str	r2, [r7, #24]
 800727a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800727c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007288:	429a      	cmp	r2, r3
 800728a:	d302      	bcc.n	8007292 <xQueueGenericSendFromISR+0xb6>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b02      	cmp	r3, #2
 8007290:	d12c      	bne.n	80072ec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072a2:	f000 f90b 	bl	80074bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80072aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ae:	d112      	bne.n	80072d6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d016      	beq.n	80072e6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	3324      	adds	r3, #36	; 0x24
 80072bc:	4618      	mov	r0, r3
 80072be:	f001 f825 	bl	800830c <xTaskRemoveFromEventList>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00e      	beq.n	80072e6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	e007      	b.n	80072e6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072da:	3301      	adds	r3, #1
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	b25a      	sxtb	r2, r3
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80072e6:	2301      	movs	r3, #1
 80072e8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80072ea:	e001      	b.n	80072f0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80072ec:	2300      	movs	r3, #0
 80072ee:	637b      	str	r3, [r7, #52]	; 0x34
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3738      	adds	r7, #56	; 0x38
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b08c      	sub	sp, #48	; 0x30
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007310:	2300      	movs	r3, #0
 8007312:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	2b00      	cmp	r3, #0
 800731c:	d109      	bne.n	8007332 <xQueueReceive+0x2e>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	623b      	str	r3, [r7, #32]
 8007330:	e7fe      	b.n	8007330 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d103      	bne.n	8007340 <xQueueReceive+0x3c>
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <xQueueReceive+0x40>
 8007340:	2301      	movs	r3, #1
 8007342:	e000      	b.n	8007346 <xQueueReceive+0x42>
 8007344:	2300      	movs	r3, #0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <xQueueReceive+0x5a>
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	e7fe      	b.n	800735c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800735e:	f001 f9f1 	bl	8008744 <xTaskGetSchedulerState>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <xQueueReceive+0x6a>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <xQueueReceive+0x6e>
 800736e:	2301      	movs	r3, #1
 8007370:	e000      	b.n	8007374 <xQueueReceive+0x70>
 8007372:	2300      	movs	r3, #0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d109      	bne.n	800738c <xQueueReceive+0x88>
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	61bb      	str	r3, [r7, #24]
 800738a:	e7fe      	b.n	800738a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800738c:	f001 ff3c 	bl	8009208 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01f      	beq.n	80073dc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800739c:	68b9      	ldr	r1, [r7, #8]
 800739e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a0:	f000 f8f6 	bl	8007590 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	1e5a      	subs	r2, r3, #1
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00f      	beq.n	80073d4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	3310      	adds	r3, #16
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 ffa7 	bl	800830c <xTaskRemoveFromEventList>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d007      	beq.n	80073d4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073c4:	4b3c      	ldr	r3, [pc, #240]	; (80074b8 <xQueueReceive+0x1b4>)
 80073c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073d4:	f001 ff46 	bl	8009264 <vPortExitCritical>
				return pdPASS;
 80073d8:	2301      	movs	r3, #1
 80073da:	e069      	b.n	80074b0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d103      	bne.n	80073ea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073e2:	f001 ff3f 	bl	8009264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80073e6:	2300      	movs	r3, #0
 80073e8:	e062      	b.n	80074b0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d106      	bne.n	80073fe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073f0:	f107 0310 	add.w	r3, r7, #16
 80073f4:	4618      	mov	r0, r3
 80073f6:	f001 f84b 	bl	8008490 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073fa:	2301      	movs	r3, #1
 80073fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073fe:	f001 ff31 	bl	8009264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007402:	f000 fcff 	bl	8007e04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007406:	f001 feff 	bl	8009208 <vPortEnterCritical>
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007410:	b25b      	sxtb	r3, r3
 8007412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007416:	d103      	bne.n	8007420 <xQueueReceive+0x11c>
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007426:	b25b      	sxtb	r3, r3
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742c:	d103      	bne.n	8007436 <xQueueReceive+0x132>
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007436:	f001 ff15 	bl	8009264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800743a:	1d3a      	adds	r2, r7, #4
 800743c:	f107 0310 	add.w	r3, r7, #16
 8007440:	4611      	mov	r1, r2
 8007442:	4618      	mov	r0, r3
 8007444:	f001 f83a 	bl	80084bc <xTaskCheckForTimeOut>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d123      	bne.n	8007496 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800744e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007450:	f000 f916 	bl	8007680 <prvIsQueueEmpty>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d017      	beq.n	800748a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	3324      	adds	r3, #36	; 0x24
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	4611      	mov	r1, r2
 8007462:	4618      	mov	r0, r3
 8007464:	f000 feca 	bl	80081fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800746a:	f000 f8b7 	bl	80075dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800746e:	f000 fcd7 	bl	8007e20 <xTaskResumeAll>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d189      	bne.n	800738c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007478:	4b0f      	ldr	r3, [pc, #60]	; (80074b8 <xQueueReceive+0x1b4>)
 800747a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	e780      	b.n	800738c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800748a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800748c:	f000 f8a6 	bl	80075dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007490:	f000 fcc6 	bl	8007e20 <xTaskResumeAll>
 8007494:	e77a      	b.n	800738c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007498:	f000 f8a0 	bl	80075dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800749c:	f000 fcc0 	bl	8007e20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a2:	f000 f8ed 	bl	8007680 <prvIsQueueEmpty>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f43f af6f 	beq.w	800738c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3730      	adds	r7, #48	; 0x30
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80074c8:	2300      	movs	r3, #0
 80074ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10d      	bne.n	80074f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d14d      	bne.n	800757e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f001 f94a 	bl	8008780 <xTaskPriorityDisinherit>
 80074ec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	605a      	str	r2, [r3, #4]
 80074f4:	e043      	b.n	800757e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d119      	bne.n	8007530 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6898      	ldr	r0, [r3, #8]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007504:	461a      	mov	r2, r3
 8007506:	68b9      	ldr	r1, [r7, #8]
 8007508:	f002 f970 	bl	80097ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007514:	441a      	add	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	429a      	cmp	r2, r3
 8007524:	d32b      	bcc.n	800757e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	609a      	str	r2, [r3, #8]
 800752e:	e026      	b.n	800757e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	68d8      	ldr	r0, [r3, #12]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007538:	461a      	mov	r2, r3
 800753a:	68b9      	ldr	r1, [r7, #8]
 800753c:	f002 f956 	bl	80097ec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	425b      	negs	r3, r3
 800754a:	441a      	add	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	429a      	cmp	r2, r3
 800755a:	d207      	bcs.n	800756c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	425b      	negs	r3, r3
 8007566:	441a      	add	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b02      	cmp	r3, #2
 8007570:	d105      	bne.n	800757e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	3b01      	subs	r3, #1
 800757c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007586:	697b      	ldr	r3, [r7, #20]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3718      	adds	r7, #24
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d018      	beq.n	80075d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	441a      	add	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d303      	bcc.n	80075c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68d9      	ldr	r1, [r3, #12]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075cc:	461a      	mov	r2, r3
 80075ce:	6838      	ldr	r0, [r7, #0]
 80075d0:	f002 f90c 	bl	80097ec <memcpy>
	}
}
 80075d4:	bf00      	nop
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80075e4:	f001 fe10 	bl	8009208 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075f0:	e011      	b.n	8007616 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d012      	beq.n	8007620 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	3324      	adds	r3, #36	; 0x24
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fe84 	bl	800830c <xTaskRemoveFromEventList>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800760a:	f000 ffb7 	bl	800857c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	3b01      	subs	r3, #1
 8007612:	b2db      	uxtb	r3, r3
 8007614:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800761a:	2b00      	cmp	r3, #0
 800761c:	dce9      	bgt.n	80075f2 <prvUnlockQueue+0x16>
 800761e:	e000      	b.n	8007622 <prvUnlockQueue+0x46>
					break;
 8007620:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	22ff      	movs	r2, #255	; 0xff
 8007626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800762a:	f001 fe1b 	bl	8009264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800762e:	f001 fdeb 	bl	8009208 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007638:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800763a:	e011      	b.n	8007660 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d012      	beq.n	800766a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3310      	adds	r3, #16
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fe5f 	bl	800830c <xTaskRemoveFromEventList>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007654:	f000 ff92 	bl	800857c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	3b01      	subs	r3, #1
 800765c:	b2db      	uxtb	r3, r3
 800765e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007660:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007664:	2b00      	cmp	r3, #0
 8007666:	dce9      	bgt.n	800763c <prvUnlockQueue+0x60>
 8007668:	e000      	b.n	800766c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800766a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	22ff      	movs	r2, #255	; 0xff
 8007670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007674:	f001 fdf6 	bl	8009264 <vPortExitCritical>
}
 8007678:	bf00      	nop
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007688:	f001 fdbe 	bl	8009208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	2b00      	cmp	r3, #0
 8007692:	d102      	bne.n	800769a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007694:	2301      	movs	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	e001      	b.n	800769e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800769e:	f001 fde1 	bl	8009264 <vPortExitCritical>

	return xReturn;
 80076a2:	68fb      	ldr	r3, [r7, #12]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076b4:	f001 fda8 	bl	8009208 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d102      	bne.n	80076ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80076c4:	2301      	movs	r3, #1
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	e001      	b.n	80076ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076ce:	f001 fdc9 	bl	8009264 <vPortExitCritical>

	return xReturn;
 80076d2:	68fb      	ldr	r3, [r7, #12]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	e014      	b.n	8007716 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80076ec:	4a0e      	ldr	r2, [pc, #56]	; (8007728 <vQueueAddToRegistry+0x4c>)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10b      	bne.n	8007710 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80076f8:	490b      	ldr	r1, [pc, #44]	; (8007728 <vQueueAddToRegistry+0x4c>)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007702:	4a09      	ldr	r2, [pc, #36]	; (8007728 <vQueueAddToRegistry+0x4c>)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	4413      	add	r3, r2
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800770e:	e005      	b.n	800771c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3301      	adds	r3, #1
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b07      	cmp	r3, #7
 800771a:	d9e7      	bls.n	80076ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800771c:	bf00      	nop
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	bc80      	pop	{r7}
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	20003748 	.word	0x20003748

0800772c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800773c:	f001 fd64 	bl	8009208 <vPortEnterCritical>
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007746:	b25b      	sxtb	r3, r3
 8007748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774c:	d103      	bne.n	8007756 <vQueueWaitForMessageRestricted+0x2a>
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800775c:	b25b      	sxtb	r3, r3
 800775e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007762:	d103      	bne.n	800776c <vQueueWaitForMessageRestricted+0x40>
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800776c:	f001 fd7a 	bl	8009264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007774:	2b00      	cmp	r3, #0
 8007776:	d106      	bne.n	8007786 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	3324      	adds	r3, #36	; 0x24
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	68b9      	ldr	r1, [r7, #8]
 8007780:	4618      	mov	r0, r3
 8007782:	f000 fd99 	bl	80082b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007786:	6978      	ldr	r0, [r7, #20]
 8007788:	f7ff ff28 	bl	80075dc <prvUnlockQueue>
	}
 800778c:	bf00      	nop
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08e      	sub	sp, #56	; 0x38
 8007798:	af04      	add	r7, sp, #16
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d109      	bne.n	80077bc <xTaskCreateStatic+0x28>
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	623b      	str	r3, [r7, #32]
 80077ba:	e7fe      	b.n	80077ba <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80077bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d109      	bne.n	80077d6 <xTaskCreateStatic+0x42>
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	61fb      	str	r3, [r7, #28]
 80077d4:	e7fe      	b.n	80077d4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077d6:	235c      	movs	r3, #92	; 0x5c
 80077d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	2b5c      	cmp	r3, #92	; 0x5c
 80077de:	d009      	beq.n	80077f4 <xTaskCreateStatic+0x60>
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	e7fe      	b.n	80077f2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01e      	beq.n	8007838 <xTaskCreateStatic+0xa4>
 80077fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d01b      	beq.n	8007838 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007808:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	2202      	movs	r2, #2
 800780e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007812:	2300      	movs	r3, #0
 8007814:	9303      	str	r3, [sp, #12]
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	9302      	str	r3, [sp, #8]
 800781a:	f107 0314 	add.w	r3, r7, #20
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	68b9      	ldr	r1, [r7, #8]
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 f850 	bl	80078d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007832:	f000 f8d3 	bl	80079dc <prvAddNewTaskToReadyList>
 8007836:	e001      	b.n	800783c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007838:	2300      	movs	r3, #0
 800783a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800783c:	697b      	ldr	r3, [r7, #20]
	}
 800783e:	4618      	mov	r0, r3
 8007840:	3728      	adds	r7, #40	; 0x28
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007846:	b580      	push	{r7, lr}
 8007848:	b08c      	sub	sp, #48	; 0x30
 800784a:	af04      	add	r7, sp, #16
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	603b      	str	r3, [r7, #0]
 8007852:	4613      	mov	r3, r2
 8007854:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007856:	88fb      	ldrh	r3, [r7, #6]
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4618      	mov	r0, r3
 800785c:	f001 fdca 	bl	80093f4 <pvPortMalloc>
 8007860:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00e      	beq.n	8007886 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007868:	205c      	movs	r0, #92	; 0x5c
 800786a:	f001 fdc3 	bl	80093f4 <pvPortMalloc>
 800786e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	631a      	str	r2, [r3, #48]	; 0x30
 800787c:	e005      	b.n	800788a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800787e:	6978      	ldr	r0, [r7, #20]
 8007880:	f001 fe7e 	bl	8009580 <vPortFree>
 8007884:	e001      	b.n	800788a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007886:	2300      	movs	r3, #0
 8007888:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d017      	beq.n	80078c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007898:	88fa      	ldrh	r2, [r7, #6]
 800789a:	2300      	movs	r3, #0
 800789c:	9303      	str	r3, [sp, #12]
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	9302      	str	r3, [sp, #8]
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	9301      	str	r3, [sp, #4]
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68b9      	ldr	r1, [r7, #8]
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f000 f80e 	bl	80078d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078b4:	69f8      	ldr	r0, [r7, #28]
 80078b6:	f000 f891 	bl	80079dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078ba:	2301      	movs	r3, #1
 80078bc:	61bb      	str	r3, [r7, #24]
 80078be:	e002      	b.n	80078c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078c0:	f04f 33ff 	mov.w	r3, #4294967295
 80078c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078c6:	69bb      	ldr	r3, [r7, #24]
	}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3720      	adds	r7, #32
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b088      	sub	sp, #32
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	461a      	mov	r2, r3
 80078e8:	21a5      	movs	r1, #165	; 0xa5
 80078ea:	f001 ff8a 	bl	8009802 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078f8:	3b01      	subs	r3, #1
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	f023 0307 	bic.w	r3, r3, #7
 8007906:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	f003 0307 	and.w	r3, r3, #7
 800790e:	2b00      	cmp	r3, #0
 8007910:	d009      	beq.n	8007926 <prvInitialiseNewTask+0x56>
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	e7fe      	b.n	8007924 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007926:	2300      	movs	r3, #0
 8007928:	61fb      	str	r3, [r7, #28]
 800792a:	e012      	b.n	8007952 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	4413      	add	r3, r2
 8007932:	7819      	ldrb	r1, [r3, #0]
 8007934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	4413      	add	r3, r2
 800793a:	3334      	adds	r3, #52	; 0x34
 800793c:	460a      	mov	r2, r1
 800793e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	4413      	add	r3, r2
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d006      	beq.n	800795a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	3301      	adds	r3, #1
 8007950:	61fb      	str	r3, [r7, #28]
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	2b0f      	cmp	r3, #15
 8007956:	d9e9      	bls.n	800792c <prvInitialiseNewTask+0x5c>
 8007958:	e000      	b.n	800795c <prvInitialiseNewTask+0x8c>
		{
			break;
 800795a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007966:	2b37      	cmp	r3, #55	; 0x37
 8007968:	d901      	bls.n	800796e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800796a:	2337      	movs	r3, #55	; 0x37
 800796c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007972:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007978:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	2200      	movs	r2, #0
 800797e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	3304      	adds	r3, #4
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff f964 	bl	8006c52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	3318      	adds	r3, #24
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff f95f 	bl	8006c52 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007998:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	2200      	movs	r2, #0
 80079ae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	68f9      	ldr	r1, [r7, #12]
 80079bc:	69b8      	ldr	r0, [r7, #24]
 80079be:	f001 fb35 	bl	800902c <pxPortInitialiseStack>
 80079c2:	4602      	mov	r2, r0
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80079c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079d4:	bf00      	nop
 80079d6:	3720      	adds	r7, #32
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079e4:	f001 fc10 	bl	8009208 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80079e8:	4b2d      	ldr	r3, [pc, #180]	; (8007aa0 <prvAddNewTaskToReadyList+0xc4>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3301      	adds	r3, #1
 80079ee:	4a2c      	ldr	r2, [pc, #176]	; (8007aa0 <prvAddNewTaskToReadyList+0xc4>)
 80079f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80079f2:	4b2c      	ldr	r3, [pc, #176]	; (8007aa4 <prvAddNewTaskToReadyList+0xc8>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d109      	bne.n	8007a0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80079fa:	4a2a      	ldr	r2, [pc, #168]	; (8007aa4 <prvAddNewTaskToReadyList+0xc8>)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a00:	4b27      	ldr	r3, [pc, #156]	; (8007aa0 <prvAddNewTaskToReadyList+0xc4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d110      	bne.n	8007a2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a08:	f000 fdde 	bl	80085c8 <prvInitialiseTaskLists>
 8007a0c:	e00d      	b.n	8007a2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a0e:	4b26      	ldr	r3, [pc, #152]	; (8007aa8 <prvAddNewTaskToReadyList+0xcc>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d109      	bne.n	8007a2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a16:	4b23      	ldr	r3, [pc, #140]	; (8007aa4 <prvAddNewTaskToReadyList+0xc8>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d802      	bhi.n	8007a2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a24:	4a1f      	ldr	r2, [pc, #124]	; (8007aa4 <prvAddNewTaskToReadyList+0xc8>)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a2a:	4b20      	ldr	r3, [pc, #128]	; (8007aac <prvAddNewTaskToReadyList+0xd0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	4a1e      	ldr	r2, [pc, #120]	; (8007aac <prvAddNewTaskToReadyList+0xd0>)
 8007a32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007a34:	4b1d      	ldr	r3, [pc, #116]	; (8007aac <prvAddNewTaskToReadyList+0xd0>)
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a40:	4b1b      	ldr	r3, [pc, #108]	; (8007ab0 <prvAddNewTaskToReadyList+0xd4>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d903      	bls.n	8007a50 <prvAddNewTaskToReadyList+0x74>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	4a18      	ldr	r2, [pc, #96]	; (8007ab0 <prvAddNewTaskToReadyList+0xd4>)
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4a15      	ldr	r2, [pc, #84]	; (8007ab4 <prvAddNewTaskToReadyList+0xd8>)
 8007a5e:	441a      	add	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3304      	adds	r3, #4
 8007a64:	4619      	mov	r1, r3
 8007a66:	4610      	mov	r0, r2
 8007a68:	f7ff f8ff 	bl	8006c6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a6c:	f001 fbfa 	bl	8009264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a70:	4b0d      	ldr	r3, [pc, #52]	; (8007aa8 <prvAddNewTaskToReadyList+0xcc>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00e      	beq.n	8007a96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a78:	4b0a      	ldr	r3, [pc, #40]	; (8007aa4 <prvAddNewTaskToReadyList+0xc8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d207      	bcs.n	8007a96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a86:	4b0c      	ldr	r3, [pc, #48]	; (8007ab8 <prvAddNewTaskToReadyList+0xdc>)
 8007a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000bc4 	.word	0x20000bc4
 8007aa4:	200006f0 	.word	0x200006f0
 8007aa8:	20000bd0 	.word	0x20000bd0
 8007aac:	20000be0 	.word	0x20000be0
 8007ab0:	20000bcc 	.word	0x20000bcc
 8007ab4:	200006f4 	.word	0x200006f4
 8007ab8:	e000ed04 	.word	0xe000ed04

08007abc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d016      	beq.n	8007afc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <vTaskDelay+0x60>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d009      	beq.n	8007aea <vTaskDelay+0x2e>
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	60bb      	str	r3, [r7, #8]
 8007ae8:	e7fe      	b.n	8007ae8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007aea:	f000 f98b 	bl	8007e04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007aee:	2100      	movs	r1, #0
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fec9 	bl	8008888 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007af6:	f000 f993 	bl	8007e20 <xTaskResumeAll>
 8007afa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d107      	bne.n	8007b12 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007b02:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <vTaskDelay+0x64>)
 8007b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b12:	bf00      	nop
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000bec 	.word	0x20000bec
 8007b20:	e000ed04 	.word	0xe000ed04

08007b24 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007b2c:	f001 fb6c 	bl	8009208 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d102      	bne.n	8007b3c <vTaskSuspend+0x18>
 8007b36:	4b2f      	ldr	r3, [pc, #188]	; (8007bf4 <vTaskSuspend+0xd0>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	e000      	b.n	8007b3e <vTaskSuspend+0x1a>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff f8eb 	bl	8006d20 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d004      	beq.n	8007b5c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3318      	adds	r3, #24
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff f8e2 	bl	8006d20 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	4619      	mov	r1, r3
 8007b62:	4825      	ldr	r0, [pc, #148]	; (8007bf8 <vTaskSuspend+0xd4>)
 8007b64:	f7ff f881 	bl	8006c6a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d103      	bne.n	8007b7c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007b7c:	f001 fb72 	bl	8009264 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007b80:	4b1e      	ldr	r3, [pc, #120]	; (8007bfc <vTaskSuspend+0xd8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007b88:	f001 fb3e 	bl	8009208 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007b8c:	f000 fdb6 	bl	80086fc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007b90:	f001 fb68 	bl	8009264 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007b94:	4b17      	ldr	r3, [pc, #92]	; (8007bf4 <vTaskSuspend+0xd0>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d126      	bne.n	8007bec <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 8007b9e:	4b17      	ldr	r3, [pc, #92]	; (8007bfc <vTaskSuspend+0xd8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d016      	beq.n	8007bd4 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007ba6:	4b16      	ldr	r3, [pc, #88]	; (8007c00 <vTaskSuspend+0xdc>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d009      	beq.n	8007bc2 <vTaskSuspend+0x9e>
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	60bb      	str	r3, [r7, #8]
 8007bc0:	e7fe      	b.n	8007bc0 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8007bc2:	4b10      	ldr	r3, [pc, #64]	; (8007c04 <vTaskSuspend+0xe0>)
 8007bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bd2:	e00b      	b.n	8007bec <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8007bd4:	4b08      	ldr	r3, [pc, #32]	; (8007bf8 <vTaskSuspend+0xd4>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	4b0b      	ldr	r3, [pc, #44]	; (8007c08 <vTaskSuspend+0xe4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d103      	bne.n	8007be8 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8007be0:	4b04      	ldr	r3, [pc, #16]	; (8007bf4 <vTaskSuspend+0xd0>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]
	}
 8007be6:	e001      	b.n	8007bec <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8007be8:	f000 fa9c 	bl	8008124 <vTaskSwitchContext>
	}
 8007bec:	bf00      	nop
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	200006f0 	.word	0x200006f0
 8007bf8:	20000bb0 	.word	0x20000bb0
 8007bfc:	20000bd0 	.word	0x20000bd0
 8007c00:	20000bec 	.word	0x20000bec
 8007c04:	e000ed04 	.word	0xe000ed04
 8007c08:	20000bc4 	.word	0x20000bc4

08007c0c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007c14:	2300      	movs	r3, #0
 8007c16:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d109      	bne.n	8007c36 <prvTaskIsTaskSuspended+0x2a>
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	e7fe      	b.n	8007c34 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	4a0f      	ldr	r2, [pc, #60]	; (8007c78 <prvTaskIsTaskSuspended+0x6c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d101      	bne.n	8007c44 <prvTaskIsTaskSuspended+0x38>
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <prvTaskIsTaskSuspended+0x3a>
 8007c44:	2300      	movs	r3, #0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00f      	beq.n	8007c6a <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4e:	4a0b      	ldr	r2, [pc, #44]	; (8007c7c <prvTaskIsTaskSuspended+0x70>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d00a      	beq.n	8007c6a <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <prvTaskIsTaskSuspended+0x54>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e000      	b.n	8007c62 <prvTaskIsTaskSuspended+0x56>
 8007c60:	2300      	movs	r3, #0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8007c66:	2301      	movs	r3, #1
 8007c68:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c6a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bc80      	pop	{r7}
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	20000bb0 	.word	0x20000bb0
 8007c7c:	20000b84 	.word	0x20000b84

08007c80 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <vTaskResume+0x26>
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	60bb      	str	r3, [r7, #8]
 8007ca4:	e7fe      	b.n	8007ca4 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d03a      	beq.n	8007d22 <vTaskResume+0xa2>
 8007cac:	4b1f      	ldr	r3, [pc, #124]	; (8007d2c <vTaskResume+0xac>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d035      	beq.n	8007d22 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8007cb6:	f001 faa7 	bl	8009208 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7ff ffa6 	bl	8007c0c <prvTaskIsTaskSuspended>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d02b      	beq.n	8007d1e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	3304      	adds	r3, #4
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff f828 	bl	8006d20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd4:	4b16      	ldr	r3, [pc, #88]	; (8007d30 <vTaskResume+0xb0>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d903      	bls.n	8007ce4 <vTaskResume+0x64>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce0:	4a13      	ldr	r2, [pc, #76]	; (8007d30 <vTaskResume+0xb0>)
 8007ce2:	6013      	str	r3, [r2, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce8:	4613      	mov	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4a10      	ldr	r2, [pc, #64]	; (8007d34 <vTaskResume+0xb4>)
 8007cf2:	441a      	add	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f7fe ffb5 	bl	8006c6a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d04:	4b09      	ldr	r3, [pc, #36]	; (8007d2c <vTaskResume+0xac>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d307      	bcc.n	8007d1e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007d0e:	4b0a      	ldr	r3, [pc, #40]	; (8007d38 <vTaskResume+0xb8>)
 8007d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007d1e:	f001 faa1 	bl	8009264 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	200006f0 	.word	0x200006f0
 8007d30:	20000bcc 	.word	0x20000bcc
 8007d34:	200006f4 	.word	0x200006f4
 8007d38:	e000ed04 	.word	0xe000ed04

08007d3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08a      	sub	sp, #40	; 0x28
 8007d40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d4a:	463a      	mov	r2, r7
 8007d4c:	1d39      	adds	r1, r7, #4
 8007d4e:	f107 0308 	add.w	r3, r7, #8
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fe fd7c 	bl	8006850 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	9202      	str	r2, [sp, #8]
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	2300      	movs	r3, #0
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	2300      	movs	r3, #0
 8007d68:	460a      	mov	r2, r1
 8007d6a:	4920      	ldr	r1, [pc, #128]	; (8007dec <vTaskStartScheduler+0xb0>)
 8007d6c:	4820      	ldr	r0, [pc, #128]	; (8007df0 <vTaskStartScheduler+0xb4>)
 8007d6e:	f7ff fd11 	bl	8007794 <xTaskCreateStatic>
 8007d72:	4602      	mov	r2, r0
 8007d74:	4b1f      	ldr	r3, [pc, #124]	; (8007df4 <vTaskStartScheduler+0xb8>)
 8007d76:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d78:	4b1e      	ldr	r3, [pc, #120]	; (8007df4 <vTaskStartScheduler+0xb8>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d80:	2301      	movs	r3, #1
 8007d82:	617b      	str	r3, [r7, #20]
 8007d84:	e001      	b.n	8007d8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d86:	2300      	movs	r3, #0
 8007d88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d102      	bne.n	8007d96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d90:	f000 fdce 	bl	8008930 <xTimerCreateTimerTask>
 8007d94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d115      	bne.n	8007dc8 <vTaskStartScheduler+0x8c>
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007dae:	4b12      	ldr	r3, [pc, #72]	; (8007df8 <vTaskStartScheduler+0xbc>)
 8007db0:	f04f 32ff 	mov.w	r2, #4294967295
 8007db4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007db6:	4b11      	ldr	r3, [pc, #68]	; (8007dfc <vTaskStartScheduler+0xc0>)
 8007db8:	2201      	movs	r2, #1
 8007dba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007dbc:	4b10      	ldr	r3, [pc, #64]	; (8007e00 <vTaskStartScheduler+0xc4>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007dc2:	f001 f9b1 	bl	8009128 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007dc6:	e00d      	b.n	8007de4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dce:	d109      	bne.n	8007de4 <vTaskStartScheduler+0xa8>
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	60fb      	str	r3, [r7, #12]
 8007de2:	e7fe      	b.n	8007de2 <vTaskStartScheduler+0xa6>
}
 8007de4:	bf00      	nop
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	08009a70 	.word	0x08009a70
 8007df0:	08008595 	.word	0x08008595
 8007df4:	20000be8 	.word	0x20000be8
 8007df8:	20000be4 	.word	0x20000be4
 8007dfc:	20000bd0 	.word	0x20000bd0
 8007e00:	20000bc8 	.word	0x20000bc8

08007e04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007e08:	4b04      	ldr	r3, [pc, #16]	; (8007e1c <vTaskSuspendAll+0x18>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	4a03      	ldr	r2, [pc, #12]	; (8007e1c <vTaskSuspendAll+0x18>)
 8007e10:	6013      	str	r3, [r2, #0]
}
 8007e12:	bf00      	nop
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bc80      	pop	{r7}
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20000bec 	.word	0x20000bec

08007e20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e2e:	4b41      	ldr	r3, [pc, #260]	; (8007f34 <xTaskResumeAll+0x114>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d109      	bne.n	8007e4a <xTaskResumeAll+0x2a>
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	603b      	str	r3, [r7, #0]
 8007e48:	e7fe      	b.n	8007e48 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e4a:	f001 f9dd 	bl	8009208 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e4e:	4b39      	ldr	r3, [pc, #228]	; (8007f34 <xTaskResumeAll+0x114>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	4a37      	ldr	r2, [pc, #220]	; (8007f34 <xTaskResumeAll+0x114>)
 8007e56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e58:	4b36      	ldr	r3, [pc, #216]	; (8007f34 <xTaskResumeAll+0x114>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d162      	bne.n	8007f26 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e60:	4b35      	ldr	r3, [pc, #212]	; (8007f38 <xTaskResumeAll+0x118>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d05e      	beq.n	8007f26 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e68:	e02f      	b.n	8007eca <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007e6a:	4b34      	ldr	r3, [pc, #208]	; (8007f3c <xTaskResumeAll+0x11c>)
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3318      	adds	r3, #24
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe ff52 	bl	8006d20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3304      	adds	r3, #4
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fe ff4d 	bl	8006d20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8a:	4b2d      	ldr	r3, [pc, #180]	; (8007f40 <xTaskResumeAll+0x120>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d903      	bls.n	8007e9a <xTaskResumeAll+0x7a>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e96:	4a2a      	ldr	r2, [pc, #168]	; (8007f40 <xTaskResumeAll+0x120>)
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4a27      	ldr	r2, [pc, #156]	; (8007f44 <xTaskResumeAll+0x124>)
 8007ea8:	441a      	add	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3304      	adds	r3, #4
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f7fe feda 	bl	8006c6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eba:	4b23      	ldr	r3, [pc, #140]	; (8007f48 <xTaskResumeAll+0x128>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d302      	bcc.n	8007eca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007ec4:	4b21      	ldr	r3, [pc, #132]	; (8007f4c <xTaskResumeAll+0x12c>)
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007eca:	4b1c      	ldr	r3, [pc, #112]	; (8007f3c <xTaskResumeAll+0x11c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1cb      	bne.n	8007e6a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ed8:	f000 fc10 	bl	80086fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007edc:	4b1c      	ldr	r3, [pc, #112]	; (8007f50 <xTaskResumeAll+0x130>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d010      	beq.n	8007f0a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ee8:	f000 f856 	bl	8007f98 <xTaskIncrementTick>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d002      	beq.n	8007ef8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007ef2:	4b16      	ldr	r3, [pc, #88]	; (8007f4c <xTaskResumeAll+0x12c>)
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1f1      	bne.n	8007ee8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007f04:	4b12      	ldr	r3, [pc, #72]	; (8007f50 <xTaskResumeAll+0x130>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f0a:	4b10      	ldr	r3, [pc, #64]	; (8007f4c <xTaskResumeAll+0x12c>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d009      	beq.n	8007f26 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f12:	2301      	movs	r3, #1
 8007f14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f16:	4b0f      	ldr	r3, [pc, #60]	; (8007f54 <xTaskResumeAll+0x134>)
 8007f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f26:	f001 f99d 	bl	8009264 <vPortExitCritical>

	return xAlreadyYielded;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	20000bec 	.word	0x20000bec
 8007f38:	20000bc4 	.word	0x20000bc4
 8007f3c:	20000b84 	.word	0x20000b84
 8007f40:	20000bcc 	.word	0x20000bcc
 8007f44:	200006f4 	.word	0x200006f4
 8007f48:	200006f0 	.word	0x200006f0
 8007f4c:	20000bd8 	.word	0x20000bd8
 8007f50:	20000bd4 	.word	0x20000bd4
 8007f54:	e000ed04 	.word	0xe000ed04

08007f58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f5e:	4b04      	ldr	r3, [pc, #16]	; (8007f70 <xTaskGetTickCount+0x18>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f64:	687b      	ldr	r3, [r7, #4]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bc80      	pop	{r7}
 8007f6e:	4770      	bx	lr
 8007f70:	20000bc8 	.word	0x20000bc8

08007f74 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f7a:	f001 f9ff 	bl	800937c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007f7e:	2300      	movs	r3, #0
 8007f80:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007f82:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <xTaskGetTickCountFromISR+0x20>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f88:	683b      	ldr	r3, [r7, #0]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000bc8 	.word	0x20000bc8

08007f98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fa2:	4b55      	ldr	r3, [pc, #340]	; (80080f8 <xTaskIncrementTick+0x160>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f040 8093 	bne.w	80080d2 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fac:	4b53      	ldr	r3, [pc, #332]	; (80080fc <xTaskIncrementTick+0x164>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007fb4:	4a51      	ldr	r2, [pc, #324]	; (80080fc <xTaskIncrementTick+0x164>)
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d11f      	bne.n	8008000 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fc0:	4b4f      	ldr	r3, [pc, #316]	; (8008100 <xTaskIncrementTick+0x168>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d009      	beq.n	8007fde <xTaskIncrementTick+0x46>
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	603b      	str	r3, [r7, #0]
 8007fdc:	e7fe      	b.n	8007fdc <xTaskIncrementTick+0x44>
 8007fde:	4b48      	ldr	r3, [pc, #288]	; (8008100 <xTaskIncrementTick+0x168>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	4b47      	ldr	r3, [pc, #284]	; (8008104 <xTaskIncrementTick+0x16c>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a45      	ldr	r2, [pc, #276]	; (8008100 <xTaskIncrementTick+0x168>)
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	4a45      	ldr	r2, [pc, #276]	; (8008104 <xTaskIncrementTick+0x16c>)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	4b45      	ldr	r3, [pc, #276]	; (8008108 <xTaskIncrementTick+0x170>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	4a43      	ldr	r2, [pc, #268]	; (8008108 <xTaskIncrementTick+0x170>)
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	f000 fb7e 	bl	80086fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008000:	4b42      	ldr	r3, [pc, #264]	; (800810c <xTaskIncrementTick+0x174>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	429a      	cmp	r2, r3
 8008008:	d34e      	bcc.n	80080a8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800800a:	4b3d      	ldr	r3, [pc, #244]	; (8008100 <xTaskIncrementTick+0x168>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <xTaskIncrementTick+0x80>
 8008014:	2301      	movs	r3, #1
 8008016:	e000      	b.n	800801a <xTaskIncrementTick+0x82>
 8008018:	2300      	movs	r3, #0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d004      	beq.n	8008028 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800801e:	4b3b      	ldr	r3, [pc, #236]	; (800810c <xTaskIncrementTick+0x174>)
 8008020:	f04f 32ff 	mov.w	r2, #4294967295
 8008024:	601a      	str	r2, [r3, #0]
					break;
 8008026:	e03f      	b.n	80080a8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008028:	4b35      	ldr	r3, [pc, #212]	; (8008100 <xTaskIncrementTick+0x168>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	429a      	cmp	r2, r3
 800803e:	d203      	bcs.n	8008048 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008040:	4a32      	ldr	r2, [pc, #200]	; (800810c <xTaskIncrementTick+0x174>)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6013      	str	r3, [r2, #0]
						break;
 8008046:	e02f      	b.n	80080a8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	3304      	adds	r3, #4
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe fe67 	bl	8006d20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008056:	2b00      	cmp	r3, #0
 8008058:	d004      	beq.n	8008064 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	3318      	adds	r3, #24
 800805e:	4618      	mov	r0, r3
 8008060:	f7fe fe5e 	bl	8006d20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008068:	4b29      	ldr	r3, [pc, #164]	; (8008110 <xTaskIncrementTick+0x178>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	429a      	cmp	r2, r3
 800806e:	d903      	bls.n	8008078 <xTaskIncrementTick+0xe0>
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	4a26      	ldr	r2, [pc, #152]	; (8008110 <xTaskIncrementTick+0x178>)
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807c:	4613      	mov	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4a23      	ldr	r2, [pc, #140]	; (8008114 <xTaskIncrementTick+0x17c>)
 8008086:	441a      	add	r2, r3
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	3304      	adds	r3, #4
 800808c:	4619      	mov	r1, r3
 800808e:	4610      	mov	r0, r2
 8008090:	f7fe fdeb 	bl	8006c6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008098:	4b1f      	ldr	r3, [pc, #124]	; (8008118 <xTaskIncrementTick+0x180>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809e:	429a      	cmp	r2, r3
 80080a0:	d3b3      	bcc.n	800800a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80080a2:	2301      	movs	r3, #1
 80080a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080a6:	e7b0      	b.n	800800a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080a8:	4b1b      	ldr	r3, [pc, #108]	; (8008118 <xTaskIncrementTick+0x180>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ae:	4919      	ldr	r1, [pc, #100]	; (8008114 <xTaskIncrementTick+0x17c>)
 80080b0:	4613      	mov	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	440b      	add	r3, r1
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d901      	bls.n	80080c4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80080c0:	2301      	movs	r3, #1
 80080c2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 80080c4:	4b15      	ldr	r3, [pc, #84]	; (800811c <xTaskIncrementTick+0x184>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d109      	bne.n	80080e0 <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 80080cc:	f7f8 fe18 	bl	8000d00 <vApplicationTickHook>
 80080d0:	e006      	b.n	80080e0 <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80080d2:	4b12      	ldr	r3, [pc, #72]	; (800811c <xTaskIncrementTick+0x184>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3301      	adds	r3, #1
 80080d8:	4a10      	ldr	r2, [pc, #64]	; (800811c <xTaskIncrementTick+0x184>)
 80080da:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80080dc:	f7f8 fe10 	bl	8000d00 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80080e0:	4b0f      	ldr	r3, [pc, #60]	; (8008120 <xTaskIncrementTick+0x188>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 80080e8:	2301      	movs	r3, #1
 80080ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80080ec:	697b      	ldr	r3, [r7, #20]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20000bec 	.word	0x20000bec
 80080fc:	20000bc8 	.word	0x20000bc8
 8008100:	20000b7c 	.word	0x20000b7c
 8008104:	20000b80 	.word	0x20000b80
 8008108:	20000bdc 	.word	0x20000bdc
 800810c:	20000be4 	.word	0x20000be4
 8008110:	20000bcc 	.word	0x20000bcc
 8008114:	200006f4 	.word	0x200006f4
 8008118:	200006f0 	.word	0x200006f0
 800811c:	20000bd4 	.word	0x20000bd4
 8008120:	20000bd8 	.word	0x20000bd8

08008124 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800812a:	4b2f      	ldr	r3, [pc, #188]	; (80081e8 <vTaskSwitchContext+0xc4>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008132:	4b2e      	ldr	r3, [pc, #184]	; (80081ec <vTaskSwitchContext+0xc8>)
 8008134:	2201      	movs	r2, #1
 8008136:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008138:	e051      	b.n	80081de <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 800813a:	4b2c      	ldr	r3, [pc, #176]	; (80081ec <vTaskSwitchContext+0xc8>)
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008140:	4b2b      	ldr	r3, [pc, #172]	; (80081f0 <vTaskSwitchContext+0xcc>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	4b2a      	ldr	r3, [pc, #168]	; (80081f0 <vTaskSwitchContext+0xcc>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814c:	429a      	cmp	r2, r3
 800814e:	d808      	bhi.n	8008162 <vTaskSwitchContext+0x3e>
 8008150:	4b27      	ldr	r3, [pc, #156]	; (80081f0 <vTaskSwitchContext+0xcc>)
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	4b26      	ldr	r3, [pc, #152]	; (80081f0 <vTaskSwitchContext+0xcc>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3334      	adds	r3, #52	; 0x34
 800815a:	4619      	mov	r1, r3
 800815c:	4610      	mov	r0, r2
 800815e:	f7f8 fdd5 	bl	8000d0c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008162:	4b24      	ldr	r3, [pc, #144]	; (80081f4 <vTaskSwitchContext+0xd0>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	e00f      	b.n	800818a <vTaskSwitchContext+0x66>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d109      	bne.n	8008184 <vTaskSwitchContext+0x60>
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	607b      	str	r3, [r7, #4]
 8008182:	e7fe      	b.n	8008182 <vTaskSwitchContext+0x5e>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	3b01      	subs	r3, #1
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	491b      	ldr	r1, [pc, #108]	; (80081f8 <vTaskSwitchContext+0xd4>)
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0e5      	beq.n	800816a <vTaskSwitchContext+0x46>
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4a13      	ldr	r2, [pc, #76]	; (80081f8 <vTaskSwitchContext+0xd4>)
 80081aa:	4413      	add	r3, r2
 80081ac:	60bb      	str	r3, [r7, #8]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	605a      	str	r2, [r3, #4]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	3308      	adds	r3, #8
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d104      	bne.n	80081ce <vTaskSwitchContext+0xaa>
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	605a      	str	r2, [r3, #4]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	4a06      	ldr	r2, [pc, #24]	; (80081f0 <vTaskSwitchContext+0xcc>)
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	4a06      	ldr	r2, [pc, #24]	; (80081f4 <vTaskSwitchContext+0xd0>)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6013      	str	r3, [r2, #0]
}
 80081de:	bf00      	nop
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20000bec 	.word	0x20000bec
 80081ec:	20000bd8 	.word	0x20000bd8
 80081f0:	200006f0 	.word	0x200006f0
 80081f4:	20000bcc 	.word	0x20000bcc
 80081f8:	200006f4 	.word	0x200006f4

080081fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d109      	bne.n	8008220 <vTaskPlaceOnEventList+0x24>
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	60fb      	str	r3, [r7, #12]
 800821e:	e7fe      	b.n	800821e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008220:	4b07      	ldr	r3, [pc, #28]	; (8008240 <vTaskPlaceOnEventList+0x44>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3318      	adds	r3, #24
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7fe fd41 	bl	8006cb0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800822e:	2101      	movs	r1, #1
 8008230:	6838      	ldr	r0, [r7, #0]
 8008232:	f000 fb29 	bl	8008888 <prvAddCurrentTaskToDelayedList>
}
 8008236:	bf00      	nop
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	200006f0 	.word	0x200006f0

08008244 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <vTaskPlaceOnUnorderedEventList+0x26>
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	617b      	str	r3, [r7, #20]
 8008268:	e7fe      	b.n	8008268 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800826a:	4b11      	ldr	r3, [pc, #68]	; (80082b0 <vTaskPlaceOnUnorderedEventList+0x6c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d109      	bne.n	8008286 <vTaskPlaceOnUnorderedEventList+0x42>
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	613b      	str	r3, [r7, #16]
 8008284:	e7fe      	b.n	8008284 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008286:	4b0b      	ldr	r3, [pc, #44]	; (80082b4 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008290:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008292:	4b08      	ldr	r3, [pc, #32]	; (80082b4 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3318      	adds	r3, #24
 8008298:	4619      	mov	r1, r3
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f7fe fce5 	bl	8006c6a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082a0:	2101      	movs	r1, #1
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 faf0 	bl	8008888 <prvAddCurrentTaskToDelayedList>
}
 80082a8:	bf00      	nop
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20000bec 	.word	0x20000bec
 80082b4:	200006f0 	.word	0x200006f0

080082b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d109      	bne.n	80082de <vTaskPlaceOnEventListRestricted+0x26>
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	617b      	str	r3, [r7, #20]
 80082dc:	e7fe      	b.n	80082dc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082de:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <vTaskPlaceOnEventListRestricted+0x50>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3318      	adds	r3, #24
 80082e4:	4619      	mov	r1, r3
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7fe fcbf 	bl	8006c6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80082f2:	f04f 33ff 	mov.w	r3, #4294967295
 80082f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80082f8:	6879      	ldr	r1, [r7, #4]
 80082fa:	68b8      	ldr	r0, [r7, #8]
 80082fc:	f000 fac4 	bl	8008888 <prvAddCurrentTaskToDelayedList>
	}
 8008300:	bf00      	nop
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	200006f0 	.word	0x200006f0

0800830c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d109      	bne.n	8008336 <xTaskRemoveFromEventList+0x2a>
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	60fb      	str	r3, [r7, #12]
 8008334:	e7fe      	b.n	8008334 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	3318      	adds	r3, #24
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe fcf0 	bl	8006d20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008340:	4b1d      	ldr	r3, [pc, #116]	; (80083b8 <xTaskRemoveFromEventList+0xac>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d11d      	bne.n	8008384 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	3304      	adds	r3, #4
 800834c:	4618      	mov	r0, r3
 800834e:	f7fe fce7 	bl	8006d20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008356:	4b19      	ldr	r3, [pc, #100]	; (80083bc <xTaskRemoveFromEventList+0xb0>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d903      	bls.n	8008366 <xTaskRemoveFromEventList+0x5a>
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	4a16      	ldr	r2, [pc, #88]	; (80083bc <xTaskRemoveFromEventList+0xb0>)
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836a:	4613      	mov	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4a13      	ldr	r2, [pc, #76]	; (80083c0 <xTaskRemoveFromEventList+0xb4>)
 8008374:	441a      	add	r2, r3
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	3304      	adds	r3, #4
 800837a:	4619      	mov	r1, r3
 800837c:	4610      	mov	r0, r2
 800837e:	f7fe fc74 	bl	8006c6a <vListInsertEnd>
 8008382:	e005      	b.n	8008390 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	3318      	adds	r3, #24
 8008388:	4619      	mov	r1, r3
 800838a:	480e      	ldr	r0, [pc, #56]	; (80083c4 <xTaskRemoveFromEventList+0xb8>)
 800838c:	f7fe fc6d 	bl	8006c6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008394:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <xTaskRemoveFromEventList+0xbc>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839a:	429a      	cmp	r2, r3
 800839c:	d905      	bls.n	80083aa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800839e:	2301      	movs	r3, #1
 80083a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80083a2:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <xTaskRemoveFromEventList+0xc0>)
 80083a4:	2201      	movs	r2, #1
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	e001      	b.n	80083ae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80083aa:	2300      	movs	r3, #0
 80083ac:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80083ae:	697b      	ldr	r3, [r7, #20]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	20000bec 	.word	0x20000bec
 80083bc:	20000bcc 	.word	0x20000bcc
 80083c0:	200006f4 	.word	0x200006f4
 80083c4:	20000b84 	.word	0x20000b84
 80083c8:	200006f0 	.word	0x200006f0
 80083cc:	20000bd8 	.word	0x20000bd8

080083d0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80083da:	4b28      	ldr	r3, [pc, #160]	; (800847c <vTaskRemoveFromUnorderedEventList+0xac>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d109      	bne.n	80083f6 <vTaskRemoveFromUnorderedEventList+0x26>
 80083e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	613b      	str	r3, [r7, #16]
 80083f4:	e7fe      	b.n	80083f4 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d109      	bne.n	8008420 <vTaskRemoveFromUnorderedEventList+0x50>
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	e7fe      	b.n	800841e <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7fe fc7d 	bl	8006d20 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	3304      	adds	r3, #4
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fc78 	bl	8006d20 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008434:	4b12      	ldr	r3, [pc, #72]	; (8008480 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	429a      	cmp	r2, r3
 800843a:	d903      	bls.n	8008444 <vTaskRemoveFromUnorderedEventList+0x74>
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008440:	4a0f      	ldr	r2, [pc, #60]	; (8008480 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8008442:	6013      	str	r3, [r2, #0]
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008448:	4613      	mov	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4a0c      	ldr	r2, [pc, #48]	; (8008484 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8008452:	441a      	add	r2, r3
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	3304      	adds	r3, #4
 8008458:	4619      	mov	r1, r3
 800845a:	4610      	mov	r0, r2
 800845c:	f7fe fc05 	bl	8006c6a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008464:	4b08      	ldr	r3, [pc, #32]	; (8008488 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846a:	429a      	cmp	r2, r3
 800846c:	d902      	bls.n	8008474 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800846e:	4b07      	ldr	r3, [pc, #28]	; (800848c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008470:	2201      	movs	r2, #1
 8008472:	601a      	str	r2, [r3, #0]
	}
}
 8008474:	bf00      	nop
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	20000bec 	.word	0x20000bec
 8008480:	20000bcc 	.word	0x20000bcc
 8008484:	200006f4 	.word	0x200006f4
 8008488:	200006f0 	.word	0x200006f0
 800848c:	20000bd8 	.word	0x20000bd8

08008490 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008498:	4b06      	ldr	r3, [pc, #24]	; (80084b4 <vTaskInternalSetTimeOutState+0x24>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084a0:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <vTaskInternalSetTimeOutState+0x28>)
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	605a      	str	r2, [r3, #4]
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bc80      	pop	{r7}
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20000bdc 	.word	0x20000bdc
 80084b8:	20000bc8 	.word	0x20000bc8

080084bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b088      	sub	sp, #32
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d109      	bne.n	80084e0 <xTaskCheckForTimeOut+0x24>
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	e7fe      	b.n	80084de <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d109      	bne.n	80084fa <xTaskCheckForTimeOut+0x3e>
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e7fe      	b.n	80084f8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80084fa:	f000 fe85 	bl	8009208 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084fe:	4b1d      	ldr	r3, [pc, #116]	; (8008574 <xTaskCheckForTimeOut+0xb8>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008516:	d102      	bne.n	800851e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008518:	2300      	movs	r3, #0
 800851a:	61fb      	str	r3, [r7, #28]
 800851c:	e023      	b.n	8008566 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	4b15      	ldr	r3, [pc, #84]	; (8008578 <xTaskCheckForTimeOut+0xbc>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	429a      	cmp	r2, r3
 8008528:	d007      	beq.n	800853a <xTaskCheckForTimeOut+0x7e>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	429a      	cmp	r2, r3
 8008532:	d302      	bcc.n	800853a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008534:	2301      	movs	r3, #1
 8008536:	61fb      	str	r3, [r7, #28]
 8008538:	e015      	b.n	8008566 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	429a      	cmp	r2, r3
 8008542:	d20b      	bcs.n	800855c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	1ad2      	subs	r2, r2, r3
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff ff9d 	bl	8008490 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008556:	2300      	movs	r3, #0
 8008558:	61fb      	str	r3, [r7, #28]
 800855a:	e004      	b.n	8008566 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2200      	movs	r2, #0
 8008560:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008562:	2301      	movs	r3, #1
 8008564:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008566:	f000 fe7d 	bl	8009264 <vPortExitCritical>

	return xReturn;
 800856a:	69fb      	ldr	r3, [r7, #28]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3720      	adds	r7, #32
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20000bc8 	.word	0x20000bc8
 8008578:	20000bdc 	.word	0x20000bdc

0800857c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800857c:	b480      	push	{r7}
 800857e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008580:	4b03      	ldr	r3, [pc, #12]	; (8008590 <vTaskMissedYield+0x14>)
 8008582:	2201      	movs	r2, #1
 8008584:	601a      	str	r2, [r3, #0]
}
 8008586:	bf00      	nop
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	20000bd8 	.word	0x20000bd8

08008594 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800859c:	f000 f854 	bl	8008648 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085a0:	4b07      	ldr	r3, [pc, #28]	; (80085c0 <prvIdleTask+0x2c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d907      	bls.n	80085b8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80085a8:	4b06      	ldr	r3, [pc, #24]	; (80085c4 <prvIdleTask+0x30>)
 80085aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ae:	601a      	str	r2, [r3, #0]
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80085b8:	f7f8 fb9c 	bl	8000cf4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80085bc:	e7ee      	b.n	800859c <prvIdleTask+0x8>
 80085be:	bf00      	nop
 80085c0:	200006f4 	.word	0x200006f4
 80085c4:	e000ed04 	.word	0xe000ed04

080085c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085ce:	2300      	movs	r3, #0
 80085d0:	607b      	str	r3, [r7, #4]
 80085d2:	e00c      	b.n	80085ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	4613      	mov	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4a12      	ldr	r2, [pc, #72]	; (8008628 <prvInitialiseTaskLists+0x60>)
 80085e0:	4413      	add	r3, r2
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe fb16 	bl	8006c14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3301      	adds	r3, #1
 80085ec:	607b      	str	r3, [r7, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b37      	cmp	r3, #55	; 0x37
 80085f2:	d9ef      	bls.n	80085d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085f4:	480d      	ldr	r0, [pc, #52]	; (800862c <prvInitialiseTaskLists+0x64>)
 80085f6:	f7fe fb0d 	bl	8006c14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085fa:	480d      	ldr	r0, [pc, #52]	; (8008630 <prvInitialiseTaskLists+0x68>)
 80085fc:	f7fe fb0a 	bl	8006c14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008600:	480c      	ldr	r0, [pc, #48]	; (8008634 <prvInitialiseTaskLists+0x6c>)
 8008602:	f7fe fb07 	bl	8006c14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008606:	480c      	ldr	r0, [pc, #48]	; (8008638 <prvInitialiseTaskLists+0x70>)
 8008608:	f7fe fb04 	bl	8006c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800860c:	480b      	ldr	r0, [pc, #44]	; (800863c <prvInitialiseTaskLists+0x74>)
 800860e:	f7fe fb01 	bl	8006c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008612:	4b0b      	ldr	r3, [pc, #44]	; (8008640 <prvInitialiseTaskLists+0x78>)
 8008614:	4a05      	ldr	r2, [pc, #20]	; (800862c <prvInitialiseTaskLists+0x64>)
 8008616:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008618:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <prvInitialiseTaskLists+0x7c>)
 800861a:	4a05      	ldr	r2, [pc, #20]	; (8008630 <prvInitialiseTaskLists+0x68>)
 800861c:	601a      	str	r2, [r3, #0]
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	200006f4 	.word	0x200006f4
 800862c:	20000b54 	.word	0x20000b54
 8008630:	20000b68 	.word	0x20000b68
 8008634:	20000b84 	.word	0x20000b84
 8008638:	20000b98 	.word	0x20000b98
 800863c:	20000bb0 	.word	0x20000bb0
 8008640:	20000b7c 	.word	0x20000b7c
 8008644:	20000b80 	.word	0x20000b80

08008648 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800864e:	e019      	b.n	8008684 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008650:	f000 fdda 	bl	8009208 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008654:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <prvCheckTasksWaitingTermination+0x4c>)
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3304      	adds	r3, #4
 8008660:	4618      	mov	r0, r3
 8008662:	f7fe fb5d 	bl	8006d20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008666:	4b0c      	ldr	r3, [pc, #48]	; (8008698 <prvCheckTasksWaitingTermination+0x50>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3b01      	subs	r3, #1
 800866c:	4a0a      	ldr	r2, [pc, #40]	; (8008698 <prvCheckTasksWaitingTermination+0x50>)
 800866e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008670:	4b0a      	ldr	r3, [pc, #40]	; (800869c <prvCheckTasksWaitingTermination+0x54>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3b01      	subs	r3, #1
 8008676:	4a09      	ldr	r2, [pc, #36]	; (800869c <prvCheckTasksWaitingTermination+0x54>)
 8008678:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800867a:	f000 fdf3 	bl	8009264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f80e 	bl	80086a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008684:	4b05      	ldr	r3, [pc, #20]	; (800869c <prvCheckTasksWaitingTermination+0x54>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e1      	bne.n	8008650 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800868c:	bf00      	nop
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20000b98 	.word	0x20000b98
 8008698:	20000bc4 	.word	0x20000bc4
 800869c:	20000bac 	.word	0x20000bac

080086a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d108      	bne.n	80086c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 ff62 	bl	8009580 <vPortFree>
				vPortFree( pxTCB );
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 ff5f 	bl	8009580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086c2:	e017      	b.n	80086f4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d103      	bne.n	80086d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 ff56 	bl	8009580 <vPortFree>
	}
 80086d4:	e00e      	b.n	80086f4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d009      	beq.n	80086f4 <prvDeleteTCB+0x54>
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	e7fe      	b.n	80086f2 <prvDeleteTCB+0x52>
	}
 80086f4:	bf00      	nop
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008702:	4b0e      	ldr	r3, [pc, #56]	; (800873c <prvResetNextTaskUnblockTime+0x40>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <prvResetNextTaskUnblockTime+0x14>
 800870c:	2301      	movs	r3, #1
 800870e:	e000      	b.n	8008712 <prvResetNextTaskUnblockTime+0x16>
 8008710:	2300      	movs	r3, #0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d004      	beq.n	8008720 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008716:	4b0a      	ldr	r3, [pc, #40]	; (8008740 <prvResetNextTaskUnblockTime+0x44>)
 8008718:	f04f 32ff 	mov.w	r2, #4294967295
 800871c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800871e:	e008      	b.n	8008732 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008720:	4b06      	ldr	r3, [pc, #24]	; (800873c <prvResetNextTaskUnblockTime+0x40>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	4a04      	ldr	r2, [pc, #16]	; (8008740 <prvResetNextTaskUnblockTime+0x44>)
 8008730:	6013      	str	r3, [r2, #0]
}
 8008732:	bf00      	nop
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	bc80      	pop	{r7}
 800873a:	4770      	bx	lr
 800873c:	20000b7c 	.word	0x20000b7c
 8008740:	20000be4 	.word	0x20000be4

08008744 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800874a:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <xTaskGetSchedulerState+0x34>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d102      	bne.n	8008758 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008752:	2301      	movs	r3, #1
 8008754:	607b      	str	r3, [r7, #4]
 8008756:	e008      	b.n	800876a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008758:	4b08      	ldr	r3, [pc, #32]	; (800877c <xTaskGetSchedulerState+0x38>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d102      	bne.n	8008766 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008760:	2302      	movs	r3, #2
 8008762:	607b      	str	r3, [r7, #4]
 8008764:	e001      	b.n	800876a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008766:	2300      	movs	r3, #0
 8008768:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800876a:	687b      	ldr	r3, [r7, #4]
	}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	bc80      	pop	{r7}
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	20000bd0 	.word	0x20000bd0
 800877c:	20000bec 	.word	0x20000bec

08008780 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800878c:	2300      	movs	r3, #0
 800878e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d054      	beq.n	8008840 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008796:	4b2d      	ldr	r3, [pc, #180]	; (800884c <xTaskPriorityDisinherit+0xcc>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	429a      	cmp	r2, r3
 800879e:	d009      	beq.n	80087b4 <xTaskPriorityDisinherit+0x34>
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	60fb      	str	r3, [r7, #12]
 80087b2:	e7fe      	b.n	80087b2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d109      	bne.n	80087d0 <xTaskPriorityDisinherit+0x50>
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	60bb      	str	r3, [r7, #8]
 80087ce:	e7fe      	b.n	80087ce <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d4:	1e5a      	subs	r2, r3, #1
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d02c      	beq.n	8008840 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d128      	bne.n	8008840 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	3304      	adds	r3, #4
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe fa94 	bl	8006d20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008804:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008810:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <xTaskPriorityDisinherit+0xd0>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	429a      	cmp	r2, r3
 8008816:	d903      	bls.n	8008820 <xTaskPriorityDisinherit+0xa0>
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	4a0c      	ldr	r2, [pc, #48]	; (8008850 <xTaskPriorityDisinherit+0xd0>)
 800881e:	6013      	str	r3, [r2, #0]
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008824:	4613      	mov	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4a09      	ldr	r2, [pc, #36]	; (8008854 <xTaskPriorityDisinherit+0xd4>)
 800882e:	441a      	add	r2, r3
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	3304      	adds	r3, #4
 8008834:	4619      	mov	r1, r3
 8008836:	4610      	mov	r0, r2
 8008838:	f7fe fa17 	bl	8006c6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800883c:	2301      	movs	r3, #1
 800883e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008840:	697b      	ldr	r3, [r7, #20]
	}
 8008842:	4618      	mov	r0, r3
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	200006f0 	.word	0x200006f0
 8008850:	20000bcc 	.word	0x20000bcc
 8008854:	200006f4 	.word	0x200006f4

08008858 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800885e:	4b09      	ldr	r3, [pc, #36]	; (8008884 <uxTaskResetEventItemValue+0x2c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008866:	4b07      	ldr	r3, [pc, #28]	; (8008884 <uxTaskResetEventItemValue+0x2c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886c:	4b05      	ldr	r3, [pc, #20]	; (8008884 <uxTaskResetEventItemValue+0x2c>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008874:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008876:	687b      	ldr	r3, [r7, #4]
}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	bc80      	pop	{r7}
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	200006f0 	.word	0x200006f0

08008888 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008892:	4b21      	ldr	r3, [pc, #132]	; (8008918 <prvAddCurrentTaskToDelayedList+0x90>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008898:	4b20      	ldr	r3, [pc, #128]	; (800891c <prvAddCurrentTaskToDelayedList+0x94>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3304      	adds	r3, #4
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe fa3e 	bl	8006d20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088aa:	d10a      	bne.n	80088c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d007      	beq.n	80088c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088b2:	4b1a      	ldr	r3, [pc, #104]	; (800891c <prvAddCurrentTaskToDelayedList+0x94>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3304      	adds	r3, #4
 80088b8:	4619      	mov	r1, r3
 80088ba:	4819      	ldr	r0, [pc, #100]	; (8008920 <prvAddCurrentTaskToDelayedList+0x98>)
 80088bc:	f7fe f9d5 	bl	8006c6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088c0:	e026      	b.n	8008910 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4413      	add	r3, r2
 80088c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088ca:	4b14      	ldr	r3, [pc, #80]	; (800891c <prvAddCurrentTaskToDelayedList+0x94>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d209      	bcs.n	80088ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088da:	4b12      	ldr	r3, [pc, #72]	; (8008924 <prvAddCurrentTaskToDelayedList+0x9c>)
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	4b0f      	ldr	r3, [pc, #60]	; (800891c <prvAddCurrentTaskToDelayedList+0x94>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3304      	adds	r3, #4
 80088e4:	4619      	mov	r1, r3
 80088e6:	4610      	mov	r0, r2
 80088e8:	f7fe f9e2 	bl	8006cb0 <vListInsert>
}
 80088ec:	e010      	b.n	8008910 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088ee:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <prvAddCurrentTaskToDelayedList+0xa0>)
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	4b0a      	ldr	r3, [pc, #40]	; (800891c <prvAddCurrentTaskToDelayedList+0x94>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3304      	adds	r3, #4
 80088f8:	4619      	mov	r1, r3
 80088fa:	4610      	mov	r0, r2
 80088fc:	f7fe f9d8 	bl	8006cb0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008900:	4b0a      	ldr	r3, [pc, #40]	; (800892c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	429a      	cmp	r2, r3
 8008908:	d202      	bcs.n	8008910 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800890a:	4a08      	ldr	r2, [pc, #32]	; (800892c <prvAddCurrentTaskToDelayedList+0xa4>)
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	6013      	str	r3, [r2, #0]
}
 8008910:	bf00      	nop
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	20000bc8 	.word	0x20000bc8
 800891c:	200006f0 	.word	0x200006f0
 8008920:	20000bb0 	.word	0x20000bb0
 8008924:	20000b80 	.word	0x20000b80
 8008928:	20000b7c 	.word	0x20000b7c
 800892c:	20000be4 	.word	0x20000be4

08008930 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b08a      	sub	sp, #40	; 0x28
 8008934:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008936:	2300      	movs	r3, #0
 8008938:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800893a:	f000 fb17 	bl	8008f6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800893e:	4b1c      	ldr	r3, [pc, #112]	; (80089b0 <xTimerCreateTimerTask+0x80>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d021      	beq.n	800898a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008946:	2300      	movs	r3, #0
 8008948:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800894a:	2300      	movs	r3, #0
 800894c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800894e:	1d3a      	adds	r2, r7, #4
 8008950:	f107 0108 	add.w	r1, r7, #8
 8008954:	f107 030c 	add.w	r3, r7, #12
 8008958:	4618      	mov	r0, r3
 800895a:	f7fd ff91 	bl	8006880 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800895e:	6879      	ldr	r1, [r7, #4]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	9202      	str	r2, [sp, #8]
 8008966:	9301      	str	r3, [sp, #4]
 8008968:	2302      	movs	r3, #2
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	2300      	movs	r3, #0
 800896e:	460a      	mov	r2, r1
 8008970:	4910      	ldr	r1, [pc, #64]	; (80089b4 <xTimerCreateTimerTask+0x84>)
 8008972:	4811      	ldr	r0, [pc, #68]	; (80089b8 <xTimerCreateTimerTask+0x88>)
 8008974:	f7fe ff0e 	bl	8007794 <xTaskCreateStatic>
 8008978:	4602      	mov	r2, r0
 800897a:	4b10      	ldr	r3, [pc, #64]	; (80089bc <xTimerCreateTimerTask+0x8c>)
 800897c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800897e:	4b0f      	ldr	r3, [pc, #60]	; (80089bc <xTimerCreateTimerTask+0x8c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008986:	2301      	movs	r3, #1
 8008988:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d109      	bne.n	80089a4 <xTimerCreateTimerTask+0x74>
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	613b      	str	r3, [r7, #16]
 80089a2:	e7fe      	b.n	80089a2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80089a4:	697b      	ldr	r3, [r7, #20]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20000c20 	.word	0x20000c20
 80089b4:	08009a78 	.word	0x08009a78
 80089b8:	08008b7d 	.word	0x08008b7d
 80089bc:	20000c24 	.word	0x20000c24

080089c0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
 80089cc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80089ce:	2030      	movs	r0, #48	; 0x30
 80089d0:	f000 fd10 	bl	80093f4 <pvPortMalloc>
 80089d4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00d      	beq.n	80089f8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	68b9      	ldr	r1, [r7, #8]
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 f809 	bl	8008a02 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80089f8:	697b      	ldr	r3, [r7, #20]
	}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b086      	sub	sp, #24
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	60f8      	str	r0, [r7, #12]
 8008a0a:	60b9      	str	r1, [r7, #8]
 8008a0c:	607a      	str	r2, [r7, #4]
 8008a0e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d109      	bne.n	8008a2a <prvInitialiseNewTimer+0x28>
 8008a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	617b      	str	r3, [r7, #20]
 8008a28:	e7fe      	b.n	8008a28 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d015      	beq.n	8008a5c <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008a30:	f000 fa9c 	bl	8008f6c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	6a3a      	ldr	r2, [r7, #32]
 8008a50:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	3304      	adds	r3, #4
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe f8fb 	bl	8006c52 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008a5c:	bf00      	nop
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08a      	sub	sp, #40	; 0x28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
 8008a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d109      	bne.n	8008a90 <xTimerGenericCommand+0x2c>
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	623b      	str	r3, [r7, #32]
 8008a8e:	e7fe      	b.n	8008a8e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a90:	4b19      	ldr	r3, [pc, #100]	; (8008af8 <xTimerGenericCommand+0x94>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d02a      	beq.n	8008aee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2b05      	cmp	r3, #5
 8008aa8:	dc18      	bgt.n	8008adc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008aaa:	f7ff fe4b 	bl	8008744 <xTaskGetSchedulerState>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d109      	bne.n	8008ac8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ab4:	4b10      	ldr	r3, [pc, #64]	; (8008af8 <xTimerGenericCommand+0x94>)
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	f107 0110 	add.w	r1, r7, #16
 8008abc:	2300      	movs	r3, #0
 8008abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ac0:	f7fe fa92 	bl	8006fe8 <xQueueGenericSend>
 8008ac4:	6278      	str	r0, [r7, #36]	; 0x24
 8008ac6:	e012      	b.n	8008aee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ac8:	4b0b      	ldr	r3, [pc, #44]	; (8008af8 <xTimerGenericCommand+0x94>)
 8008aca:	6818      	ldr	r0, [r3, #0]
 8008acc:	f107 0110 	add.w	r1, r7, #16
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f7fe fa88 	bl	8006fe8 <xQueueGenericSend>
 8008ad8:	6278      	str	r0, [r7, #36]	; 0x24
 8008ada:	e008      	b.n	8008aee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008adc:	4b06      	ldr	r3, [pc, #24]	; (8008af8 <xTimerGenericCommand+0x94>)
 8008ade:	6818      	ldr	r0, [r3, #0]
 8008ae0:	f107 0110 	add.w	r1, r7, #16
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	f7fe fb78 	bl	80071dc <xQueueGenericSendFromISR>
 8008aec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3728      	adds	r7, #40	; 0x28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20000c20 	.word	0x20000c20

08008afc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b088      	sub	sp, #32
 8008b00:	af02      	add	r7, sp, #8
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b06:	4b1c      	ldr	r3, [pc, #112]	; (8008b78 <prvProcessExpiredTimer+0x7c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fe f903 	bl	8006d20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d121      	bne.n	8008b66 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	699a      	ldr	r2, [r3, #24]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	18d1      	adds	r1, r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	683a      	ldr	r2, [r7, #0]
 8008b2e:	6978      	ldr	r0, [r7, #20]
 8008b30:	f000 f8ca 	bl	8008cc8 <prvInsertTimerInActiveList>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d015      	beq.n	8008b66 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	2100      	movs	r1, #0
 8008b44:	6978      	ldr	r0, [r7, #20]
 8008b46:	f7ff ff8d 	bl	8008a64 <xTimerGenericCommand>
 8008b4a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d109      	bne.n	8008b66 <prvProcessExpiredTimer+0x6a>
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	e7fe      	b.n	8008b64 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6a:	6978      	ldr	r0, [r7, #20]
 8008b6c:	4798      	blx	r3
}
 8008b6e:	bf00      	nop
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20000c18 	.word	0x20000c18

08008b7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 8008b84:	f7f8 f8d2 	bl	8000d2c <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b88:	f107 0308 	add.w	r3, r7, #8
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 f857 	bl	8008c40 <prvGetNextExpireTime>
 8008b92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4619      	mov	r1, r3
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 f803 	bl	8008ba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b9e:	f000 f8d5 	bl	8008d4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ba2:	e7f1      	b.n	8008b88 <prvTimerTask+0xc>

08008ba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008bae:	f7ff f929 	bl	8007e04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bb2:	f107 0308 	add.w	r3, r7, #8
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 f866 	bl	8008c88 <prvSampleTimeNow>
 8008bbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d130      	bne.n	8008c26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10a      	bne.n	8008be0 <prvProcessTimerOrBlockTask+0x3c>
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d806      	bhi.n	8008be0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008bd2:	f7ff f925 	bl	8007e20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008bd6:	68f9      	ldr	r1, [r7, #12]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff ff8f 	bl	8008afc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008bde:	e024      	b.n	8008c2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d008      	beq.n	8008bf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008be6:	4b13      	ldr	r3, [pc, #76]	; (8008c34 <prvProcessTimerOrBlockTask+0x90>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	bf0c      	ite	eq
 8008bf0:	2301      	moveq	r3, #1
 8008bf2:	2300      	movne	r3, #0
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008bf8:	4b0f      	ldr	r3, [pc, #60]	; (8008c38 <prvProcessTimerOrBlockTask+0x94>)
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	4619      	mov	r1, r3
 8008c06:	f7fe fd91 	bl	800772c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c0a:	f7ff f909 	bl	8007e20 <xTaskResumeAll>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c14:	4b09      	ldr	r3, [pc, #36]	; (8008c3c <prvProcessTimerOrBlockTask+0x98>)
 8008c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	f3bf 8f6f 	isb	sy
}
 8008c24:	e001      	b.n	8008c2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c26:	f7ff f8fb 	bl	8007e20 <xTaskResumeAll>
}
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20000c1c 	.word	0x20000c1c
 8008c38:	20000c20 	.word	0x20000c20
 8008c3c:	e000ed04 	.word	0xe000ed04

08008c40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c48:	4b0e      	ldr	r3, [pc, #56]	; (8008c84 <prvGetNextExpireTime+0x44>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	bf0c      	ite	eq
 8008c52:	2301      	moveq	r3, #1
 8008c54:	2300      	movne	r3, #0
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	461a      	mov	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d105      	bne.n	8008c72 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c66:	4b07      	ldr	r3, [pc, #28]	; (8008c84 <prvGetNextExpireTime+0x44>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	e001      	b.n	8008c76 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c76:	68fb      	ldr	r3, [r7, #12]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3714      	adds	r7, #20
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bc80      	pop	{r7}
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20000c18 	.word	0x20000c18

08008c88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c90:	f7ff f962 	bl	8007f58 <xTaskGetTickCount>
 8008c94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c96:	4b0b      	ldr	r3, [pc, #44]	; (8008cc4 <prvSampleTimeNow+0x3c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d205      	bcs.n	8008cac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ca0:	f000 f904 	bl	8008eac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	601a      	str	r2, [r3, #0]
 8008caa:	e002      	b.n	8008cb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008cb2:	4a04      	ldr	r2, [pc, #16]	; (8008cc4 <prvSampleTimeNow+0x3c>)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20000c28 	.word	0x20000c28

08008cc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
 8008cd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d812      	bhi.n	8008d14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	1ad2      	subs	r2, r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d302      	bcc.n	8008d02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	e01b      	b.n	8008d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d02:	4b10      	ldr	r3, [pc, #64]	; (8008d44 <prvInsertTimerInActiveList+0x7c>)
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	f7fd ffcf 	bl	8006cb0 <vListInsert>
 8008d12:	e012      	b.n	8008d3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d206      	bcs.n	8008d2a <prvInsertTimerInActiveList+0x62>
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d302      	bcc.n	8008d2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d24:	2301      	movs	r3, #1
 8008d26:	617b      	str	r3, [r7, #20]
 8008d28:	e007      	b.n	8008d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d2a:	4b07      	ldr	r3, [pc, #28]	; (8008d48 <prvInsertTimerInActiveList+0x80>)
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3304      	adds	r3, #4
 8008d32:	4619      	mov	r1, r3
 8008d34:	4610      	mov	r0, r2
 8008d36:	f7fd ffbb 	bl	8006cb0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d3a:	697b      	ldr	r3, [r7, #20]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20000c1c 	.word	0x20000c1c
 8008d48:	20000c18 	.word	0x20000c18

08008d4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b08e      	sub	sp, #56	; 0x38
 8008d50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d52:	e099      	b.n	8008e88 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	da17      	bge.n	8008d8a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d5a:	1d3b      	adds	r3, r7, #4
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d109      	bne.n	8008d7a <prvProcessReceivedCommands+0x2e>
 8008d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	61fb      	str	r3, [r7, #28]
 8008d78:	e7fe      	b.n	8008d78 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d80:	6850      	ldr	r0, [r2, #4]
 8008d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d84:	6892      	ldr	r2, [r2, #8]
 8008d86:	4611      	mov	r1, r2
 8008d88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	db7a      	blt.n	8008e86 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d004      	beq.n	8008da6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fd ffbd 	bl	8006d20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008da6:	463b      	mov	r3, r7
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7ff ff6d 	bl	8008c88 <prvSampleTimeNow>
 8008dae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b09      	cmp	r3, #9
 8008db4:	d868      	bhi.n	8008e88 <prvProcessReceivedCommands+0x13c>
 8008db6:	a201      	add	r2, pc, #4	; (adr r2, 8008dbc <prvProcessReceivedCommands+0x70>)
 8008db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dbc:	08008de5 	.word	0x08008de5
 8008dc0:	08008de5 	.word	0x08008de5
 8008dc4:	08008de5 	.word	0x08008de5
 8008dc8:	08008e89 	.word	0x08008e89
 8008dcc:	08008e3f 	.word	0x08008e3f
 8008dd0:	08008e75 	.word	0x08008e75
 8008dd4:	08008de5 	.word	0x08008de5
 8008dd8:	08008de5 	.word	0x08008de5
 8008ddc:	08008e89 	.word	0x08008e89
 8008de0:	08008e3f 	.word	0x08008e3f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	18d1      	adds	r1, r2, r3
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008df2:	f7ff ff69 	bl	8008cc8 <prvInsertTimerInActiveList>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d045      	beq.n	8008e88 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e02:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d13d      	bne.n	8008e88 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	441a      	add	r2, r3
 8008e14:	2300      	movs	r3, #0
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	2300      	movs	r3, #0
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e1e:	f7ff fe21 	bl	8008a64 <xTimerGenericCommand>
 8008e22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d12e      	bne.n	8008e88 <prvProcessReceivedCommands+0x13c>
 8008e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	61bb      	str	r3, [r7, #24]
 8008e3c:	e7fe      	b.n	8008e3c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d109      	bne.n	8008e60 <prvProcessReceivedCommands+0x114>
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	617b      	str	r3, [r7, #20]
 8008e5e:	e7fe      	b.n	8008e5e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e62:	699a      	ldr	r2, [r3, #24]
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	18d1      	adds	r1, r2, r3
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e6e:	f7ff ff2b 	bl	8008cc8 <prvInsertTimerInActiveList>
					break;
 8008e72:	e009      	b.n	8008e88 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d104      	bne.n	8008e88 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e80:	f000 fb7e 	bl	8009580 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e84:	e000      	b.n	8008e88 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008e86:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e88:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <prvProcessReceivedCommands+0x15c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	1d39      	adds	r1, r7, #4
 8008e8e:	2200      	movs	r2, #0
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fe fa37 	bl	8007304 <xQueueReceive>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f47f af5b 	bne.w	8008d54 <prvProcessReceivedCommands+0x8>
	}
}
 8008e9e:	bf00      	nop
 8008ea0:	3730      	adds	r7, #48	; 0x30
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20000c20 	.word	0x20000c20

08008eac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b088      	sub	sp, #32
 8008eb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008eb2:	e044      	b.n	8008f3e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008eb4:	4b2b      	ldr	r3, [pc, #172]	; (8008f64 <prvSwitchTimerLists+0xb8>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ebe:	4b29      	ldr	r3, [pc, #164]	; (8008f64 <prvSwitchTimerLists+0xb8>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fd ff27 	bl	8006d20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d12d      	bne.n	8008f3e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	4413      	add	r3, r2
 8008eea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d90e      	bls.n	8008f12 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f00:	4b18      	ldr	r3, [pc, #96]	; (8008f64 <prvSwitchTimerLists+0xb8>)
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	f7fd fed0 	bl	8006cb0 <vListInsert>
 8008f10:	e015      	b.n	8008f3e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f12:	2300      	movs	r3, #0
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	2300      	movs	r3, #0
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f7ff fda1 	bl	8008a64 <xTimerGenericCommand>
 8008f22:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d109      	bne.n	8008f3e <prvSwitchTimerLists+0x92>
 8008f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	603b      	str	r3, [r7, #0]
 8008f3c:	e7fe      	b.n	8008f3c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f3e:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <prvSwitchTimerLists+0xb8>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1b5      	bne.n	8008eb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f48:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <prvSwitchTimerLists+0xb8>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f4e:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <prvSwitchTimerLists+0xbc>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a04      	ldr	r2, [pc, #16]	; (8008f64 <prvSwitchTimerLists+0xb8>)
 8008f54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f56:	4a04      	ldr	r2, [pc, #16]	; (8008f68 <prvSwitchTimerLists+0xbc>)
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	6013      	str	r3, [r2, #0]
}
 8008f5c:	bf00      	nop
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	20000c18 	.word	0x20000c18
 8008f68:	20000c1c 	.word	0x20000c1c

08008f6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f72:	f000 f949 	bl	8009208 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f76:	4b15      	ldr	r3, [pc, #84]	; (8008fcc <prvCheckForValidListAndQueue+0x60>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d120      	bne.n	8008fc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f7e:	4814      	ldr	r0, [pc, #80]	; (8008fd0 <prvCheckForValidListAndQueue+0x64>)
 8008f80:	f7fd fe48 	bl	8006c14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f84:	4813      	ldr	r0, [pc, #76]	; (8008fd4 <prvCheckForValidListAndQueue+0x68>)
 8008f86:	f7fd fe45 	bl	8006c14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f8a:	4b13      	ldr	r3, [pc, #76]	; (8008fd8 <prvCheckForValidListAndQueue+0x6c>)
 8008f8c:	4a10      	ldr	r2, [pc, #64]	; (8008fd0 <prvCheckForValidListAndQueue+0x64>)
 8008f8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f90:	4b12      	ldr	r3, [pc, #72]	; (8008fdc <prvCheckForValidListAndQueue+0x70>)
 8008f92:	4a10      	ldr	r2, [pc, #64]	; (8008fd4 <prvCheckForValidListAndQueue+0x68>)
 8008f94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f96:	2300      	movs	r3, #0
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	4b11      	ldr	r3, [pc, #68]	; (8008fe0 <prvCheckForValidListAndQueue+0x74>)
 8008f9c:	4a11      	ldr	r2, [pc, #68]	; (8008fe4 <prvCheckForValidListAndQueue+0x78>)
 8008f9e:	2110      	movs	r1, #16
 8008fa0:	200a      	movs	r0, #10
 8008fa2:	f7fd ff4f 	bl	8006e44 <xQueueGenericCreateStatic>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	4b08      	ldr	r3, [pc, #32]	; (8008fcc <prvCheckForValidListAndQueue+0x60>)
 8008faa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008fac:	4b07      	ldr	r3, [pc, #28]	; (8008fcc <prvCheckForValidListAndQueue+0x60>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d005      	beq.n	8008fc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008fb4:	4b05      	ldr	r3, [pc, #20]	; (8008fcc <prvCheckForValidListAndQueue+0x60>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	490b      	ldr	r1, [pc, #44]	; (8008fe8 <prvCheckForValidListAndQueue+0x7c>)
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe fb8e 	bl	80076dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fc0:	f000 f950 	bl	8009264 <vPortExitCritical>
}
 8008fc4:	bf00      	nop
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20000c20 	.word	0x20000c20
 8008fd0:	20000bf0 	.word	0x20000bf0
 8008fd4:	20000c04 	.word	0x20000c04
 8008fd8:	20000c18 	.word	0x20000c18
 8008fdc:	20000c1c 	.word	0x20000c1c
 8008fe0:	20000ccc 	.word	0x20000ccc
 8008fe4:	20000c2c 	.word	0x20000c2c
 8008fe8:	08009a80 	.word	0x08009a80

08008fec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08a      	sub	sp, #40	; 0x28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
 8008ff8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008ffa:	f06f 0301 	mvn.w	r3, #1
 8008ffe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800900c:	4b06      	ldr	r3, [pc, #24]	; (8009028 <xTimerPendFunctionCallFromISR+0x3c>)
 800900e:	6818      	ldr	r0, [r3, #0]
 8009010:	f107 0114 	add.w	r1, r7, #20
 8009014:	2300      	movs	r3, #0
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	f7fe f8e0 	bl	80071dc <xQueueGenericSendFromISR>
 800901c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009020:	4618      	mov	r0, r3
 8009022:	3728      	adds	r7, #40	; 0x28
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	20000c20 	.word	0x20000c20

0800902c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	3b04      	subs	r3, #4
 800903c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	3b04      	subs	r3, #4
 800904a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	f023 0201 	bic.w	r2, r3, #1
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3b04      	subs	r3, #4
 800905a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800905c:	4a08      	ldr	r2, [pc, #32]	; (8009080 <pxPortInitialiseStack+0x54>)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	3b14      	subs	r3, #20
 8009066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3b20      	subs	r3, #32
 8009072:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009074:	68fb      	ldr	r3, [r7, #12]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	bc80      	pop	{r7}
 800907e:	4770      	bx	lr
 8009080:	08009085 	.word	0x08009085

08009084 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800908a:	2300      	movs	r3, #0
 800908c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800908e:	4b10      	ldr	r3, [pc, #64]	; (80090d0 <prvTaskExitError+0x4c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009096:	d009      	beq.n	80090ac <prvTaskExitError+0x28>
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	60fb      	str	r3, [r7, #12]
 80090aa:	e7fe      	b.n	80090aa <prvTaskExitError+0x26>
 80090ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80090be:	bf00      	nop
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d0fc      	beq.n	80090c0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80090c6:	bf00      	nop
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr
 80090d0:	2000000c 	.word	0x2000000c
	...

080090e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80090e0:	4b07      	ldr	r3, [pc, #28]	; (8009100 <pxCurrentTCBConst2>)
 80090e2:	6819      	ldr	r1, [r3, #0]
 80090e4:	6808      	ldr	r0, [r1, #0]
 80090e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090ea:	f380 8809 	msr	PSP, r0
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f04f 0000 	mov.w	r0, #0
 80090f6:	f380 8811 	msr	BASEPRI, r0
 80090fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80090fe:	4770      	bx	lr

08009100 <pxCurrentTCBConst2>:
 8009100:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009104:	bf00      	nop
 8009106:	bf00      	nop

08009108 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009108:	4806      	ldr	r0, [pc, #24]	; (8009124 <prvPortStartFirstTask+0x1c>)
 800910a:	6800      	ldr	r0, [r0, #0]
 800910c:	6800      	ldr	r0, [r0, #0]
 800910e:	f380 8808 	msr	MSP, r0
 8009112:	b662      	cpsie	i
 8009114:	b661      	cpsie	f
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	f3bf 8f6f 	isb	sy
 800911e:	df00      	svc	0
 8009120:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009122:	bf00      	nop
 8009124:	e000ed08 	.word	0xe000ed08

08009128 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800912e:	4b31      	ldr	r3, [pc, #196]	; (80091f4 <xPortStartScheduler+0xcc>)
 8009130:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	b2db      	uxtb	r3, r3
 8009138:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	22ff      	movs	r2, #255	; 0xff
 800913e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	b2db      	uxtb	r3, r3
 8009146:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	b2db      	uxtb	r3, r3
 800914c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009150:	b2da      	uxtb	r2, r3
 8009152:	4b29      	ldr	r3, [pc, #164]	; (80091f8 <xPortStartScheduler+0xd0>)
 8009154:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009156:	4b29      	ldr	r3, [pc, #164]	; (80091fc <xPortStartScheduler+0xd4>)
 8009158:	2207      	movs	r2, #7
 800915a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800915c:	e009      	b.n	8009172 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800915e:	4b27      	ldr	r3, [pc, #156]	; (80091fc <xPortStartScheduler+0xd4>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3b01      	subs	r3, #1
 8009164:	4a25      	ldr	r2, [pc, #148]	; (80091fc <xPortStartScheduler+0xd4>)
 8009166:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009168:	78fb      	ldrb	r3, [r7, #3]
 800916a:	b2db      	uxtb	r3, r3
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	b2db      	uxtb	r3, r3
 8009170:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009172:	78fb      	ldrb	r3, [r7, #3]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800917a:	2b80      	cmp	r3, #128	; 0x80
 800917c:	d0ef      	beq.n	800915e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800917e:	4b1f      	ldr	r3, [pc, #124]	; (80091fc <xPortStartScheduler+0xd4>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f1c3 0307 	rsb	r3, r3, #7
 8009186:	2b04      	cmp	r3, #4
 8009188:	d009      	beq.n	800919e <xPortStartScheduler+0x76>
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	60bb      	str	r3, [r7, #8]
 800919c:	e7fe      	b.n	800919c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800919e:	4b17      	ldr	r3, [pc, #92]	; (80091fc <xPortStartScheduler+0xd4>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	021b      	lsls	r3, r3, #8
 80091a4:	4a15      	ldr	r2, [pc, #84]	; (80091fc <xPortStartScheduler+0xd4>)
 80091a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80091a8:	4b14      	ldr	r3, [pc, #80]	; (80091fc <xPortStartScheduler+0xd4>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091b0:	4a12      	ldr	r2, [pc, #72]	; (80091fc <xPortStartScheduler+0xd4>)
 80091b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80091bc:	4b10      	ldr	r3, [pc, #64]	; (8009200 <xPortStartScheduler+0xd8>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a0f      	ldr	r2, [pc, #60]	; (8009200 <xPortStartScheduler+0xd8>)
 80091c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80091c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80091c8:	4b0d      	ldr	r3, [pc, #52]	; (8009200 <xPortStartScheduler+0xd8>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a0c      	ldr	r2, [pc, #48]	; (8009200 <xPortStartScheduler+0xd8>)
 80091ce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80091d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80091d4:	f000 f8b0 	bl	8009338 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80091d8:	4b0a      	ldr	r3, [pc, #40]	; (8009204 <xPortStartScheduler+0xdc>)
 80091da:	2200      	movs	r2, #0
 80091dc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80091de:	f7ff ff93 	bl	8009108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80091e2:	f7fe ff9f 	bl	8008124 <vTaskSwitchContext>
	prvTaskExitError();
 80091e6:	f7ff ff4d 	bl	8009084 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	e000e400 	.word	0xe000e400
 80091f8:	20000d1c 	.word	0x20000d1c
 80091fc:	20000d20 	.word	0x20000d20
 8009200:	e000ed20 	.word	0xe000ed20
 8009204:	2000000c 	.word	0x2000000c

08009208 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009220:	4b0e      	ldr	r3, [pc, #56]	; (800925c <vPortEnterCritical+0x54>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3301      	adds	r3, #1
 8009226:	4a0d      	ldr	r2, [pc, #52]	; (800925c <vPortEnterCritical+0x54>)
 8009228:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800922a:	4b0c      	ldr	r3, [pc, #48]	; (800925c <vPortEnterCritical+0x54>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d10e      	bne.n	8009250 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009232:	4b0b      	ldr	r3, [pc, #44]	; (8009260 <vPortEnterCritical+0x58>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b00      	cmp	r3, #0
 800923a:	d009      	beq.n	8009250 <vPortEnterCritical+0x48>
 800923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	603b      	str	r3, [r7, #0]
 800924e:	e7fe      	b.n	800924e <vPortEnterCritical+0x46>
	}
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	bc80      	pop	{r7}
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	2000000c 	.word	0x2000000c
 8009260:	e000ed04 	.word	0xe000ed04

08009264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800926a:	4b10      	ldr	r3, [pc, #64]	; (80092ac <vPortExitCritical+0x48>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d109      	bne.n	8009286 <vPortExitCritical+0x22>
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	607b      	str	r3, [r7, #4]
 8009284:	e7fe      	b.n	8009284 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009286:	4b09      	ldr	r3, [pc, #36]	; (80092ac <vPortExitCritical+0x48>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3b01      	subs	r3, #1
 800928c:	4a07      	ldr	r2, [pc, #28]	; (80092ac <vPortExitCritical+0x48>)
 800928e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009290:	4b06      	ldr	r3, [pc, #24]	; (80092ac <vPortExitCritical+0x48>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d104      	bne.n	80092a2 <vPortExitCritical+0x3e>
 8009298:	2300      	movs	r3, #0
 800929a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80092a2:	bf00      	nop
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bc80      	pop	{r7}
 80092aa:	4770      	bx	lr
 80092ac:	2000000c 	.word	0x2000000c

080092b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80092b0:	f3ef 8009 	mrs	r0, PSP
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	4b0d      	ldr	r3, [pc, #52]	; (80092f0 <pxCurrentTCBConst>)
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80092c0:	6010      	str	r0, [r2, #0]
 80092c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80092c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80092ca:	f380 8811 	msr	BASEPRI, r0
 80092ce:	f7fe ff29 	bl	8008124 <vTaskSwitchContext>
 80092d2:	f04f 0000 	mov.w	r0, #0
 80092d6:	f380 8811 	msr	BASEPRI, r0
 80092da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80092de:	6819      	ldr	r1, [r3, #0]
 80092e0:	6808      	ldr	r0, [r1, #0]
 80092e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80092e6:	f380 8809 	msr	PSP, r0
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	4770      	bx	lr

080092f0 <pxCurrentTCBConst>:
 80092f0:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop

080092f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009310:	f7fe fe42 	bl	8007f98 <xTaskIncrementTick>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800931a:	4b06      	ldr	r3, [pc, #24]	; (8009334 <SysTick_Handler+0x3c>)
 800931c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009320:	601a      	str	r2, [r3, #0]
 8009322:	2300      	movs	r3, #0
 8009324:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800932c:	bf00      	nop
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	e000ed04 	.word	0xe000ed04

08009338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009338:	b480      	push	{r7}
 800933a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800933c:	4b0a      	ldr	r3, [pc, #40]	; (8009368 <vPortSetupTimerInterrupt+0x30>)
 800933e:	2200      	movs	r2, #0
 8009340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009342:	4b0a      	ldr	r3, [pc, #40]	; (800936c <vPortSetupTimerInterrupt+0x34>)
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009348:	4b09      	ldr	r3, [pc, #36]	; (8009370 <vPortSetupTimerInterrupt+0x38>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a09      	ldr	r2, [pc, #36]	; (8009374 <vPortSetupTimerInterrupt+0x3c>)
 800934e:	fba2 2303 	umull	r2, r3, r2, r3
 8009352:	099b      	lsrs	r3, r3, #6
 8009354:	4a08      	ldr	r2, [pc, #32]	; (8009378 <vPortSetupTimerInterrupt+0x40>)
 8009356:	3b01      	subs	r3, #1
 8009358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800935a:	4b03      	ldr	r3, [pc, #12]	; (8009368 <vPortSetupTimerInterrupt+0x30>)
 800935c:	2207      	movs	r2, #7
 800935e:	601a      	str	r2, [r3, #0]
}
 8009360:	bf00      	nop
 8009362:	46bd      	mov	sp, r7
 8009364:	bc80      	pop	{r7}
 8009366:	4770      	bx	lr
 8009368:	e000e010 	.word	0xe000e010
 800936c:	e000e018 	.word	0xe000e018
 8009370:	20000000 	.word	0x20000000
 8009374:	10624dd3 	.word	0x10624dd3
 8009378:	e000e014 	.word	0xe000e014

0800937c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009382:	f3ef 8305 	mrs	r3, IPSR
 8009386:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b0f      	cmp	r3, #15
 800938c:	d913      	bls.n	80093b6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800938e:	4a15      	ldr	r2, [pc, #84]	; (80093e4 <vPortValidateInterruptPriority+0x68>)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4413      	add	r3, r2
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009398:	4b13      	ldr	r3, [pc, #76]	; (80093e8 <vPortValidateInterruptPriority+0x6c>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	7afa      	ldrb	r2, [r7, #11]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d209      	bcs.n	80093b6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	607b      	str	r3, [r7, #4]
 80093b4:	e7fe      	b.n	80093b4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093b6:	4b0d      	ldr	r3, [pc, #52]	; (80093ec <vPortValidateInterruptPriority+0x70>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80093be:	4b0c      	ldr	r3, [pc, #48]	; (80093f0 <vPortValidateInterruptPriority+0x74>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d909      	bls.n	80093da <vPortValidateInterruptPriority+0x5e>
 80093c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ca:	f383 8811 	msr	BASEPRI, r3
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f3bf 8f4f 	dsb	sy
 80093d6:	603b      	str	r3, [r7, #0]
 80093d8:	e7fe      	b.n	80093d8 <vPortValidateInterruptPriority+0x5c>
	}
 80093da:	bf00      	nop
 80093dc:	3714      	adds	r7, #20
 80093de:	46bd      	mov	sp, r7
 80093e0:	bc80      	pop	{r7}
 80093e2:	4770      	bx	lr
 80093e4:	e000e3f0 	.word	0xe000e3f0
 80093e8:	20000d1c 	.word	0x20000d1c
 80093ec:	e000ed0c 	.word	0xe000ed0c
 80093f0:	20000d20 	.word	0x20000d20

080093f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b08a      	sub	sp, #40	; 0x28
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80093fc:	2300      	movs	r3, #0
 80093fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009400:	f7fe fd00 	bl	8007e04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009404:	4b59      	ldr	r3, [pc, #356]	; (800956c <pvPortMalloc+0x178>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d101      	bne.n	8009410 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800940c:	f000 f910 	bl	8009630 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009410:	4b57      	ldr	r3, [pc, #348]	; (8009570 <pvPortMalloc+0x17c>)
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4013      	ands	r3, r2
 8009418:	2b00      	cmp	r3, #0
 800941a:	f040 808c 	bne.w	8009536 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d01c      	beq.n	800945e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009424:	2208      	movs	r2, #8
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4413      	add	r3, r2
 800942a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f003 0307 	and.w	r3, r3, #7
 8009432:	2b00      	cmp	r3, #0
 8009434:	d013      	beq.n	800945e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f023 0307 	bic.w	r3, r3, #7
 800943c:	3308      	adds	r3, #8
 800943e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f003 0307 	and.w	r3, r3, #7
 8009446:	2b00      	cmp	r3, #0
 8009448:	d009      	beq.n	800945e <pvPortMalloc+0x6a>
 800944a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	617b      	str	r3, [r7, #20]
 800945c:	e7fe      	b.n	800945c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d068      	beq.n	8009536 <pvPortMalloc+0x142>
 8009464:	4b43      	ldr	r3, [pc, #268]	; (8009574 <pvPortMalloc+0x180>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	429a      	cmp	r2, r3
 800946c:	d863      	bhi.n	8009536 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800946e:	4b42      	ldr	r3, [pc, #264]	; (8009578 <pvPortMalloc+0x184>)
 8009470:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009472:	4b41      	ldr	r3, [pc, #260]	; (8009578 <pvPortMalloc+0x184>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009478:	e004      	b.n	8009484 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	429a      	cmp	r2, r3
 800948c:	d903      	bls.n	8009496 <pvPortMalloc+0xa2>
 800948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1f1      	bne.n	800947a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009496:	4b35      	ldr	r3, [pc, #212]	; (800956c <pvPortMalloc+0x178>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800949c:	429a      	cmp	r2, r3
 800949e:	d04a      	beq.n	8009536 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2208      	movs	r2, #8
 80094a6:	4413      	add	r3, r2
 80094a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	6a3b      	ldr	r3, [r7, #32]
 80094b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	1ad2      	subs	r2, r2, r3
 80094ba:	2308      	movs	r3, #8
 80094bc:	005b      	lsls	r3, r3, #1
 80094be:	429a      	cmp	r2, r3
 80094c0:	d91e      	bls.n	8009500 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4413      	add	r3, r2
 80094c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	f003 0307 	and.w	r3, r3, #7
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d009      	beq.n	80094e8 <pvPortMalloc+0xf4>
 80094d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d8:	f383 8811 	msr	BASEPRI, r3
 80094dc:	f3bf 8f6f 	isb	sy
 80094e0:	f3bf 8f4f 	dsb	sy
 80094e4:	613b      	str	r3, [r7, #16]
 80094e6:	e7fe      	b.n	80094e6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	1ad2      	subs	r2, r2, r3
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094fa:	69b8      	ldr	r0, [r7, #24]
 80094fc:	f000 f8fa 	bl	80096f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009500:	4b1c      	ldr	r3, [pc, #112]	; (8009574 <pvPortMalloc+0x180>)
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	4a1a      	ldr	r2, [pc, #104]	; (8009574 <pvPortMalloc+0x180>)
 800950c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800950e:	4b19      	ldr	r3, [pc, #100]	; (8009574 <pvPortMalloc+0x180>)
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	4b1a      	ldr	r3, [pc, #104]	; (800957c <pvPortMalloc+0x188>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	429a      	cmp	r2, r3
 8009518:	d203      	bcs.n	8009522 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800951a:	4b16      	ldr	r3, [pc, #88]	; (8009574 <pvPortMalloc+0x180>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a17      	ldr	r2, [pc, #92]	; (800957c <pvPortMalloc+0x188>)
 8009520:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	4b12      	ldr	r3, [pc, #72]	; (8009570 <pvPortMalloc+0x17c>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	431a      	orrs	r2, r3
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009532:	2200      	movs	r2, #0
 8009534:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009536:	f7fe fc73 	bl	8007e20 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d101      	bne.n	8009544 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009540:	f7f7 fbee 	bl	8000d20 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	f003 0307 	and.w	r3, r3, #7
 800954a:	2b00      	cmp	r3, #0
 800954c:	d009      	beq.n	8009562 <pvPortMalloc+0x16e>
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	e7fe      	b.n	8009560 <pvPortMalloc+0x16c>
	return pvReturn;
 8009562:	69fb      	ldr	r3, [r7, #28]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3728      	adds	r7, #40	; 0x28
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	2000352c 	.word	0x2000352c
 8009570:	20003538 	.word	0x20003538
 8009574:	20003530 	.word	0x20003530
 8009578:	20003524 	.word	0x20003524
 800957c:	20003534 	.word	0x20003534

08009580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d046      	beq.n	8009620 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009592:	2308      	movs	r3, #8
 8009594:	425b      	negs	r3, r3
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	4413      	add	r3, r2
 800959a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	685a      	ldr	r2, [r3, #4]
 80095a4:	4b20      	ldr	r3, [pc, #128]	; (8009628 <vPortFree+0xa8>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4013      	ands	r3, r2
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d109      	bne.n	80095c2 <vPortFree+0x42>
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	e7fe      	b.n	80095c0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d009      	beq.n	80095de <vPortFree+0x5e>
 80095ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	60bb      	str	r3, [r7, #8]
 80095dc:	e7fe      	b.n	80095dc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	4b11      	ldr	r3, [pc, #68]	; (8009628 <vPortFree+0xa8>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4013      	ands	r3, r2
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d019      	beq.n	8009620 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d115      	bne.n	8009620 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	4b0b      	ldr	r3, [pc, #44]	; (8009628 <vPortFree+0xa8>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	43db      	mvns	r3, r3
 80095fe:	401a      	ands	r2, r3
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009604:	f7fe fbfe 	bl	8007e04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	4b07      	ldr	r3, [pc, #28]	; (800962c <vPortFree+0xac>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4413      	add	r3, r2
 8009612:	4a06      	ldr	r2, [pc, #24]	; (800962c <vPortFree+0xac>)
 8009614:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009616:	6938      	ldr	r0, [r7, #16]
 8009618:	f000 f86c 	bl	80096f4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800961c:	f7fe fc00 	bl	8007e20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009620:	bf00      	nop
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	20003538 	.word	0x20003538
 800962c:	20003530 	.word	0x20003530

08009630 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009636:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800963a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800963c:	4b27      	ldr	r3, [pc, #156]	; (80096dc <prvHeapInit+0xac>)
 800963e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f003 0307 	and.w	r3, r3, #7
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00c      	beq.n	8009664 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	3307      	adds	r3, #7
 800964e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f023 0307 	bic.w	r3, r3, #7
 8009656:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	4a1f      	ldr	r2, [pc, #124]	; (80096dc <prvHeapInit+0xac>)
 8009660:	4413      	add	r3, r2
 8009662:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009668:	4a1d      	ldr	r2, [pc, #116]	; (80096e0 <prvHeapInit+0xb0>)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800966e:	4b1c      	ldr	r3, [pc, #112]	; (80096e0 <prvHeapInit+0xb0>)
 8009670:	2200      	movs	r2, #0
 8009672:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	4413      	add	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800967c:	2208      	movs	r2, #8
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	1a9b      	subs	r3, r3, r2
 8009682:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f023 0307 	bic.w	r3, r3, #7
 800968a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4a15      	ldr	r2, [pc, #84]	; (80096e4 <prvHeapInit+0xb4>)
 8009690:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009692:	4b14      	ldr	r3, [pc, #80]	; (80096e4 <prvHeapInit+0xb4>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2200      	movs	r2, #0
 8009698:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800969a:	4b12      	ldr	r3, [pc, #72]	; (80096e4 <prvHeapInit+0xb4>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	1ad2      	subs	r2, r2, r3
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80096b0:	4b0c      	ldr	r3, [pc, #48]	; (80096e4 <prvHeapInit+0xb4>)
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	4a0a      	ldr	r2, [pc, #40]	; (80096e8 <prvHeapInit+0xb8>)
 80096be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	4a09      	ldr	r2, [pc, #36]	; (80096ec <prvHeapInit+0xbc>)
 80096c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80096c8:	4b09      	ldr	r3, [pc, #36]	; (80096f0 <prvHeapInit+0xc0>)
 80096ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80096ce:	601a      	str	r2, [r3, #0]
}
 80096d0:	bf00      	nop
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bc80      	pop	{r7}
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	20000d24 	.word	0x20000d24
 80096e0:	20003524 	.word	0x20003524
 80096e4:	2000352c 	.word	0x2000352c
 80096e8:	20003534 	.word	0x20003534
 80096ec:	20003530 	.word	0x20003530
 80096f0:	20003538 	.word	0x20003538

080096f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80096fc:	4b27      	ldr	r3, [pc, #156]	; (800979c <prvInsertBlockIntoFreeList+0xa8>)
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	e002      	b.n	8009708 <prvInsertBlockIntoFreeList+0x14>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	60fb      	str	r3, [r7, #12]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	429a      	cmp	r2, r3
 8009710:	d8f7      	bhi.n	8009702 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	4413      	add	r3, r2
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	429a      	cmp	r2, r3
 8009722:	d108      	bne.n	8009736 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	441a      	add	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	441a      	add	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d118      	bne.n	800977c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	4b14      	ldr	r3, [pc, #80]	; (80097a0 <prvInsertBlockIntoFreeList+0xac>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	429a      	cmp	r2, r3
 8009754:	d00d      	beq.n	8009772 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	441a      	add	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	601a      	str	r2, [r3, #0]
 8009770:	e008      	b.n	8009784 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009772:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <prvInsertBlockIntoFreeList+0xac>)
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	e003      	b.n	8009784 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	429a      	cmp	r2, r3
 800978a:	d002      	beq.n	8009792 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009792:	bf00      	nop
 8009794:	3714      	adds	r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	bc80      	pop	{r7}
 800979a:	4770      	bx	lr
 800979c:	20003524 	.word	0x20003524
 80097a0:	2000352c 	.word	0x2000352c

080097a4 <__libc_init_array>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	2500      	movs	r5, #0
 80097a8:	4e0c      	ldr	r6, [pc, #48]	; (80097dc <__libc_init_array+0x38>)
 80097aa:	4c0d      	ldr	r4, [pc, #52]	; (80097e0 <__libc_init_array+0x3c>)
 80097ac:	1ba4      	subs	r4, r4, r6
 80097ae:	10a4      	asrs	r4, r4, #2
 80097b0:	42a5      	cmp	r5, r4
 80097b2:	d109      	bne.n	80097c8 <__libc_init_array+0x24>
 80097b4:	f000 f82e 	bl	8009814 <_init>
 80097b8:	2500      	movs	r5, #0
 80097ba:	4e0a      	ldr	r6, [pc, #40]	; (80097e4 <__libc_init_array+0x40>)
 80097bc:	4c0a      	ldr	r4, [pc, #40]	; (80097e8 <__libc_init_array+0x44>)
 80097be:	1ba4      	subs	r4, r4, r6
 80097c0:	10a4      	asrs	r4, r4, #2
 80097c2:	42a5      	cmp	r5, r4
 80097c4:	d105      	bne.n	80097d2 <__libc_init_array+0x2e>
 80097c6:	bd70      	pop	{r4, r5, r6, pc}
 80097c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097cc:	4798      	blx	r3
 80097ce:	3501      	adds	r5, #1
 80097d0:	e7ee      	b.n	80097b0 <__libc_init_array+0xc>
 80097d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097d6:	4798      	blx	r3
 80097d8:	3501      	adds	r5, #1
 80097da:	e7f2      	b.n	80097c2 <__libc_init_array+0x1e>
 80097dc:	08009b64 	.word	0x08009b64
 80097e0:	08009b64 	.word	0x08009b64
 80097e4:	08009b64 	.word	0x08009b64
 80097e8:	08009b68 	.word	0x08009b68

080097ec <memcpy>:
 80097ec:	b510      	push	{r4, lr}
 80097ee:	1e43      	subs	r3, r0, #1
 80097f0:	440a      	add	r2, r1
 80097f2:	4291      	cmp	r1, r2
 80097f4:	d100      	bne.n	80097f8 <memcpy+0xc>
 80097f6:	bd10      	pop	{r4, pc}
 80097f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009800:	e7f7      	b.n	80097f2 <memcpy+0x6>

08009802 <memset>:
 8009802:	4603      	mov	r3, r0
 8009804:	4402      	add	r2, r0
 8009806:	4293      	cmp	r3, r2
 8009808:	d100      	bne.n	800980c <memset+0xa>
 800980a:	4770      	bx	lr
 800980c:	f803 1b01 	strb.w	r1, [r3], #1
 8009810:	e7f9      	b.n	8009806 <memset+0x4>
	...

08009814 <_init>:
 8009814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009816:	bf00      	nop
 8009818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981a:	bc08      	pop	{r3}
 800981c:	469e      	mov	lr, r3
 800981e:	4770      	bx	lr

08009820 <_fini>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	bf00      	nop
 8009824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009826:	bc08      	pop	{r3}
 8009828:	469e      	mov	lr, r3
 800982a:	4770      	bx	lr
