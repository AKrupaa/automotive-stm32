
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b32c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800b46c  0800b46c  0001b46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b804  0800b804  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800b804  0800b804  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b804  0800b804  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b804  0800b804  0001b804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b808  0800b808  0001b808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800b80c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003898  20000014  0800b820  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200038ac  0800b820  000238ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dc94  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005a23  00000000  00000000  0004dcd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ae8  00000000  00000000  000536f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001860  00000000  00000000  000551e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001eaef  00000000  00000000  00056a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020397  00000000  00000000  0007552f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ab643  00000000  00000000  000958c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140f09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bbc  00000000  00000000  00140f84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000014 	.word	0x20000014
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b454 	.word	0x0800b454

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000018 	.word	0x20000018
 800017c:	0800b454 	.word	0x0800b454

08000180 <__aeabi_frsub>:
 8000180:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__addsf3>
 8000186:	bf00      	nop

08000188 <__aeabi_fsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800018c <__addsf3>:
 800018c:	0042      	lsls	r2, r0, #1
 800018e:	bf1f      	itttt	ne
 8000190:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000194:	ea92 0f03 	teqne	r2, r3
 8000198:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800019c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001a0:	d06a      	beq.n	8000278 <__addsf3+0xec>
 80001a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001aa:	bfc1      	itttt	gt
 80001ac:	18d2      	addgt	r2, r2, r3
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	4048      	eorgt	r0, r1
 80001b2:	4041      	eorgt	r1, r0
 80001b4:	bfb8      	it	lt
 80001b6:	425b      	neglt	r3, r3
 80001b8:	2b19      	cmp	r3, #25
 80001ba:	bf88      	it	hi
 80001bc:	4770      	bxhi	lr
 80001be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4240      	negne	r0, r0
 80001ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001da:	bf18      	it	ne
 80001dc:	4249      	negne	r1, r1
 80001de:	ea92 0f03 	teq	r2, r3
 80001e2:	d03f      	beq.n	8000264 <__addsf3+0xd8>
 80001e4:	f1a2 0201 	sub.w	r2, r2, #1
 80001e8:	fa41 fc03 	asr.w	ip, r1, r3
 80001ec:	eb10 000c 	adds.w	r0, r0, ip
 80001f0:	f1c3 0320 	rsb	r3, r3, #32
 80001f4:	fa01 f103 	lsl.w	r1, r1, r3
 80001f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001fc:	d502      	bpl.n	8000204 <__addsf3+0x78>
 80001fe:	4249      	negs	r1, r1
 8000200:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000204:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000208:	d313      	bcc.n	8000232 <__addsf3+0xa6>
 800020a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020e:	d306      	bcc.n	800021e <__addsf3+0x92>
 8000210:	0840      	lsrs	r0, r0, #1
 8000212:	ea4f 0131 	mov.w	r1, r1, rrx
 8000216:	f102 0201 	add.w	r2, r2, #1
 800021a:	2afe      	cmp	r2, #254	; 0xfe
 800021c:	d251      	bcs.n	80002c2 <__addsf3+0x136>
 800021e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000222:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000226:	bf08      	it	eq
 8000228:	f020 0001 	biceq.w	r0, r0, #1
 800022c:	ea40 0003 	orr.w	r0, r0, r3
 8000230:	4770      	bx	lr
 8000232:	0049      	lsls	r1, r1, #1
 8000234:	eb40 0000 	adc.w	r0, r0, r0
 8000238:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	d1ed      	bne.n	800021e <__addsf3+0x92>
 8000242:	fab0 fc80 	clz	ip, r0
 8000246:	f1ac 0c08 	sub.w	ip, ip, #8
 800024a:	ebb2 020c 	subs.w	r2, r2, ip
 800024e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000252:	bfaa      	itet	ge
 8000254:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000258:	4252      	neglt	r2, r2
 800025a:	4318      	orrge	r0, r3
 800025c:	bfbc      	itt	lt
 800025e:	40d0      	lsrlt	r0, r2
 8000260:	4318      	orrlt	r0, r3
 8000262:	4770      	bx	lr
 8000264:	f092 0f00 	teq	r2, #0
 8000268:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800026c:	bf06      	itte	eq
 800026e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000272:	3201      	addeq	r2, #1
 8000274:	3b01      	subne	r3, #1
 8000276:	e7b5      	b.n	80001e4 <__addsf3+0x58>
 8000278:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800027c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000280:	bf18      	it	ne
 8000282:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000286:	d021      	beq.n	80002cc <__addsf3+0x140>
 8000288:	ea92 0f03 	teq	r2, r3
 800028c:	d004      	beq.n	8000298 <__addsf3+0x10c>
 800028e:	f092 0f00 	teq	r2, #0
 8000292:	bf08      	it	eq
 8000294:	4608      	moveq	r0, r1
 8000296:	4770      	bx	lr
 8000298:	ea90 0f01 	teq	r0, r1
 800029c:	bf1c      	itt	ne
 800029e:	2000      	movne	r0, #0
 80002a0:	4770      	bxne	lr
 80002a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a6:	d104      	bne.n	80002b2 <__addsf3+0x126>
 80002a8:	0040      	lsls	r0, r0, #1
 80002aa:	bf28      	it	cs
 80002ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002b0:	4770      	bx	lr
 80002b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b6:	bf3c      	itt	cc
 80002b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bxcc	lr
 80002be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ca:	4770      	bx	lr
 80002cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002d0:	bf16      	itet	ne
 80002d2:	4608      	movne	r0, r1
 80002d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d8:	4601      	movne	r1, r0
 80002da:	0242      	lsls	r2, r0, #9
 80002dc:	bf06      	itte	eq
 80002de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002e2:	ea90 0f01 	teqeq	r0, r1
 80002e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ea:	4770      	bx	lr

080002ec <__aeabi_ui2f>:
 80002ec:	f04f 0300 	mov.w	r3, #0
 80002f0:	e004      	b.n	80002fc <__aeabi_i2f+0x8>
 80002f2:	bf00      	nop

080002f4 <__aeabi_i2f>:
 80002f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f8:	bf48      	it	mi
 80002fa:	4240      	negmi	r0, r0
 80002fc:	ea5f 0c00 	movs.w	ip, r0
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000308:	4601      	mov	r1, r0
 800030a:	f04f 0000 	mov.w	r0, #0
 800030e:	e01c      	b.n	800034a <__aeabi_l2f+0x2a>

08000310 <__aeabi_ul2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f04f 0300 	mov.w	r3, #0
 800031c:	e00a      	b.n	8000334 <__aeabi_l2f+0x14>
 800031e:	bf00      	nop

08000320 <__aeabi_l2f>:
 8000320:	ea50 0201 	orrs.w	r2, r0, r1
 8000324:	bf08      	it	eq
 8000326:	4770      	bxeq	lr
 8000328:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800032c:	d502      	bpl.n	8000334 <__aeabi_l2f+0x14>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	ea5f 0c01 	movs.w	ip, r1
 8000338:	bf02      	ittt	eq
 800033a:	4684      	moveq	ip, r0
 800033c:	4601      	moveq	r1, r0
 800033e:	2000      	moveq	r0, #0
 8000340:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000344:	bf08      	it	eq
 8000346:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800034a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034e:	fabc f28c 	clz	r2, ip
 8000352:	3a08      	subs	r2, #8
 8000354:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000358:	db10      	blt.n	800037c <__aeabi_l2f+0x5c>
 800035a:	fa01 fc02 	lsl.w	ip, r1, r2
 800035e:	4463      	add	r3, ip
 8000360:	fa00 fc02 	lsl.w	ip, r0, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	fa20 f202 	lsr.w	r2, r0, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	f020 0001 	biceq.w	r0, r0, #1
 800037a:	4770      	bx	lr
 800037c:	f102 0220 	add.w	r2, r2, #32
 8000380:	fa01 fc02 	lsl.w	ip, r1, r2
 8000384:	f1c2 0220 	rsb	r2, r2, #32
 8000388:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800038c:	fa21 f202 	lsr.w	r2, r1, r2
 8000390:	eb43 0002 	adc.w	r0, r3, r2
 8000394:	bf08      	it	eq
 8000396:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800039a:	4770      	bx	lr

0800039c <__aeabi_fmul>:
 800039c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a4:	bf1e      	ittt	ne
 80003a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003aa:	ea92 0f0c 	teqne	r2, ip
 80003ae:	ea93 0f0c 	teqne	r3, ip
 80003b2:	d06f      	beq.n	8000494 <__aeabi_fmul+0xf8>
 80003b4:	441a      	add	r2, r3
 80003b6:	ea80 0c01 	eor.w	ip, r0, r1
 80003ba:	0240      	lsls	r0, r0, #9
 80003bc:	bf18      	it	ne
 80003be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003c2:	d01e      	beq.n	8000402 <__aeabi_fmul+0x66>
 80003c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d0:	fba0 3101 	umull	r3, r1, r0, r1
 80003d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003dc:	bf3e      	ittt	cc
 80003de:	0049      	lslcc	r1, r1, #1
 80003e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e4:	005b      	lslcc	r3, r3, #1
 80003e6:	ea40 0001 	orr.w	r0, r0, r1
 80003ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ee:	2afd      	cmp	r2, #253	; 0xfd
 80003f0:	d81d      	bhi.n	800042e <__aeabi_fmul+0x92>
 80003f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003fa:	bf08      	it	eq
 80003fc:	f020 0001 	biceq.w	r0, r0, #1
 8000400:	4770      	bx	lr
 8000402:	f090 0f00 	teq	r0, #0
 8000406:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800040a:	bf08      	it	eq
 800040c:	0249      	lsleq	r1, r1, #9
 800040e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000412:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000416:	3a7f      	subs	r2, #127	; 0x7f
 8000418:	bfc2      	ittt	gt
 800041a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800041e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000422:	4770      	bxgt	lr
 8000424:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000428:	f04f 0300 	mov.w	r3, #0
 800042c:	3a01      	subs	r2, #1
 800042e:	dc5d      	bgt.n	80004ec <__aeabi_fmul+0x150>
 8000430:	f112 0f19 	cmn.w	r2, #25
 8000434:	bfdc      	itt	le
 8000436:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800043a:	4770      	bxle	lr
 800043c:	f1c2 0200 	rsb	r2, r2, #0
 8000440:	0041      	lsls	r1, r0, #1
 8000442:	fa21 f102 	lsr.w	r1, r1, r2
 8000446:	f1c2 0220 	rsb	r2, r2, #32
 800044a:	fa00 fc02 	lsl.w	ip, r0, r2
 800044e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000452:	f140 0000 	adc.w	r0, r0, #0
 8000456:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800045a:	bf08      	it	eq
 800045c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000460:	4770      	bx	lr
 8000462:	f092 0f00 	teq	r2, #0
 8000466:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800046a:	bf02      	ittt	eq
 800046c:	0040      	lsleq	r0, r0, #1
 800046e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000472:	3a01      	subeq	r2, #1
 8000474:	d0f9      	beq.n	800046a <__aeabi_fmul+0xce>
 8000476:	ea40 000c 	orr.w	r0, r0, ip
 800047a:	f093 0f00 	teq	r3, #0
 800047e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000482:	bf02      	ittt	eq
 8000484:	0049      	lsleq	r1, r1, #1
 8000486:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800048a:	3b01      	subeq	r3, #1
 800048c:	d0f9      	beq.n	8000482 <__aeabi_fmul+0xe6>
 800048e:	ea41 010c 	orr.w	r1, r1, ip
 8000492:	e78f      	b.n	80003b4 <__aeabi_fmul+0x18>
 8000494:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000498:	ea92 0f0c 	teq	r2, ip
 800049c:	bf18      	it	ne
 800049e:	ea93 0f0c 	teqne	r3, ip
 80004a2:	d00a      	beq.n	80004ba <__aeabi_fmul+0x11e>
 80004a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004a8:	bf18      	it	ne
 80004aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004ae:	d1d8      	bne.n	8000462 <__aeabi_fmul+0xc6>
 80004b0:	ea80 0001 	eor.w	r0, r0, r1
 80004b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004b8:	4770      	bx	lr
 80004ba:	f090 0f00 	teq	r0, #0
 80004be:	bf17      	itett	ne
 80004c0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c4:	4608      	moveq	r0, r1
 80004c6:	f091 0f00 	teqne	r1, #0
 80004ca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ce:	d014      	beq.n	80004fa <__aeabi_fmul+0x15e>
 80004d0:	ea92 0f0c 	teq	r2, ip
 80004d4:	d101      	bne.n	80004da <__aeabi_fmul+0x13e>
 80004d6:	0242      	lsls	r2, r0, #9
 80004d8:	d10f      	bne.n	80004fa <__aeabi_fmul+0x15e>
 80004da:	ea93 0f0c 	teq	r3, ip
 80004de:	d103      	bne.n	80004e8 <__aeabi_fmul+0x14c>
 80004e0:	024b      	lsls	r3, r1, #9
 80004e2:	bf18      	it	ne
 80004e4:	4608      	movne	r0, r1
 80004e6:	d108      	bne.n	80004fa <__aeabi_fmul+0x15e>
 80004e8:	ea80 0001 	eor.w	r0, r0, r1
 80004ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004f8:	4770      	bx	lr
 80004fa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000502:	4770      	bx	lr

08000504 <__aeabi_fdiv>:
 8000504:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000508:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800050c:	bf1e      	ittt	ne
 800050e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000512:	ea92 0f0c 	teqne	r2, ip
 8000516:	ea93 0f0c 	teqne	r3, ip
 800051a:	d069      	beq.n	80005f0 <__aeabi_fdiv+0xec>
 800051c:	eba2 0203 	sub.w	r2, r2, r3
 8000520:	ea80 0c01 	eor.w	ip, r0, r1
 8000524:	0249      	lsls	r1, r1, #9
 8000526:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800052a:	d037      	beq.n	800059c <__aeabi_fdiv+0x98>
 800052c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000530:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000534:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000538:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800053c:	428b      	cmp	r3, r1
 800053e:	bf38      	it	cc
 8000540:	005b      	lslcc	r3, r3, #1
 8000542:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000546:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800054a:	428b      	cmp	r3, r1
 800054c:	bf24      	itt	cs
 800054e:	1a5b      	subcs	r3, r3, r1
 8000550:	ea40 000c 	orrcs.w	r0, r0, ip
 8000554:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000558:	bf24      	itt	cs
 800055a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800055e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000562:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000566:	bf24      	itt	cs
 8000568:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800056c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000570:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000574:	bf24      	itt	cs
 8000576:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800057a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800057e:	011b      	lsls	r3, r3, #4
 8000580:	bf18      	it	ne
 8000582:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000586:	d1e0      	bne.n	800054a <__aeabi_fdiv+0x46>
 8000588:	2afd      	cmp	r2, #253	; 0xfd
 800058a:	f63f af50 	bhi.w	800042e <__aeabi_fmul+0x92>
 800058e:	428b      	cmp	r3, r1
 8000590:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000594:	bf08      	it	eq
 8000596:	f020 0001 	biceq.w	r0, r0, #1
 800059a:	4770      	bx	lr
 800059c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005a0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005a4:	327f      	adds	r2, #127	; 0x7f
 80005a6:	bfc2      	ittt	gt
 80005a8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005ac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005b0:	4770      	bxgt	lr
 80005b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b6:	f04f 0300 	mov.w	r3, #0
 80005ba:	3a01      	subs	r2, #1
 80005bc:	e737      	b.n	800042e <__aeabi_fmul+0x92>
 80005be:	f092 0f00 	teq	r2, #0
 80005c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005c6:	bf02      	ittt	eq
 80005c8:	0040      	lsleq	r0, r0, #1
 80005ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ce:	3a01      	subeq	r2, #1
 80005d0:	d0f9      	beq.n	80005c6 <__aeabi_fdiv+0xc2>
 80005d2:	ea40 000c 	orr.w	r0, r0, ip
 80005d6:	f093 0f00 	teq	r3, #0
 80005da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005de:	bf02      	ittt	eq
 80005e0:	0049      	lsleq	r1, r1, #1
 80005e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005e6:	3b01      	subeq	r3, #1
 80005e8:	d0f9      	beq.n	80005de <__aeabi_fdiv+0xda>
 80005ea:	ea41 010c 	orr.w	r1, r1, ip
 80005ee:	e795      	b.n	800051c <__aeabi_fdiv+0x18>
 80005f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005f4:	ea92 0f0c 	teq	r2, ip
 80005f8:	d108      	bne.n	800060c <__aeabi_fdiv+0x108>
 80005fa:	0242      	lsls	r2, r0, #9
 80005fc:	f47f af7d 	bne.w	80004fa <__aeabi_fmul+0x15e>
 8000600:	ea93 0f0c 	teq	r3, ip
 8000604:	f47f af70 	bne.w	80004e8 <__aeabi_fmul+0x14c>
 8000608:	4608      	mov	r0, r1
 800060a:	e776      	b.n	80004fa <__aeabi_fmul+0x15e>
 800060c:	ea93 0f0c 	teq	r3, ip
 8000610:	d104      	bne.n	800061c <__aeabi_fdiv+0x118>
 8000612:	024b      	lsls	r3, r1, #9
 8000614:	f43f af4c 	beq.w	80004b0 <__aeabi_fmul+0x114>
 8000618:	4608      	mov	r0, r1
 800061a:	e76e      	b.n	80004fa <__aeabi_fmul+0x15e>
 800061c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000620:	bf18      	it	ne
 8000622:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000626:	d1ca      	bne.n	80005be <__aeabi_fdiv+0xba>
 8000628:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800062c:	f47f af5c 	bne.w	80004e8 <__aeabi_fmul+0x14c>
 8000630:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000634:	f47f af3c 	bne.w	80004b0 <__aeabi_fmul+0x114>
 8000638:	e75f      	b.n	80004fa <__aeabi_fmul+0x15e>
 800063a:	bf00      	nop

0800063c <__aeabi_f2iz>:
 800063c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000640:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000644:	d30f      	bcc.n	8000666 <__aeabi_f2iz+0x2a>
 8000646:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800064a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800064e:	d90d      	bls.n	800066c <__aeabi_f2iz+0x30>
 8000650:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000654:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000658:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800065c:	fa23 f002 	lsr.w	r0, r3, r2
 8000660:	bf18      	it	ne
 8000662:	4240      	negne	r0, r0
 8000664:	4770      	bx	lr
 8000666:	f04f 0000 	mov.w	r0, #0
 800066a:	4770      	bx	lr
 800066c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000670:	d101      	bne.n	8000676 <__aeabi_f2iz+0x3a>
 8000672:	0242      	lsls	r2, r0, #9
 8000674:	d105      	bne.n	8000682 <__aeabi_f2iz+0x46>
 8000676:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800067a:	bf08      	it	eq
 800067c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000680:	4770      	bx	lr
 8000682:	f04f 0000 	mov.w	r0, #0
 8000686:	4770      	bx	lr

08000688 <h_bridge_init>:
	evgroup_drive_evbit_permitted,
	evgroup_drive_evbit_N,

} drive_evgroup_bits_t;

bool h_bridge_init(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800068c:	2108      	movs	r1, #8
 800068e:	4808      	ldr	r0, [pc, #32]	; (80006b0 <h_bridge_init+0x28>)
 8000690:	f005 ffa6 	bl	80065e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000694:	2100      	movs	r1, #0
 8000696:	4807      	ldr	r0, [pc, #28]	; (80006b4 <h_bridge_init+0x2c>)
 8000698:	f005 ffa2 	bl	80065e0 <HAL_TIM_PWM_Start>

	h_bridge_set_left_duty(0);
 800069c:	2000      	movs	r0, #0
 800069e:	f000 f80b 	bl	80006b8 <h_bridge_set_left_duty>
	h_bridge_set_right_duty(0);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 f82e 	bl	8000704 <h_bridge_set_right_duty>

	return true;
 80006a8:	2301      	movs	r3, #1
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200036ec 	.word	0x200036ec
 80006b4:	20003764 	.word	0x20003764

080006b8 <h_bridge_set_left_duty>:

void h_bridge_set_left_duty(int percent) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	if (percent > 100)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b64      	cmp	r3, #100	; 0x64
 80006c4:	dd01      	ble.n	80006ca <h_bridge_set_left_duty+0x12>
		percent = 100;
 80006c6:	2364      	movs	r3, #100	; 0x64
 80006c8:	607b      	str	r3, [r7, #4]

	if (percent < 1)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dc01      	bgt.n	80006d4 <h_bridge_set_left_duty+0x1c>
		percent = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]

	uint32_t value = percent * htim2.Init.Period / 100;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <h_bridge_set_left_duty+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	fb02 f303 	mul.w	r3, r2, r3
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <h_bridge_set_left_duty+0x48>)
 80006e0:	fba2 2303 	umull	r2, r3, r2, r3
 80006e4:	095b      	lsrs	r3, r3, #5
 80006e6:	60fb      	str	r3, [r7, #12]
//	htim2.Instance->CCR1 = value;
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <h_bridge_set_left_duty+0x44>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20003764 	.word	0x20003764
 8000700:	51eb851f 	.word	0x51eb851f

08000704 <h_bridge_set_right_duty>:

void h_bridge_set_right_duty(int percent) {
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	if (percent > 100)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b64      	cmp	r3, #100	; 0x64
 8000710:	dd01      	ble.n	8000716 <h_bridge_set_right_duty+0x12>
		percent = 100;
 8000712:	2364      	movs	r3, #100	; 0x64
 8000714:	607b      	str	r3, [r7, #4]

	if (percent < 1)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	dc01      	bgt.n	8000720 <h_bridge_set_right_duty+0x1c>
		percent = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]

	uint32_t value = percent * htim3.Init.Period / 100;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <h_bridge_set_right_duty+0x44>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	fb02 f303 	mul.w	r3, r2, r3
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <h_bridge_set_right_duty+0x48>)
 800072c:	fba2 2303 	umull	r2, r3, r2, r3
 8000730:	095b      	lsrs	r3, r3, #5
 8000732:	60fb      	str	r3, [r7, #12]
//	htim3.Instance->CCR3 = value;
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <h_bridge_set_right_duty+0x44>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	68fa      	ldr	r2, [r7, #12]
 800073a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	200036ec 	.word	0x200036ec
 800074c:	51eb851f 	.word	0x51eb851f

08000750 <h_bridge_cw_left>:

void h_bridge_cw_left(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 8000754:	2201      	movs	r2, #1
 8000756:	2102      	movs	r1, #2
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <h_bridge_cw_left+0x1c>)
 800075a:	f003 fd07 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 800075e:	2200      	movs	r2, #0
 8000760:	2104      	movs	r1, #4
 8000762:	4802      	ldr	r0, [pc, #8]	; (800076c <h_bridge_cw_left+0x1c>)
 8000764:	f003 fd02 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40020800 	.word	0x40020800

08000770 <h_bridge_cw_right>:

void h_bridge_cw_right(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <h_bridge_cw_right+0x20>)
 800077c:	f003 fcf6 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000786:	4803      	ldr	r0, [pc, #12]	; (8000794 <h_bridge_cw_right+0x24>)
 8000788:	f003 fcf0 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40020000 	.word	0x40020000
 8000794:	40020800 	.word	0x40020800

08000798 <h_bridge_ccw_left>:

void h_bridge_ccw_left(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 800079c:	2200      	movs	r2, #0
 800079e:	2102      	movs	r1, #2
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <h_bridge_ccw_left+0x1c>)
 80007a2:	f003 fce3 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 80007a6:	2201      	movs	r2, #1
 80007a8:	2104      	movs	r1, #4
 80007aa:	4802      	ldr	r0, [pc, #8]	; (80007b4 <h_bridge_ccw_left+0x1c>)
 80007ac:	f003 fcde 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40020800 	.word	0x40020800

080007b8 <h_bridge_ccw_right>:

void h_bridge_ccw_right(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <h_bridge_ccw_right+0x20>)
 80007c4:	f003 fcd2 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ce:	4803      	ldr	r0, [pc, #12]	; (80007dc <h_bridge_ccw_right+0x24>)
 80007d0:	f003 fccc 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40020800 	.word	0x40020800

080007e0 <h_bridge_coast>:

/// Lets the motor coast
void h_bridge_coast(void) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ea:	480a      	ldr	r0, [pc, #40]	; (8000814 <h_bridge_coast+0x34>)
 80007ec:	f003 fcbe 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f6:	4808      	ldr	r0, [pc, #32]	; (8000818 <h_bridge_coast+0x38>)
 80007f8:	f003 fcb8 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 80007fc:	2200      	movs	r2, #0
 80007fe:	2102      	movs	r1, #2
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <h_bridge_coast+0x38>)
 8000802:	f003 fcb3 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 8000806:	2200      	movs	r2, #0
 8000808:	2104      	movs	r1, #4
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <h_bridge_coast+0x38>)
 800080c:	f003 fcae 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40020000 	.word	0x40020000
 8000818:	40020800 	.word	0x40020800

0800081c <h_bridge_stop>:

void h_bridge_stop(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUT_INa_ENGINE_RIGHT_GPIO_Port, OUT_INa_ENGINE_RIGHT_Pin,
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000826:	480a      	ldr	r0, [pc, #40]	; (8000850 <h_bridge_stop+0x34>)
 8000828:	f003 fca0 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_RIGHT_GPIO_Port, OUT_INb_ENGINE_RIGHT_Pin,
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000832:	4808      	ldr	r0, [pc, #32]	; (8000854 <h_bridge_stop+0x38>)
 8000834:	f003 fc9a 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	HAL_GPIO_WritePin(OUT_INa_ENGINE_LEFT_GPIO_Port, OUT_INa_ENGINE_LEFT_Pin,
 8000838:	2201      	movs	r2, #1
 800083a:	2102      	movs	r1, #2
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <h_bridge_stop+0x38>)
 800083e:	f003 fc95 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(OUT_INb_ENGINE_LEFT_GPIO_Port, OUT_INb_ENGINE_LEFT_Pin,
 8000842:	2201      	movs	r2, #1
 8000844:	2104      	movs	r1, #4
 8000846:	4803      	ldr	r0, [pc, #12]	; (8000854 <h_bridge_stop+0x38>)
 8000848:	f003 fc90 	bl	800416c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40020000 	.word	0x40020000
 8000854:	40020800 	.word	0x40020800

08000858 <QMC5883L_Read_Reg>:
	uint16_t buf = ((buff[1] << 8) | buff[0]);	// U2
	buf = (~buf) + 1; // decimal
	return (int) buf / 100; // our value
}

uint8_t QMC5883L_Read_Reg(uint8_t reg) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af04      	add	r7, sp, #16
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[1];
	HAL_I2C_Mem_Read(QMC5883L_I2C_PORT, 0x3D/*QMC5883L_ADDRESS*/, reg, 1, Buffer, 1,
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	b29a      	uxth	r2, r3
 8000866:	230a      	movs	r3, #10
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	2301      	movs	r3, #1
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2301      	movs	r3, #1
 8000876:	213d      	movs	r1, #61	; 0x3d
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <QMC5883L_Read_Reg+0x30>)
 800087a:	f003 ff69 	bl	8004750 <HAL_I2C_Mem_Read>
			10);
	return Buffer[0];
 800087e:	7b3b      	ldrb	r3, [r7, #12]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200035e4 	.word	0x200035e4

0800088c <QMC5883L_Write_Reg>:

void QMC5883L_Write_Reg(uint8_t reg, uint8_t data) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af02      	add	r7, sp, #8
 8000892:	4603      	mov	r3, r0
 8000894:	460a      	mov	r2, r1
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	4613      	mov	r3, r2
 800089a:	71bb      	strb	r3, [r7, #6]
	uint8_t Buffer[2] = { reg, data };
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	733b      	strb	r3, [r7, #12]
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(QMC5883L_I2C_PORT, 0x3C/*QMC5883L_ADDRESS*/, Buffer, 2, 10);
 80008a4:	f107 020c 	add.w	r2, r7, #12
 80008a8:	230a      	movs	r3, #10
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2302      	movs	r3, #2
 80008ae:	213c      	movs	r1, #60	; 0x3c
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <QMC5883L_Write_Reg+0x34>)
 80008b2:	f003 fe4f 	bl	8004554 <HAL_I2C_Master_Transmit>
}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200035e4 	.word	0x200035e4

080008c4 <QMC5883L_Read_Data>:

void QMC5883L_Read_Data(int16_t *MagX, int16_t *MagY, int16_t *MagZ) // (-32768 / +32768)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 80008d0:	2004      	movs	r0, #4
 80008d2:	f7ff ffc1 	bl	8000858 <QMC5883L_Read_Reg>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_MSB)) << 8));
 80008da:	2003      	movs	r0, #3
 80008dc:	f7ff ffbc 	bl	8000858 <QMC5883L_Read_Reg>
 80008e0:	4603      	mov	r3, r0
 80008e2:	021b      	lsls	r3, r3, #8
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	4323      	orrs	r3, r4
 80008e8:	b21a      	sxth	r2, r3
	*MagX = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_X_LSB)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	801a      	strh	r2, [r3, #0]
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 80008ee:	2008      	movs	r0, #8
 80008f0:	f7ff ffb2 	bl	8000858 <QMC5883L_Read_Reg>
 80008f4:	4603      	mov	r3, r0
 80008f6:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_MSB)) << 8));
 80008f8:	2007      	movs	r0, #7
 80008fa:	f7ff ffad 	bl	8000858 <QMC5883L_Read_Reg>
 80008fe:	4603      	mov	r3, r0
 8000900:	021b      	lsls	r3, r3, #8
 8000902:	b21b      	sxth	r3, r3
 8000904:	4323      	orrs	r3, r4
 8000906:	b21a      	sxth	r2, r3
	*MagY = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Y_LSB)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	801a      	strh	r2, [r3, #0]
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 800090c:	2006      	movs	r0, #6
 800090e:	f7ff ffa3 	bl	8000858 <QMC5883L_Read_Reg>
 8000912:	4603      	mov	r3, r0
 8000914:	b21c      	sxth	r4, r3
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_MSB)) << 8));
 8000916:	2005      	movs	r0, #5
 8000918:	f7ff ff9e 	bl	8000858 <QMC5883L_Read_Reg>
 800091c:	4603      	mov	r3, r0
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21b      	sxth	r3, r3
 8000922:	4323      	orrs	r3, r4
 8000924:	b21a      	sxth	r2, r3
	*MagZ = ((int16_t) QMC5883L_Read_Reg(QMC5883L_DATA_READ_Z_LSB)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	801a      	strh	r2, [r3, #0]
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	bd90      	pop	{r4, r7, pc}

08000932 <QMC5883L_Initialize>:
			| (((int16_t) QMC5883L_Read_Reg(QMC5883L_TEMP_READ_MSB)) << 8))
			/ 100;
}

void QMC5883L_Initialize(_qmc5883l_MODE MODE, _qmc5883l_ODR ODR,
		_qmc5883l_RNG RNG, _qmc5883l_OSR OSR) {
 8000932:	b590      	push	{r4, r7, lr}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	4604      	mov	r4, r0
 800093a:	4608      	mov	r0, r1
 800093c:	4611      	mov	r1, r2
 800093e:	461a      	mov	r2, r3
 8000940:	4623      	mov	r3, r4
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	4603      	mov	r3, r0
 8000946:	71bb      	strb	r3, [r7, #6]
 8000948:	460b      	mov	r3, r1
 800094a:	717b      	strb	r3, [r7, #5]
 800094c:	4613      	mov	r3, r2
 800094e:	713b      	strb	r3, [r7, #4]
	QMC5883L_Write_Reg(QMC5883L_CONFIG_3, 0x01);
 8000950:	2101      	movs	r1, #1
 8000952:	200b      	movs	r0, #11
 8000954:	f7ff ff9a 	bl	800088c <QMC5883L_Write_Reg>
	QMC5883L_Write_Reg(QMC5883L_CONFIG_1, MODE | ODR | RNG | OSR);
 8000958:	79fa      	ldrb	r2, [r7, #7]
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	4313      	orrs	r3, r2
 800095e:	b2da      	uxtb	r2, r3
 8000960:	797b      	ldrb	r3, [r7, #5]
 8000962:	4313      	orrs	r3, r2
 8000964:	b2da      	uxtb	r2, r3
 8000966:	793b      	ldrb	r3, [r7, #4]
 8000968:	4313      	orrs	r3, r2
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4619      	mov	r1, r3
 800096e:	2009      	movs	r0, #9
 8000970:	f7ff ff8c 	bl	800088c <QMC5883L_Write_Reg>
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bd90      	pop	{r4, r7, pc}

0800097c <QMC5883L_InterruptConfig>:

void QMC5883L_Reset() {
	QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x81);
}

void QMC5883L_InterruptConfig(_qmc5883l_INT INT) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	if (INT == INTERRUPT_ENABLE) {
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d104      	bne.n	8000996 <QMC5883L_InterruptConfig+0x1a>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x00);
 800098c:	2100      	movs	r1, #0
 800098e:	200a      	movs	r0, #10
 8000990:	f7ff ff7c 	bl	800088c <QMC5883L_Write_Reg>
	} else {
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
	}
}
 8000994:	e003      	b.n	800099e <QMC5883L_InterruptConfig+0x22>
		QMC5883L_Write_Reg(QMC5883L_CONFIG_2, 0x01);
 8000996:	2101      	movs	r1, #1
 8000998:	200a      	movs	r0, #10
 800099a:	f7ff ff77 	bl	800088c <QMC5883L_Write_Reg>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <QMC5883L_Scale>:
	}

	return Heading;
}

void QMC5883L_Scale(int16_t *X, int16_t *Y, int16_t *Z) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
	*X *= QMC5883L_SCALE_FACTOR;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fc9a 	bl	80002f4 <__aeabi_i2f>
 80009c0:	4603      	mov	r3, r0
 80009c2:	491b      	ldr	r1, [pc, #108]	; (8000a30 <QMC5883L_Scale+0x88>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fce9 	bl	800039c <__aeabi_fmul>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe35 	bl	800063c <__aeabi_f2iz>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b21a      	sxth	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	801a      	strh	r2, [r3, #0]
	*Y *= QMC5883L_SCALE_FACTOR;
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fc87 	bl	80002f4 <__aeabi_i2f>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4911      	ldr	r1, [pc, #68]	; (8000a30 <QMC5883L_Scale+0x88>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fcd6 	bl	800039c <__aeabi_fmul>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe22 	bl	800063c <__aeabi_f2iz>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b21a      	sxth	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	801a      	strh	r2, [r3, #0]
	*Z *= QMC5883L_SCALE_FACTOR;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fc74 	bl	80002f4 <__aeabi_i2f>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4908      	ldr	r1, [pc, #32]	; (8000a30 <QMC5883L_Scale+0x88>)
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fcc3 	bl	800039c <__aeabi_fmul>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fe0f 	bl	800063c <__aeabi_f2iz>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b21a      	sxth	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	801a      	strh	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	3f3b8000 	.word	0x3f3b8000

08000a34 <ultrasound_select_proper_distance>:
//	HAL_Delay(0.01);
	HAL_GPIO_WritePin(OUT_ULTRASOUND_TRIG_GPIO_Port, OUT_ULTRASOUND_TRIG_Pin,
			GPIO_PIN_RESET);
}

uint16_t ultrasound_select_proper_distance(uint8_t code) {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	if (code == dist5) {
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d102      	bne.n	8000a4a <ultrasound_select_proper_distance+0x16>
		return (uint16_t) ULTRASOUND_DIST_5CM_BITS;
 8000a44:	f240 438a 	movw	r3, #1162	; 0x48a
 8000a48:	e043      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist10) {
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d102      	bne.n	8000a56 <ultrasound_select_proper_distance+0x22>
		return (uint16_t) ULTRASOUND_DIST_10CM_BITS;
 8000a50:	f241 232b 	movw	r3, #4651	; 0x122b
 8000a54:	e03d      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist15) {
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d102      	bne.n	8000a62 <ultrasound_select_proper_distance+0x2e>
		return (uint16_t) ULTRASOUND_DIST_15CM_BITS;
 8000a5c:	f44f 53da 	mov.w	r3, #6976	; 0x1b40
 8000a60:	e037      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist20) {
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d102      	bne.n	8000a6e <ultrasound_select_proper_distance+0x3a>
		return (uint16_t) ULTRASOUND_DIST_20CM_BITS;
 8000a68:	f242 4356 	movw	r3, #9302	; 0x2456
 8000a6c:	e031      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist25) {
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d102      	bne.n	8000a7a <ultrasound_select_proper_distance+0x46>
		return (uint16_t) ULTRASOUND_DIST_25CM_BITS;
 8000a74:	f642 536b 	movw	r3, #11627	; 0x2d6b
 8000a78:	e02b      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist30) {
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b05      	cmp	r3, #5
 8000a7e:	d102      	bne.n	8000a86 <ultrasound_select_proper_distance+0x52>
		return (uint16_t) ULTRASOUND_DIST_30CM_BITS;
 8000a80:	f243 6381 	movw	r3, #13953	; 0x3681
 8000a84:	e025      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist35) {
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b06      	cmp	r3, #6
 8000a8a:	d102      	bne.n	8000a92 <ultrasound_select_proper_distance+0x5e>
		return (uint16_t) ULTRASOUND_DIST_35CM_BITS;
 8000a8c:	f643 7397 	movw	r3, #16279	; 0x3f97
 8000a90:	e01f      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist40) {
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2b07      	cmp	r3, #7
 8000a96:	d102      	bne.n	8000a9e <ultrasound_select_proper_distance+0x6a>
		return (uint16_t) ULTRASOUND_DIST_40CM_BITS;
 8000a98:	f644 03ac 	movw	r3, #18604	; 0x48ac
 8000a9c:	e019      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist50) {
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b08      	cmp	r3, #8
 8000aa2:	d102      	bne.n	8000aaa <ultrasound_select_proper_distance+0x76>
		return (uint16_t) ULTRASOUND_DIST_50CM_BITS;
 8000aa4:	f645 23d7 	movw	r3, #23255	; 0x5ad7
 8000aa8:	e013      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist60) {
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b09      	cmp	r3, #9
 8000aae:	d102      	bne.n	8000ab6 <ultrasound_select_proper_distance+0x82>
		return (uint16_t) ULTRASOUND_DIST_60CM_BITS;
 8000ab0:	f646 5302 	movw	r3, #27906	; 0x6d02
 8000ab4:	e00d      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist70) {
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b0a      	cmp	r3, #10
 8000aba:	d102      	bne.n	8000ac2 <ultrasound_select_proper_distance+0x8e>
		return (uint16_t) ULTRASOUND_DIST_70CM_BITS;
 8000abc:	f647 732e 	movw	r3, #32558	; 0x7f2e
 8000ac0:	e007      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else if (code == dist80) {
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b0b      	cmp	r3, #11
 8000ac6:	d102      	bne.n	8000ace <ultrasound_select_proper_distance+0x9a>
		return (uint16_t) ULTRASOUND_DIST_80CM_BITS;
 8000ac8:	f249 1359 	movw	r3, #37209	; 0x9159
 8000acc:	e001      	b.n	8000ad2 <ultrasound_select_proper_distance+0x9e>
	} else {
		return (uint16_t) ULTRASOUND_DIST_80CM_BITS;
 8000ace:	f249 1359 	movw	r3, #37209	; 0x9159
	}
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < /*mod_N*/mod_0; i++) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	807b      	strh	r3, [r7, #2]
 8000aee:	bf00      	nop
		}

		modsToInit++;
	}

	if (modsToInit != successCnt) {
 8000af0:	88ba      	ldrh	r2, [r7, #4]
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d000      	beq.n	8000afa <device_init+0x1e>
		// some kind of error
		while (1)
 8000af8:	e7fe      	b.n	8000af8 <device_init+0x1c>
			; //TODO: call some error handler
	}

}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 8000b04:	b5b0      	push	{r4, r5, r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	77fb      	strb	r3, [r7, #31]
 8000b0e:	e02c      	b.n	8000b6a <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 8000b10:	7ffa      	ldrb	r2, [r7, #31]
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b47      	ldr	r3, [pc, #284]	; (8000c3c <rt_init+0x138>)
 8000b1e:	4413      	add	r3, r2
 8000b20:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 8000b22:	7ffb      	ldrb	r3, [r7, #31]
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4a46      	ldr	r2, [pc, #280]	; (8000c40 <rt_init+0x13c>)
 8000b28:	4413      	add	r3, r2
 8000b2a:	603b      	str	r3, [r7, #0]
		if (def->active) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7c9b      	ldrb	r3, [r3, #18]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d014      	beq.n	8000b5e <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6818      	ldr	r0, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6859      	ldr	r1, [r3, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	8a1c      	ldrh	r4, [r3, #16]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689d      	ldr	r5, [r3, #8]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	9201      	str	r2, [sp, #4]
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	462b      	mov	r3, r5
 8000b50:	4622      	mov	r2, r4
 8000b52:	f008 fc9e 	bl	8009492 <xTaskCreate>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d003      	beq.n	8000b64 <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 8000b5c:	e7fe      	b.n	8000b5c <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000b64:	7ffb      	ldrb	r3, [r7, #31]
 8000b66:	3301      	adds	r3, #1
 8000b68:	77fb      	strb	r3, [r7, #31]
 8000b6a:	7ffb      	ldrb	r3, [r7, #31]
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d9cf      	bls.n	8000b10 <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 8000b70:	2300      	movs	r3, #0
 8000b72:	77bb      	strb	r3, [r7, #30]
 8000b74:	e01c      	b.n	8000bb0 <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 8000b76:	7fbb      	ldrb	r3, [r7, #30]
 8000b78:	011b      	lsls	r3, r3, #4
 8000b7a:	4a32      	ldr	r2, [pc, #200]	; (8000c44 <rt_init+0x140>)
 8000b7c:	4413      	add	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 8000b80:	7fbb      	ldrb	r3, [r7, #30]
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4a30      	ldr	r2, [pc, #192]	; (8000c48 <rt_init+0x144>)
 8000b86:	4413      	add	r3, r2
 8000b88:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	4619      	mov	r1, r3
 8000b96:	f007 ffed 	bl	8008b74 <xQueueGenericCreate>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d100      	bne.n	8000baa <rt_init+0xa6>
				== 0) {
			while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 8000baa:	7fbb      	ldrb	r3, [r7, #30]
 8000bac:	3301      	adds	r3, #1
 8000bae:	77bb      	strb	r3, [r7, #30]
 8000bb0:	7fbb      	ldrb	r3, [r7, #30]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d9df      	bls.n	8000b76 <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	777b      	strb	r3, [r7, #29]
 8000bba:	e020      	b.n	8000bfe <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 8000bbc:	7f7b      	ldrb	r3, [r7, #29]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <rt_init+0x148>)
 8000bc2:	4413      	add	r3, r2
 8000bc4:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 8000bc6:	7f7b      	ldrb	r3, [r7, #29]
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <rt_init+0x14c>)
 8000bcc:	4413      	add	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	6859      	ldr	r1, [r3, #4]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2300      	movs	r3, #0
 8000be4:	f009 fd12 	bl	800a60c <xTimerCreate>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d100      	bne.n	8000bf8 <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000bf8:	7f7b      	ldrb	r3, [r7, #29]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	777b      	strb	r3, [r7, #29]
 8000bfe:	7f7b      	ldrb	r3, [r7, #29]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d9db      	bls.n	8000bbc <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000c04:	2300      	movs	r3, #0
 8000c06:	773b      	strb	r3, [r7, #28]
 8000c08:	e011      	b.n	8000c2e <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 8000c0a:	7f3b      	ldrb	r3, [r7, #28]
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <rt_init+0x150>)
 8000c10:	4413      	add	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 8000c14:	f007 fc1e 	bl	8008454 <xEventGroupCreate>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d100      	bne.n	8000c28 <rt_init+0x124>
			while (1)
 8000c26:	e7fe      	b.n	8000c26 <rt_init+0x122>
			evgroup++) {
 8000c28:	7f3b      	ldrb	r3, [r7, #28]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000c2e:	7f3b      	ldrb	r3, [r7, #28]
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d9ea      	bls.n	8000c0a <rt_init+0x106>
				;
		}
	}

}
 8000c34:	bf00      	nop
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c3c:	0800b718 	.word	0x0800b718
 8000c40:	20003548 	.word	0x20003548
 8000c44:	0800b77c 	.word	0x0800b77c
 8000c48:	20003574 	.word	0x20003574
 8000c4c:	0800b79c 	.word	0x0800b79c
 8000c50:	2000355c 	.word	0x2000355c
 8000c54:	20003564 	.word	0x20003564

08000c58 <rt_evbitwait_any>:

uint32_t rt_evbitwait_any(rt_evgroup_t Ev) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <rt_evbitwait_any+0x34>)
 8000c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6a:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdTRUE, pdFALSE, portMAX_DELAY);
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2300      	movs	r3, #0
 8000c74:	2201      	movs	r2, #1
 8000c76:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f007 fc04 	bl	8008488 <xEventGroupWaitBits>
 8000c80:	4603      	mov	r3, r0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20003564 	.word	0x20003564

08000c90 <rt_evbit_check_any>:

uint32_t rt_evbit_check_any(rt_evgroup_t Ev) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af02      	add	r7, sp, #8
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <rt_evbit_check_any+0x30>)
 8000c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca2:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdFALSE, pdFALSE, 0);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2200      	movs	r2, #0
 8000cac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f007 fbe9 	bl	8008488 <xEventGroupWaitBits>
 8000cb6:	4603      	mov	r3, r0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20003564 	.word	0x20003564

08000cc4 <rt_evbit_clear_ISR>:

	return xEventGroupClearBits(Evh, // The event group being updated.
			msk);	// The bits being cleared.
}

BaseType_t rt_evbit_clear_ISR( rt_evgroup_t Ev, uint32_t bit) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <rt_evbit_clear_ISR+0x34>)
 8000cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd8:	60fb      	str	r3, [r7, #12]
	EventBits_t msk = (1u << bit);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	60bb      	str	r3, [r7, #8]

	return xEventGroupClearBitsFromISR(Evh, // The event group being updated.
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f007 fcce 	bl	8008688 <xEventGroupClearBitsFromISR>
 8000cec:	4603      	mov	r3, r0
			msk);	// The bits being cleared.
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20003564 	.word	0x20003564

08000cfc <rt_evbit_set>:

void rt_evbit_set(rt_evgroup_t Ev, uint32_t bit) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <rt_evbit_set+0x30>)
 8000d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1a:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBits(Evh, msk);
 8000d1c:	68f9      	ldr	r1, [r7, #12]
 8000d1e:	68b8      	ldr	r0, [r7, #8]
 8000d20:	f007 fcc6 	bl	80086b0 <xEventGroupSetBits>
}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20003564 	.word	0x20003564

08000d30 <rt_evbit_set_ISR>:

void rt_evbit_set_ISR(rt_evgroup_t Ev, uint32_t bit) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <rt_evbit_set_ISR+0x34>)
 8000d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4e:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBitsFromISR(Evh, msk, pdFALSE);
 8000d50:	2200      	movs	r2, #0
 8000d52:	68f9      	ldr	r1, [r7, #12]
 8000d54:	68b8      	ldr	r0, [r7, #8]
 8000d56:	f007 fd6f 	bl	8008838 <xEventGroupSetBitsFromISR>
//	portYIELD_FROM_ISR(pdFALSE);
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20003564 	.word	0x20003564

08000d68 <rt_enqueue>:

bool rt_enqueue(rt_queue_t Q, void const *bf) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <rt_enqueue+0x44>)
 8000d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7c:	60fb      	str	r3, [r7, #12]
	TickType_t to = rt_queue_def[Q].timeout_enq;
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <rt_enqueue+0x48>)
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	4413      	add	r3, r2
 8000d86:	3308      	adds	r3, #8
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60bb      	str	r3, [r7, #8]

	if (xQueueSendToBack(Qh, bf, to) == pdPASS) {
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	6839      	ldr	r1, [r7, #0]
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f007 ff4e 	bl	8008c34 <xQueueGenericSend>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d101      	bne.n	8000da2 <rt_enqueue+0x3a>
		return true;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <rt_enqueue+0x3c>
	}

	return false;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20003574 	.word	0x20003574
 8000db0:	0800b77c 	.word	0x0800b77c

08000db4 <rt_enqueue_ISR>:

bool rt_enqueue_ISR(rt_queue_t Q, void const *bf) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <rt_enqueue_ISR+0x3c>)
 8000dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc8:	60fb      	str	r3, [r7, #12]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
	if (xQueueSendToBackFromISR(Qh, bf, &xHigherPriorityTaskWoken) == pdPASS) {
 8000dce:	f107 0208 	add.w	r2, r7, #8
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	6839      	ldr	r1, [r7, #0]
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f008 f826 	bl	8008e28 <xQueueGenericSendFromISR>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d101      	bne.n	8000de6 <rt_enqueue_ISR+0x32>
		return true;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <rt_enqueue_ISR+0x34>
	}

	return false;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20003574 	.word	0x20003574

08000df4 <rt_dequeue>:

bool rt_dequeue(rt_queue_t Q, void *bf) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <rt_dequeue+0x44>)
 8000e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e08:	60fb      	str	r3, [r7, #12]
	TickType_t to = rt_queue_def[Q].timeout_deq;
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <rt_dequeue+0x48>)
 8000e0e:	011b      	lsls	r3, r3, #4
 8000e10:	4413      	add	r3, r2
 8000e12:	330c      	adds	r3, #12
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	60bb      	str	r3, [r7, #8]

	if (xQueueReceive(Qh, bf, to) == pdPASS) {
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	6839      	ldr	r1, [r7, #0]
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f008 f897 	bl	8008f50 <xQueueReceive>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d101      	bne.n	8000e2c <rt_dequeue+0x38>
		return true;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <rt_dequeue+0x3a>
	}

	return false;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20003574 	.word	0x20003574
 8000e3c:	0800b77c 	.word	0x0800b77c

08000e40 <rt_timer_start>:
	}

	return false;
}

bool rt_timer_start(rt_timer_t t, uint32_t timeout) {
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af02      	add	r7, sp, #8
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
	return xTimerStart(rt_timers[t], timeout);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <rt_timer_start+0x3c>)
 8000e50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000e54:	f008 fea6 	bl	8009ba4 <xTaskGetTickCount>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	9300      	str	r3, [sp, #0]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	2101      	movs	r1, #1
 8000e62:	4620      	mov	r0, r4
 8000e64:	f009 fc24 	bl	800a6b0 <xTimerGenericCommand>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bf14      	ite	ne
 8000e6e:	2301      	movne	r3, #1
 8000e70:	2300      	moveq	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd90      	pop	{r4, r7, pc}
 8000e7c:	2000355c 	.word	0x2000355c

08000e80 <rt_timer_start_ISR>:

bool rt_timer_start_ISR(rt_timer_t t, BaseType_t *pxHigherPriorityTaskWoken) {
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
	return xTimerStartFromISR(rt_timers[t], pxHigherPriorityTaskWoken);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <rt_timer_start_ISR+0x3c>)
 8000e90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000e94:	f008 fe94 	bl	8009bc0 <xTaskGetTickCountFromISR>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	2106      	movs	r1, #6
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f009 fc04 	bl	800a6b0 <xTimerGenericCommand>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	bf14      	ite	ne
 8000eae:	2301      	movne	r3, #1
 8000eb0:	2300      	moveq	r3, #0
 8000eb2:	b2db      	uxtb	r3, r3
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	2000355c 	.word	0x2000355c

08000ec0 <timer_BLE>:
// working all the time, checking if something is received or sending data to android device

/* ************************************************************************** */
// callback
/* ************************************************************************** */
void timer_BLE(TimerHandle_t xTimer) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, (uint8_t*) ble_pData, BLE_MAX_SIZE);
 8000ec8:	2203      	movs	r2, #3
 8000eca:	4904      	ldr	r1, [pc, #16]	; (8000edc <timer_BLE+0x1c>)
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <timer_BLE+0x20>)
 8000ece:	f006 fdf7 	bl	8007ac0 <HAL_UART_Receive_DMA>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20003580 	.word	0x20003580
 8000ee0:	200037e4 	.word	0x200037e4

08000ee4 <HAL_UART_RxCpltCallback>:

void HAL_UART_TxHalfCallback(UART_HandleTypeDef *huart) {
	__NOP();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
//	__NOP();
//	char ble_pData[BLE_MAX_SIZE];
//	memset(ble_pData, 1, BLE_MAX_SIZE);
//	ble_receive_data(ble_pData);
	xQueueBleData ble_queue = { 0 };
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]

	ble_queue.info = ble_received;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	733b      	strb	r3, [r7, #12]

	memcpy(&ble_queue.command, ble_pData, 1);
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_UART_RxCpltCallback+0x38>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	737b      	strb	r3, [r7, #13]
	memcpy(&ble_queue.valueReg1, ble_pData + 1, 1);
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_UART_RxCpltCallback+0x3c>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	73bb      	strb	r3, [r7, #14]
	memcpy(&ble_queue.valueReg2, ble_pData + 2, 1);
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_UART_RxCpltCallback+0x40>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	73fb      	strb	r3, [r7, #15]

	rt_enqueue_ISR(rt_queue_ble, &ble_queue);
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff ff51 	bl	8000db4 <rt_enqueue_ISR>

}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20003580 	.word	0x20003580
 8000f20:	20003581 	.word	0x20003581
 8000f24:	20003582 	.word	0x20003582

08000f28 <HAL_UART_ErrorCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart);/* {
 __NOP();
 }*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	__NOP();
 8000f30:	bf00      	nop
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <task_ble>:

/* ************************************************************************** */
// task
/* ************************************************************************** */
void task_ble(void *pvParameters) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

	bool status;
	xQueueBleData receivedBleData = { 0 };
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]

	for (;;) {

//		vTaskDelay(xDelay1000ms);

		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ff50 	bl	8000df4 <rt_dequeue>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (status) {
 8000f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f2      	beq.n	8000f48 <task_ble+0xc>
			if (receivedBleData.info == ble_received) {
 8000f62:	7b3b      	ldrb	r3, [r7, #12]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f040 8087 	bne.w	8001078 <task_ble+0x13c>
//				memcpy(ble_pData, receivedBleData.value, BLE_MAX_SIZE);

				switch (receivedBleData.command) {
 8000f6a:	7b7b      	ldrb	r3, [r7, #13]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	d87b      	bhi.n	800106a <task_ble+0x12e>
 8000f72:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <task_ble+0x3c>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000f9d 	.word	0x08000f9d
 8000f7c:	08000fa7 	.word	0x08000fa7
 8000f80:	08000fb1 	.word	0x08000fb1
 8000f84:	0800106b 	.word	0x0800106b
 8000f88:	0800106b 	.word	0x0800106b
 8000f8c:	0800106b 	.word	0x0800106b
 8000f90:	0800106b 	.word	0x0800106b
 8000f94:	0800106b 	.word	0x0800106b
 8000f98:	08001053 	.word	0x08001053
				case BLE_RECEIVED_DO_NOTHING:
					rt_evbit_set(rt_evgroup_state_machine,
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f7ff feac 	bl	8000cfc <rt_evbit_set>
							evgroup_state_m_do_nothing);
					break;
 8000fa4:	e069      	b.n	800107a <task_ble+0x13e>
				case BLE_RECEIVED_AUTO_MANUAL:
					rt_evbit_set(rt_evgroup_state_machine,
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f7ff fea7 	bl	8000cfc <rt_evbit_set>
							evgroup_state_m_auto_manual);
					break;
 8000fae:	e064      	b.n	800107a <task_ble+0x13e>
				case BLE_RECEIVED_MOVEMENT:
//					rt_evbit_set(rt_evgroup_state_machine,
//							evgroup_state_m_movement);

					left_engine = receivedBleData.valueReg1;
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					right_engine = receivedBleData.valueReg2;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					// 0	1	1	0	0	1	0	0
					// ^
					// ccw
					// --- |        PERCENTAGE       |

					int left = u2_to_decimal(left_engine);
 8000fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 faad 	bl	8001520 <u2_to_decimal>
 8000fc6:	61f8      	str	r0, [r7, #28]
					int right = u2_to_decimal(right_engine);
 8000fc8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 faa7 	bl	8001520 <u2_to_decimal>
 8000fd2:	61b8      	str	r0, [r7, #24]

					// left engine
					if (left < 0) {
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	da07      	bge.n	8000fea <task_ble+0xae>
						h_bridge_ccw_left();
 8000fda:	f7ff fbdd 	bl	8000798 <h_bridge_ccw_left>
						h_bridge_set_left_duty(-left);
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	425b      	negs	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fb68 	bl	80006b8 <h_bridge_set_left_duty>
 8000fe8:	e013      	b.n	8001012 <task_ble+0xd6>
					} else {
						// allowed to drive forward?
						uint32_t evbits = rt_evbit_check_any(
 8000fea:	2003      	movs	r0, #3
 8000fec:	f7ff fe50 	bl	8000c90 <rt_evbit_check_any>
 8000ff0:	6178      	str	r0, [r7, #20]
								rt_evgroup_ultrasound);
						if (evbits & (1 << evgroup_ultrasound_evbit_move)) {
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <task_ble+0xcc>
							// yes
							h_bridge_cw_left();
 8000ffc:	f7ff fba8 	bl	8000750 <h_bridge_cw_left>
							h_bridge_set_left_duty(left);
 8001000:	69f8      	ldr	r0, [r7, #28]
 8001002:	f7ff fb59 	bl	80006b8 <h_bridge_set_left_duty>
 8001006:	e004      	b.n	8001012 <task_ble+0xd6>
						} else {
							h_bridge_stop();
 8001008:	f7ff fc08 	bl	800081c <h_bridge_stop>
							h_bridge_set_left_duty(0);
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff fb53 	bl	80006b8 <h_bridge_set_left_duty>
						}

					}

					// right engine
					if (right < 0) {
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	2b00      	cmp	r3, #0
 8001016:	da07      	bge.n	8001028 <task_ble+0xec>
						h_bridge_ccw_right();
 8001018:	f7ff fbce 	bl	80007b8 <h_bridge_ccw_right>
						h_bridge_set_right_duty(-right);
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	425b      	negs	r3, r3
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fb6f 	bl	8000704 <h_bridge_set_right_duty>
						} else {
							h_bridge_stop();
							h_bridge_set_right_duty(0);
						}
					}
					break;
 8001026:	e028      	b.n	800107a <task_ble+0x13e>
						uint32_t evbits = rt_evbit_check_any(
 8001028:	2003      	movs	r0, #3
 800102a:	f7ff fe31 	bl	8000c90 <rt_evbit_check_any>
 800102e:	6138      	str	r0, [r7, #16]
						if (evbits & (1 << evgroup_ultrasound_evbit_move)) {
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <task_ble+0x10a>
							h_bridge_cw_right();
 800103a:	f7ff fb99 	bl	8000770 <h_bridge_cw_right>
							h_bridge_set_right_duty(right);
 800103e:	69b8      	ldr	r0, [r7, #24]
 8001040:	f7ff fb60 	bl	8000704 <h_bridge_set_right_duty>
					break;
 8001044:	e019      	b.n	800107a <task_ble+0x13e>
							h_bridge_stop();
 8001046:	f7ff fbe9 	bl	800081c <h_bridge_stop>
							h_bridge_set_right_duty(0);
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff fb5a 	bl	8000704 <h_bridge_set_right_duty>
					break;
 8001050:	e013      	b.n	800107a <task_ble+0x13e>

				case BLE_RECEIVED_ULTRASOUND_CONFIG:

					whichOne = receivedBleData.valueReg2;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	84bb      	strh	r3, [r7, #36]	; 0x24

					ULTRASOUND_PROPER_DISTANCE_u16 = ultrasound_select_proper_distance(whichOne);
 8001056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001058:	b2db      	uxtb	r3, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fcea 	bl	8000a34 <ultrasound_select_proper_distance>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <task_ble+0x168>)
 8001066:	801a      	strh	r2, [r3, #0]

					break;
 8001068:	e007      	b.n	800107a <task_ble+0x13e>
				default:
					// unknow -> free
					rt_dequeue(rt_queue_ble, &receivedBleData);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4619      	mov	r1, r3
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff febf 	bl	8000df4 <rt_dequeue>
					break;
 8001076:	e000      	b.n	800107a <task_ble+0x13e>
				}

			}
 8001078:	bf00      	nop

			if (receivedBleData.info == ble_transmit) {
 800107a:	7b3b      	ldrb	r3, [r7, #12]
 800107c:	2b01      	cmp	r3, #1
 800107e:	f47f af63 	bne.w	8000f48 <task_ble+0xc>

				memcpy(ble_pDataSend, &receivedBleData.command, 1);
 8001082:	7b7a      	ldrb	r2, [r7, #13]
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <task_ble+0x16c>)
 8001086:	701a      	strb	r2, [r3, #0]
				memcpy(ble_pDataSend + 1, &receivedBleData.valueReg1, 1);
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <task_ble+0x170>)
 800108a:	7bba      	ldrb	r2, [r7, #14]
 800108c:	701a      	strb	r2, [r3, #0]
				memcpy(ble_pDataSend + 2, &receivedBleData.valueReg2, 1);
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <task_ble+0x174>)
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&huart3, (uint8_t*) ble_pDataSend,
 8001094:	2302      	movs	r3, #2
 8001096:	2203      	movs	r2, #3
 8001098:	4903      	ldr	r1, [pc, #12]	; (80010a8 <task_ble+0x16c>)
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <task_ble+0x178>)
 800109c:	f006 fc76 	bl	800798c <HAL_UART_Transmit>
		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 80010a0:	e752      	b.n	8000f48 <task_ble+0xc>
 80010a2:	bf00      	nop
 80010a4:	20000000 	.word	0x20000000
 80010a8:	2000357c 	.word	0x2000357c
 80010ac:	2000357d 	.word	0x2000357d
 80010b0:	2000357e 	.word	0x2000357e
 80010b4:	200037e4 	.word	0x200037e4

080010b8 <timer_ultrasound_sensor_tigger>:
#include "tim.h"

/* ************************************************************************** */
// callback
/* ************************************************************************** */
void timer_ultrasound_sensor_tigger(TimerHandle_t xTimer) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

	// set gpio ultrasound trigger
	HAL_GPIO_WritePin(OUT_ULTRASOUND_TRIG_GPIO_Port, OUT_ULTRASOUND_TRIG_Pin, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	4804      	ldr	r0, [pc, #16]	; (80010d8 <timer_ultrasound_sensor_tigger+0x20>)
 80010c6:	f003 f851 	bl	800416c <HAL_GPIO_WritePin>

	// set timer to 10 us, and start!
	HAL_TIM_Base_Start_IT(&htim10);
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <timer_ultrasound_sensor_tigger+0x24>)
 80010cc:	f005 f970 	bl	80063b0 <HAL_TIM_Base_Start_IT>
	// also... in async is waiting for rising / falling edge (void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin))
	// if rising edge start timer 4 for counting up
	// if falling edge stop timer 4
	// calulcate difference
	// calulcate distance between obstacle and vehicle
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020800 	.word	0x40020800
 80010dc:	200036b0 	.word	0x200036b0

080010e0 <task_eyes>:

void task_eyes(void *pvParameters) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

	// start auto-reloaded timer for triggering ultrasound sensor
	rt_timer_start(rt_timer_ultrasound_sensor_trigger, 100);
 80010e8:	2164      	movs	r1, #100	; 0x64
 80010ea:	2001      	movs	r0, #1
 80010ec:	f7ff fea8 	bl	8000e40 <rt_timer_start>

	(void*) pvParameters;

	for (;;) {

		taskYIELD();
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <task_eyes+0x24>)
 80010f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	f3bf 8f4f 	dsb	sy
 80010fc:	f3bf 8f6f 	isb	sy
 8001100:	e7f6      	b.n	80010f0 <task_eyes+0x10>
 8001102:	bf00      	nop
 8001104:	e000ed04 	.word	0xe000ed04

08001108 <task_memory>:
//#include "task_memory.h"

#include "FreeRTOS.h"
#include "task.h"
#include "runtime.h"
void task_memory(void *pvParameters) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;
//	rt_timer_start(rt_timer_jakis_tam, 300);
	for (;;) {
//		vTaskDelay(pdMS_TO_TICKS(1000));
		taskYIELD();
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <task_memory+0x1c>)
 8001112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	f3bf 8f4f 	dsb	sy
 800111c:	f3bf 8f6f 	isb	sy
 8001120:	e7f6      	b.n	8001110 <task_memory+0x8>
 8001122:	bf00      	nop
 8001124:	e000ed04 	.word	0xe000ed04

08001128 <HAL_GPIO_EXTI_Callback>:
//bool ultrasound_done = false;
uint8_t pData[BLE_MAX_SIZE];
volatile uint16_t counter = 0;
extern char temperature_measurement[SIZE_OF_TEMPERATURE_MEASURMENT_ARRAY];
// interrupt pin callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
//	IRQ_ULTRASOUND_ECHO_Pin
	if (GPIO_Pin & IRQ_ULTRASOUND_ECHO_Pin) {
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d047      	beq.n	80011cc <HAL_GPIO_EXTI_Callback+0xa4>

		if (HAL_GPIO_ReadPin(IRQ_ULTRASOUND_ECHO_GPIO_Port,
 800113c:	2102      	movs	r1, #2
 800113e:	482d      	ldr	r0, [pc, #180]	; (80011f4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001140:	f002 ffee 	bl	8004120 <HAL_GPIO_ReadPin>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d006      	beq.n	8001158 <HAL_GPIO_EXTI_Callback+0x30>
		IRQ_ULTRASOUND_ECHO_Pin)) {
			TIM4->CNT = 0;
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <HAL_GPIO_EXTI_Callback+0xd0>)
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim4);
 8001150:	482a      	ldr	r0, [pc, #168]	; (80011fc <HAL_GPIO_EXTI_Callback+0xd4>)
 8001152:	f005 f861 	bl	8006218 <HAL_TIM_Base_Start>
 8001156:	e039      	b.n	80011cc <HAL_GPIO_EXTI_Callback+0xa4>
		} else {
			HAL_TIM_Base_Stop(&htim4);
 8001158:	4828      	ldr	r0, [pc, #160]	; (80011fc <HAL_GPIO_EXTI_Callback+0xd4>)
 800115a:	f005 f8c3 	bl	80062e4 <HAL_TIM_Base_Stop>
			uint16_t count = TIM4->CNT;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	b29b      	uxth	r3, r3
 8001164:	82fb      	strh	r3, [r7, #22]

			/// 	clear 	(if > 30 cm) 	==> 	allowed to drive forward
			/// 	set 	(if < 30 cm) 	==> 	forbidden to drive forward

//			uint16_t dis30 = (uint16_t) ULTRASOUND_PROPER_DISTANCE;
			if (count > ULTRASOUND_PROPER_DISTANCE_u16) {
 8001166:	8afa      	ldrh	r2, [r7, #22]
 8001168:	4b25      	ldr	r3, [pc, #148]	; (8001200 <HAL_GPIO_EXTI_Callback+0xd8>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	429a      	cmp	r2, r3
 8001170:	d904      	bls.n	800117c <HAL_GPIO_EXTI_Callback+0x54>
				rt_evbit_set_ISR(rt_evgroup_ultrasound,
 8001172:	2101      	movs	r1, #1
 8001174:	2003      	movs	r0, #3
 8001176:	f7ff fddb 	bl	8000d30 <rt_evbit_set_ISR>
 800117a:	e003      	b.n	8001184 <HAL_GPIO_EXTI_Callback+0x5c>
						evgroup_ultrasound_evbit_move);
			} else {
				rt_evbit_clear_ISR(rt_evgroup_ultrasound,
 800117c:	2101      	movs	r1, #1
 800117e:	2003      	movs	r0, #3
 8001180:	f7ff fda0 	bl	8000cc4 <rt_evbit_clear_ISR>
						evgroup_ultrasound_evbit_move);
			}

			if (counter > 8) {
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	2b08      	cmp	r3, #8
 800118c:	d917      	bls.n	80011be <HAL_GPIO_EXTI_Callback+0x96>
				counter = 0;
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001190:	2200      	movs	r2, #0
 8001192:	801a      	strh	r2, [r3, #0]
				xQueueBleData toBeTransmit_ble_pData = { 0 };
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
				toBeTransmit_ble_pData.info = ble_transmit;
 8001198:	2301      	movs	r3, #1
 800119a:	743b      	strb	r3, [r7, #16]
				toBeTransmit_ble_pData.command =
 800119c:	230a      	movs	r3, #10
 800119e:	747b      	strb	r3, [r7, #17]
						(uint8_t) BLE_TRANSMIT_ULTRASOUND_VALUE;
				toBeTransmit_ble_pData.valueReg1 = ((uint8_t*) &count)[0]; // LSB
 80011a0:	f107 0316 	add.w	r3, r7, #22
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	74bb      	strb	r3, [r7, #18]
				toBeTransmit_ble_pData.valueReg2 = ((uint8_t*) &count)[1]; // MSB
 80011a8:	f107 0316 	add.w	r3, r7, #22
 80011ac:	3301      	adds	r3, #1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	74fb      	strb	r3, [r7, #19]
				rt_enqueue_ISR(rt_queue_ble, &toBeTransmit_ble_pData);
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4619      	mov	r1, r3
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fdfb 	bl	8000db4 <rt_enqueue_ISR>
			}

			counter++;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_GPIO_EXTI_Callback+0xdc>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	3301      	adds	r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_GPIO_EXTI_Callback+0xdc>)
 80011ca:	801a      	strh	r2, [r3, #0]
		}

	}

//	BLE INTERRUPT -> SOMETHING IS RECEIVED
	if (GPIO_Pin & IRQ_BLE_Pin) {
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d009      	beq.n	80011ea <HAL_GPIO_EXTI_Callback+0xc2>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]

//		ble_receive_data(pData);
		pxHigherPriorityTaskWoken = pdTRUE;
 80011da:	2301      	movs	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
		rt_timer_start_ISR(rt_timer_BLE, &pxHigherPriorityTaskWoken);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	4619      	mov	r1, r3
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fe4b 	bl	8000e80 <rt_timer_start_ISR>
//			xTimerStartFromISR(rt_timers[T], pxHigherPriorityTaskWoken);
	}
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40000800 	.word	0x40000800
 80011fc:	20003674 	.word	0x20003674
 8001200:	20000000 	.word	0x20000000
 8001204:	20000030 	.word	0x20000030

08001208 <HAL_ADC_ConvCpltCallback>:
} selectADC_t;

volatile selectADC_t selectADC = adc_phototransitor_front;
// temperature measurement completed? enqueue bluetooth :-)
/// sending raw data of temperature from MCU to BLE queue
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	uint8_t raw_value = (uint8_t) HAL_ADC_GetValue(hadc);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f001 fd2b 	bl	8002c6c <HAL_ADC_GetValue>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
	xQueueBleData toBeTransmit_ble_pData = { 0 };
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
	toBeTransmit_ble_pData.info = ble_transmit;
 800121e:	2301      	movs	r3, #1
 8001220:	723b      	strb	r3, [r7, #8]
	toBeTransmit_ble_pData.valueReg1 = raw_value;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	72bb      	strb	r3, [r7, #10]
	toBeTransmit_ble_pData.valueReg2 = 0x00;
 8001226:	2300      	movs	r3, #0
 8001228:	72fb      	strb	r3, [r7, #11]

	switch (selectADC) {
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_ADC_ConvCpltCallback+0x50>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <HAL_ADC_ConvCpltCallback+0x32>
 8001234:	2b01      	cmp	r3, #1
 8001236:	d003      	beq.n	8001240 <HAL_ADC_ConvCpltCallback+0x38>
	case adc_phototransistor_back:
		toBeTransmit_ble_pData.command =
		BLE_TRANSMIT_PHOTOTRANSISTOR_BACK_VALUE;
		break;
	default:
		return;
 8001238:	e00b      	b.n	8001252 <HAL_ADC_ConvCpltCallback+0x4a>
		toBeTransmit_ble_pData.command =
 800123a:	230b      	movs	r3, #11
 800123c:	727b      	strb	r3, [r7, #9]
		break;
 800123e:	e002      	b.n	8001246 <HAL_ADC_ConvCpltCallback+0x3e>
		toBeTransmit_ble_pData.command =
 8001240:	230c      	movs	r3, #12
 8001242:	727b      	strb	r3, [r7, #9]
		break;
 8001244:	bf00      	nop
	}

	rt_enqueue_ISR(rt_queue_ble, &toBeTransmit_ble_pData);
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	4619      	mov	r1, r3
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff fdb1 	bl	8000db4 <rt_enqueue_ISR>
}
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000032 	.word	0x20000032

0800125c <task_sensors>:

void task_sensors(void *pvParameters) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b08e      	sub	sp, #56	; 0x38
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

	QMC5883L_Initialize(MODE_CONTROL_CONTINUOUS, OUTPUT_DATA_RATE_200HZ,
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	2200      	movs	r2, #0
 8001268:	210c      	movs	r1, #12
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff fb61 	bl	8000932 <QMC5883L_Initialize>
			FULL_SCALE_2G, OVER_SAMPLE_RATIO_128);
	QMC5883L_InterruptConfig(INTERRUPT_DISABLE);
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fb83 	bl	800097c <QMC5883L_InterruptConfig>

//Mode Register
//Continuous-Measurement Mode
	QMC5883L_Write_Reg(0x02, 0x00);
 8001276:	2100      	movs	r1, #0
 8001278:	2002      	movs	r0, #2
 800127a:	f7ff fb07 	bl	800088c <QMC5883L_Write_Reg>
//	uint8_t whereADC = 0;

	for (;;) {

		int16_t X = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	867b      	strh	r3, [r7, #50]	; 0x32
		int16_t Y = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	863b      	strh	r3, [r7, #48]	; 0x30
		int16_t Z = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	85fb      	strh	r3, [r7, #46]	; 0x2e

		static uint32_t PreviousTicksMagnetometer = 0U;
		static uint32_t PreviousTicksADC = 0U;
		static uint32_t PreviousTicksGPIOPooling = 0U;
		uint32_t CurrentTicks = (uint32_t) xTaskGetTickCount();
 800128a:	f008 fc8b 	bl	8009ba4 <xTaskGetTickCount>
 800128e:	6378      	str	r0, [r7, #52]	; 0x34
		if ((CurrentTicks - PreviousTicksMagnetometer) >= 500u) { // 5 ms
 8001290:	4b79      	ldr	r3, [pc, #484]	; (8001478 <task_sensors+0x21c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800129c:	d35d      	bcc.n	800135a <task_sensors+0xfe>
			PreviousTicksMagnetometer = (uint32_t) xTaskGetTickCount();
 800129e:	f008 fc81 	bl	8009ba4 <xTaskGetTickCount>
 80012a2:	4602      	mov	r2, r0
 80012a4:	4b74      	ldr	r3, [pc, #464]	; (8001478 <task_sensors+0x21c>)
 80012a6:	601a      	str	r2, [r3, #0]
			QMC5883L_Read_Data(&X, &Y, &Z);
 80012a8:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80012ac:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80012b0:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fb05 	bl	80008c4 <QMC5883L_Read_Data>
//			BLE_TRANSMIT_X
//			BLE_TRANSMIT_Y
//			BLE_TRANSMIT_Z

			QMC5883L_Scale(&X, &Y, &Z);
 80012ba:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80012be:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80012c2:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fb6e 	bl	80009a8 <QMC5883L_Scale>

			xQueueBleData toBeTransmit_ble_pData = { 0 };
 80012cc:	2300      	movs	r3, #0
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
			toBeTransmit_ble_pData.info = ble_transmit;
 80012d0:	2301      	movs	r3, #1
 80012d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			toBeTransmit_ble_pData.command = BLE_TRANSMIT_X;
 80012d6:	2305      	movs	r3, #5
 80012d8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

			type_casting.uint16[0] = X; //int16_to_u2(X);
 80012dc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b66      	ldr	r3, [pc, #408]	; (800147c <task_sensors+0x220>)
 80012e4:	801a      	strh	r2, [r3, #0]
			toBeTransmit_ble_pData.valueReg1 = type_casting.uint8[0]; //((uint8_t*) &X)[0]; // MSB // 1111 1111
 80012e6:	4b65      	ldr	r3, [pc, #404]	; (800147c <task_sensors+0x220>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			toBeTransmit_ble_pData.valueReg2 = type_casting.uint8[1]; //((uint8_t*) &X)[1]; // LSB 1010 1010
 80012ee:	4b63      	ldr	r3, [pc, #396]	; (800147c <task_sensors+0x220>)
 80012f0:	785b      	ldrb	r3, [r3, #1]
 80012f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			rt_enqueue(rt_queue_ble, &toBeTransmit_ble_pData);
 80012f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012fa:	4619      	mov	r1, r3
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff fd33 	bl	8000d68 <rt_enqueue>

			toBeTransmit_ble_pData.command = BLE_TRANSMIT_Y;
 8001302:	2306      	movs	r3, #6
 8001304:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			type_casting.uint16[0] = Y; //int16_to_u2(Y);
 8001308:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800130c:	b29a      	uxth	r2, r3
 800130e:	4b5b      	ldr	r3, [pc, #364]	; (800147c <task_sensors+0x220>)
 8001310:	801a      	strh	r2, [r3, #0]
			toBeTransmit_ble_pData.valueReg1 = type_casting.uint8[0];
 8001312:	4b5a      	ldr	r3, [pc, #360]	; (800147c <task_sensors+0x220>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			toBeTransmit_ble_pData.valueReg2 = type_casting.uint8[1];
 800131a:	4b58      	ldr	r3, [pc, #352]	; (800147c <task_sensors+0x220>)
 800131c:	785b      	ldrb	r3, [r3, #1]
 800131e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			rt_enqueue(rt_queue_ble, &toBeTransmit_ble_pData);
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	4619      	mov	r1, r3
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff fd1d 	bl	8000d68 <rt_enqueue>

			toBeTransmit_ble_pData.command = BLE_TRANSMIT_Z;
 800132e:	2307      	movs	r3, #7
 8001330:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			type_casting.uint16[0] = Z; //int16_to_u2(Z);
 8001334:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001338:	b29a      	uxth	r2, r3
 800133a:	4b50      	ldr	r3, [pc, #320]	; (800147c <task_sensors+0x220>)
 800133c:	801a      	strh	r2, [r3, #0]
			toBeTransmit_ble_pData.valueReg1 = type_casting.uint8[0];
 800133e:	4b4f      	ldr	r3, [pc, #316]	; (800147c <task_sensors+0x220>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			toBeTransmit_ble_pData.valueReg2 = type_casting.uint8[1];
 8001346:	4b4d      	ldr	r3, [pc, #308]	; (800147c <task_sensors+0x220>)
 8001348:	785b      	ldrb	r3, [r3, #1]
 800134a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			rt_enqueue(rt_queue_ble, &toBeTransmit_ble_pData);
 800134e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001352:	4619      	mov	r1, r3
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff fd07 	bl	8000d68 <rt_enqueue>

		}

		if ((CurrentTicks - PreviousTicksADC) >= 200u) { // 200 ms
 800135a:	4b49      	ldr	r3, [pc, #292]	; (8001480 <task_sensors+0x224>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2bc7      	cmp	r3, #199	; 0xc7
 8001364:	d97f      	bls.n	8001466 <task_sensors+0x20a>
			PreviousTicksADC = (uint32_t) xTaskGetTickCount();
 8001366:	f008 fc1d 	bl	8009ba4 <xTaskGetTickCount>
 800136a:	4602      	mov	r2, r0
 800136c:	4b44      	ldr	r3, [pc, #272]	; (8001480 <task_sensors+0x224>)
 800136e:	601a      	str	r2, [r3, #0]

			if (selectADC == adc_phototransitor_front) {
 8001370:	4b44      	ldr	r3, [pc, #272]	; (8001484 <task_sensors+0x228>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d11c      	bne.n	80013b4 <task_sensors+0x158>
				ADC_ChannelConfTypeDef sConfig = { 0 };
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
				/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
				 */
				sConfig.Channel = ADC_CHANNEL_1; // photo back1
 8001386:	2301      	movs	r3, #1
 8001388:	61fb      	str	r3, [r7, #28]
				//	sConfig.Channel = ADC_CHANNEL_7; // photo front
				sConfig.Rank = ADC_REGULAR_RANK_1;
 800138a:	2301      	movs	r3, #1
 800138c:	623b      	str	r3, [r7, #32]
				sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
				if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	483b      	ldr	r0, [pc, #236]	; (8001488 <task_sensors+0x22c>)
 800139a:	f001 fdbd 	bl	8002f18 <HAL_ADC_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <task_sensors+0x14c>
					Error_Handler();
 80013a4:	f000 fc26 	bl	8001bf4 <Error_Handler>
				}
				HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	4836      	ldr	r0, [pc, #216]	; (8001488 <task_sensors+0x22c>)
 80013b0:	f001 fdb2 	bl	8002f18 <HAL_ADC_ConfigChannel>
			}

			if ((CurrentTicks - PreviousTicksGPIOPooling) >= 200u) {
 80013b4:	4b35      	ldr	r3, [pc, #212]	; (800148c <task_sensors+0x230>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2bc7      	cmp	r3, #199	; 0xc7
 80013be:	d91e      	bls.n	80013fe <task_sensors+0x1a2>
				PreviousTicksGPIOPooling = (uint32_t) xTaskGetTickCount();
 80013c0:	f008 fbf0 	bl	8009ba4 <xTaskGetTickCount>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <task_sensors+0x230>)
 80013c8:	601a      	str	r2, [r3, #0]

				xQueueBleData toBeTransmit_ble_pData = { 0 };
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
				toBeTransmit_ble_pData.info = ble_transmit;
 80013ce:	2301      	movs	r3, #1
 80013d0:	763b      	strb	r3, [r7, #24]
				toBeTransmit_ble_pData.command = BLE_TRANSMIT_HALL_FRONT_VALUE;
 80013d2:	230d      	movs	r3, #13
 80013d4:	767b      	strb	r3, [r7, #25]
				toBeTransmit_ble_pData.valueReg2 = 0x00;
 80013d6:	2300      	movs	r3, #0
 80013d8:	76fb      	strb	r3, [r7, #27]
				if (HAL_GPIO_ReadPin(IN_HALL_FRONT_GPIO_Port,
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	482c      	ldr	r0, [pc, #176]	; (8001490 <task_sensors+0x234>)
 80013de:	f002 fe9f 	bl	8004120 <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <task_sensors+0x192>
				IN_HALL_FRONT_Pin)) {
					toBeTransmit_ble_pData.valueReg1 = 0x00;
 80013e8:	2300      	movs	r3, #0
 80013ea:	76bb      	strb	r3, [r7, #26]
 80013ec:	e001      	b.n	80013f2 <task_sensors+0x196>
				} else {
					toBeTransmit_ble_pData.valueReg1 = 0x01;
 80013ee:	2301      	movs	r3, #1
 80013f0:	76bb      	strb	r3, [r7, #26]
				}

				rt_enqueue(rt_queue_ble, &toBeTransmit_ble_pData);
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	4619      	mov	r1, r3
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff fcb5 	bl	8000d68 <rt_enqueue>
			}

			if (selectADC == adc_phototransistor_back) {
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <task_sensors+0x228>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b01      	cmp	r3, #1
 8001406:	d11c      	bne.n	8001442 <task_sensors+0x1e6>
				ADC_ChannelConfTypeDef sConfig = { 0 };
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
				/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
				 */
//					sConfig.Channel = ADC_CHANNEL_1; // photo back1
				sConfig.Channel = ADC_CHANNEL_7; // photo front
 8001414:	2307      	movs	r3, #7
 8001416:	60fb      	str	r3, [r7, #12]
				sConfig.Rank = ADC_REGULAR_RANK_1;
 8001418:	2301      	movs	r3, #1
 800141a:	613b      	str	r3, [r7, #16]
				sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
				if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	4818      	ldr	r0, [pc, #96]	; (8001488 <task_sensors+0x22c>)
 8001428:	f001 fd76 	bl	8002f18 <HAL_ADC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <task_sensors+0x1da>
					Error_Handler();
 8001432:	f000 fbdf 	bl	8001bf4 <Error_Handler>
				}
				HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	4619      	mov	r1, r3
 800143c:	4812      	ldr	r0, [pc, #72]	; (8001488 <task_sensors+0x22c>)
 800143e:	f001 fd6b 	bl	8002f18 <HAL_ADC_ConfigChannel>
			}

			HAL_ADC_Start_IT(&hadc);
 8001442:	4811      	ldr	r0, [pc, #68]	; (8001488 <task_sensors+0x22c>)
 8001444:	f001 fb9a 	bl	8002b7c <HAL_ADC_Start_IT>
			selectADC++;
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <task_sensors+0x228>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	3301      	adds	r3, #1
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <task_sensors+0x228>)
 8001454:	701a      	strb	r2, [r3, #0]
			if (selectADC == adc_N) {
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <task_sensors+0x228>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d102      	bne.n	8001466 <task_sensors+0x20a>
				selectADC = 0;
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <task_sensors+0x228>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
			}
		}
		taskYIELD();
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <task_sensors+0x238>)
 8001468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	f3bf 8f4f 	dsb	sy
 8001472:	f3bf 8f6f 	isb	sy
	for (;;) {
 8001476:	e702      	b.n	800127e <task_sensors+0x22>
 8001478:	20000034 	.word	0x20000034
 800147c:	20003588 	.word	0x20003588
 8001480:	20000038 	.word	0x20000038
 8001484:	20000032 	.word	0x20000032
 8001488:	2000358c 	.word	0x2000358c
 800148c:	2000003c 	.word	0x2000003c
 8001490:	40020800 	.word	0x40020800
 8001494:	e000ed04 	.word	0xe000ed04

08001498 <task_state_machine>:
#include "runtime.h"
#include "state_machine.h"
#include "h_bridge.h"
#include "bluetooth_le.h"

void task_state_machine(void *pvParameters) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	uint32_t evgroup = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
	bool tasks_disabled = false;
 80014a4:	2300      	movs	r3, #0
 80014a6:	72fb      	strb	r3, [r7, #11]
//	xQueueBleData receivedBleData = { 0 };

	for (;;) {

		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff fbd5 	bl	8000c58 <rt_evbitwait_any>
 80014ae:	60f8      	str	r0, [r7, #12]

		if (evgroup & (1 << evgroup_state_m_do_nothing)) {
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d007      	beq.n	80014ca <task_state_machine+0x32>

			h_bridge_coast();
 80014ba:	f7ff f991 	bl	80007e0 <h_bridge_coast>
			h_bridge_set_left_duty(0);
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff f8fa 	bl	80006b8 <h_bridge_set_left_duty>
			h_bridge_set_right_duty(0);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff f91d 	bl	8000704 <h_bridge_set_right_duty>
		}
		if (evgroup & (1 << evgroup_state_m_auto_manual)) {
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0e9      	beq.n	80014a8 <task_state_machine+0x10>
			if (tasks_disabled) {
 80014d4:	7afb      	ldrb	r3, [r7, #11]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00f      	beq.n	80014fa <task_state_machine+0x62>
				vTaskResume(rt_tasks[rt_task_eyes]);
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <task_state_machine+0x84>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	f008 f9f4 	bl	80098cc <vTaskResume>
				vTaskResume(rt_tasks[rt_task_memory]);
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <task_state_machine+0x84>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f008 f9ef 	bl	80098cc <vTaskResume>
				vTaskResume(rt_tasks[rt_task_sensors]);
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <task_state_machine+0x84>)
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f008 f9ea 	bl	80098cc <vTaskResume>
 80014f8:	e7d6      	b.n	80014a8 <task_state_machine+0x10>
			} else {
				vTaskSuspend(rt_tasks[rt_task_eyes]);
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <task_state_machine+0x84>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	f008 f936 	bl	8009770 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_memory]);
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <task_state_machine+0x84>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	4618      	mov	r0, r3
 800150a:	f008 f931 	bl	8009770 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_sensors]);
 800150e:	4b03      	ldr	r3, [pc, #12]	; (800151c <task_state_machine+0x84>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	4618      	mov	r0, r3
 8001514:	f008 f92c 	bl	8009770 <vTaskSuspend>
		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8001518:	e7c6      	b.n	80014a8 <task_state_machine+0x10>
 800151a:	bf00      	nop
 800151c:	20003548 	.word	0x20003548

08001520 <u2_to_decimal>:

#include "utility.h"
#include <math.h>
#include "stdlib.h"

int u2_to_decimal(uint8_t u2) {
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]

	char value = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]

	if (u2 & (1 << 7)) {
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	da0a      	bge.n	800154c <u2_to_decimal+0x2c>

		value = u2;
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	73fb      	strb	r3, [r7, #15]
		value = ~value;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	43db      	mvns	r3, r3
 800153e:	73fb      	strb	r3, [r7, #15]
		value += 1;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	3301      	adds	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
		return (int) -value;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	425b      	negs	r3, r3
 800154a:	e002      	b.n	8001552 <u2_to_decimal+0x32>

	} else {
		value = u2;
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	73fb      	strb	r3, [r7, #15]
		return (int) value;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <MX_ADC_Init+0xac>)
 800156e:	4a27      	ldr	r2, [pc, #156]	; (800160c <MX_ADC_Init+0xb0>)
 8001570:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001572:	4b25      	ldr	r3, [pc, #148]	; (8001608 <MX_ADC_Init+0xac>)
 8001574:	2200      	movs	r2, #0
 8001576:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <MX_ADC_Init+0xac>)
 800157a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800157e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <MX_ADC_Init+0xac>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <MX_ADC_Init+0xac>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800158c:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <MX_ADC_Init+0xac>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_ADC_Init+0xac>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <MX_ADC_Init+0xac>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_ADC_Init+0xac>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_ADC_Init+0xac>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <MX_ADC_Init+0xac>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <MX_ADC_Init+0xac>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_ADC_Init+0xac>)
 80015bc:	2210      	movs	r2, #16
 80015be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_ADC_Init+0xac>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <MX_ADC_Init+0xac>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015ce:	480e      	ldr	r0, [pc, #56]	; (8001608 <MX_ADC_Init+0xac>)
 80015d0:	f001 f830 	bl	8002634 <HAL_ADC_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_ADC_Init+0x82>
  {
    Error_Handler();
 80015da:	f000 fb0b 	bl	8001bf4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015de:	2301      	movs	r3, #1
 80015e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015e2:	2301      	movs	r3, #1
 80015e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <MX_ADC_Init+0xac>)
 80015f0:	f001 fc92 	bl	8002f18 <HAL_ADC_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 80015fa:	f000 fafb 	bl	8001bf4 <Error_Handler>
  }

}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2000358c 	.word	0x2000358c
 800160c:	40012400 	.word	0x40012400

08001610 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a31      	ldr	r2, [pc, #196]	; (80016f4 <HAL_ADC_MspInit+0xe4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d15c      	bne.n	80016ec <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001632:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <HAL_ADC_MspInit+0xe8>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a30      	ldr	r2, [pc, #192]	; (80016f8 <HAL_ADC_MspInit+0xe8>)
 8001638:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163c:	6213      	str	r3, [r2, #32]
 800163e:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <HAL_ADC_MspInit+0xe8>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_ADC_MspInit+0xe8>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	4a2a      	ldr	r2, [pc, #168]	; (80016f8 <HAL_ADC_MspInit+0xe8>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	61d3      	str	r3, [r2, #28]
 8001656:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <HAL_ADC_MspInit+0xe8>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <HAL_ADC_MspInit+0xe8>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4a24      	ldr	r2, [pc, #144]	; (80016f8 <HAL_ADC_MspInit+0xe8>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	61d3      	str	r3, [r2, #28]
 800166e:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <HAL_ADC_MspInit+0xe8>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <HAL_ADC_MspInit+0xe8>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	4a1e      	ldr	r2, [pc, #120]	; (80016f8 <HAL_ADC_MspInit+0xe8>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	61d3      	str	r3, [r2, #28]
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <HAL_ADC_MspInit+0xe8>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 8001692:	2301      	movs	r3, #1
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001696:	2303      	movs	r3, #3
 8001698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4815      	ldr	r0, [pc, #84]	; (80016fc <HAL_ADC_MspInit+0xec>)
 80016a6:	f002 fac9 	bl	8003c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 80016aa:	2386      	movs	r3, #134	; 0x86
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4810      	ldr	r0, [pc, #64]	; (8001700 <HAL_ADC_MspInit+0xf0>)
 80016be:	f002 fabd 	bl	8003c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 80016c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c8:	2303      	movs	r3, #3
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <HAL_ADC_MspInit+0xf4>)
 80016d8:	f002 fab0 	bl	8003c3c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2105      	movs	r1, #5
 80016e0:	2012      	movs	r0, #18
 80016e2:	f001 ffdd 	bl	80036a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80016e6:	2012      	movs	r0, #18
 80016e8:	f002 f806 	bl	80036f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80016ec:	bf00      	nop
 80016ee:	3730      	adds	r7, #48	; 0x30
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40012400 	.word	0x40012400
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020800 	.word	0x40020800
 8001700:	40020000 	.word	0x40020000
 8001704:	40020400 	.word	0x40020400

08001708 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <MX_DMA_Init+0x48>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <MX_DMA_Init+0x48>)
 8001714:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001718:	61d3      	str	r3, [r2, #28]
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <MX_DMA_Init+0x48>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 6, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2106      	movs	r1, #6
 800172a:	200c      	movs	r0, #12
 800172c:	f001 ffb8 	bl	80036a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001730:	200c      	movs	r0, #12
 8001732:	f001 ffe1 	bl	80036f8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2105      	movs	r1, #5
 800173a:	200d      	movs	r0, #13
 800173c:	f001 ffb0 	bl	80036a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001740:	200d      	movs	r0, #13
 8001742:	f001 ffd9 	bl	80036f8 <HAL_NVIC_EnableIRQ>

}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800179c:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <MX_FREERTOS_Init+0x1c>)
 800179e:	2100      	movs	r1, #0
 80017a0:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_FREERTOS_Init+0x20>)
 80017a2:	f006 fd4d 	bl	8008240 <osThreadNew>
 80017a6:	4602      	mov	r2, r0
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <MX_FREERTOS_Init+0x24>)
 80017aa:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 80017ac:	f7ff f9aa 	bl	8000b04 <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	0800b7bc 	.word	0x0800b7bc
 80017b8:	080017c1 	.word	0x080017c1
 80017bc:	200035e0 	.word	0x200035e0

080017c0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f006 fde3 	bl	8008394 <osDelay>
 80017ce:	e7fb      	b.n	80017c8 <StartDefaultTask+0x8>

080017d0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	4b78      	ldr	r3, [pc, #480]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a77      	ldr	r2, [pc, #476]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	61d3      	str	r3, [r2, #28]
 80017f2:	4b75      	ldr	r3, [pc, #468]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fe:	4b72      	ldr	r3, [pc, #456]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a71      	ldr	r2, [pc, #452]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 8001804:	f043 0320 	orr.w	r3, r3, #32
 8001808:	61d3      	str	r3, [r2, #28]
 800180a:	4b6f      	ldr	r3, [pc, #444]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f003 0320 	and.w	r3, r3, #32
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	4b6c      	ldr	r3, [pc, #432]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a6b      	ldr	r2, [pc, #428]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b69      	ldr	r3, [pc, #420]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	4b66      	ldr	r3, [pc, #408]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	4a65      	ldr	r2, [pc, #404]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	61d3      	str	r3, [r2, #28]
 800183a:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001846:	4b60      	ldr	r3, [pc, #384]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a5f      	ldr	r2, [pc, #380]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b5d      	ldr	r3, [pc, #372]	; (80019c8 <MX_GPIO_Init+0x1f8>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 800185e:	2200      	movs	r2, #0
 8001860:	f640 616e 	movw	r1, #3694	; 0xe6e
 8001864:	4859      	ldr	r0, [pc, #356]	; (80019cc <MX_GPIO_Init+0x1fc>)
 8001866:	f002 fc81 	bl	800416c <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 800186a:	2200      	movs	r2, #0
 800186c:	f248 7108 	movw	r1, #34568	; 0x8708
 8001870:	4857      	ldr	r0, [pc, #348]	; (80019d0 <MX_GPIO_Init+0x200>)
 8001872:	f002 fc7b 	bl	800416c <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 8001876:	2201      	movs	r2, #1
 8001878:	2110      	movs	r1, #16
 800187a:	4854      	ldr	r0, [pc, #336]	; (80019cc <MX_GPIO_Init+0x1fc>)
 800187c:	f002 fc76 	bl	800416c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 8001880:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001886:	2303      	movs	r3, #3
 8001888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	484d      	ldr	r0, [pc, #308]	; (80019cc <MX_GPIO_Init+0x1fc>)
 8001896:	f002 f9d1 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 800189a:	f640 637e 	movw	r3, #3710	; 0xe7e
 800189e:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_ENGINE_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4846      	ldr	r0, [pc, #280]	; (80019cc <MX_GPIO_Init+0x1fc>)
 80018b4:	f002 f9c2 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 80018b8:	f248 7308 	movw	r3, #34568	; 0x8708
 80018bc:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	483f      	ldr	r0, [pc, #252]	; (80019d0 <MX_GPIO_Init+0x200>)
 80018d2:	f002 f9b3 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 80018d6:	f241 0370 	movw	r3, #4208	; 0x1070
 80018da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018dc:	2303      	movs	r3, #3
 80018de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	4839      	ldr	r0, [pc, #228]	; (80019d0 <MX_GPIO_Init+0x200>)
 80018ec:	f002 f9a6 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin;
 80018f0:	2301      	movs	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f4:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <MX_GPIO_Init+0x204>)
 80018f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_BLE_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	4835      	ldr	r0, [pc, #212]	; (80019d8 <MX_GPIO_Init+0x208>)
 8001904:	f002 f99a 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_ULTRASOUND_ECHO_Pin;
 8001908:	2302      	movs	r3, #2
 800190a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800190c:	4b33      	ldr	r3, [pc, #204]	; (80019dc <MX_GPIO_Init+0x20c>)
 800190e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_ULTRASOUND_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	482f      	ldr	r0, [pc, #188]	; (80019d8 <MX_GPIO_Init+0x208>)
 800191c:	f002 f98e 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 8001920:	f242 333c 	movw	r3, #9020	; 0x233c
 8001924:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001926:	2303      	movs	r3, #3
 8001928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	4828      	ldr	r0, [pc, #160]	; (80019d8 <MX_GPIO_Init+0x208>)
 8001936:	f002 f981 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_LEFT_Pin;
 800193a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001940:	2300      	movs	r3, #0
 8001942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4822      	ldr	r0, [pc, #136]	; (80019d8 <MX_GPIO_Init+0x208>)
 8001950:	f002 f974 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	4819      	ldr	r0, [pc, #100]	; (80019cc <MX_GPIO_Init+0x1fc>)
 8001968:	f002 f968 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 800196c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4813      	ldr	r0, [pc, #76]	; (80019d0 <MX_GPIO_Init+0x200>)
 8001982:	f002 f95b 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001986:	2304      	movs	r3, #4
 8001988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198a:	2303      	movs	r3, #3
 800198c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4811      	ldr	r0, [pc, #68]	; (80019e0 <MX_GPIO_Init+0x210>)
 800199a:	f002 f94f 	bl	8003c3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2105      	movs	r1, #5
 80019a2:	2006      	movs	r0, #6
 80019a4:	f001 fe7c 	bl	80036a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019a8:	2006      	movs	r0, #6
 80019aa:	f001 fea5 	bl	80036f8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2105      	movs	r1, #5
 80019b2:	2007      	movs	r0, #7
 80019b4:	f001 fe74 	bl	80036a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019b8:	2007      	movs	r0, #7
 80019ba:	f001 fe9d 	bl	80036f8 <HAL_NVIC_EnableIRQ>

}
 80019be:	bf00      	nop
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	10110000 	.word	0x10110000
 80019d8:	40020400 	.word	0x40020400
 80019dc:	10310000 	.word	0x10310000
 80019e0:	40020c00 	.word	0x40020c00

080019e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019ea:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <MX_I2C1_Init+0x54>)
 80019ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019f0:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <MX_I2C1_Init+0x58>)
 80019f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a22:	f002 fbed 	bl	8004200 <HAL_I2C_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a2c:	f000 f8e2 	bl	8001bf4 <Error_Handler>
  }

}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	200035e4 	.word	0x200035e4
 8001a38:	40005400 	.word	0x40005400
 8001a3c:	000186a0 	.word	0x000186a0

08001a40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a17      	ldr	r2, [pc, #92]	; (8001abc <HAL_I2C_MspInit+0x7c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d127      	bne.n	8001ab2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <HAL_I2C_MspInit+0x80>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a16      	ldr	r2, [pc, #88]	; (8001ac0 <HAL_I2C_MspInit+0x80>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <HAL_I2C_MspInit+0x80>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a7a:	23c0      	movs	r3, #192	; 0xc0
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a7e:	2312      	movs	r3, #18
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <HAL_I2C_MspInit+0x84>)
 8001a96:	f002 f8d1 	bl	8003c3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_I2C_MspInit+0x80>)
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	4a08      	ldr	r2, [pc, #32]	; (8001ac0 <HAL_I2C_MspInit+0x80>)
 8001aa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aa4:	6253      	str	r3, [r2, #36]	; 0x24
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_I2C_MspInit+0x80>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3728      	adds	r7, #40	; 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020400 	.word	0x40020400

08001ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001acc:	f000 fd7d 	bl	80025ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad0:	f000 f820 	bl	8001b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad4:	f7ff fe7c 	bl	80017d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ad8:	f7ff fe16 	bl	8001708 <MX_DMA_Init>
  MX_ADC_Init();
 8001adc:	f7ff fd3e 	bl	800155c <MX_ADC_Init>
  MX_I2C1_Init();
 8001ae0:	f7ff ff80 	bl	80019e4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001ae4:	f000 f9ac 	bl	8001e40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ae8:	f000 fa1e 	bl	8001f28 <MX_TIM3_Init>
  MX_TIM9_Init();
 8001aec:	f000 fade 	bl	80020ac <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8001af0:	f000 fc82 	bl	80023f8 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001af4:	f000 fa8c 	bl	8002010 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001af8:	f000 fb4c 	bl	8002194 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
	device_init();
 8001afc:	f7fe ffee 	bl	8000adc <device_init>
	h_bridge_init();
 8001b00:	f7fe fdc2 	bl	8000688 <h_bridge_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001b04:	f006 fb36 	bl	8008174 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8001b08:	f7ff fe46 	bl	8001798 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001b0c:	f006 fb64 	bl	80081d8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001b10:	e7fe      	b.n	8001b10 <main+0x48>
	...

08001b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b092      	sub	sp, #72	; 0x48
 8001b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	2234      	movs	r2, #52	; 0x34
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f009 fc8d 	bl	800b442 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b28:	463b      	mov	r3, r7
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b36:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <SystemClock_Config+0x9c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <SystemClock_Config+0x9c>)
 8001b40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b44:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001b46:	2303      	movs	r3, #3
 8001b48:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b52:	2310      	movs	r3, #16
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b56:	2302      	movs	r3, #2
 8001b58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001b60:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001b64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 fb41 	bl	80051f8 <HAL_RCC_OscConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001b7c:	f000 f83a 	bl	8001bf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b80:	230f      	movs	r3, #15
 8001b82:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b84:	2303      	movs	r3, #3
 8001b86:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b94:	463b      	mov	r3, r7
 8001b96:	2101      	movs	r1, #1
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 ffab 	bl	8005af4 <HAL_RCC_ClockConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ba4:	f000 f826 	bl	8001bf4 <Error_Handler>
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3748      	adds	r7, #72	; 0x48
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40007000 	.word	0x40007000

08001bb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bc6:	f000 fd19 	bl	80025fc <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */

  // also the code for others timers if overflow :)

  // when tim10
  if(htim->Instance == TIM10) {
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d104      	bne.n	8001bde <HAL_TIM_PeriodElapsedCallback+0x2a>
	  // clear pin ultrasound trigger
	  HAL_GPIO_WritePin(OUT_ULTRASOUND_TRIG_GPIO_Port, OUT_ULTRASOUND_TRIG_Pin, GPIO_PIN_RESET);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2140      	movs	r1, #64	; 0x40
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001bda:	f002 fac7 	bl	800416c <HAL_GPIO_WritePin>
	  // and this is it
  }

  /* USER CODE END Callback 1 */
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40000c00 	.word	0x40000c00
 8001bec:	40010c00 	.word	0x40010c00
 8001bf0:	40020800 	.word	0x40020800

08001bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_MspInit+0x64>)
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <HAL_MspInit+0x64>)
 8001c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c24:	6253      	str	r3, [r2, #36]	; 0x24
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_MspInit+0x64>)
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_MspInit+0x64>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <HAL_MspInit+0x64>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_MspInit+0x64>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_MspInit+0x64>)
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_MspInit+0x64>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6253      	str	r3, [r2, #36]	; 0x24
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_MspInit+0x64>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	210f      	movs	r1, #15
 8001c66:	f06f 0001 	mvn.w	r0, #1
 8001c6a:	f001 fd19 	bl	80036a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08c      	sub	sp, #48	; 0x30
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	202e      	movs	r0, #46	; 0x2e
 8001c92:	f001 fd05 	bl	80036a0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8001c96:	202e      	movs	r0, #46	; 0x2e
 8001c98:	f001 fd2e 	bl	80036f8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <HAL_InitTick+0x9c>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_InitTick+0x9c>)
 8001ca2:	f043 0308 	orr.w	r3, r3, #8
 8001ca6:	6253      	str	r3, [r2, #36]	; 0x24
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_InitTick+0x9c>)
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cb4:	f107 0210 	add.w	r2, r7, #16
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 f960 	bl	8005f84 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cc4:	f004 f936 	bl	8005f34 <HAL_RCC_GetPCLK1Freq>
 8001cc8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <HAL_InitTick+0xa0>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	0c9b      	lsrs	r3, r3, #18
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_InitTick+0xa4>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <HAL_InitTick+0xa8>)
 8001cdc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_InitTick+0xa4>)
 8001ce0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ce4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_InitTick+0xa4>)
 8001ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cea:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_InitTick+0xa4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_InitTick+0xa4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001cf8:	4809      	ldr	r0, [pc, #36]	; (8001d20 <HAL_InitTick+0xa4>)
 8001cfa:	f004 f9e5 	bl	80060c8 <HAL_TIM_Base_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d104      	bne.n	8001d0e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001d04:	4806      	ldr	r0, [pc, #24]	; (8001d20 <HAL_InitTick+0xa4>)
 8001d06:	f004 fb53 	bl	80063b0 <HAL_TIM_Base_Start_IT>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	e000      	b.n	8001d10 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3730      	adds	r7, #48	; 0x30
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	431bde83 	.word	0x431bde83
 8001d20:	20003638 	.word	0x20003638
 8001d24:	40000c00 	.word	0x40000c00

08001d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <HardFault_Handler+0x4>

08001d3a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <MemManage_Handler+0x4>

08001d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <BusFault_Handler+0x4>

08001d46 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <UsageFault_Handler+0x4>

08001d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f002 fa37 	bl	80041d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d6a:	2002      	movs	r0, #2
 8001d6c:	f002 fa30 	bl	80041d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <DMA1_Channel2_IRQHandler+0x10>)
 8001d7a:	f001 fe81 	bl	8003a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20003824 	.word	0x20003824

08001d88 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <DMA1_Channel3_IRQHandler+0x10>)
 8001d8e:	f001 fe77 	bl	8003a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200037a0 	.word	0x200037a0

08001d9c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <ADC1_IRQHandler+0x10>)
 8001da2:	f000 ff7d 	bl	8002ca0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000358c 	.word	0x2000358c

08001db0 <TIM10_IRQHandler>:

/**
  * @brief This function handles TIM10 global interrupt.
  */
void TIM10_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM10_IRQn 0 */

  /* USER CODE END TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <TIM10_IRQHandler+0x10>)
 8001db6:	f004 fca7 	bl	8006708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM10_IRQn 1 */

  /* USER CODE END TIM10_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200036b0 	.word	0x200036b0

08001dc4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <TIM5_IRQHandler+0x10>)
 8001dca:	f004 fc9d 	bl	8006708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20003638 	.word	0x20003638

08001dd8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <SystemInit+0x5c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <SystemInit+0x5c>)
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <SystemInit+0x5c>)
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	4911      	ldr	r1, [pc, #68]	; (8001e34 <SystemInit+0x5c>)
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <SystemInit+0x60>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <SystemInit+0x5c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <SystemInit+0x5c>)
 8001dfa:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001dfe:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001e02:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <SystemInit+0x5c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <SystemInit+0x5c>)
 8001e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <SystemInit+0x5c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <SystemInit+0x5c>)
 8001e16:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001e1a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <SystemInit+0x5c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <SystemInit+0x64>)
 8001e24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e28:	609a      	str	r2, [r3, #8]
#endif
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	88ffc00c 	.word	0x88ffc00c
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e46:	f107 0318 	add.w	r3, r7, #24
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001e6a:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <MX_TIM2_Init+0xe4>)
 8001e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e72:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <MX_TIM2_Init+0xe4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e78:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <MX_TIM2_Init+0xe4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3199;
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <MX_TIM2_Init+0xe4>)
 8001e80:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001e84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e86:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <MX_TIM2_Init+0xe4>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <MX_TIM2_Init+0xe4>)
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e92:	4824      	ldr	r0, [pc, #144]	; (8001f24 <MX_TIM2_Init+0xe4>)
 8001e94:	f004 f918 	bl	80060c8 <HAL_TIM_Base_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001e9e:	f7ff fea9 	bl	8001bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ea8:	f107 0318 	add.w	r3, r7, #24
 8001eac:	4619      	mov	r1, r3
 8001eae:	481d      	ldr	r0, [pc, #116]	; (8001f24 <MX_TIM2_Init+0xe4>)
 8001eb0:	f004 fe96 	bl	8006be0 <HAL_TIM_ConfigClockSource>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001eba:	f7ff fe9b 	bl	8001bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ebe:	4819      	ldr	r0, [pc, #100]	; (8001f24 <MX_TIM2_Init+0xe4>)
 8001ec0:	f004 fadc 	bl	800647c <HAL_TIM_PWM_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001eca:	f7ff fe93 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	4619      	mov	r1, r3
 8001edc:	4811      	ldr	r0, [pc, #68]	; (8001f24 <MX_TIM2_Init+0xe4>)
 8001ede:	f005 fbf7 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001ee8:	f7ff fe84 	bl	8001bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eec:	2360      	movs	r3, #96	; 0x60
 8001eee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1599;
 8001ef0:	f240 633f 	movw	r3, #1599	; 0x63f
 8001ef4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001efa:	2304      	movs	r3, #4
 8001efc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001efe:	463b      	mov	r3, r7
 8001f00:	2200      	movs	r2, #0
 8001f02:	4619      	mov	r1, r3
 8001f04:	4807      	ldr	r0, [pc, #28]	; (8001f24 <MX_TIM2_Init+0xe4>)
 8001f06:	f004 fcdb 	bl	80068c0 <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001f10:	f7ff fe70 	bl	8001bf4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001f14:	4803      	ldr	r0, [pc, #12]	; (8001f24 <MX_TIM2_Init+0xe4>)
 8001f16:	f000 f9eb 	bl	80022f0 <HAL_TIM_MspPostInit>

}
 8001f1a:	bf00      	nop
 8001f1c:	3728      	adds	r7, #40	; 0x28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20003764 	.word	0x20003764

08001f28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2e:	f107 0318 	add.w	r3, r7, #24
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f46:	463b      	mov	r3, r7
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8001f52:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <MX_TIM3_Init+0xe0>)
 8001f54:	4a2d      	ldr	r2, [pc, #180]	; (800200c <MX_TIM3_Init+0xe4>)
 8001f56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f58:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <MX_TIM3_Init+0xe0>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5e:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <MX_TIM3_Init+0xe0>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 8001f64:	4b28      	ldr	r3, [pc, #160]	; (8002008 <MX_TIM3_Init+0xe0>)
 8001f66:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001f6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6c:	4b26      	ldr	r3, [pc, #152]	; (8002008 <MX_TIM3_Init+0xe0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f72:	4b25      	ldr	r3, [pc, #148]	; (8002008 <MX_TIM3_Init+0xe0>)
 8001f74:	2280      	movs	r2, #128	; 0x80
 8001f76:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f78:	4823      	ldr	r0, [pc, #140]	; (8002008 <MX_TIM3_Init+0xe0>)
 8001f7a:	f004 f8a5 	bl	80060c8 <HAL_TIM_Base_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001f84:	f7ff fe36 	bl	8001bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f8e:	f107 0318 	add.w	r3, r7, #24
 8001f92:	4619      	mov	r1, r3
 8001f94:	481c      	ldr	r0, [pc, #112]	; (8002008 <MX_TIM3_Init+0xe0>)
 8001f96:	f004 fe23 	bl	8006be0 <HAL_TIM_ConfigClockSource>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001fa0:	f7ff fe28 	bl	8001bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fa4:	4818      	ldr	r0, [pc, #96]	; (8002008 <MX_TIM3_Init+0xe0>)
 8001fa6:	f004 fa69 	bl	800647c <HAL_TIM_PWM_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001fb0:	f7ff fe20 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4811      	ldr	r0, [pc, #68]	; (8002008 <MX_TIM3_Init+0xe0>)
 8001fc4:	f005 fb84 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001fce:	f7ff fe11 	bl	8001bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd2:	2360      	movs	r3, #96	; 0x60
 8001fd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 8001fd6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001fda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4807      	ldr	r0, [pc, #28]	; (8002008 <MX_TIM3_Init+0xe0>)
 8001fec:	f004 fc68 	bl	80068c0 <HAL_TIM_PWM_ConfigChannel>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001ff6:	f7ff fdfd 	bl	8001bf4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001ffa:	4803      	ldr	r0, [pc, #12]	; (8002008 <MX_TIM3_Init+0xe0>)
 8001ffc:	f000 f978 	bl	80022f0 <HAL_TIM_MspPostInit>

}
 8002000:	bf00      	nop
 8002002:	3728      	adds	r7, #40	; 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200036ec 	.word	0x200036ec
 800200c:	40000400 	.word	0x40000400

08002010 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002016:	f107 0308 	add.w	r3, r7, #8
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002024:	463b      	mov	r3, r7
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <MX_TIM4_Init+0x94>)
 800202e:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <MX_TIM4_Init+0x98>)
 8002030:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <MX_TIM4_Init+0x94>)
 8002034:	2203      	movs	r2, #3
 8002036:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <MX_TIM4_Init+0x94>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 39999;
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <MX_TIM4_Init+0x94>)
 8002040:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002044:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <MX_TIM4_Init+0x94>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <MX_TIM4_Init+0x94>)
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002052:	4814      	ldr	r0, [pc, #80]	; (80020a4 <MX_TIM4_Init+0x94>)
 8002054:	f004 f838 	bl	80060c8 <HAL_TIM_Base_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800205e:	f7ff fdc9 	bl	8001bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002066:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002068:	f107 0308 	add.w	r3, r7, #8
 800206c:	4619      	mov	r1, r3
 800206e:	480d      	ldr	r0, [pc, #52]	; (80020a4 <MX_TIM4_Init+0x94>)
 8002070:	f004 fdb6 	bl	8006be0 <HAL_TIM_ConfigClockSource>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800207a:	f7ff fdbb 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002086:	463b      	mov	r3, r7
 8002088:	4619      	mov	r1, r3
 800208a:	4806      	ldr	r0, [pc, #24]	; (80020a4 <MX_TIM4_Init+0x94>)
 800208c:	f005 fb20 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002096:	f7ff fdad 	bl	8001bf4 <Error_Handler>
  }

}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20003674 	.word	0x20003674
 80020a8:	40000800 	.word	0x40000800

080020ac <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020b2:	f107 0318 	add.w	r3, r7, #24
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ca:	463b      	mov	r3, r7
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 80020d6:	4b2d      	ldr	r3, [pc, #180]	; (800218c <MX_TIM9_Init+0xe0>)
 80020d8:	4a2d      	ldr	r2, [pc, #180]	; (8002190 <MX_TIM9_Init+0xe4>)
 80020da:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80020dc:	4b2b      	ldr	r3, [pc, #172]	; (800218c <MX_TIM9_Init+0xe0>)
 80020de:	2200      	movs	r2, #0
 80020e0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e2:	4b2a      	ldr	r3, [pc, #168]	; (800218c <MX_TIM9_Init+0xe0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3200;
 80020e8:	4b28      	ldr	r3, [pc, #160]	; (800218c <MX_TIM9_Init+0xe0>)
 80020ea:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80020ee:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <MX_TIM9_Init+0xe0>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <MX_TIM9_Init+0xe0>)
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80020fc:	4823      	ldr	r0, [pc, #140]	; (800218c <MX_TIM9_Init+0xe0>)
 80020fe:	f003 ffe3 	bl	80060c8 <HAL_TIM_Base_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8002108:	f7ff fd74 	bl	8001bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800210c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002110:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002112:	f107 0318 	add.w	r3, r7, #24
 8002116:	4619      	mov	r1, r3
 8002118:	481c      	ldr	r0, [pc, #112]	; (800218c <MX_TIM9_Init+0xe0>)
 800211a:	f004 fd61 	bl	8006be0 <HAL_TIM_ConfigClockSource>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM9_Init+0x7c>
  {
    Error_Handler();
 8002124:	f7ff fd66 	bl	8001bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002128:	4818      	ldr	r0, [pc, #96]	; (800218c <MX_TIM9_Init+0xe0>)
 800212a:	f004 f9a7 	bl	800647c <HAL_TIM_PWM_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 8002134:	f7ff fd5e 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	4619      	mov	r1, r3
 8002146:	4811      	ldr	r0, [pc, #68]	; (800218c <MX_TIM9_Init+0xe0>)
 8002148:	f005 fac2 	bl	80076d0 <HAL_TIMEx_MasterConfigSynchronization>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM9_Init+0xaa>
  {
    Error_Handler();
 8002152:	f7ff fd4f 	bl	8001bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002156:	2360      	movs	r3, #96	; 0x60
 8002158:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800215a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800215e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002168:	463b      	mov	r3, r7
 800216a:	2204      	movs	r2, #4
 800216c:	4619      	mov	r1, r3
 800216e:	4807      	ldr	r0, [pc, #28]	; (800218c <MX_TIM9_Init+0xe0>)
 8002170:	f004 fba6 	bl	80068c0 <HAL_TIM_PWM_ConfigChannel>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM9_Init+0xd2>
  {
    Error_Handler();
 800217a:	f7ff fd3b 	bl	8001bf4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 800217e:	4803      	ldr	r0, [pc, #12]	; (800218c <MX_TIM9_Init+0xe0>)
 8002180:	f000 f8b6 	bl	80022f0 <HAL_TIM_MspPostInit>

}
 8002184:	bf00      	nop
 8002186:	3728      	adds	r7, #40	; 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20003728 	.word	0x20003728
 8002190:	40010800 	.word	0x40010800

08002194 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219a:	463b      	mov	r3, r7
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]

  htim10.Instance = TIM10;
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MX_TIM10_Init+0x6c>)
 80021a8:	4a16      	ldr	r2, [pc, #88]	; (8002204 <MX_TIM10_Init+0x70>)
 80021aa:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <MX_TIM10_Init+0x6c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <MX_TIM10_Init+0x6c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1599;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_TIM10_Init+0x6c>)
 80021ba:	f240 623f 	movw	r2, #1599	; 0x63f
 80021be:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <MX_TIM10_Init+0x6c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <MX_TIM10_Init+0x6c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021cc:	480c      	ldr	r0, [pc, #48]	; (8002200 <MX_TIM10_Init+0x6c>)
 80021ce:	f003 ff7b 	bl	80060c8 <HAL_TIM_Base_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 80021d8:	f7ff fd0c 	bl	8001bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK)
 80021e2:	463b      	mov	r3, r7
 80021e4:	4619      	mov	r1, r3
 80021e6:	4806      	ldr	r0, [pc, #24]	; (8002200 <MX_TIM10_Init+0x6c>)
 80021e8:	f004 fcfa 	bl	8006be0 <HAL_TIM_ConfigClockSource>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM10_Init+0x62>
  {
    Error_Handler();
 80021f2:	f7ff fcff 	bl	8001bf4 <Error_Handler>
  }

}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200036b0 	.word	0x200036b0
 8002204:	40010c00 	.word	0x40010c00

08002208 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002218:	d10c      	bne.n	8002234 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800221a:	4b30      	ldr	r3, [pc, #192]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	4a2f      	ldr	r2, [pc, #188]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6253      	str	r3, [r2, #36]	; 0x24
 8002226:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002232:	e04e      	b.n	80022d2 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a29      	ldr	r2, [pc, #164]	; (80022e0 <HAL_TIM_Base_MspInit+0xd8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10c      	bne.n	8002258 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800223e:	4b27      	ldr	r3, [pc, #156]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	4a26      	ldr	r2, [pc, #152]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	6253      	str	r3, [r2, #36]	; 0x24
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	69bb      	ldr	r3, [r7, #24]
}
 8002256:	e03c      	b.n	80022d2 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM4)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a21      	ldr	r2, [pc, #132]	; (80022e4 <HAL_TIM_Base_MspInit+0xdc>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10c      	bne.n	800227c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6253      	str	r3, [r2, #36]	; 0x24
 800226e:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697b      	ldr	r3, [r7, #20]
}
 800227a:	e02a      	b.n	80022d2 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM9)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <HAL_TIM_Base_MspInit+0xe0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d10c      	bne.n	80022a0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a14      	ldr	r2, [pc, #80]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	6213      	str	r3, [r2, #32]
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	e018      	b.n	80022d2 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM10)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a11      	ldr	r2, [pc, #68]	; (80022ec <HAL_TIM_Base_MspInit+0xe4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d113      	bne.n	80022d2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	6213      	str	r3, [r2, #32]
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_TIM_Base_MspInit+0xd4>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM10_IRQn, 5, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2105      	movs	r1, #5
 80022c6:	201a      	movs	r0, #26
 80022c8:	f001 f9ea 	bl	80036a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM10_IRQn);
 80022cc:	201a      	movs	r0, #26
 80022ce:	f001 fa13 	bl	80036f8 <HAL_NVIC_EnableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40000400 	.word	0x40000400
 80022e4:	40000800 	.word	0x40000800
 80022e8:	40010800 	.word	0x40010800
 80022ec:	40010c00 	.word	0x40010c00

080022f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002310:	d11c      	bne.n	800234c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <HAL_TIM_MspPostInit+0xf0>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a32      	ldr	r2, [pc, #200]	; (80023e0 <HAL_TIM_MspPostInit+0xf0>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	61d3      	str	r3, [r2, #28]
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_TIM_MspPostInit+0xf0>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 800232a:	2301      	movs	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800233a:	2301      	movs	r3, #1
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 800233e:	f107 0314 	add.w	r3, r7, #20
 8002342:	4619      	mov	r1, r3
 8002344:	4827      	ldr	r0, [pc, #156]	; (80023e4 <HAL_TIM_MspPostInit+0xf4>)
 8002346:	f001 fc79 	bl	8003c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800234a:	e044      	b.n	80023d6 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a25      	ldr	r2, [pc, #148]	; (80023e8 <HAL_TIM_MspPostInit+0xf8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d11d      	bne.n	8002392 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002356:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_TIM_MspPostInit+0xf0>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <HAL_TIM_MspPostInit+0xf0>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	61d3      	str	r3, [r2, #28]
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <HAL_TIM_MspPostInit+0xf0>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 800236e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002380:	2302      	movs	r3, #2
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4619      	mov	r1, r3
 800238a:	4818      	ldr	r0, [pc, #96]	; (80023ec <HAL_TIM_MspPostInit+0xfc>)
 800238c:	f001 fc56 	bl	8003c3c <HAL_GPIO_Init>
}
 8002390:	e021      	b.n	80023d6 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a16      	ldr	r2, [pc, #88]	; (80023f0 <HAL_TIM_MspPostInit+0x100>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d11c      	bne.n	80023d6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239c:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_TIM_MspPostInit+0xf0>)
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <HAL_TIM_MspPostInit+0xf0>)
 80023a2:	f043 0302 	orr.w	r3, r3, #2
 80023a6:	61d3      	str	r3, [r2, #28]
 80023a8:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_TIM_MspPostInit+0xf0>)
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 80023b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80023c6:	2303      	movs	r3, #3
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	4808      	ldr	r0, [pc, #32]	; (80023f4 <HAL_TIM_MspPostInit+0x104>)
 80023d2:	f001 fc33 	bl	8003c3c <HAL_GPIO_Init>
}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	; 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40020000 	.word	0x40020000
 80023e8:	40000400 	.word	0x40000400
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40010800 	.word	0x40010800
 80023f4:	40020400 	.word	0x40020400

080023f8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <MX_USART3_UART_Init+0x50>)
 8002400:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 8002404:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002408:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 800241e:	220c      	movs	r2, #12
 8002420:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_USART3_UART_Init+0x4c>)
 8002430:	f005 f9e8 	bl	8007804 <HAL_UART_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800243a:	f7ff fbdb 	bl	8001bf4 <Error_Handler>
  }

}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200037e4 	.word	0x200037e4
 8002448:	40004800 	.word	0x40004800

0800244c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a3e      	ldr	r2, [pc, #248]	; (8002564 <HAL_UART_MspInit+0x118>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d175      	bne.n	800255a <HAL_UART_MspInit+0x10e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800246e:	4b3e      	ldr	r3, [pc, #248]	; (8002568 <HAL_UART_MspInit+0x11c>)
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	4a3d      	ldr	r2, [pc, #244]	; (8002568 <HAL_UART_MspInit+0x11c>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002478:	6253      	str	r3, [r2, #36]	; 0x24
 800247a:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <HAL_UART_MspInit+0x11c>)
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002486:	4b38      	ldr	r3, [pc, #224]	; (8002568 <HAL_UART_MspInit+0x11c>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4a37      	ldr	r2, [pc, #220]	; (8002568 <HAL_UART_MspInit+0x11c>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	61d3      	str	r3, [r2, #28]
 8002492:	4b35      	ldr	r3, [pc, #212]	; (8002568 <HAL_UART_MspInit+0x11c>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800249e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ac:	2303      	movs	r3, #3
 80024ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024b0:	2307      	movs	r3, #7
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	4619      	mov	r1, r3
 80024ba:	482c      	ldr	r0, [pc, #176]	; (800256c <HAL_UART_MspInit+0x120>)
 80024bc:	f001 fbbe 	bl	8003c3c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80024c0:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <HAL_UART_MspInit+0x124>)
 80024c2:	4a2c      	ldr	r2, [pc, #176]	; (8002574 <HAL_UART_MspInit+0x128>)
 80024c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024c6:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <HAL_UART_MspInit+0x124>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024cc:	4b28      	ldr	r3, [pc, #160]	; (8002570 <HAL_UART_MspInit+0x124>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024d2:	4b27      	ldr	r3, [pc, #156]	; (8002570 <HAL_UART_MspInit+0x124>)
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <HAL_UART_MspInit+0x124>)
 80024da:	2200      	movs	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <HAL_UART_MspInit+0x124>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80024e4:	4b22      	ldr	r3, [pc, #136]	; (8002570 <HAL_UART_MspInit+0x124>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80024ea:	4b21      	ldr	r3, [pc, #132]	; (8002570 <HAL_UART_MspInit+0x124>)
 80024ec:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80024f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80024f2:	481f      	ldr	r0, [pc, #124]	; (8002570 <HAL_UART_MspInit+0x124>)
 80024f4:	f001 f918 	bl	8003728 <HAL_DMA_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80024fe:	f7ff fb79 	bl	8001bf4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <HAL_UART_MspInit+0x124>)
 8002506:	635a      	str	r2, [r3, #52]	; 0x34
 8002508:	4a19      	ldr	r2, [pc, #100]	; (8002570 <HAL_UART_MspInit+0x124>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800250e:	4b1a      	ldr	r3, [pc, #104]	; (8002578 <HAL_UART_MspInit+0x12c>)
 8002510:	4a1a      	ldr	r2, [pc, #104]	; (800257c <HAL_UART_MspInit+0x130>)
 8002512:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002514:	4b18      	ldr	r3, [pc, #96]	; (8002578 <HAL_UART_MspInit+0x12c>)
 8002516:	2210      	movs	r2, #16
 8002518:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800251a:	4b17      	ldr	r3, [pc, #92]	; (8002578 <HAL_UART_MspInit+0x12c>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002520:	4b15      	ldr	r3, [pc, #84]	; (8002578 <HAL_UART_MspInit+0x12c>)
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002526:	4b14      	ldr	r3, [pc, #80]	; (8002578 <HAL_UART_MspInit+0x12c>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_UART_MspInit+0x12c>)
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_UART_MspInit+0x12c>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <HAL_UART_MspInit+0x12c>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800253e:	480e      	ldr	r0, [pc, #56]	; (8002578 <HAL_UART_MspInit+0x12c>)
 8002540:	f001 f8f2 	bl	8003728 <HAL_DMA_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 800254a:	f7ff fb53 	bl	8001bf4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a09      	ldr	r2, [pc, #36]	; (8002578 <HAL_UART_MspInit+0x12c>)
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
 8002554:	4a08      	ldr	r2, [pc, #32]	; (8002578 <HAL_UART_MspInit+0x12c>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800255a:	bf00      	nop
 800255c:	3728      	adds	r7, #40	; 0x28
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40004800 	.word	0x40004800
 8002568:	40023800 	.word	0x40023800
 800256c:	40020400 	.word	0x40020400
 8002570:	200037a0 	.word	0x200037a0
 8002574:	40026030 	.word	0x40026030
 8002578:	20003824 	.word	0x20003824
 800257c:	4002601c 	.word	0x4002601c

08002580 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002580:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002582:	e003      	b.n	800258c <LoopCopyDataInit>

08002584 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002586:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002588:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800258a:	3104      	adds	r1, #4

0800258c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800258c:	480a      	ldr	r0, [pc, #40]	; (80025b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002590:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002592:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002594:	d3f6      	bcc.n	8002584 <CopyDataInit>
  ldr r2, =_sbss
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002598:	e002      	b.n	80025a0 <LoopFillZerobss>

0800259a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800259c:	f842 3b04 	str.w	r3, [r2], #4

080025a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80025a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80025a4:	d3f9      	bcc.n	800259a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025a6:	f7ff fc17 	bl	8001dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025aa:	f008 ff1b 	bl	800b3e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025ae:	f7ff fa8b 	bl	8001ac8 <main>
  bx lr
 80025b2:	4770      	bx	lr
  ldr r3, =_sidata
 80025b4:	0800b80c 	.word	0x0800b80c
  ldr r0, =_sdata
 80025b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80025bc:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 80025c0:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 80025c4:	200038ac 	.word	0x200038ac

080025c8 <AES_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <AES_IRQHandler>

080025ca <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d4:	2003      	movs	r0, #3
 80025d6:	f001 f843 	bl	8003660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025da:	2000      	movs	r0, #0
 80025dc:	f7ff fb4e 	bl	8001c7c <HAL_InitTick>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	71fb      	strb	r3, [r7, #7]
 80025ea:	e001      	b.n	80025f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025ec:	f7ff fb12 	bl	8001c14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025f0:	79fb      	ldrb	r3, [r7, #7]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <HAL_IncTick+0x1c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_IncTick+0x20>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4413      	add	r3, r2
 800260a:	4a03      	ldr	r2, [pc, #12]	; (8002618 <HAL_IncTick+0x1c>)
 800260c:	6013      	str	r3, [r2, #0]
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20003868 	.word	0x20003868
 800261c:	2000000c 	.word	0x2000000c

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b02      	ldr	r3, [pc, #8]	; (8002630 <HAL_GetTick+0x10>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	20003868 	.word	0x20003868

08002634 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08e      	sub	sp, #56	; 0x38
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e282      	b.n	8002b5a <HAL_ADC_Init+0x526>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a9d      	ldr	r2, [pc, #628]	; (80028d0 <HAL_ADC_Init+0x29c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d004      	beq.n	8002668 <HAL_ADC_Init+0x34>
 800265e:	f240 11bd 	movw	r1, #445	; 0x1bd
 8002662:	489c      	ldr	r0, [pc, #624]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 8002664:	f7ff facc 	bl	8001c00 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00e      	beq.n	800268e <HAL_ADC_Init+0x5a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002678:	d009      	beq.n	800268e <HAL_ADC_Init+0x5a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002682:	d004      	beq.n	800268e <HAL_ADC_Init+0x5a>
 8002684:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002688:	4892      	ldr	r0, [pc, #584]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 800268a:	f7ff fab9 	bl	8001c00 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d013      	beq.n	80026be <HAL_ADC_Init+0x8a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269e:	d00e      	beq.n	80026be <HAL_ADC_Init+0x8a>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026a8:	d009      	beq.n	80026be <HAL_ADC_Init+0x8a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026b2:	d004      	beq.n	80026be <HAL_ADC_Init+0x8a>
 80026b4:	f240 11bf 	movw	r1, #447	; 0x1bf
 80026b8:	4886      	ldr	r0, [pc, #536]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 80026ba:	f7ff faa1 	bl	8001c00 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <HAL_ADC_Init+0xa6>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ce:	d004      	beq.n	80026da <HAL_ADC_Init+0xa6>
 80026d0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80026d4:	487f      	ldr	r0, [pc, #508]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 80026d6:	f7ff fa93 	bl	8001c00 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_ADC_Init+0xc2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ea:	d004      	beq.n	80026f6 <HAL_ADC_Init+0xc2>
 80026ec:	f240 11c1 	movw	r1, #449	; 0x1c1
 80026f0:	4878      	ldr	r0, [pc, #480]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 80026f2:	f7ff fa85 	bl	8001c00 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fe:	d008      	beq.n	8002712 <HAL_ADC_Init+0xde>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d004      	beq.n	8002712 <HAL_ADC_Init+0xde>
 8002708:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800270c:	4871      	ldr	r0, [pc, #452]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 800270e:	f7ff fa77 	bl	8001c00 <assert_failed>
  assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d020      	beq.n	800275c <HAL_ADC_Init+0x128>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b10      	cmp	r3, #16
 8002720:	d01c      	beq.n	800275c <HAL_ADC_Init+0x128>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b20      	cmp	r3, #32
 8002728:	d018      	beq.n	800275c <HAL_ADC_Init+0x128>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b30      	cmp	r3, #48	; 0x30
 8002730:	d014      	beq.n	800275c <HAL_ADC_Init+0x128>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b40      	cmp	r3, #64	; 0x40
 8002738:	d010      	beq.n	800275c <HAL_ADC_Init+0x128>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b50      	cmp	r3, #80	; 0x50
 8002740:	d00c      	beq.n	800275c <HAL_ADC_Init+0x128>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b60      	cmp	r3, #96	; 0x60
 8002748:	d008      	beq.n	800275c <HAL_ADC_Init+0x128>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b70      	cmp	r3, #112	; 0x70
 8002750:	d004      	beq.n	800275c <HAL_ADC_Init+0x128>
 8002752:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002756:	485f      	ldr	r0, [pc, #380]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 8002758:	f7ff fa52 	bl	8001c00 <assert_failed>
  assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_ADC_Init+0x158>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800276c:	d00e      	beq.n	800278c <HAL_ADC_Init+0x158>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002776:	d009      	beq.n	800278c <HAL_ADC_Init+0x158>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002780:	d004      	beq.n	800278c <HAL_ADC_Init+0x158>
 8002782:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002786:	4853      	ldr	r0, [pc, #332]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 8002788:	f7ff fa3a 	bl	8001c00 <assert_failed>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_ADC_Init+0x172>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	2b04      	cmp	r3, #4
 800279a:	d004      	beq.n	80027a6 <HAL_ADC_Init+0x172>
 800279c:	f240 11c5 	movw	r1, #453	; 0x1c5
 80027a0:	484c      	ldr	r0, [pc, #304]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 80027a2:	f7ff fa2d 	bl	8001c00 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d009      	beq.n	80027c4 <HAL_ADC_Init+0x190>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d004      	beq.n	80027c4 <HAL_ADC_Init+0x190>
 80027ba:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80027be:	4845      	ldr	r0, [pc, #276]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 80027c0:	f7ff fa1e 	bl	8001c00 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027cc:	d03e      	beq.n	800284c <HAL_ADC_Init+0x218>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027d6:	d039      	beq.n	800284c <HAL_ADC_Init+0x218>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80027e0:	d034      	beq.n	800284c <HAL_ADC_Init+0x218>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e6:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80027ea:	d02f      	beq.n	800284c <HAL_ADC_Init+0x218>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f4:	d02a      	beq.n	800284c <HAL_ADC_Init+0x218>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027fe:	d025      	beq.n	800284c <HAL_ADC_Init+0x218>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002804:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002808:	d020      	beq.n	800284c <HAL_ADC_Init+0x218>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8002812:	d01b      	beq.n	800284c <HAL_ADC_Init+0x218>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002818:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800281c:	d016      	beq.n	800284c <HAL_ADC_Init+0x218>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002822:	2b00      	cmp	r3, #0
 8002824:	d012      	beq.n	800284c <HAL_ADC_Init+0x218>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800282e:	d00d      	beq.n	800284c <HAL_ADC_Init+0x218>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002834:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8002838:	d008      	beq.n	800284c <HAL_ADC_Init+0x218>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	2b10      	cmp	r3, #16
 8002840:	d004      	beq.n	800284c <HAL_ADC_Init+0x218>
 8002842:	f240 11c7 	movw	r1, #455	; 0x1c7
 8002846:	4823      	ldr	r0, [pc, #140]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 8002848:	f7ff f9da 	bl	8001c00 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_ADC_Init+0x236>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800285c:	2b01      	cmp	r3, #1
 800285e:	d004      	beq.n	800286a <HAL_ADC_Init+0x236>
 8002860:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8002864:	481b      	ldr	r0, [pc, #108]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 8002866:	f7ff f9cb 	bl	8001c00 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d032      	beq.n	80028d8 <HAL_ADC_Init+0x2a4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_ADC_Init+0x24e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	2b1c      	cmp	r3, #28
 8002880:	d904      	bls.n	800288c <HAL_ADC_Init+0x258>
 8002882:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8002886:	4813      	ldr	r0, [pc, #76]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 8002888:	f7ff f9ba 	bl	8001c00 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_ADC_Init+0x276>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d004      	beq.n	80028aa <HAL_ADC_Init+0x276>
 80028a0:	f240 11cd 	movw	r1, #461	; 0x1cd
 80028a4:	480b      	ldr	r0, [pc, #44]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 80028a6:	f7ff f9ab 	bl	8001c00 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d011      	beq.n	80028d8 <HAL_ADC_Init+0x2a4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_ADC_Init+0x290>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d909      	bls.n	80028d8 <HAL_ADC_Init+0x2a4>
 80028c4:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <HAL_ADC_Init+0x2a0>)
 80028ca:	f7ff f999 	bl	8001c00 <assert_failed>
 80028ce:	e003      	b.n	80028d8 <HAL_ADC_Init+0x2a4>
 80028d0:	40012400 	.word	0x40012400
 80028d4:	0800b4f8 	.word	0x0800b4f8
    }
  }
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d017      	beq.n	8002910 <HAL_ADC_Init+0x2dc>
  {
    assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d013      	beq.n	8002910 <HAL_ADC_Init+0x2dc>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028f0:	d00e      	beq.n	8002910 <HAL_ADC_Init+0x2dc>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028fa:	d009      	beq.n	8002910 <HAL_ADC_Init+0x2dc>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002904:	d004      	beq.n	8002910 <HAL_ADC_Init+0x2dc>
 8002906:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800290a:	4896      	ldr	r0, [pc, #600]	; (8002b64 <HAL_ADC_Init+0x530>)
 800290c:	f7ff f978 	bl	8001c00 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d115      	bne.n	8002944 <HAL_ADC_Init+0x310>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002926:	4b90      	ldr	r3, [pc, #576]	; (8002b68 <HAL_ADC_Init+0x534>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4a8f      	ldr	r2, [pc, #572]	; (8002b68 <HAL_ADC_Init+0x534>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6213      	str	r3, [r2, #32]
 8002932:	4b8d      	ldr	r3, [pc, #564]	; (8002b68 <HAL_ADC_Init+0x534>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe fe66 	bl	8001610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b00      	cmp	r3, #0
 800294e:	f040 80ff 	bne.w	8002b50 <HAL_ADC_Init+0x51c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800295a:	f023 0302 	bic.w	r3, r3, #2
 800295e:	f043 0202 	orr.w	r2, r3, #2
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002966:	4b81      	ldr	r3, [pc, #516]	; (8002b6c <HAL_ADC_Init+0x538>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	497e      	ldr	r1, [pc, #504]	; (8002b6c <HAL_ADC_Init+0x538>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002980:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002988:	4619      	mov	r1, r3
 800298a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800298e:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80029a4:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80029aa:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029b2:	4619      	mov	r1, r3
 80029b4:	2302      	movs	r3, #2
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80029cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80029ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d0:	4313      	orrs	r3, r2
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d007      	beq.n	80029ec <HAL_ADC_Init+0x3b8>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80029e4:	4313      	orrs	r3, r2
 80029e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e8:	4313      	orrs	r3, r2
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	d04f      	beq.n	8002a9a <HAL_ADC_Init+0x466>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a00:	4313      	orrs	r3, r2
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002a0c:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6912      	ldr	r2, [r2, #16]
 8002a12:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002a16:	d003      	beq.n	8002a20 <HAL_ADC_Init+0x3ec>
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6912      	ldr	r2, [r2, #16]
 8002a1c:	2a01      	cmp	r2, #1
 8002a1e:	d102      	bne.n	8002a26 <HAL_ADC_Init+0x3f2>
 8002a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a24:	e000      	b.n	8002a28 <HAL_ADC_Init+0x3f4>
 8002a26:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002a28:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d125      	bne.n	8002a86 <HAL_ADC_Init+0x452>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d114      	bne.n	8002a6e <HAL_ADC_Init+0x43a>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002a4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	fa92 f2a2 	rbit	r2, r2
 8002a56:	617a      	str	r2, [r7, #20]
  return result;
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	fab2 f282 	clz	r2, r2
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	4093      	lsls	r3, r2
 8002a62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a6c:	e00b      	b.n	8002a86 <HAL_ADC_Init+0x452>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	f043 0220 	orr.w	r2, r3, #32
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <HAL_ADC_Init+0x53c>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a96:	430b      	orrs	r3, r1
 8002a98:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	4b34      	ldr	r3, [pc, #208]	; (8002b74 <HAL_ADC_Init+0x540>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab6:	d003      	beq.n	8002ac0 <HAL_ADC_Init+0x48c>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d119      	bne.n	8002af4 <HAL_ADC_Init+0x4c0>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8002ad4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	fa92 f2a2 	rbit	r2, r2
 8002adc:	60fa      	str	r2, [r7, #12]
  return result;
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	fab2 f282 	clz	r2, r2
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	fa03 f202 	lsl.w	r2, r3, r2
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
 8002af2:	e007      	b.n	8002b04 <HAL_ADC_Init+0x4d0>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_ADC_Init+0x544>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d10b      	bne.n	8002b2c <HAL_ADC_Init+0x4f8>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	f023 0303 	bic.w	r3, r3, #3
 8002b22:	f043 0201 	orr.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b2a:	e014      	b.n	8002b56 <HAL_ADC_Init+0x522>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b30:	f023 0312 	bic.w	r3, r3, #18
 8002b34:	f043 0210 	orr.w	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b40:	f043 0201 	orr.w	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002b4e:	e002      	b.n	8002b56 <HAL_ADC_Init+0x522>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3738      	adds	r7, #56	; 0x38
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	0800b4f8 	.word	0x0800b4f8
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40012700 	.word	0x40012700
 8002b70:	fcfc16ff 	.word	0xfcfc16ff
 8002b74:	c0fff189 	.word	0xc0fff189
 8002b78:	bf80fffe 	.word	0xbf80fffe

08002b7c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a35      	ldr	r2, [pc, #212]	; (8002c64 <HAL_ADC_Start_IT+0xe8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_ADC_Start_IT+0x20>
 8002b92:	f240 5166 	movw	r1, #1382	; 0x566
 8002b96:	4834      	ldr	r0, [pc, #208]	; (8002c68 <HAL_ADC_Start_IT+0xec>)
 8002b98:	f7ff f832 	bl	8001c00 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_Start_IT+0x2e>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e058      	b.n	8002c5c <HAL_ADC_Start_IT+0xe0>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fc4a 	bl	800344c <ADC_Enable>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d14b      	bne.n	8002c5a <HAL_ADC_Start_IT+0xde>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_ADC_Start_IT+0x78>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c00:	d106      	bne.n	8002c10 <HAL_ADC_Start_IT+0x94>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c06:	f023 0206 	bic.w	r2, r3, #6
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	651a      	str	r2, [r3, #80]	; 0x50
 8002c0e:	e002      	b.n	8002c16 <HAL_ADC_Start_IT+0x9a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c26:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c36:	f043 0320 	orr.w	r3, r3, #32
 8002c3a:	6053      	str	r3, [r2, #4]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d107      	bne.n	8002c5a <HAL_ADC_Start_IT+0xde>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c58:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40012400 	.word	0x40012400
 8002c68:	0800b4f8 	.word	0x0800b4f8

08002c6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <HAL_ADC_GetValue+0x2c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_ADC_GetValue+0x1c>
 8002c7e:	f240 617d 	movw	r1, #1661	; 0x67d
 8002c82:	4806      	ldr	r0, [pc, #24]	; (8002c9c <HAL_ADC_GetValue+0x30>)
 8002c84:	f7fe ffbc 	bl	8001c00 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40012400 	.word	0x40012400
 8002c9c:	0800b4f8 	.word	0x0800b4f8

08002ca0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a8f      	ldr	r2, [pc, #572]	; (8002eec <HAL_ADC_IRQHandler+0x24c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_ADC_IRQHandler+0x1c>
 8002cb2:	f240 618e 	movw	r1, #1678	; 0x68e
 8002cb6:	488e      	ldr	r0, [pc, #568]	; (8002ef0 <HAL_ADC_IRQHandler+0x250>)
 8002cb8:	f7fe ffa2 	bl	8001c00 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_ADC_IRQHandler+0x3a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d004      	beq.n	8002cda <HAL_ADC_IRQHandler+0x3a>
 8002cd0:	f240 618f 	movw	r1, #1679	; 0x68f
 8002cd4:	4886      	ldr	r0, [pc, #536]	; (8002ef0 <HAL_ADC_IRQHandler+0x250>)
 8002cd6:	f7fe ff93 	bl	8001c00 <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_ADC_IRQHandler+0x4a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	2b1c      	cmp	r3, #28
 8002ce8:	d904      	bls.n	8002cf4 <HAL_ADC_IRQHandler+0x54>
 8002cea:	f44f 61d2 	mov.w	r1, #1680	; 0x690
 8002cee:	4880      	ldr	r0, [pc, #512]	; (8002ef0 <HAL_ADC_IRQHandler+0x250>)
 8002cf0:	f7fe ff86 	bl	8001c00 <assert_failed>

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d14e      	bne.n	8002da0 <HAL_ADC_IRQHandler+0x100>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d147      	bne.n	8002da0 <HAL_ADC_IRQHandler+0x100>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d105      	bne.n	8002d28 <HAL_ADC_IRQHandler+0x88>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d12c      	bne.n	8002d90 <HAL_ADC_IRQHandler+0xf0>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d127      	bne.n	8002d90 <HAL_ADC_IRQHandler+0xf0>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d006      	beq.n	8002d5c <HAL_ADC_IRQHandler+0xbc>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d119      	bne.n	8002d90 <HAL_ADC_IRQHandler+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0220 	bic.w	r2, r2, #32
 8002d6a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d105      	bne.n	8002d90 <HAL_ADC_IRQHandler+0xf0>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7fe fa39 	bl	8001208 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f06f 0212 	mvn.w	r2, #18
 8002d9e:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	2b80      	cmp	r3, #128	; 0x80
 8002dac:	d15c      	bne.n	8002e68 <HAL_ADC_IRQHandler+0x1c8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d155      	bne.n	8002e68 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <HAL_ADC_IRQHandler+0x134>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dcc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d13a      	bne.n	8002e58 <HAL_ADC_IRQHandler+0x1b8>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d006      	beq.n	8002dfe <HAL_ADC_IRQHandler+0x15e>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d12c      	bne.n	8002e58 <HAL_ADC_IRQHandler+0x1b8>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d125      	bne.n	8002e58 <HAL_ADC_IRQHandler+0x1b8>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d11e      	bne.n	8002e58 <HAL_ADC_IRQHandler+0x1b8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d119      	bne.n	8002e58 <HAL_ADC_IRQHandler+0x1b8>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e32:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d105      	bne.n	8002e58 <HAL_ADC_IRQHandler+0x1b8>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fb4d 	bl	80034f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f06f 020c 	mvn.w	r2, #12
 8002e66:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e72:	2b40      	cmp	r3, #64	; 0x40
 8002e74:	d114      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0x200>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d10d      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0x200>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f82f 	bl	8002ef4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f06f 0201 	mvn.w	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eae:	d119      	bne.n	8002ee4 <HAL_ADC_IRQHandler+0x244>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d112      	bne.n	8002ee4 <HAL_ADC_IRQHandler+0x244>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec2:	f043 0202 	orr.w	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f06f 0220 	mvn.w	r2, #32
 8002ed2:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f816 	bl	8002f06 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f06f 0220 	mvn.w	r2, #32
 8002ee2:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40012400 	.word	0x40012400
 8002ef0:	0800b4f8 	.word	0x0800b4f8

08002ef4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a94      	ldr	r2, [pc, #592]	; (8003180 <HAL_ADC_ConfigChannel+0x268>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_ADC_ConfigChannel+0x26>
 8002f34:	f240 7191 	movw	r1, #1937	; 0x791
 8002f38:	4892      	ldr	r0, [pc, #584]	; (8003184 <HAL_ADC_ConfigChannel+0x26c>)
 8002f3a:	f7fe fe61 	bl	8001c00 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 8081 	beq.w	800304a <HAL_ADC_ConfigChannel+0x132>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d07c      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d078      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d074      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d070      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b05      	cmp	r3, #5
 8002f6e:	d06c      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b06      	cmp	r3, #6
 8002f76:	d068      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b07      	cmp	r3, #7
 8002f7e:	d064      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d060      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b09      	cmp	r3, #9
 8002f8e:	d05c      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b0a      	cmp	r3, #10
 8002f96:	d058      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b0b      	cmp	r3, #11
 8002f9e:	d054      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b0c      	cmp	r3, #12
 8002fa6:	d050      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b0d      	cmp	r3, #13
 8002fae:	d04c      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b0e      	cmp	r3, #14
 8002fb6:	d048      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b0f      	cmp	r3, #15
 8002fbe:	d044      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d040      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b11      	cmp	r3, #17
 8002fce:	d03c      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b12      	cmp	r3, #18
 8002fd6:	d038      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b13      	cmp	r3, #19
 8002fde:	d034      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b14      	cmp	r3, #20
 8002fe6:	d030      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b15      	cmp	r3, #21
 8002fee:	d02c      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b16      	cmp	r3, #22
 8002ff6:	d028      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b17      	cmp	r3, #23
 8002ffe:	d024      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b18      	cmp	r3, #24
 8003006:	d020      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b19      	cmp	r3, #25
 800300e:	d01c      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b1a      	cmp	r3, #26
 8003016:	d018      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b1b      	cmp	r3, #27
 800301e:	d014      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b1c      	cmp	r3, #28
 8003026:	d010      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b1d      	cmp	r3, #29
 800302e:	d00c      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b1e      	cmp	r3, #30
 8003036:	d008      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b1f      	cmp	r3, #31
 800303e:	d004      	beq.n	800304a <HAL_ADC_ConfigChannel+0x132>
 8003040:	f240 7192 	movw	r1, #1938	; 0x792
 8003044:	484f      	ldr	r0, [pc, #316]	; (8003184 <HAL_ADC_ConfigChannel+0x26c>)
 8003046:	f7fe fddb 	bl	8001c00 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d070      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d06c      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d068      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b04      	cmp	r3, #4
 8003068:	d064      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b05      	cmp	r3, #5
 8003070:	d060      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b06      	cmp	r3, #6
 8003078:	d05c      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b07      	cmp	r3, #7
 8003080:	d058      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b08      	cmp	r3, #8
 8003088:	d054      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b09      	cmp	r3, #9
 8003090:	d050      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b0a      	cmp	r3, #10
 8003098:	d04c      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b0b      	cmp	r3, #11
 80030a0:	d048      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d044      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b0d      	cmp	r3, #13
 80030b0:	d040      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b0e      	cmp	r3, #14
 80030b8:	d03c      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b0f      	cmp	r3, #15
 80030c0:	d038      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d034      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b11      	cmp	r3, #17
 80030d0:	d030      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b12      	cmp	r3, #18
 80030d8:	d02c      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b13      	cmp	r3, #19
 80030e0:	d028      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b14      	cmp	r3, #20
 80030e8:	d024      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b15      	cmp	r3, #21
 80030f0:	d020      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b16      	cmp	r3, #22
 80030f8:	d01c      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b17      	cmp	r3, #23
 8003100:	d018      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b18      	cmp	r3, #24
 8003108:	d014      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b19      	cmp	r3, #25
 8003110:	d010      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b1a      	cmp	r3, #26
 8003118:	d00c      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b1b      	cmp	r3, #27
 8003120:	d008      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b1c      	cmp	r3, #28
 8003128:	d004      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x21c>
 800312a:	f240 7193 	movw	r1, #1939	; 0x793
 800312e:	4815      	ldr	r0, [pc, #84]	; (8003184 <HAL_ADC_ConfigChannel+0x26c>)
 8003130:	f7fe fd66 	bl	8001c00 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d025      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x270>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d021      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x270>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d01d      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x270>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b03      	cmp	r3, #3
 8003152:	d019      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x270>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b04      	cmp	r3, #4
 800315a:	d015      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x270>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b05      	cmp	r3, #5
 8003162:	d011      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x270>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b06      	cmp	r3, #6
 800316a:	d00d      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x270>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b07      	cmp	r3, #7
 8003172:	d009      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x270>
 8003174:	f240 7194 	movw	r1, #1940	; 0x794
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <HAL_ADC_ConfigChannel+0x26c>)
 800317a:	f7fe fd41 	bl	8001c00 <assert_failed>
 800317e:	e003      	b.n	8003188 <HAL_ADC_ConfigChannel+0x270>
 8003180:	40012400 	.word	0x40012400
 8003184:	0800b4f8 	.word	0x0800b4f8
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x27e>
 8003192:	2302      	movs	r3, #2
 8003194:	e14f      	b.n	8003436 <HAL_ADC_ConfigChannel+0x51e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d81c      	bhi.n	80031e0 <HAL_ADC_ConfigChannel+0x2c8>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	3b05      	subs	r3, #5
 80031b8:	221f      	movs	r2, #31
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	4019      	ands	r1, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	3b05      	subs	r3, #5
 80031d2:	fa00 f203 	lsl.w	r2, r0, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40
 80031de:	e07e      	b.n	80032de <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b0c      	cmp	r3, #12
 80031e6:	d81c      	bhi.n	8003222 <HAL_ADC_ConfigChannel+0x30a>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	3b23      	subs	r3, #35	; 0x23
 80031fa:	221f      	movs	r2, #31
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	4019      	ands	r1, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	3b23      	subs	r3, #35	; 0x23
 8003214:	fa00 f203 	lsl.w	r2, r0, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003220:	e05d      	b.n	80032de <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b12      	cmp	r3, #18
 8003228:	d81c      	bhi.n	8003264 <HAL_ADC_ConfigChannel+0x34c>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	3b41      	subs	r3, #65	; 0x41
 800323c:	221f      	movs	r2, #31
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	4019      	ands	r1, r3
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	3b41      	subs	r3, #65	; 0x41
 8003256:	fa00 f203 	lsl.w	r2, r0, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
 8003262:	e03c      	b.n	80032de <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b18      	cmp	r3, #24
 800326a:	d81c      	bhi.n	80032a6 <HAL_ADC_ConfigChannel+0x38e>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	3b5f      	subs	r3, #95	; 0x5f
 800327e:	221f      	movs	r2, #31
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	4019      	ands	r1, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	3b5f      	subs	r3, #95	; 0x5f
 8003298:	fa00 f203 	lsl.w	r2, r0, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	635a      	str	r2, [r3, #52]	; 0x34
 80032a4:	e01b      	b.n	80032de <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	3b7d      	subs	r3, #125	; 0x7d
 80032b8:	221f      	movs	r2, #31
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	4019      	ands	r1, r3
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	3b7d      	subs	r3, #125	; 0x7d
 80032d2:	fa00 f203 	lsl.w	r2, r0, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b09      	cmp	r3, #9
 80032e4:	d81a      	bhi.n	800331c <HAL_ADC_ConfigChannel+0x404>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6959      	ldr	r1, [r3, #20]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	2207      	movs	r2, #7
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4019      	ands	r1, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6898      	ldr	r0, [r3, #8]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	fa00 f203 	lsl.w	r2, r0, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	615a      	str	r2, [r3, #20]
 800331a:	e05d      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b13      	cmp	r3, #19
 8003322:	d81c      	bhi.n	800335e <HAL_ADC_ConfigChannel+0x446>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6919      	ldr	r1, [r3, #16]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	3b1e      	subs	r3, #30
 8003336:	2207      	movs	r2, #7
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	4019      	ands	r1, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6898      	ldr	r0, [r3, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	3b1e      	subs	r3, #30
 8003350:	fa00 f203 	lsl.w	r2, r0, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	611a      	str	r2, [r3, #16]
 800335c:	e03c      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b1d      	cmp	r3, #29
 8003364:	d81c      	bhi.n	80033a0 <HAL_ADC_ConfigChannel+0x488>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68d9      	ldr	r1, [r3, #12]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4413      	add	r3, r2
 8003376:	3b3c      	subs	r3, #60	; 0x3c
 8003378:	2207      	movs	r2, #7
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	4019      	ands	r1, r3
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6898      	ldr	r0, [r3, #8]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	3b3c      	subs	r3, #60	; 0x3c
 8003392:	fa00 f203 	lsl.w	r2, r0, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	e01b      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	3b5a      	subs	r3, #90	; 0x5a
 80033b2:	2207      	movs	r2, #7
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	4019      	ands	r1, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6898      	ldr	r0, [r3, #8]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	3b5a      	subs	r3, #90	; 0x5a
 80033cc:	fa00 f203 	lsl.w	r2, r0, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b10      	cmp	r3, #16
 80033de:	d003      	beq.n	80033e8 <HAL_ADC_ConfigChannel+0x4d0>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033e4:	2b11      	cmp	r3, #17
 80033e6:	d121      	bne.n	800342c <HAL_ADC_ConfigChannel+0x514>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_ADC_ConfigChannel+0x528>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d11b      	bne.n	800342c <HAL_ADC_ConfigChannel+0x514>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80033f4:	4b12      	ldr	r3, [pc, #72]	; (8003440 <HAL_ADC_ConfigChannel+0x528>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4a11      	ldr	r2, [pc, #68]	; (8003440 <HAL_ADC_ConfigChannel+0x528>)
 80033fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033fe:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b10      	cmp	r3, #16
 8003406:	d111      	bne.n	800342c <HAL_ADC_ConfigChannel+0x514>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003408:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <HAL_ADC_ConfigChannel+0x52c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <HAL_ADC_ConfigChannel+0x530>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	0c9a      	lsrs	r2, r3, #18
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800341e:	e002      	b.n	8003426 <HAL_ADC_ConfigChannel+0x50e>
          {
            wait_loop_index--;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	3b01      	subs	r3, #1
 8003424:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f9      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x508>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40012700 	.word	0x40012700
 8003444:	20000004 	.word	0x20000004
 8003448:	431bde83 	.word	0x431bde83

0800344c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003466:	2b40      	cmp	r3, #64	; 0x40
 8003468:	d03c      	beq.n	80034e4 <ADC_Enable+0x98>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0201 	orr.w	r2, r2, #1
 8003478:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800347a:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <ADC_Enable+0xa4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <ADC_Enable+0xa8>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	0c9a      	lsrs	r2, r3, #18
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800348e:	e002      	b.n	8003496 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	3b01      	subs	r3, #1
 8003494:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f9      	bne.n	8003490 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800349c:	f7ff f8c0 	bl	8002620 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034a2:	e018      	b.n	80034d6 <ADC_Enable+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80034a4:	f7ff f8bc 	bl	8002620 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d911      	bls.n	80034d6 <ADC_Enable+0x8a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b6:	f043 0210 	orr.w	r2, r3, #16
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	64da      	str	r2, [r3, #76]	; 0x4c
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c2:	f043 0201 	orr.w	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e007      	b.n	80034e6 <ADC_Enable+0x9a>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b40      	cmp	r3, #64	; 0x40
 80034e2:	d1df      	bne.n	80034a4 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000004 	.word	0x20000004
 80034f4:	431bde83 	.word	0x431bde83

080034f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
	...

0800350c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003528:	4013      	ands	r3, r2
 800352a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353e:	4a04      	ldr	r2, [pc, #16]	; (8003550 <__NVIC_SetPriorityGrouping+0x44>)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	60d3      	str	r3, [r2, #12]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003558:	4b04      	ldr	r3, [pc, #16]	; (800356c <__NVIC_GetPriorityGrouping+0x18>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	f003 0307 	and.w	r3, r3, #7
}
 8003562:	4618      	mov	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	2b00      	cmp	r3, #0
 8003580:	db0b      	blt.n	800359a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	f003 021f 	and.w	r2, r3, #31
 8003588:	4906      	ldr	r1, [pc, #24]	; (80035a4 <__NVIC_EnableIRQ+0x34>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2001      	movs	r0, #1
 8003592:	fa00 f202 	lsl.w	r2, r0, r2
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	e000e100 	.word	0xe000e100

080035a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	db0a      	blt.n	80035d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	490c      	ldr	r1, [pc, #48]	; (80035f4 <__NVIC_SetPriority+0x4c>)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	0112      	lsls	r2, r2, #4
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	440b      	add	r3, r1
 80035cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d0:	e00a      	b.n	80035e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4908      	ldr	r1, [pc, #32]	; (80035f8 <__NVIC_SetPriority+0x50>)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	3b04      	subs	r3, #4
 80035e0:	0112      	lsls	r2, r2, #4
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	440b      	add	r3, r1
 80035e6:	761a      	strb	r2, [r3, #24]
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	e000e100 	.word	0xe000e100
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f1c3 0307 	rsb	r3, r3, #7
 8003616:	2b04      	cmp	r3, #4
 8003618:	bf28      	it	cs
 800361a:	2304      	movcs	r3, #4
 800361c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3304      	adds	r3, #4
 8003622:	2b06      	cmp	r3, #6
 8003624:	d902      	bls.n	800362c <NVIC_EncodePriority+0x30>
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3b03      	subs	r3, #3
 800362a:	e000      	b.n	800362e <NVIC_EncodePriority+0x32>
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	f04f 32ff 	mov.w	r2, #4294967295
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43da      	mvns	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	401a      	ands	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003644:	f04f 31ff 	mov.w	r1, #4294967295
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa01 f303 	lsl.w	r3, r1, r3
 800364e:	43d9      	mvns	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003654:	4313      	orrs	r3, r2
         );
}
 8003656:	4618      	mov	r0, r3
 8003658:	3724      	adds	r7, #36	; 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b07      	cmp	r3, #7
 800366c:	d00f      	beq.n	800368e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b06      	cmp	r3, #6
 8003672:	d00c      	beq.n	800368e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b05      	cmp	r3, #5
 8003678:	d009      	beq.n	800368e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d006      	beq.n	800368e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d003      	beq.n	800368e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003686:	21ac      	movs	r1, #172	; 0xac
 8003688:	4804      	ldr	r0, [pc, #16]	; (800369c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800368a:	f7fe fab9 	bl	8001c00 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff ff3c 	bl	800350c <__NVIC_SetPriorityGrouping>
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	0800b530 	.word	0x0800b530

080036a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b0f      	cmp	r3, #15
 80036b6:	d903      	bls.n	80036c0 <HAL_NVIC_SetPriority+0x20>
 80036b8:	21c4      	movs	r1, #196	; 0xc4
 80036ba:	480e      	ldr	r0, [pc, #56]	; (80036f4 <HAL_NVIC_SetPriority+0x54>)
 80036bc:	f7fe faa0 	bl	8001c00 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	d903      	bls.n	80036ce <HAL_NVIC_SetPriority+0x2e>
 80036c6:	21c5      	movs	r1, #197	; 0xc5
 80036c8:	480a      	ldr	r0, [pc, #40]	; (80036f4 <HAL_NVIC_SetPriority+0x54>)
 80036ca:	f7fe fa99 	bl	8001c00 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036ce:	f7ff ff41 	bl	8003554 <__NVIC_GetPriorityGrouping>
 80036d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	6978      	ldr	r0, [r7, #20]
 80036da:	f7ff ff8f 	bl	80035fc <NVIC_EncodePriority>
 80036de:	4602      	mov	r2, r0
 80036e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff ff5e 	bl	80035a8 <__NVIC_SetPriority>
}
 80036ec:	bf00      	nop
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	0800b530 	.word	0x0800b530

080036f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	2b00      	cmp	r3, #0
 8003708:	da03      	bge.n	8003712 <HAL_NVIC_EnableIRQ+0x1a>
 800370a:	21d8      	movs	r1, #216	; 0xd8
 800370c:	4805      	ldr	r0, [pc, #20]	; (8003724 <HAL_NVIC_EnableIRQ+0x2c>)
 800370e:	f7fe fa77 	bl	8001c00 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff ff2a 	bl	8003570 <__NVIC_EnableIRQ>
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	0800b530 	.word	0x0800b530

08003728 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e109      	b.n	800394e <HAL_DMA_Init+0x226>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a86      	ldr	r2, [pc, #536]	; (8003958 <HAL_DMA_Init+0x230>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d03a      	beq.n	80037ba <HAL_DMA_Init+0x92>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a84      	ldr	r2, [pc, #528]	; (800395c <HAL_DMA_Init+0x234>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d035      	beq.n	80037ba <HAL_DMA_Init+0x92>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a83      	ldr	r2, [pc, #524]	; (8003960 <HAL_DMA_Init+0x238>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d030      	beq.n	80037ba <HAL_DMA_Init+0x92>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a81      	ldr	r2, [pc, #516]	; (8003964 <HAL_DMA_Init+0x23c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d02b      	beq.n	80037ba <HAL_DMA_Init+0x92>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a80      	ldr	r2, [pc, #512]	; (8003968 <HAL_DMA_Init+0x240>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d026      	beq.n	80037ba <HAL_DMA_Init+0x92>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a7e      	ldr	r2, [pc, #504]	; (800396c <HAL_DMA_Init+0x244>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d021      	beq.n	80037ba <HAL_DMA_Init+0x92>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a7d      	ldr	r2, [pc, #500]	; (8003970 <HAL_DMA_Init+0x248>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d01c      	beq.n	80037ba <HAL_DMA_Init+0x92>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a7b      	ldr	r2, [pc, #492]	; (8003974 <HAL_DMA_Init+0x24c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d017      	beq.n	80037ba <HAL_DMA_Init+0x92>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a7a      	ldr	r2, [pc, #488]	; (8003978 <HAL_DMA_Init+0x250>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d012      	beq.n	80037ba <HAL_DMA_Init+0x92>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a78      	ldr	r2, [pc, #480]	; (800397c <HAL_DMA_Init+0x254>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00d      	beq.n	80037ba <HAL_DMA_Init+0x92>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a77      	ldr	r2, [pc, #476]	; (8003980 <HAL_DMA_Init+0x258>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d008      	beq.n	80037ba <HAL_DMA_Init+0x92>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a75      	ldr	r2, [pc, #468]	; (8003984 <HAL_DMA_Init+0x25c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d003      	beq.n	80037ba <HAL_DMA_Init+0x92>
 80037b2:	219a      	movs	r1, #154	; 0x9a
 80037b4:	4874      	ldr	r0, [pc, #464]	; (8003988 <HAL_DMA_Init+0x260>)
 80037b6:	f7fe fa23 	bl	8001c00 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00c      	beq.n	80037dc <HAL_DMA_Init+0xb4>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d008      	beq.n	80037dc <HAL_DMA_Init+0xb4>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d2:	d003      	beq.n	80037dc <HAL_DMA_Init+0xb4>
 80037d4:	219b      	movs	r1, #155	; 0x9b
 80037d6:	486c      	ldr	r0, [pc, #432]	; (8003988 <HAL_DMA_Init+0x260>)
 80037d8:	f7fe fa12 	bl	8001c00 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d007      	beq.n	80037f4 <HAL_DMA_Init+0xcc>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_DMA_Init+0xcc>
 80037ec:	219c      	movs	r1, #156	; 0x9c
 80037ee:	4866      	ldr	r0, [pc, #408]	; (8003988 <HAL_DMA_Init+0x260>)
 80037f0:	f7fe fa06 	bl	8001c00 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b80      	cmp	r3, #128	; 0x80
 80037fa:	d007      	beq.n	800380c <HAL_DMA_Init+0xe4>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_DMA_Init+0xe4>
 8003804:	219d      	movs	r1, #157	; 0x9d
 8003806:	4860      	ldr	r0, [pc, #384]	; (8003988 <HAL_DMA_Init+0x260>)
 8003808:	f7fe f9fa 	bl	8001c00 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00d      	beq.n	8003830 <HAL_DMA_Init+0x108>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381c:	d008      	beq.n	8003830 <HAL_DMA_Init+0x108>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003826:	d003      	beq.n	8003830 <HAL_DMA_Init+0x108>
 8003828:	219e      	movs	r1, #158	; 0x9e
 800382a:	4857      	ldr	r0, [pc, #348]	; (8003988 <HAL_DMA_Init+0x260>)
 800382c:	f7fe f9e8 	bl	8001c00 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00d      	beq.n	8003854 <HAL_DMA_Init+0x12c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003840:	d008      	beq.n	8003854 <HAL_DMA_Init+0x12c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384a:	d003      	beq.n	8003854 <HAL_DMA_Init+0x12c>
 800384c:	219f      	movs	r1, #159	; 0x9f
 800384e:	484e      	ldr	r0, [pc, #312]	; (8003988 <HAL_DMA_Init+0x260>)
 8003850:	f7fe f9d6 	bl	8001c00 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_DMA_Init+0x144>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b20      	cmp	r3, #32
 8003862:	d003      	beq.n	800386c <HAL_DMA_Init+0x144>
 8003864:	21a0      	movs	r1, #160	; 0xa0
 8003866:	4848      	ldr	r0, [pc, #288]	; (8003988 <HAL_DMA_Init+0x260>)
 8003868:	f7fe f9ca 	bl	8001c00 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d012      	beq.n	800389a <HAL_DMA_Init+0x172>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387c:	d00d      	beq.n	800389a <HAL_DMA_Init+0x172>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003886:	d008      	beq.n	800389a <HAL_DMA_Init+0x172>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003890:	d003      	beq.n	800389a <HAL_DMA_Init+0x172>
 8003892:	21a1      	movs	r1, #161	; 0xa1
 8003894:	483c      	ldr	r0, [pc, #240]	; (8003988 <HAL_DMA_Init+0x260>)
 8003896:	f7fe f9b3 	bl	8001c00 <assert_failed>

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	4b3a      	ldr	r3, [pc, #232]	; (800398c <HAL_DMA_Init+0x264>)
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d80f      	bhi.n	80038c6 <HAL_DMA_Init+0x19e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	4b38      	ldr	r3, [pc, #224]	; (8003990 <HAL_DMA_Init+0x268>)
 80038ae:	4413      	add	r3, r2
 80038b0:	4a38      	ldr	r2, [pc, #224]	; (8003994 <HAL_DMA_Init+0x26c>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	009a      	lsls	r2, r3, #2
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a35      	ldr	r2, [pc, #212]	; (8003998 <HAL_DMA_Init+0x270>)
 80038c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80038c4:	e00e      	b.n	80038e4 <HAL_DMA_Init+0x1bc>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	4b33      	ldr	r3, [pc, #204]	; (800399c <HAL_DMA_Init+0x274>)
 80038ce:	4413      	add	r3, r2
 80038d0:	4a30      	ldr	r2, [pc, #192]	; (8003994 <HAL_DMA_Init+0x26c>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	009a      	lsls	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a2f      	ldr	r2, [pc, #188]	; (80039a0 <HAL_DMA_Init+0x278>)
 80038e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003908:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003914:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003920:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40026008 	.word	0x40026008
 800395c:	4002601c 	.word	0x4002601c
 8003960:	40026030 	.word	0x40026030
 8003964:	40026044 	.word	0x40026044
 8003968:	40026058 	.word	0x40026058
 800396c:	4002606c 	.word	0x4002606c
 8003970:	40026080 	.word	0x40026080
 8003974:	40026408 	.word	0x40026408
 8003978:	4002641c 	.word	0x4002641c
 800397c:	40026430 	.word	0x40026430
 8003980:	40026444 	.word	0x40026444
 8003984:	40026458 	.word	0x40026458
 8003988:	0800b56c 	.word	0x0800b56c
 800398c:	40026407 	.word	0x40026407
 8003990:	bffd9ff8 	.word	0xbffd9ff8
 8003994:	cccccccd 	.word	0xcccccccd
 8003998:	40026000 	.word	0x40026000
 800399c:	bffd9bf8 	.word	0xbffd9bf8
 80039a0:	40026400 	.word	0x40026400

080039a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_DMA_Start_IT+0x20>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c2:	d304      	bcc.n	80039ce <HAL_DMA_Start_IT+0x2a>
 80039c4:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80039c8:	482c      	ldr	r0, [pc, #176]	; (8003a7c <HAL_DMA_Start_IT+0xd8>)
 80039ca:	f7fe f919 	bl	8001c00 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_DMA_Start_IT+0x38>
 80039d8:	2302      	movs	r3, #2
 80039da:	e04b      	b.n	8003a74 <HAL_DMA_Start_IT+0xd0>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d13a      	bne.n	8003a66 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f8e2 	bl	8003bde <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 020e 	orr.w	r2, r2, #14
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e00f      	b.n	8003a54 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0204 	bic.w	r2, r2, #4
 8003a42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 020a 	orr.w	r2, r2, #10
 8003a52:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	e005      	b.n	8003a72 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	0800b56c 	.word	0x0800b56c

08003a80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	f003 031c 	and.w	r3, r3, #28
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d026      	beq.n	8003afa <HAL_DMA_IRQHandler+0x7a>
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d021      	beq.n	8003afa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d107      	bne.n	8003ad4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0204 	bic.w	r2, r2, #4
 8003ad2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	f003 021c 	and.w	r2, r3, #28
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	2104      	movs	r1, #4
 8003ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d071      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003af8:	e06c      	b.n	8003bd4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f003 031c 	and.w	r3, r3, #28
 8003b02:	2202      	movs	r2, #2
 8003b04:	409a      	lsls	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d02e      	beq.n	8003b6c <HAL_DMA_IRQHandler+0xec>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d029      	beq.n	8003b6c <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10b      	bne.n	8003b3e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 020a 	bic.w	r2, r2, #10
 8003b34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f003 021c 	and.w	r2, r3, #28
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b50:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d038      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b6a:	e033      	b.n	8003bd4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f003 031c 	and.w	r3, r3, #28
 8003b74:	2208      	movs	r2, #8
 8003b76:	409a      	lsls	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d02a      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x156>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d025      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 020e 	bic.w	r2, r2, #14
 8003b98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f003 021c 	and.w	r2, r3, #28
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d004      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
}
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	f003 021c 	and.w	r2, r3, #28
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d108      	bne.n	8003c22 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c20:	e007      	b.n	8003c32 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	60da      	str	r2, [r3, #12]
}
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a3f      	ldr	r2, [pc, #252]	; (8003d54 <HAL_GPIO_Init+0x118>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01f      	beq.n	8003c9a <HAL_GPIO_Init+0x5e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a3e      	ldr	r2, [pc, #248]	; (8003d58 <HAL_GPIO_Init+0x11c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d01b      	beq.n	8003c9a <HAL_GPIO_Init+0x5e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a3d      	ldr	r2, [pc, #244]	; (8003d5c <HAL_GPIO_Init+0x120>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d017      	beq.n	8003c9a <HAL_GPIO_Init+0x5e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a3c      	ldr	r2, [pc, #240]	; (8003d60 <HAL_GPIO_Init+0x124>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_GPIO_Init+0x5e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a3b      	ldr	r2, [pc, #236]	; (8003d64 <HAL_GPIO_Init+0x128>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00f      	beq.n	8003c9a <HAL_GPIO_Init+0x5e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a3a      	ldr	r2, [pc, #232]	; (8003d68 <HAL_GPIO_Init+0x12c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d00b      	beq.n	8003c9a <HAL_GPIO_Init+0x5e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a39      	ldr	r2, [pc, #228]	; (8003d6c <HAL_GPIO_Init+0x130>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d007      	beq.n	8003c9a <HAL_GPIO_Init+0x5e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a38      	ldr	r2, [pc, #224]	; (8003d70 <HAL_GPIO_Init+0x134>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d003      	beq.n	8003c9a <HAL_GPIO_Init+0x5e>
 8003c92:	21b9      	movs	r1, #185	; 0xb9
 8003c94:	4837      	ldr	r0, [pc, #220]	; (8003d74 <HAL_GPIO_Init+0x138>)
 8003c96:	f7fd ffb3 	bl	8001c00 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_GPIO_Init+0x74>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	0c1b      	lsrs	r3, r3, #16
 8003caa:	041b      	lsls	r3, r3, #16
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x7c>
 8003cb0:	21ba      	movs	r1, #186	; 0xba
 8003cb2:	4830      	ldr	r0, [pc, #192]	; (8003d74 <HAL_GPIO_Init+0x138>)
 8003cb4:	f7fd ffa4 	bl	8001c00 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d035      	beq.n	8003d2c <HAL_GPIO_Init+0xf0>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d031      	beq.n	8003d2c <HAL_GPIO_Init+0xf0>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b11      	cmp	r3, #17
 8003cce:	d02d      	beq.n	8003d2c <HAL_GPIO_Init+0xf0>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d029      	beq.n	8003d2c <HAL_GPIO_Init+0xf0>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b12      	cmp	r3, #18
 8003cde:	d025      	beq.n	8003d2c <HAL_GPIO_Init+0xf0>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a24      	ldr	r2, [pc, #144]	; (8003d78 <HAL_GPIO_Init+0x13c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d020      	beq.n	8003d2c <HAL_GPIO_Init+0xf0>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4a23      	ldr	r2, [pc, #140]	; (8003d7c <HAL_GPIO_Init+0x140>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d01b      	beq.n	8003d2c <HAL_GPIO_Init+0xf0>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a21      	ldr	r2, [pc, #132]	; (8003d80 <HAL_GPIO_Init+0x144>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d016      	beq.n	8003d2c <HAL_GPIO_Init+0xf0>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	4a20      	ldr	r2, [pc, #128]	; (8003d84 <HAL_GPIO_Init+0x148>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d011      	beq.n	8003d2c <HAL_GPIO_Init+0xf0>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4a1e      	ldr	r2, [pc, #120]	; (8003d88 <HAL_GPIO_Init+0x14c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00c      	beq.n	8003d2c <HAL_GPIO_Init+0xf0>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4a1d      	ldr	r2, [pc, #116]	; (8003d8c <HAL_GPIO_Init+0x150>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d007      	beq.n	8003d2c <HAL_GPIO_Init+0xf0>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0xf0>
 8003d24:	21bb      	movs	r1, #187	; 0xbb
 8003d26:	4813      	ldr	r0, [pc, #76]	; (8003d74 <HAL_GPIO_Init+0x138>)
 8003d28:	f7fd ff6a 	bl	8001c00 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 81e4 	beq.w	80040fe <HAL_GPIO_Init+0x4c2>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	f000 81df 	beq.w	80040fe <HAL_GPIO_Init+0x4c2>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	f000 81da 	beq.w	80040fe <HAL_GPIO_Init+0x4c2>
 8003d4a:	21bc      	movs	r1, #188	; 0xbc
 8003d4c:	4809      	ldr	r0, [pc, #36]	; (8003d74 <HAL_GPIO_Init+0x138>)
 8003d4e:	f7fd ff57 	bl	8001c00 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d52:	e1d4      	b.n	80040fe <HAL_GPIO_Init+0x4c2>
 8003d54:	40020000 	.word	0x40020000
 8003d58:	40020400 	.word	0x40020400
 8003d5c:	40020800 	.word	0x40020800
 8003d60:	40020c00 	.word	0x40020c00
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40021800 	.word	0x40021800
 8003d6c:	40021c00 	.word	0x40021c00
 8003d70:	40021400 	.word	0x40021400
 8003d74:	0800b5a4 	.word	0x0800b5a4
 8003d78:	10110000 	.word	0x10110000
 8003d7c:	10210000 	.word	0x10210000
 8003d80:	10310000 	.word	0x10310000
 8003d84:	10120000 	.word	0x10120000
 8003d88:	10220000 	.word	0x10220000
 8003d8c:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	2101      	movs	r1, #1
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 81a8 	beq.w	80040f8 <HAL_GPIO_Init+0x4bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x17c>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b12      	cmp	r3, #18
 8003db6:	d14f      	bne.n	8003e58 <HAL_GPIO_Init+0x21c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a92      	ldr	r2, [pc, #584]	; (8004004 <HAL_GPIO_Init+0x3c8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d01f      	beq.n	8003e00 <HAL_GPIO_Init+0x1c4>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a91      	ldr	r2, [pc, #580]	; (8004008 <HAL_GPIO_Init+0x3cc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d01b      	beq.n	8003e00 <HAL_GPIO_Init+0x1c4>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a90      	ldr	r2, [pc, #576]	; (800400c <HAL_GPIO_Init+0x3d0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d017      	beq.n	8003e00 <HAL_GPIO_Init+0x1c4>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a8f      	ldr	r2, [pc, #572]	; (8004010 <HAL_GPIO_Init+0x3d4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d013      	beq.n	8003e00 <HAL_GPIO_Init+0x1c4>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a8e      	ldr	r2, [pc, #568]	; (8004014 <HAL_GPIO_Init+0x3d8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00f      	beq.n	8003e00 <HAL_GPIO_Init+0x1c4>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a8d      	ldr	r2, [pc, #564]	; (8004018 <HAL_GPIO_Init+0x3dc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00b      	beq.n	8003e00 <HAL_GPIO_Init+0x1c4>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a8c      	ldr	r2, [pc, #560]	; (800401c <HAL_GPIO_Init+0x3e0>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d007      	beq.n	8003e00 <HAL_GPIO_Init+0x1c4>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a8b      	ldr	r2, [pc, #556]	; (8004020 <HAL_GPIO_Init+0x3e4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x1c4>
 8003df8:	21cb      	movs	r1, #203	; 0xcb
 8003dfa:	488a      	ldr	r0, [pc, #552]	; (8004024 <HAL_GPIO_Init+0x3e8>)
 8003dfc:	f7fd ff00 	bl	8001c00 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	2b0f      	cmp	r3, #15
 8003e06:	d903      	bls.n	8003e10 <HAL_GPIO_Init+0x1d4>
 8003e08:	21cc      	movs	r1, #204	; 0xcc
 8003e0a:	4886      	ldr	r0, [pc, #536]	; (8004024 <HAL_GPIO_Init+0x3e8>)
 8003e0c:	f7fd fef8 	bl	8001c00 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	08da      	lsrs	r2, r3, #3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3208      	adds	r2, #8
 8003e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	220f      	movs	r2, #15
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4013      	ands	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	08da      	lsrs	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3208      	adds	r2, #8
 8003e52:	6939      	ldr	r1, [r7, #16]
 8003e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	2203      	movs	r2, #3
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 0203 	and.w	r2, r3, #3
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d00b      	beq.n	8003eac <HAL_GPIO_Init+0x270>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d007      	beq.n	8003eac <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ea0:	2b11      	cmp	r3, #17
 8003ea2:	d003      	beq.n	8003eac <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b12      	cmp	r3, #18
 8003eaa:	d144      	bne.n	8003f36 <HAL_GPIO_Init+0x2fa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00f      	beq.n	8003ed4 <HAL_GPIO_Init+0x298>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d00b      	beq.n	8003ed4 <HAL_GPIO_Init+0x298>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d007      	beq.n	8003ed4 <HAL_GPIO_Init+0x298>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d003      	beq.n	8003ed4 <HAL_GPIO_Init+0x298>
 8003ecc:	21e1      	movs	r1, #225	; 0xe1
 8003ece:	4855      	ldr	r0, [pc, #340]	; (8004024 <HAL_GPIO_Init+0x3e8>)
 8003ed0:	f7fd fe96 	bl	8001c00 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	091b      	lsrs	r3, r3, #4
 8003f20:	f003 0201 	and.w	r2, r3, #1
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	2203      	movs	r2, #3
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80c2 	beq.w	80040f8 <HAL_GPIO_Init+0x4bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f74:	4b2c      	ldr	r3, [pc, #176]	; (8004028 <HAL_GPIO_Init+0x3ec>)
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	4a2b      	ldr	r2, [pc, #172]	; (8004028 <HAL_GPIO_Init+0x3ec>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	6213      	str	r3, [r2, #32]
 8003f80:	4b29      	ldr	r3, [pc, #164]	; (8004028 <HAL_GPIO_Init+0x3ec>)
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8003f8c:	4a27      	ldr	r2, [pc, #156]	; (800402c <HAL_GPIO_Init+0x3f0>)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	3302      	adds	r3, #2
 8003f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	220f      	movs	r2, #15
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4013      	ands	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a14      	ldr	r2, [pc, #80]	; (8004004 <HAL_GPIO_Init+0x3c8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d03b      	beq.n	8004030 <HAL_GPIO_Init+0x3f4>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a13      	ldr	r2, [pc, #76]	; (8004008 <HAL_GPIO_Init+0x3cc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d01f      	beq.n	8004000 <HAL_GPIO_Init+0x3c4>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a12      	ldr	r2, [pc, #72]	; (800400c <HAL_GPIO_Init+0x3d0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d019      	beq.n	8003ffc <HAL_GPIO_Init+0x3c0>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a11      	ldr	r2, [pc, #68]	; (8004010 <HAL_GPIO_Init+0x3d4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <HAL_GPIO_Init+0x3bc>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a10      	ldr	r2, [pc, #64]	; (8004014 <HAL_GPIO_Init+0x3d8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_GPIO_Init+0x3b8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a11      	ldr	r2, [pc, #68]	; (8004020 <HAL_GPIO_Init+0x3e4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <HAL_GPIO_Init+0x3b4>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a0d      	ldr	r2, [pc, #52]	; (8004018 <HAL_GPIO_Init+0x3dc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d101      	bne.n	8003fec <HAL_GPIO_Init+0x3b0>
 8003fe8:	2306      	movs	r3, #6
 8003fea:	e022      	b.n	8004032 <HAL_GPIO_Init+0x3f6>
 8003fec:	2307      	movs	r3, #7
 8003fee:	e020      	b.n	8004032 <HAL_GPIO_Init+0x3f6>
 8003ff0:	2305      	movs	r3, #5
 8003ff2:	e01e      	b.n	8004032 <HAL_GPIO_Init+0x3f6>
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	e01c      	b.n	8004032 <HAL_GPIO_Init+0x3f6>
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e01a      	b.n	8004032 <HAL_GPIO_Init+0x3f6>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e018      	b.n	8004032 <HAL_GPIO_Init+0x3f6>
 8004000:	2301      	movs	r3, #1
 8004002:	e016      	b.n	8004032 <HAL_GPIO_Init+0x3f6>
 8004004:	40020000 	.word	0x40020000
 8004008:	40020400 	.word	0x40020400
 800400c:	40020800 	.word	0x40020800
 8004010:	40020c00 	.word	0x40020c00
 8004014:	40021000 	.word	0x40021000
 8004018:	40021800 	.word	0x40021800
 800401c:	40021c00 	.word	0x40021c00
 8004020:	40021400 	.word	0x40021400
 8004024:	0800b5a4 	.word	0x0800b5a4
 8004028:	40023800 	.word	0x40023800
 800402c:	40010000 	.word	0x40010000
 8004030:	2300      	movs	r3, #0
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	f002 0203 	and.w	r2, r2, #3
 8004038:	0092      	lsls	r2, r2, #2
 800403a:	4093      	lsls	r3, r2
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004042:	4935      	ldr	r1, [pc, #212]	; (8004118 <HAL_GPIO_Init+0x4dc>)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	3302      	adds	r3, #2
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004050:	4b32      	ldr	r3, [pc, #200]	; (800411c <HAL_GPIO_Init+0x4e0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	43db      	mvns	r3, r3
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4013      	ands	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x438>
        {
          SET_BIT(temp, iocurrent); 
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004074:	4a29      	ldr	r2, [pc, #164]	; (800411c <HAL_GPIO_Init+0x4e0>)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800407a:	4b28      	ldr	r3, [pc, #160]	; (800411c <HAL_GPIO_Init+0x4e0>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	43db      	mvns	r3, r3
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x462>
        {
          SET_BIT(temp, iocurrent); 
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800409e:	4a1f      	ldr	r2, [pc, #124]	; (800411c <HAL_GPIO_Init+0x4e0>)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_GPIO_Init+0x4e0>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x48c>
        {
          SET_BIT(temp, iocurrent); 
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80040c8:	4a14      	ldr	r2, [pc, #80]	; (800411c <HAL_GPIO_Init+0x4e0>)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040ce:	4b13      	ldr	r3, [pc, #76]	; (800411c <HAL_GPIO_Init+0x4e0>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x4b6>
        {
          SET_BIT(temp, iocurrent); 
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80040f2:	4a0a      	ldr	r2, [pc, #40]	; (800411c <HAL_GPIO_Init+0x4e0>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	3301      	adds	r3, #1
 80040fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	f47f ae41 	bne.w	8003d90 <HAL_GPIO_Init+0x154>
  } 
}
 800410e:	bf00      	nop
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40010000 	.word	0x40010000
 800411c:	40010400 	.word	0x40010400

08004120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800412c:	887b      	ldrh	r3, [r7, #2]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d004      	beq.n	800413c <HAL_GPIO_ReadPin+0x1c>
 8004132:	887b      	ldrh	r3, [r7, #2]
 8004134:	0c1b      	lsrs	r3, r3, #16
 8004136:	041b      	lsls	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <HAL_GPIO_ReadPin+0x26>
 800413c:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8004140:	4809      	ldr	r0, [pc, #36]	; (8004168 <HAL_GPIO_ReadPin+0x48>)
 8004142:	f7fd fd5d 	bl	8001c00 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	887b      	ldrh	r3, [r7, #2]
 800414c:	4013      	ands	r3, r2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
 8004156:	e001      	b.n	800415c <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004158:	2300      	movs	r3, #0
 800415a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	0800b5a4 	.word	0x0800b5a4

0800416c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
 8004178:	4613      	mov	r3, r2
 800417a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800417c:	887b      	ldrh	r3, [r7, #2]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d004      	beq.n	800418c <HAL_GPIO_WritePin+0x20>
 8004182:	887b      	ldrh	r3, [r7, #2]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d004      	beq.n	8004196 <HAL_GPIO_WritePin+0x2a>
 800418c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8004190:	480e      	ldr	r0, [pc, #56]	; (80041cc <HAL_GPIO_WritePin+0x60>)
 8004192:	f7fd fd35 	bl	8001c00 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004196:	787b      	ldrb	r3, [r7, #1]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <HAL_GPIO_WritePin+0x40>
 800419c:	787b      	ldrb	r3, [r7, #1]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d004      	beq.n	80041ac <HAL_GPIO_WritePin+0x40>
 80041a2:	f240 11a5 	movw	r1, #421	; 0x1a5
 80041a6:	4809      	ldr	r0, [pc, #36]	; (80041cc <HAL_GPIO_WritePin+0x60>)
 80041a8:	f7fd fd2a 	bl	8001c00 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80041ac:	787b      	ldrb	r3, [r7, #1]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041b2:	887a      	ldrh	r2, [r7, #2]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80041b8:	e003      	b.n	80041c2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80041ba:	887b      	ldrh	r3, [r7, #2]
 80041bc:	041a      	lsls	r2, r3, #16
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	619a      	str	r2, [r3, #24]
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	0800b5a4 	.word	0x0800b5a4

080041d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	88fb      	ldrh	r3, [r7, #6]
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d006      	beq.n	80041f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041e6:	4a05      	ldr	r2, [pc, #20]	; (80041fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041e8:	88fb      	ldrh	r3, [r7, #6]
 80041ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fc ff9a 	bl	8001128 <HAL_GPIO_EXTI_Callback>
  }
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40010400 	.word	0x40010400

08004200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e19b      	b.n	800454a <HAL_I2C_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a98      	ldr	r2, [pc, #608]	; (8004478 <HAL_I2C_Init+0x278>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d009      	beq.n	8004230 <HAL_I2C_Init+0x30>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a96      	ldr	r2, [pc, #600]	; (800447c <HAL_I2C_Init+0x27c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_I2C_Init+0x30>
 8004226:	f240 11bb 	movw	r1, #443	; 0x1bb
 800422a:	4895      	ldr	r0, [pc, #596]	; (8004480 <HAL_I2C_Init+0x280>)
 800422c:	f7fd fce8 	bl	8001c00 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <HAL_I2C_Init+0x42>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4a91      	ldr	r2, [pc, #580]	; (8004484 <HAL_I2C_Init+0x284>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d904      	bls.n	800424c <HAL_I2C_Init+0x4c>
 8004242:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8004246:	488e      	ldr	r0, [pc, #568]	; (8004480 <HAL_I2C_Init+0x280>)
 8004248:	f7fd fcda 	bl	8001c00 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_I2C_Init+0x68>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800425c:	d004      	beq.n	8004268 <HAL_I2C_Init+0x68>
 800425e:	f240 11bd 	movw	r1, #445	; 0x1bd
 8004262:	4887      	ldr	r0, [pc, #540]	; (8004480 <HAL_I2C_Init+0x280>)
 8004264:	f7fd fccc 	bl	8001c00 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004270:	f023 0303 	bic.w	r3, r3, #3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <HAL_I2C_Init+0x82>
 8004278:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800427c:	4880      	ldr	r0, [pc, #512]	; (8004480 <HAL_I2C_Init+0x280>)
 800427e:	f7fd fcbf 	bl	8001c00 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800428a:	d009      	beq.n	80042a0 <HAL_I2C_Init+0xa0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004294:	d004      	beq.n	80042a0 <HAL_I2C_Init+0xa0>
 8004296:	f240 11bf 	movw	r1, #447	; 0x1bf
 800429a:	4879      	ldr	r0, [pc, #484]	; (8004480 <HAL_I2C_Init+0x280>)
 800429c:	f7fd fcb0 	bl	8001c00 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_I2C_Init+0xba>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d004      	beq.n	80042ba <HAL_I2C_Init+0xba>
 80042b0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80042b4:	4872      	ldr	r0, [pc, #456]	; (8004480 <HAL_I2C_Init+0x280>)
 80042b6:	f7fd fca3 	bl	8001c00 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d004      	beq.n	80042d0 <HAL_I2C_Init+0xd0>
 80042c6:	f240 11c1 	movw	r1, #449	; 0x1c1
 80042ca:	486d      	ldr	r0, [pc, #436]	; (8004480 <HAL_I2C_Init+0x280>)
 80042cc:	f7fd fc98 	bl	8001c00 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_I2C_Init+0xea>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d004      	beq.n	80042ea <HAL_I2C_Init+0xea>
 80042e0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80042e4:	4866      	ldr	r0, [pc, #408]	; (8004480 <HAL_I2C_Init+0x280>)
 80042e6:	f7fd fc8b 	bl	8001c00 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d008      	beq.n	8004304 <HAL_I2C_Init+0x104>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	2b80      	cmp	r3, #128	; 0x80
 80042f8:	d004      	beq.n	8004304 <HAL_I2C_Init+0x104>
 80042fa:	f240 11c3 	movw	r1, #451	; 0x1c3
 80042fe:	4860      	ldr	r0, [pc, #384]	; (8004480 <HAL_I2C_Init+0x280>)
 8004300:	f7fd fc7e 	bl	8001c00 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d106      	bne.n	800431e <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7fd fb91 	bl	8001a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2224      	movs	r2, #36	; 0x24
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004336:	f001 fdfd 	bl	8005f34 <HAL_RCC_GetPCLK1Freq>
 800433a:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	4a51      	ldr	r2, [pc, #324]	; (8004488 <HAL_I2C_Init+0x288>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d807      	bhi.n	8004356 <HAL_I2C_Init+0x156>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4a50      	ldr	r2, [pc, #320]	; (800448c <HAL_I2C_Init+0x28c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	bf94      	ite	ls
 800434e:	2301      	movls	r3, #1
 8004350:	2300      	movhi	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	e006      	b.n	8004364 <HAL_I2C_Init+0x164>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a4d      	ldr	r2, [pc, #308]	; (8004490 <HAL_I2C_Init+0x290>)
 800435a:	4293      	cmp	r3, r2
 800435c:	bf94      	ite	ls
 800435e:	2301      	movls	r3, #1
 8004360:	2300      	movhi	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_I2C_Init+0x16c>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0ee      	b.n	800454a <HAL_I2C_Init+0x34a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4a49      	ldr	r2, [pc, #292]	; (8004494 <HAL_I2C_Init+0x294>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	0c9b      	lsrs	r3, r3, #18
 8004376:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	430a      	orrs	r2, r1
 800438a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4a3b      	ldr	r2, [pc, #236]	; (8004488 <HAL_I2C_Init+0x288>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d802      	bhi.n	80043a6 <HAL_I2C_Init+0x1a6>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	3301      	adds	r3, #1
 80043a4:	e009      	b.n	80043ba <HAL_I2C_Init+0x1ba>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043ac:	fb02 f303 	mul.w	r3, r2, r3
 80043b0:	4a39      	ldr	r2, [pc, #228]	; (8004498 <HAL_I2C_Init+0x298>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	3301      	adds	r3, #1
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	430b      	orrs	r3, r1
 80043c0:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043cc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	492c      	ldr	r1, [pc, #176]	; (8004488 <HAL_I2C_Init+0x288>)
 80043d6:	428b      	cmp	r3, r1
 80043d8:	d80d      	bhi.n	80043f6 <HAL_I2C_Init+0x1f6>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1e59      	subs	r1, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e8:	3301      	adds	r3, #1
 80043ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	bf38      	it	cc
 80043f2:	2304      	movcc	r3, #4
 80043f4:	e062      	b.n	80044bc <HAL_I2C_Init+0x2bc>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d111      	bne.n	8004422 <HAL_I2C_Init+0x222>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1e58      	subs	r0, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	440b      	add	r3, r1
 800440c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004410:	3301      	adds	r3, #1
 8004412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004416:	2b00      	cmp	r3, #0
 8004418:	bf0c      	ite	eq
 800441a:	2301      	moveq	r3, #1
 800441c:	2300      	movne	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	e012      	b.n	8004448 <HAL_I2C_Init+0x248>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1e58      	subs	r0, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6859      	ldr	r1, [r3, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	0099      	lsls	r1, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	fbb0 f3f3 	udiv	r3, r0, r3
 8004438:	3301      	adds	r3, #1
 800443a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443e:	2b00      	cmp	r3, #0
 8004440:	bf0c      	ite	eq
 8004442:	2301      	moveq	r3, #1
 8004444:	2300      	movne	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_I2C_Init+0x250>
 800444c:	2301      	movs	r3, #1
 800444e:	e035      	b.n	80044bc <HAL_I2C_Init+0x2bc>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d121      	bne.n	800449c <HAL_I2C_Init+0x29c>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	1e58      	subs	r0, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	460b      	mov	r3, r1
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	440b      	add	r3, r1
 8004466:	fbb0 f3f3 	udiv	r3, r0, r3
 800446a:	3301      	adds	r3, #1
 800446c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004474:	e022      	b.n	80044bc <HAL_I2C_Init+0x2bc>
 8004476:	bf00      	nop
 8004478:	40005400 	.word	0x40005400
 800447c:	40005800 	.word	0x40005800
 8004480:	0800b5e0 	.word	0x0800b5e0
 8004484:	00061a80 	.word	0x00061a80
 8004488:	000186a0 	.word	0x000186a0
 800448c:	001e847f 	.word	0x001e847f
 8004490:	003d08ff 	.word	0x003d08ff
 8004494:	431bde83 	.word	0x431bde83
 8004498:	10624dd3 	.word	0x10624dd3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1e58      	subs	r0, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6859      	ldr	r1, [r3, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	0099      	lsls	r1, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80044b2:	3301      	adds	r3, #1
 80044b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	6809      	ldr	r1, [r1, #0]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69da      	ldr	r2, [r3, #28]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6911      	ldr	r1, [r2, #16]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68d2      	ldr	r2, [r2, #12]
 80044f6:	4311      	orrs	r1, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	430b      	orrs	r3, r1
 80044fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop

08004554 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	461a      	mov	r2, r3
 8004560:	460b      	mov	r3, r1
 8004562:	817b      	strh	r3, [r7, #10]
 8004564:	4613      	mov	r3, r2
 8004566:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004568:	f7fe f85a 	bl	8002620 <HAL_GetTick>
 800456c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b20      	cmp	r3, #32
 8004578:	f040 80e0 	bne.w	800473c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	2319      	movs	r3, #25
 8004582:	2201      	movs	r2, #1
 8004584:	4970      	ldr	r1, [pc, #448]	; (8004748 <HAL_I2C_Master_Transmit+0x1f4>)
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fc5a 	bl	8004e40 <I2C_WaitOnFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
 8004594:	e0d3      	b.n	800473e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_I2C_Master_Transmit+0x50>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e0cc      	b.n	800473e <HAL_I2C_Master_Transmit+0x1ea>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d007      	beq.n	80045ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2221      	movs	r2, #33	; 0x21
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2210      	movs	r2, #16
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	893a      	ldrh	r2, [r7, #8]
 80045fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4a50      	ldr	r2, [pc, #320]	; (800474c <HAL_I2C_Master_Transmit+0x1f8>)
 800460a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800460c:	8979      	ldrh	r1, [r7, #10]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	6a3a      	ldr	r2, [r7, #32]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 face 	bl	8004bb4 <I2C_MasterRequestWrite>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e08d      	b.n	800473e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004638:	e066      	b.n	8004708 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	6a39      	ldr	r1, [r7, #32]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fcd4 	bl	8004fec <I2C_WaitOnTXEFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00d      	beq.n	8004666 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b04      	cmp	r3, #4
 8004650:	d107      	bne.n	8004662 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004660:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e06b      	b.n	800473e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	781a      	ldrb	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d11b      	bne.n	80046dc <HAL_I2C_Master_Transmit+0x188>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d017      	beq.n	80046dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	6a39      	ldr	r1, [r7, #32]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fcc4 	bl	800506e <I2C_WaitOnBTFFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00d      	beq.n	8004708 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d107      	bne.n	8004704 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004702:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e01a      	b.n	800473e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470c:	2b00      	cmp	r3, #0
 800470e:	d194      	bne.n	800463a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800471e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	e000      	b.n	800473e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800473c:	2302      	movs	r3, #2
  }
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	00100002 	.word	0x00100002
 800474c:	ffff0000 	.word	0xffff0000

08004750 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08c      	sub	sp, #48	; 0x30
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	4608      	mov	r0, r1
 800475a:	4611      	mov	r1, r2
 800475c:	461a      	mov	r2, r3
 800475e:	4603      	mov	r3, r0
 8004760:	817b      	strh	r3, [r7, #10]
 8004762:	460b      	mov	r3, r1
 8004764:	813b      	strh	r3, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800476a:	f7fd ff59 	bl	8002620 <HAL_GetTick>
 800476e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004770:	88fb      	ldrh	r3, [r7, #6]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d007      	beq.n	8004786 <HAL_I2C_Mem_Read+0x36>
 8004776:	88fb      	ldrh	r3, [r7, #6]
 8004778:	2b10      	cmp	r3, #16
 800477a:	d004      	beq.n	8004786 <HAL_I2C_Mem_Read+0x36>
 800477c:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8004780:	4881      	ldr	r0, [pc, #516]	; (8004988 <HAL_I2C_Mem_Read+0x238>)
 8004782:	f7fd fa3d 	bl	8001c00 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b20      	cmp	r3, #32
 8004790:	f040 8209 	bne.w	8004ba6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	2319      	movs	r3, #25
 800479a:	2201      	movs	r2, #1
 800479c:	497b      	ldr	r1, [pc, #492]	; (800498c <HAL_I2C_Mem_Read+0x23c>)
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fb4e 	bl	8004e40 <I2C_WaitOnFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
 80047ac:	e1fc      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_I2C_Mem_Read+0x6c>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e1f5      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d007      	beq.n	80047e2 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2222      	movs	r2, #34	; 0x22
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2240      	movs	r2, #64	; 0x40
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800480c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004812:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4a5b      	ldr	r2, [pc, #364]	; (8004990 <HAL_I2C_Mem_Read+0x240>)
 8004822:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004824:	88f8      	ldrh	r0, [r7, #6]
 8004826:	893a      	ldrh	r2, [r7, #8]
 8004828:	8979      	ldrh	r1, [r7, #10]
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	4603      	mov	r3, r0
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fa33 	bl	8004ca0 <I2C_RequestMemoryRead>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e1b1      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004848:	2b00      	cmp	r3, #0
 800484a:	d113      	bne.n	8004874 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484c:	2300      	movs	r3, #0
 800484e:	623b      	str	r3, [r7, #32]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	623b      	str	r3, [r7, #32]
 8004860:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e185      	b.n	8004b80 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004878:	2b01      	cmp	r3, #1
 800487a:	d11b      	bne.n	80048b4 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800488a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	61fb      	str	r3, [r7, #28]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	e165      	b.n	8004b80 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d11b      	bne.n	80048f4 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ca:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048da:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048dc:	2300      	movs	r3, #0
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	e145      	b.n	8004b80 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800490a:	e139      	b.n	8004b80 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004910:	2b03      	cmp	r3, #3
 8004912:	f200 80f2 	bhi.w	8004afa <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491a:	2b01      	cmp	r3, #1
 800491c:	d123      	bne.n	8004966 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800491e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004920:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fbe4 	bl	80050f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e13a      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004964:	e10c      	b.n	8004b80 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496a:	2b02      	cmp	r3, #2
 800496c:	d14f      	bne.n	8004a0e <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	2200      	movs	r2, #0
 8004976:	4907      	ldr	r1, [pc, #28]	; (8004994 <HAL_I2C_Mem_Read+0x244>)
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 fa61 	bl	8004e40 <I2C_WaitOnFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d009      	beq.n	8004998 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e10f      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
 8004988:	0800b5e0 	.word	0x0800b5e0
 800498c:	00100002 	.word	0x00100002
 8004990:	ffff0000 	.word	0xffff0000
 8004994:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a0c:	e0b8      	b.n	8004b80 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	2200      	movs	r2, #0
 8004a16:	4966      	ldr	r1, [pc, #408]	; (8004bb0 <HAL_I2C_Mem_Read+0x460>)
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fa11 	bl	8004e40 <I2C_WaitOnFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0bf      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	2200      	movs	r2, #0
 8004a72:	494f      	ldr	r1, [pc, #316]	; (8004bb0 <HAL_I2C_Mem_Read+0x460>)
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f9e3 	bl	8004e40 <I2C_WaitOnFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e091      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004af8:	e042      	b.n	8004b80 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 faf6 	bl	80050f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e04c      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d118      	bne.n	8004b80 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f47f aec1 	bne.w	800490c <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e000      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004ba6:	2302      	movs	r3, #2
  }
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3728      	adds	r7, #40	; 0x28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	00010004 	.word	0x00010004

08004bb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d006      	beq.n	8004bde <I2C_MasterRequestWrite+0x2a>
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d003      	beq.n	8004bde <I2C_MasterRequestWrite+0x2a>
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bdc:	d108      	bne.n	8004bf0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e00b      	b.n	8004c08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	2b12      	cmp	r3, #18
 8004bf6:	d107      	bne.n	8004c08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f913 	bl	8004e40 <I2C_WaitOnFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e035      	b.n	8004c90 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c2c:	d108      	bne.n	8004c40 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c2e:	897b      	ldrh	r3, [r7, #10]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c3c:	611a      	str	r2, [r3, #16]
 8004c3e:	e01b      	b.n	8004c78 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c40:	897b      	ldrh	r3, [r7, #10]
 8004c42:	11db      	asrs	r3, r3, #7
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f003 0306 	and.w	r3, r3, #6
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f063 030f 	orn	r3, r3, #15
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	490e      	ldr	r1, [pc, #56]	; (8004c98 <I2C_MasterRequestWrite+0xe4>)
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f945 	bl	8004eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e010      	b.n	8004c90 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c6e:	897b      	ldrh	r3, [r7, #10]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	4907      	ldr	r1, [pc, #28]	; (8004c9c <I2C_MasterRequestWrite+0xe8>)
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f935 	bl	8004eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	00010008 	.word	0x00010008
 8004c9c:	00010002 	.word	0x00010002

08004ca0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	4608      	mov	r0, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	461a      	mov	r2, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	817b      	strh	r3, [r7, #10]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	813b      	strh	r3, [r7, #8]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f8aa 	bl	8004e40 <I2C_WaitOnFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e09e      	b.n	8004e34 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cf6:	897b      	ldrh	r3, [r7, #10]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	6a3a      	ldr	r2, [r7, #32]
 8004d0a:	494c      	ldr	r1, [pc, #304]	; (8004e3c <I2C_RequestMemoryRead+0x19c>)
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f8ee 	bl	8004eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e08b      	b.n	8004e34 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d34:	6a39      	ldr	r1, [r7, #32]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f958 	bl	8004fec <I2C_WaitOnTXEFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00d      	beq.n	8004d5e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d107      	bne.n	8004d5a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e06a      	b.n	8004e34 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d105      	bne.n	8004d70 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d64:	893b      	ldrh	r3, [r7, #8]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	611a      	str	r2, [r3, #16]
 8004d6e:	e021      	b.n	8004db4 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d70:	893b      	ldrh	r3, [r7, #8]
 8004d72:	0a1b      	lsrs	r3, r3, #8
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d80:	6a39      	ldr	r1, [r7, #32]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f932 	bl	8004fec <I2C_WaitOnTXEFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00d      	beq.n	8004daa <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d107      	bne.n	8004da6 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e044      	b.n	8004e34 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004daa:	893b      	ldrh	r3, [r7, #8]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db6:	6a39      	ldr	r1, [r7, #32]
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f917 	bl	8004fec <I2C_WaitOnTXEFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00d      	beq.n	8004de0 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d107      	bne.n	8004ddc <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e029      	b.n	8004e34 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f81f 	bl	8004e40 <I2C_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e013      	b.n	8004e34 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e0c:	897b      	ldrh	r3, [r7, #10]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	6a3a      	ldr	r2, [r7, #32]
 8004e20:	4906      	ldr	r1, [pc, #24]	; (8004e3c <I2C_RequestMemoryRead+0x19c>)
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f863 	bl	8004eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	00010002 	.word	0x00010002

08004e40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e50:	e025      	b.n	8004e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e58:	d021      	beq.n	8004e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5a:	f7fd fbe1 	bl	8002620 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d302      	bcc.n	8004e70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d116      	bne.n	8004e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f043 0220 	orr.w	r2, r3, #32
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e023      	b.n	8004ee6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	0c1b      	lsrs	r3, r3, #16
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10d      	bne.n	8004ec4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	43da      	mvns	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bf0c      	ite	eq
 8004eba:	2301      	moveq	r3, #1
 8004ebc:	2300      	movne	r3, #0
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	e00c      	b.n	8004ede <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	43da      	mvns	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	bf0c      	ite	eq
 8004ed6:	2301      	moveq	r3, #1
 8004ed8:	2300      	movne	r3, #0
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d0b6      	beq.n	8004e52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004efc:	e051      	b.n	8004fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0c:	d123      	bne.n	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0204 	orr.w	r2, r3, #4
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e046      	b.n	8004fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d021      	beq.n	8004fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5e:	f7fd fb5f 	bl	8002620 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d302      	bcc.n	8004f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d116      	bne.n	8004fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f043 0220 	orr.w	r2, r3, #32
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e020      	b.n	8004fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	0c1b      	lsrs	r3, r3, #16
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d10c      	bne.n	8004fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	43da      	mvns	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bf14      	ite	ne
 8004fbe:	2301      	movne	r3, #1
 8004fc0:	2300      	moveq	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	e00b      	b.n	8004fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	43da      	mvns	r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	bf14      	ite	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	2300      	moveq	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d18d      	bne.n	8004efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ff8:	e02d      	b.n	8005056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f8ce 	bl	800519c <I2C_IsAcknowledgeFailed>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e02d      	b.n	8005066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005010:	d021      	beq.n	8005056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005012:	f7fd fb05 	bl	8002620 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	429a      	cmp	r2, r3
 8005020:	d302      	bcc.n	8005028 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d116      	bne.n	8005056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f043 0220 	orr.w	r2, r3, #32
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e007      	b.n	8005066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005060:	2b80      	cmp	r3, #128	; 0x80
 8005062:	d1ca      	bne.n	8004ffa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800507a:	e02d      	b.n	80050d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f88d 	bl	800519c <I2C_IsAcknowledgeFailed>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e02d      	b.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d021      	beq.n	80050d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005094:	f7fd fac4 	bl	8002620 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d302      	bcc.n	80050aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d116      	bne.n	80050d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	f043 0220 	orr.w	r2, r3, #32
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e007      	b.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d1ca      	bne.n	800507c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050fc:	e042      	b.n	8005184 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b10      	cmp	r3, #16
 800510a:	d119      	bne.n	8005140 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0210 	mvn.w	r2, #16
 8005114:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e029      	b.n	8005194 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005140:	f7fd fa6e 	bl	8002620 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	429a      	cmp	r2, r3
 800514e:	d302      	bcc.n	8005156 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d116      	bne.n	8005184 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	f043 0220 	orr.w	r2, r3, #32
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e007      	b.n	8005194 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518e:	2b40      	cmp	r3, #64	; 0x40
 8005190:	d1b5      	bne.n	80050fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b2:	d11b      	bne.n	80051ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	f043 0204 	orr.w	r2, r3, #4
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc80      	pop	{r7}
 80051f6:	4770      	bx	lr

080051f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d102      	bne.n	800520c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	f000 bc6c 	b.w	8005ae4 <HAL_RCC_OscConfig+0x8ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d022      	beq.n	800525a <HAL_RCC_OscConfig+0x62>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d11c      	bne.n	800525a <HAL_RCC_OscConfig+0x62>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d116      	bne.n	800525a <HAL_RCC_OscConfig+0x62>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d110      	bne.n	800525a <HAL_RCC_OscConfig+0x62>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <HAL_RCC_OscConfig+0x62>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <HAL_RCC_OscConfig+0x62>
 8005250:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8005254:	4897      	ldr	r0, [pc, #604]	; (80054b4 <HAL_RCC_OscConfig+0x2bc>)
 8005256:	f7fc fcd3 	bl	8001c00 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800525a:	4b97      	ldr	r3, [pc, #604]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 030c 	and.w	r3, r3, #12
 8005262:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005264:	4b94      	ldr	r3, [pc, #592]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800526c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 808e 	beq.w	8005398 <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00c      	beq.n	800529e <HAL_RCC_OscConfig+0xa6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d008      	beq.n	800529e <HAL_RCC_OscConfig+0xa6>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b05      	cmp	r3, #5
 8005292:	d004      	beq.n	800529e <HAL_RCC_OscConfig+0xa6>
 8005294:	f240 1159 	movw	r1, #345	; 0x159
 8005298:	4886      	ldr	r0, [pc, #536]	; (80054b4 <HAL_RCC_OscConfig+0x2bc>)
 800529a:	f7fc fcb1 	bl	8001c00 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d006      	beq.n	80052b2 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	2b0c      	cmp	r3, #12
 80052a8:	d110      	bne.n	80052cc <HAL_RCC_OscConfig+0xd4>
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b0:	d10c      	bne.n	80052cc <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b2:	4b81      	ldr	r3, [pc, #516]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d06b      	beq.n	8005396 <HAL_RCC_OscConfig+0x19e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d167      	bne.n	8005396 <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f000 bc0c 	b.w	8005ae4 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d106      	bne.n	80052e2 <HAL_RCC_OscConfig+0xea>
 80052d4:	4b78      	ldr	r3, [pc, #480]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a77      	ldr	r2, [pc, #476]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 80052da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	e02d      	b.n	800533e <HAL_RCC_OscConfig+0x146>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10c      	bne.n	8005304 <HAL_RCC_OscConfig+0x10c>
 80052ea:	4b73      	ldr	r3, [pc, #460]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a72      	ldr	r2, [pc, #456]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 80052f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	4b70      	ldr	r3, [pc, #448]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a6f      	ldr	r2, [pc, #444]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 80052fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e01c      	b.n	800533e <HAL_RCC_OscConfig+0x146>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b05      	cmp	r3, #5
 800530a:	d10c      	bne.n	8005326 <HAL_RCC_OscConfig+0x12e>
 800530c:	4b6a      	ldr	r3, [pc, #424]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a69      	ldr	r2, [pc, #420]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 8005312:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	4b67      	ldr	r3, [pc, #412]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a66      	ldr	r2, [pc, #408]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 800531e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e00b      	b.n	800533e <HAL_RCC_OscConfig+0x146>
 8005326:	4b64      	ldr	r3, [pc, #400]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a63      	ldr	r2, [pc, #396]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 800532c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	4b61      	ldr	r3, [pc, #388]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a60      	ldr	r2, [pc, #384]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 8005338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800533c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d013      	beq.n	800536e <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005346:	f7fd f96b 	bl	8002620 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800534e:	f7fd f967 	bl	8002620 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b64      	cmp	r3, #100	; 0x64
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e3c1      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005360:	4b55      	ldr	r3, [pc, #340]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0f0      	beq.n	800534e <HAL_RCC_OscConfig+0x156>
 800536c:	e014      	b.n	8005398 <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536e:	f7fd f957 	bl	8002620 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005376:	f7fd f953 	bl	8002620 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b64      	cmp	r3, #100	; 0x64
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e3ad      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005388:	4b4b      	ldr	r3, [pc, #300]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1f0      	bne.n	8005376 <HAL_RCC_OscConfig+0x17e>
 8005394:	e000      	b.n	8005398 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005396:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d070      	beq.n	8005486 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d008      	beq.n	80053be <HAL_RCC_OscConfig+0x1c6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d004      	beq.n	80053be <HAL_RCC_OscConfig+0x1c6>
 80053b4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80053b8:	483e      	ldr	r0, [pc, #248]	; (80054b4 <HAL_RCC_OscConfig+0x2bc>)
 80053ba:	f7fc fc21 	bl	8001c00 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b1f      	cmp	r3, #31
 80053c4:	d904      	bls.n	80053d0 <HAL_RCC_OscConfig+0x1d8>
 80053c6:	f240 118d 	movw	r1, #397	; 0x18d
 80053ca:	483a      	ldr	r0, [pc, #232]	; (80054b4 <HAL_RCC_OscConfig+0x2bc>)
 80053cc:	f7fc fc18 	bl	8001c00 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	d005      	beq.n	80053e2 <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b0c      	cmp	r3, #12
 80053da:	d119      	bne.n	8005410 <HAL_RCC_OscConfig+0x218>
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d116      	bne.n	8005410 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053e2:	4b35      	ldr	r3, [pc, #212]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_RCC_OscConfig+0x202>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d001      	beq.n	80053fa <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e374      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053fa:	4b2f      	ldr	r3, [pc, #188]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	492b      	ldr	r1, [pc, #172]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 800540a:	4313      	orrs	r3, r2
 800540c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800540e:	e03a      	b.n	8005486 <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d020      	beq.n	800545a <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005418:	4b28      	ldr	r3, [pc, #160]	; (80054bc <HAL_RCC_OscConfig+0x2c4>)
 800541a:	2201      	movs	r2, #1
 800541c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541e:	f7fd f8ff 	bl	8002620 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005426:	f7fd f8fb 	bl	8002620 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e355      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005438:	4b1f      	ldr	r3, [pc, #124]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0f0      	beq.n	8005426 <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005444:	4b1c      	ldr	r3, [pc, #112]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	4919      	ldr	r1, [pc, #100]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 8005454:	4313      	orrs	r3, r2
 8005456:	604b      	str	r3, [r1, #4]
 8005458:	e015      	b.n	8005486 <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800545a:	4b18      	ldr	r3, [pc, #96]	; (80054bc <HAL_RCC_OscConfig+0x2c4>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7fd f8de 	bl	8002620 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005468:	f7fd f8da 	bl	8002620 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e334      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800547a:	4b0f      	ldr	r3, [pc, #60]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 8129 	beq.w	80056e6 <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 80a4 	bne.w	80055e4 <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800549c:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_RCC_OscConfig+0x2c0>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00b      	beq.n	80054c0 <HAL_RCC_OscConfig+0x2c8>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d107      	bne.n	80054c0 <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e317      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
 80054b4:	0800b618 	.word	0x0800b618
 80054b8:	40023800 	.word	0x40023800
 80054bc:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	2bff      	cmp	r3, #255	; 0xff
 80054c6:	d904      	bls.n	80054d2 <HAL_RCC_OscConfig+0x2da>
 80054c8:	f240 11d7 	movw	r1, #471	; 0x1d7
 80054cc:	48a5      	ldr	r0, [pc, #660]	; (8005764 <HAL_RCC_OscConfig+0x56c>)
 80054ce:	f7fc fb97 	bl	8001c00 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d022      	beq.n	8005520 <HAL_RCC_OscConfig+0x328>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e2:	d01d      	beq.n	8005520 <HAL_RCC_OscConfig+0x328>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054ec:	d018      	beq.n	8005520 <HAL_RCC_OscConfig+0x328>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80054f6:	d013      	beq.n	8005520 <HAL_RCC_OscConfig+0x328>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005500:	d00e      	beq.n	8005520 <HAL_RCC_OscConfig+0x328>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800550a:	d009      	beq.n	8005520 <HAL_RCC_OscConfig+0x328>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005514:	d004      	beq.n	8005520 <HAL_RCC_OscConfig+0x328>
 8005516:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800551a:	4892      	ldr	r0, [pc, #584]	; (8005764 <HAL_RCC_OscConfig+0x56c>)
 800551c:	f7fc fb70 	bl	8001c00 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	4b90      	ldr	r3, [pc, #576]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800552c:	429a      	cmp	r2, r3
 800552e:	d91d      	bls.n	800556c <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fd67 	bl	8006008 <RCC_SetFlashLatencyFromMSIRange>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e2cf      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005544:	4b88      	ldr	r3, [pc, #544]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	4985      	ldr	r1, [pc, #532]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 8005552:	4313      	orrs	r3, r2
 8005554:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005556:	4b84      	ldr	r3, [pc, #528]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	061b      	lsls	r3, r3, #24
 8005564:	4980      	ldr	r1, [pc, #512]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 8005566:	4313      	orrs	r3, r2
 8005568:	604b      	str	r3, [r1, #4]
 800556a:	e01c      	b.n	80055a6 <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800556c:	4b7e      	ldr	r3, [pc, #504]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	497b      	ldr	r1, [pc, #492]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 800557a:	4313      	orrs	r3, r2
 800557c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800557e:	4b7a      	ldr	r3, [pc, #488]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	061b      	lsls	r3, r3, #24
 800558c:	4976      	ldr	r1, [pc, #472]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 800558e:	4313      	orrs	r3, r2
 8005590:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fd36 	bl	8006008 <RCC_SetFlashLatencyFromMSIRange>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e29e      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	0b5b      	lsrs	r3, r3, #13
 80055ac:	3301      	adds	r3, #1
 80055ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80055b6:	4a6c      	ldr	r2, [pc, #432]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 80055b8:	6892      	ldr	r2, [r2, #8]
 80055ba:	0912      	lsrs	r2, r2, #4
 80055bc:	f002 020f 	and.w	r2, r2, #15
 80055c0:	496a      	ldr	r1, [pc, #424]	; (800576c <HAL_RCC_OscConfig+0x574>)
 80055c2:	5c8a      	ldrb	r2, [r1, r2]
 80055c4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80055c6:	4a6a      	ldr	r2, [pc, #424]	; (8005770 <HAL_RCC_OscConfig+0x578>)
 80055c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80055ca:	4b6a      	ldr	r3, [pc, #424]	; (8005774 <HAL_RCC_OscConfig+0x57c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fc fb54 	bl	8001c7c <HAL_InitTick>
 80055d4:	4603      	mov	r3, r0
 80055d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 8083 	beq.w	80056e6 <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	e27f      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d008      	beq.n	80055fe <HAL_RCC_OscConfig+0x406>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d004      	beq.n	80055fe <HAL_RCC_OscConfig+0x406>
 80055f4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80055f8:	485a      	ldr	r0, [pc, #360]	; (8005764 <HAL_RCC_OscConfig+0x56c>)
 80055fa:	f7fc fb01 	bl	8001c00 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d059      	beq.n	80056ba <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005606:	4b5c      	ldr	r3, [pc, #368]	; (8005778 <HAL_RCC_OscConfig+0x580>)
 8005608:	2201      	movs	r2, #1
 800560a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560c:	f7fd f808 	bl	8002620 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005614:	f7fd f804 	bl	8002620 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e25e      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005626:	4b50      	ldr	r3, [pc, #320]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0f0      	beq.n	8005614 <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	2bff      	cmp	r3, #255	; 0xff
 8005638:	d904      	bls.n	8005644 <HAL_RCC_OscConfig+0x44c>
 800563a:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800563e:	4849      	ldr	r0, [pc, #292]	; (8005764 <HAL_RCC_OscConfig+0x56c>)
 8005640:	f7fc fade 	bl	8001c00 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d022      	beq.n	8005692 <HAL_RCC_OscConfig+0x49a>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005654:	d01d      	beq.n	8005692 <HAL_RCC_OscConfig+0x49a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800565e:	d018      	beq.n	8005692 <HAL_RCC_OscConfig+0x49a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005668:	d013      	beq.n	8005692 <HAL_RCC_OscConfig+0x49a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005672:	d00e      	beq.n	8005692 <HAL_RCC_OscConfig+0x49a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800567c:	d009      	beq.n	8005692 <HAL_RCC_OscConfig+0x49a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005686:	d004      	beq.n	8005692 <HAL_RCC_OscConfig+0x49a>
 8005688:	f240 211d 	movw	r1, #541	; 0x21d
 800568c:	4835      	ldr	r0, [pc, #212]	; (8005764 <HAL_RCC_OscConfig+0x56c>)
 800568e:	f7fc fab7 	bl	8001c00 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005692:	4b35      	ldr	r3, [pc, #212]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	4932      	ldr	r1, [pc, #200]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056a4:	4b30      	ldr	r3, [pc, #192]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	061b      	lsls	r3, r3, #24
 80056b2:	492d      	ldr	r1, [pc, #180]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	604b      	str	r3, [r1, #4]
 80056b8:	e015      	b.n	80056e6 <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056ba:	4b2f      	ldr	r3, [pc, #188]	; (8005778 <HAL_RCC_OscConfig+0x580>)
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c0:	f7fc ffae 	bl	8002620 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056c8:	f7fc ffaa 	bl	8002620 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e204      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80056da:	4b23      	ldr	r3, [pc, #140]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1f0      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d04c      	beq.n	800578c <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d008      	beq.n	800570c <HAL_RCC_OscConfig+0x514>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d004      	beq.n	800570c <HAL_RCC_OscConfig+0x514>
 8005702:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8005706:	4817      	ldr	r0, [pc, #92]	; (8005764 <HAL_RCC_OscConfig+0x56c>)
 8005708:	f7fc fa7a 	bl	8001c00 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d016      	beq.n	8005742 <HAL_RCC_OscConfig+0x54a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005714:	4b19      	ldr	r3, [pc, #100]	; (800577c <HAL_RCC_OscConfig+0x584>)
 8005716:	2201      	movs	r2, #1
 8005718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571a:	f7fc ff81 	bl	8002620 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005722:	f7fc ff7d 	bl	8002620 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e1d7      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005734:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <HAL_RCC_OscConfig+0x570>)
 8005736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCC_OscConfig+0x52a>
 8005740:	e024      	b.n	800578c <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005742:	4b0e      	ldr	r3, [pc, #56]	; (800577c <HAL_RCC_OscConfig+0x584>)
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005748:	f7fc ff6a 	bl	8002620 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800574e:	e017      	b.n	8005780 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005750:	f7fc ff66 	bl	8002620 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d910      	bls.n	8005780 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e1c0      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
 8005762:	bf00      	nop
 8005764:	0800b618 	.word	0x0800b618
 8005768:	40023800 	.word	0x40023800
 800576c:	0800b7ec 	.word	0x0800b7ec
 8005770:	20000004 	.word	0x20000004
 8005774:	20000008 	.word	0x20000008
 8005778:	42470020 	.word	0x42470020
 800577c:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005780:	4ba2      	ldr	r3, [pc, #648]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e1      	bne.n	8005750 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80b7 	beq.w	8005908 <HAL_RCC_OscConfig+0x710>
  {
    FlagStatus       pwrclkchanged = RESET;
 800579a:	2300      	movs	r3, #0
 800579c:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00c      	beq.n	80057c0 <HAL_RCC_OscConfig+0x5c8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d008      	beq.n	80057c0 <HAL_RCC_OscConfig+0x5c8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b05      	cmp	r3, #5
 80057b4:	d004      	beq.n	80057c0 <HAL_RCC_OscConfig+0x5c8>
 80057b6:	f44f 711a 	mov.w	r1, #616	; 0x268
 80057ba:	4895      	ldr	r0, [pc, #596]	; (8005a10 <HAL_RCC_OscConfig+0x818>)
 80057bc:	f7fc fa20 	bl	8001c00 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057c0:	4b92      	ldr	r3, [pc, #584]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10d      	bne.n	80057e8 <HAL_RCC_OscConfig+0x5f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057cc:	4b8f      	ldr	r3, [pc, #572]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	4a8e      	ldr	r2, [pc, #568]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 80057d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d6:	6253      	str	r3, [r2, #36]	; 0x24
 80057d8:	4b8c      	ldr	r3, [pc, #560]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e0:	60bb      	str	r3, [r7, #8]
 80057e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057e4:	2301      	movs	r3, #1
 80057e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e8:	4b8a      	ldr	r3, [pc, #552]	; (8005a14 <HAL_RCC_OscConfig+0x81c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d118      	bne.n	8005826 <HAL_RCC_OscConfig+0x62e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057f4:	4b87      	ldr	r3, [pc, #540]	; (8005a14 <HAL_RCC_OscConfig+0x81c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a86      	ldr	r2, [pc, #536]	; (8005a14 <HAL_RCC_OscConfig+0x81c>)
 80057fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005800:	f7fc ff0e 	bl	8002620 <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005808:	f7fc ff0a 	bl	8002620 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b64      	cmp	r3, #100	; 0x64
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e164      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800581a:	4b7e      	ldr	r3, [pc, #504]	; (8005a14 <HAL_RCC_OscConfig+0x81c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0f0      	beq.n	8005808 <HAL_RCC_OscConfig+0x610>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d106      	bne.n	800583c <HAL_RCC_OscConfig+0x644>
 800582e:	4b77      	ldr	r3, [pc, #476]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005832:	4a76      	ldr	r2, [pc, #472]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 8005834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005838:	6353      	str	r3, [r2, #52]	; 0x34
 800583a:	e02d      	b.n	8005898 <HAL_RCC_OscConfig+0x6a0>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10c      	bne.n	800585e <HAL_RCC_OscConfig+0x666>
 8005844:	4b71      	ldr	r3, [pc, #452]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 8005846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005848:	4a70      	ldr	r2, [pc, #448]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 800584a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800584e:	6353      	str	r3, [r2, #52]	; 0x34
 8005850:	4b6e      	ldr	r3, [pc, #440]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 8005852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005854:	4a6d      	ldr	r2, [pc, #436]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 8005856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800585a:	6353      	str	r3, [r2, #52]	; 0x34
 800585c:	e01c      	b.n	8005898 <HAL_RCC_OscConfig+0x6a0>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2b05      	cmp	r3, #5
 8005864:	d10c      	bne.n	8005880 <HAL_RCC_OscConfig+0x688>
 8005866:	4b69      	ldr	r3, [pc, #420]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 8005868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586a:	4a68      	ldr	r2, [pc, #416]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 800586c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005870:	6353      	str	r3, [r2, #52]	; 0x34
 8005872:	4b66      	ldr	r3, [pc, #408]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 8005874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005876:	4a65      	ldr	r2, [pc, #404]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 8005878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800587c:	6353      	str	r3, [r2, #52]	; 0x34
 800587e:	e00b      	b.n	8005898 <HAL_RCC_OscConfig+0x6a0>
 8005880:	4b62      	ldr	r3, [pc, #392]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 8005882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005884:	4a61      	ldr	r2, [pc, #388]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 8005886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800588a:	6353      	str	r3, [r2, #52]	; 0x34
 800588c:	4b5f      	ldr	r3, [pc, #380]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 800588e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005890:	4a5e      	ldr	r2, [pc, #376]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 8005892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005896:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d015      	beq.n	80058cc <HAL_RCC_OscConfig+0x6d4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a0:	f7fc febe 	bl	8002620 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058a6:	e00a      	b.n	80058be <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a8:	f7fc feba 	bl	8002620 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e112      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058be:	4b53      	ldr	r3, [pc, #332]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 80058c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0ee      	beq.n	80058a8 <HAL_RCC_OscConfig+0x6b0>
 80058ca:	e014      	b.n	80058f6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058cc:	f7fc fea8 	bl	8002620 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058d2:	e00a      	b.n	80058ea <HAL_RCC_OscConfig+0x6f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058d4:	f7fc fea4 	bl	8002620 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e0fc      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058ea:	4b48      	ldr	r3, [pc, #288]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1ee      	bne.n	80058d4 <HAL_RCC_OscConfig+0x6dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058f6:	7ffb      	ldrb	r3, [r7, #31]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d105      	bne.n	8005908 <HAL_RCC_OscConfig+0x710>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058fc:	4b43      	ldr	r3, [pc, #268]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	4a42      	ldr	r2, [pc, #264]	; (8005a0c <HAL_RCC_OscConfig+0x814>)
 8005902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005906:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00c      	beq.n	800592a <HAL_RCC_OscConfig+0x732>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b01      	cmp	r3, #1
 8005916:	d008      	beq.n	800592a <HAL_RCC_OscConfig+0x732>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2b02      	cmp	r3, #2
 800591e:	d004      	beq.n	800592a <HAL_RCC_OscConfig+0x732>
 8005920:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8005924:	483a      	ldr	r0, [pc, #232]	; (8005a10 <HAL_RCC_OscConfig+0x818>)
 8005926:	f7fc f96b 	bl	8001c00 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 80d7 	beq.w	8005ae2 <HAL_RCC_OscConfig+0x8ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	2b0c      	cmp	r3, #12
 8005938:	f000 80b3 	beq.w	8005aa2 <HAL_RCC_OscConfig+0x8aa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	2b02      	cmp	r3, #2
 8005942:	f040 8097 	bne.w	8005a74 <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <HAL_RCC_OscConfig+0x76a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005956:	d004      	beq.n	8005962 <HAL_RCC_OscConfig+0x76a>
 8005958:	f240 21b5 	movw	r1, #693	; 0x2b5
 800595c:	482c      	ldr	r0, [pc, #176]	; (8005a10 <HAL_RCC_OscConfig+0x818>)
 800595e:	f7fc f94f 	bl	8001c00 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d02c      	beq.n	80059c4 <HAL_RCC_OscConfig+0x7cc>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005972:	d027      	beq.n	80059c4 <HAL_RCC_OscConfig+0x7cc>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800597c:	d022      	beq.n	80059c4 <HAL_RCC_OscConfig+0x7cc>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005986:	d01d      	beq.n	80059c4 <HAL_RCC_OscConfig+0x7cc>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005990:	d018      	beq.n	80059c4 <HAL_RCC_OscConfig+0x7cc>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800599a:	d013      	beq.n	80059c4 <HAL_RCC_OscConfig+0x7cc>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80059a4:	d00e      	beq.n	80059c4 <HAL_RCC_OscConfig+0x7cc>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059aa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80059ae:	d009      	beq.n	80059c4 <HAL_RCC_OscConfig+0x7cc>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059b8:	d004      	beq.n	80059c4 <HAL_RCC_OscConfig+0x7cc>
 80059ba:	f240 21b6 	movw	r1, #694	; 0x2b6
 80059be:	4814      	ldr	r0, [pc, #80]	; (8005a10 <HAL_RCC_OscConfig+0x818>)
 80059c0:	f7fc f91e 	bl	8001c00 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059cc:	d00e      	beq.n	80059ec <HAL_RCC_OscConfig+0x7f4>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059d6:	d009      	beq.n	80059ec <HAL_RCC_OscConfig+0x7f4>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059e0:	d004      	beq.n	80059ec <HAL_RCC_OscConfig+0x7f4>
 80059e2:	f240 21b7 	movw	r1, #695	; 0x2b7
 80059e6:	480a      	ldr	r0, [pc, #40]	; (8005a10 <HAL_RCC_OscConfig+0x818>)
 80059e8:	f7fc f90a 	bl	8001c00 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ec:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <HAL_RCC_OscConfig+0x820>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f2:	f7fc fe15 	bl	8002620 <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059f8:	e010      	b.n	8005a1c <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059fa:	f7fc fe11 	bl	8002620 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d909      	bls.n	8005a1c <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e06b      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	0800b618 	.word	0x0800b618
 8005a14:	40007000 	.word	0x40007000
 8005a18:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a1c:	4b33      	ldr	r3, [pc, #204]	; (8005aec <HAL_RCC_OscConfig+0x8f4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e8      	bne.n	80059fa <HAL_RCC_OscConfig+0x802>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a28:	4b30      	ldr	r3, [pc, #192]	; (8005aec <HAL_RCC_OscConfig+0x8f4>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	4319      	orrs	r1, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	492a      	ldr	r1, [pc, #168]	; (8005aec <HAL_RCC_OscConfig+0x8f4>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a46:	4b2a      	ldr	r3, [pc, #168]	; (8005af0 <HAL_RCC_OscConfig+0x8f8>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4c:	f7fc fde8 	bl	8002620 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a54:	f7fc fde4 	bl	8002620 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e03e      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a66:	4b21      	ldr	r3, [pc, #132]	; (8005aec <HAL_RCC_OscConfig+0x8f4>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0f0      	beq.n	8005a54 <HAL_RCC_OscConfig+0x85c>
 8005a72:	e036      	b.n	8005ae2 <HAL_RCC_OscConfig+0x8ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a74:	4b1e      	ldr	r3, [pc, #120]	; (8005af0 <HAL_RCC_OscConfig+0x8f8>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7a:	f7fc fdd1 	bl	8002620 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x89c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a82:	f7fc fdcd 	bl	8002620 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x89c>
          {
            return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e027      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a94:	4b15      	ldr	r3, [pc, #84]	; (8005aec <HAL_RCC_OscConfig+0x8f4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f0      	bne.n	8005a82 <HAL_RCC_OscConfig+0x88a>
 8005aa0:	e01f      	b.n	8005ae2 <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_RCC_OscConfig+0x8b6>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e01a      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005aae:	4b0f      	ldr	r3, [pc, #60]	; (8005aec <HAL_RCC_OscConfig+0x8f4>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d10d      	bne.n	8005ade <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d106      	bne.n	8005ade <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d001      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x8ea>
        {
          return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <HAL_RCC_OscConfig+0x8ec>
        }
      }
    }
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40023800 	.word	0x40023800
 8005af0:	42470060 	.word	0x42470060

08005af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e1a4      	b.n	8005e52 <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <HAL_RCC_ClockConfig+0x2a>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d004      	beq.n	8005b1e <HAL_RCC_ClockConfig+0x2a>
 8005b14:	f240 312a 	movw	r1, #810	; 0x32a
 8005b18:	4893      	ldr	r0, [pc, #588]	; (8005d68 <HAL_RCC_ClockConfig+0x274>)
 8005b1a:	f7fc f871 	bl	8001c00 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b1e:	4b93      	ldr	r3, [pc, #588]	; (8005d6c <HAL_RCC_ClockConfig+0x278>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d919      	bls.n	8005b60 <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d105      	bne.n	8005b3e <HAL_RCC_ClockConfig+0x4a>
 8005b32:	4b8e      	ldr	r3, [pc, #568]	; (8005d6c <HAL_RCC_ClockConfig+0x278>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a8d      	ldr	r2, [pc, #564]	; (8005d6c <HAL_RCC_ClockConfig+0x278>)
 8005b38:	f043 0304 	orr.w	r3, r3, #4
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	4b8b      	ldr	r3, [pc, #556]	; (8005d6c <HAL_RCC_ClockConfig+0x278>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f023 0201 	bic.w	r2, r3, #1
 8005b46:	4989      	ldr	r1, [pc, #548]	; (8005d6c <HAL_RCC_ClockConfig+0x278>)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4e:	4b87      	ldr	r3, [pc, #540]	; (8005d6c <HAL_RCC_ClockConfig+0x278>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d001      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e178      	b.n	8005e52 <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d031      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d024      	beq.n	8005bbe <HAL_RCC_ClockConfig+0xca>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2b80      	cmp	r3, #128	; 0x80
 8005b7a:	d020      	beq.n	8005bbe <HAL_RCC_ClockConfig+0xca>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	2b90      	cmp	r3, #144	; 0x90
 8005b82:	d01c      	beq.n	8005bbe <HAL_RCC_ClockConfig+0xca>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2ba0      	cmp	r3, #160	; 0xa0
 8005b8a:	d018      	beq.n	8005bbe <HAL_RCC_ClockConfig+0xca>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	2bb0      	cmp	r3, #176	; 0xb0
 8005b92:	d014      	beq.n	8005bbe <HAL_RCC_ClockConfig+0xca>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2bc0      	cmp	r3, #192	; 0xc0
 8005b9a:	d010      	beq.n	8005bbe <HAL_RCC_ClockConfig+0xca>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2bd0      	cmp	r3, #208	; 0xd0
 8005ba2:	d00c      	beq.n	8005bbe <HAL_RCC_ClockConfig+0xca>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	2be0      	cmp	r3, #224	; 0xe0
 8005baa:	d008      	beq.n	8005bbe <HAL_RCC_ClockConfig+0xca>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	2bf0      	cmp	r3, #240	; 0xf0
 8005bb2:	d004      	beq.n	8005bbe <HAL_RCC_ClockConfig+0xca>
 8005bb4:	f240 3141 	movw	r1, #833	; 0x341
 8005bb8:	486b      	ldr	r0, [pc, #428]	; (8005d68 <HAL_RCC_ClockConfig+0x274>)
 8005bba:	f7fc f821 	bl	8001c00 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bbe:	4b6c      	ldr	r3, [pc, #432]	; (8005d70 <HAL_RCC_ClockConfig+0x27c>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	4969      	ldr	r1, [pc, #420]	; (8005d70 <HAL_RCC_ClockConfig+0x27c>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 80a3 	beq.w	8005d24 <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d010      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x114>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d00c      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x114>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d008      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x114>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d004      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x114>
 8005bfe:	f44f 7152 	mov.w	r1, #840	; 0x348
 8005c02:	4859      	ldr	r0, [pc, #356]	; (8005d68 <HAL_RCC_ClockConfig+0x274>)
 8005c04:	f7fb fffc 	bl	8001c00 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d107      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c10:	4b57      	ldr	r3, [pc, #348]	; (8005d70 <HAL_RCC_ClockConfig+0x27c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d121      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e118      	b.n	8005e52 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d107      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c28:	4b51      	ldr	r3, [pc, #324]	; (8005d70 <HAL_RCC_ClockConfig+0x27c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d115      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e10c      	b.n	8005e52 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d107      	bne.n	8005c50 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c40:	4b4b      	ldr	r3, [pc, #300]	; (8005d70 <HAL_RCC_ClockConfig+0x27c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d109      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e100      	b.n	8005e52 <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005c50:	4b47      	ldr	r3, [pc, #284]	; (8005d70 <HAL_RCC_ClockConfig+0x27c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0f8      	b.n	8005e52 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c60:	4b43      	ldr	r3, [pc, #268]	; (8005d70 <HAL_RCC_ClockConfig+0x27c>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f023 0203 	bic.w	r2, r3, #3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	4940      	ldr	r1, [pc, #256]	; (8005d70 <HAL_RCC_ClockConfig+0x27c>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c72:	f7fc fcd5 	bl	8002620 <HAL_GetTick>
 8005c76:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d112      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c80:	e00a      	b.n	8005c98 <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c82:	f7fc fccd 	bl	8002620 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e0dc      	b.n	8005e52 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c98:	4b35      	ldr	r3, [pc, #212]	; (8005d70 <HAL_RCC_ClockConfig+0x27c>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 030c 	and.w	r3, r3, #12
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d1ee      	bne.n	8005c82 <HAL_RCC_ClockConfig+0x18e>
 8005ca4:	e03e      	b.n	8005d24 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d112      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cae:	e00a      	b.n	8005cc6 <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb0:	f7fc fcb6 	bl	8002620 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e0c5      	b.n	8005e52 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cc6:	4b2a      	ldr	r3, [pc, #168]	; (8005d70 <HAL_RCC_ClockConfig+0x27c>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	2b0c      	cmp	r3, #12
 8005cd0:	d1ee      	bne.n	8005cb0 <HAL_RCC_ClockConfig+0x1bc>
 8005cd2:	e027      	b.n	8005d24 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d11d      	bne.n	8005d18 <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cdc:	e00a      	b.n	8005cf4 <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cde:	f7fc fc9f 	bl	8002620 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e0ae      	b.n	8005e52 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <HAL_RCC_ClockConfig+0x27c>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 030c 	and.w	r3, r3, #12
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d1ee      	bne.n	8005cde <HAL_RCC_ClockConfig+0x1ea>
 8005d00:	e010      	b.n	8005d24 <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d02:	f7fc fc8d 	bl	8002620 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e09c      	b.n	8005e52 <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d18:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <HAL_RCC_ClockConfig+0x27c>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 030c 	and.w	r3, r3, #12
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1ee      	bne.n	8005d02 <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d24:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <HAL_RCC_ClockConfig+0x278>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d220      	bcs.n	8005d74 <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d105      	bne.n	8005d44 <HAL_RCC_ClockConfig+0x250>
 8005d38:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <HAL_RCC_ClockConfig+0x278>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a0b      	ldr	r2, [pc, #44]	; (8005d6c <HAL_RCC_ClockConfig+0x278>)
 8005d3e:	f043 0304 	orr.w	r3, r3, #4
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <HAL_RCC_ClockConfig+0x278>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f023 0201 	bic.w	r2, r3, #1
 8005d4c:	4907      	ldr	r1, [pc, #28]	; (8005d6c <HAL_RCC_ClockConfig+0x278>)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <HAL_RCC_ClockConfig+0x278>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d008      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e075      	b.n	8005e52 <HAL_RCC_ClockConfig+0x35e>
 8005d66:	bf00      	nop
 8005d68:	0800b618 	.word	0x0800b618
 8005d6c:	40023c00 	.word	0x40023c00
 8005d70:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d025      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d018      	beq.n	8005dba <HAL_RCC_ClockConfig+0x2c6>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d90:	d013      	beq.n	8005dba <HAL_RCC_ClockConfig+0x2c6>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005d9a:	d00e      	beq.n	8005dba <HAL_RCC_ClockConfig+0x2c6>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005da4:	d009      	beq.n	8005dba <HAL_RCC_ClockConfig+0x2c6>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dae:	d004      	beq.n	8005dba <HAL_RCC_ClockConfig+0x2c6>
 8005db0:	f240 31ad 	movw	r1, #941	; 0x3ad
 8005db4:	4829      	ldr	r0, [pc, #164]	; (8005e5c <HAL_RCC_ClockConfig+0x368>)
 8005db6:	f7fb ff23 	bl	8001c00 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dba:	4b29      	ldr	r3, [pc, #164]	; (8005e60 <HAL_RCC_ClockConfig+0x36c>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	4926      	ldr	r1, [pc, #152]	; (8005e60 <HAL_RCC_ClockConfig+0x36c>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d026      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d018      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x31e>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de8:	d013      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x31e>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005df2:	d00e      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x31e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005dfc:	d009      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x31e>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e06:	d004      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x31e>
 8005e08:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 8005e0c:	4813      	ldr	r0, [pc, #76]	; (8005e5c <HAL_RCC_ClockConfig+0x368>)
 8005e0e:	f7fb fef7 	bl	8001c00 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e12:	4b13      	ldr	r3, [pc, #76]	; (8005e60 <HAL_RCC_ClockConfig+0x36c>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	490f      	ldr	r1, [pc, #60]	; (8005e60 <HAL_RCC_ClockConfig+0x36c>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e26:	f000 f823 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8005e2a:	4601      	mov	r1, r0
 8005e2c:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <HAL_RCC_ClockConfig+0x36c>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	4a0b      	ldr	r2, [pc, #44]	; (8005e64 <HAL_RCC_ClockConfig+0x370>)
 8005e38:	5cd3      	ldrb	r3, [r2, r3]
 8005e3a:	fa21 f303 	lsr.w	r3, r1, r3
 8005e3e:	4a0a      	ldr	r2, [pc, #40]	; (8005e68 <HAL_RCC_ClockConfig+0x374>)
 8005e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e42:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <HAL_RCC_ClockConfig+0x378>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fb ff18 	bl	8001c7c <HAL_InitTick>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e50:	7afb      	ldrb	r3, [r7, #11]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	0800b618 	.word	0x0800b618
 8005e60:	40023800 	.word	0x40023800
 8005e64:	0800b7ec 	.word	0x0800b7ec
 8005e68:	20000004 	.word	0x20000004
 8005e6c:	20000008 	.word	0x20000008

08005e70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005e76:	4b26      	ldr	r3, [pc, #152]	; (8005f10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f003 030c 	and.w	r3, r3, #12
 8005e82:	2b08      	cmp	r3, #8
 8005e84:	d006      	beq.n	8005e94 <HAL_RCC_GetSysClockFreq+0x24>
 8005e86:	2b0c      	cmp	r3, #12
 8005e88:	d007      	beq.n	8005e9a <HAL_RCC_GetSysClockFreq+0x2a>
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d12c      	bne.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e8e:	4b21      	ldr	r3, [pc, #132]	; (8005f14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005e90:	613b      	str	r3, [r7, #16]
      break;
 8005e92:	e037      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e94:	4b20      	ldr	r3, [pc, #128]	; (8005f18 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005e96:	613b      	str	r3, [r7, #16]
      break;
 8005e98:	e034      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	0c9b      	lsrs	r3, r3, #18
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	4a1e      	ldr	r2, [pc, #120]	; (8005f1c <HAL_RCC_GetSysClockFreq+0xac>)
 8005ea4:	5cd3      	ldrb	r3, [r2, r3]
 8005ea6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	0d9b      	lsrs	r3, r3, #22
 8005eac:	f003 0303 	and.w	r3, r3, #3
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eb4:	4b16      	ldr	r3, [pc, #88]	; (8005f10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005ec4:	fb02 f203 	mul.w	r2, r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	e007      	b.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	4a0f      	ldr	r2, [pc, #60]	; (8005f14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ed6:	fb02 f203 	mul.w	r2, r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	613b      	str	r3, [r7, #16]
      break;
 8005ee6:	e00d      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005ee8:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	0b5b      	lsrs	r3, r3, #13
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	613b      	str	r3, [r7, #16]
      break;
 8005f02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f04:	693b      	ldr	r3, [r7, #16]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bc80      	pop	{r7}
 8005f0e:	4770      	bx	lr
 8005f10:	40023800 	.word	0x40023800
 8005f14:	00f42400 	.word	0x00f42400
 8005f18:	007a1200 	.word	0x007a1200
 8005f1c:	0800b7e0 	.word	0x0800b7e0

08005f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f24:	4b02      	ldr	r3, [pc, #8]	; (8005f30 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f26:	681b      	ldr	r3, [r3, #0]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr
 8005f30:	20000004 	.word	0x20000004

08005f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f38:	f7ff fff2 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8005f3c:	4601      	mov	r1, r0
 8005f3e:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	0a1b      	lsrs	r3, r3, #8
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	4a03      	ldr	r2, [pc, #12]	; (8005f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f4a:	5cd3      	ldrb	r3, [r2, r3]
 8005f4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40023800 	.word	0x40023800
 8005f58:	0800b7fc 	.word	0x0800b7fc

08005f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f60:	f7ff ffde 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8005f64:	4601      	mov	r1, r0
 8005f66:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	0adb      	lsrs	r3, r3, #11
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	4a03      	ldr	r2, [pc, #12]	; (8005f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f72:	5cd3      	ldrb	r3, [r2, r3]
 8005f74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	0800b7fc 	.word	0x0800b7fc

08005f84 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <HAL_RCC_GetClockConfig+0x1a>
 8005f94:	f240 41fa 	movw	r1, #1274	; 0x4fa
 8005f98:	4818      	ldr	r0, [pc, #96]	; (8005ffc <HAL_RCC_GetClockConfig+0x78>)
 8005f9a:	f7fb fe31 	bl	8001c00 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <HAL_RCC_GetClockConfig+0x2a>
 8005fa4:	f240 41fb 	movw	r1, #1275	; 0x4fb
 8005fa8:	4814      	ldr	r0, [pc, #80]	; (8005ffc <HAL_RCC_GetClockConfig+0x78>)
 8005faa:	f7fb fe29 	bl	8001c00 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	220f      	movs	r2, #15
 8005fb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005fb4:	4b12      	ldr	r3, [pc, #72]	; (8006000 <HAL_RCC_GetClockConfig+0x7c>)
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f003 0203 	and.w	r2, r3, #3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <HAL_RCC_GetClockConfig+0x7c>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005fcc:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <HAL_RCC_GetClockConfig+0x7c>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005fd8:	4b09      	ldr	r3, [pc, #36]	; (8006000 <HAL_RCC_GetClockConfig+0x7c>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	08db      	lsrs	r3, r3, #3
 8005fde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005fe6:	4b07      	ldr	r3, [pc, #28]	; (8006004 <HAL_RCC_GetClockConfig+0x80>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0201 	and.w	r2, r3, #1
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	601a      	str	r2, [r3, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	0800b618 	.word	0x0800b618
 8006000:	40023800 	.word	0x40023800
 8006004:	40023c00 	.word	0x40023c00

08006008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006010:	2300      	movs	r3, #0
 8006012:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006014:	4b29      	ldr	r3, [pc, #164]	; (80060bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d12c      	bne.n	800607a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006020:	4b26      	ldr	r3, [pc, #152]	; (80060bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d005      	beq.n	8006038 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800602c:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	e016      	b.n	8006066 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006038:	4b20      	ldr	r3, [pc, #128]	; (80060bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	4a1f      	ldr	r2, [pc, #124]	; (80060bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800603e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006042:	6253      	str	r3, [r2, #36]	; 0x24
 8006044:	4b1d      	ldr	r3, [pc, #116]	; (80060bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8006050:	4b1b      	ldr	r3, [pc, #108]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8006058:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800605a:	4b18      	ldr	r3, [pc, #96]	; (80060bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	4a17      	ldr	r2, [pc, #92]	; (80060bc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8006060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006064:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800606c:	d105      	bne.n	800607a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006074:	d101      	bne.n	800607a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8006076:	2301      	movs	r3, #1
 8006078:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d105      	bne.n	800608c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8006080:	4b10      	ldr	r3, [pc, #64]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a0f      	ldr	r2, [pc, #60]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006086:	f043 0304 	orr.w	r3, r3, #4
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f023 0201 	bic.w	r2, r3, #1
 8006094:	490b      	ldr	r1, [pc, #44]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800609c:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d001      	beq.n	80060ae <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e000      	b.n	80060b0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40023800 	.word	0x40023800
 80060c0:	40007000 	.word	0x40007000
 80060c4:	40023c00 	.word	0x40023c00

080060c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e088      	b.n	80061ec <HAL_TIM_Base_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e2:	d02c      	beq.n	800613e <HAL_TIM_Base_Init+0x76>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a42      	ldr	r2, [pc, #264]	; (80061f4 <HAL_TIM_Base_Init+0x12c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d027      	beq.n	800613e <HAL_TIM_Base_Init+0x76>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a41      	ldr	r2, [pc, #260]	; (80061f8 <HAL_TIM_Base_Init+0x130>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d022      	beq.n	800613e <HAL_TIM_Base_Init+0x76>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a3f      	ldr	r2, [pc, #252]	; (80061fc <HAL_TIM_Base_Init+0x134>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d01d      	beq.n	800613e <HAL_TIM_Base_Init+0x76>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a3e      	ldr	r2, [pc, #248]	; (8006200 <HAL_TIM_Base_Init+0x138>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d018      	beq.n	800613e <HAL_TIM_Base_Init+0x76>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a3c      	ldr	r2, [pc, #240]	; (8006204 <HAL_TIM_Base_Init+0x13c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_TIM_Base_Init+0x76>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a3b      	ldr	r2, [pc, #236]	; (8006208 <HAL_TIM_Base_Init+0x140>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00e      	beq.n	800613e <HAL_TIM_Base_Init+0x76>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a39      	ldr	r2, [pc, #228]	; (800620c <HAL_TIM_Base_Init+0x144>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d009      	beq.n	800613e <HAL_TIM_Base_Init+0x76>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a38      	ldr	r2, [pc, #224]	; (8006210 <HAL_TIM_Base_Init+0x148>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d004      	beq.n	800613e <HAL_TIM_Base_Init+0x76>
 8006134:	f240 110b 	movw	r1, #267	; 0x10b
 8006138:	4836      	ldr	r0, [pc, #216]	; (8006214 <HAL_TIM_Base_Init+0x14c>)
 800613a:	f7fb fd61 	bl	8001c00 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d014      	beq.n	8006170 <HAL_TIM_Base_Init+0xa8>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b10      	cmp	r3, #16
 800614c:	d010      	beq.n	8006170 <HAL_TIM_Base_Init+0xa8>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b20      	cmp	r3, #32
 8006154:	d00c      	beq.n	8006170 <HAL_TIM_Base_Init+0xa8>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d008      	beq.n	8006170 <HAL_TIM_Base_Init+0xa8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2b60      	cmp	r3, #96	; 0x60
 8006164:	d004      	beq.n	8006170 <HAL_TIM_Base_Init+0xa8>
 8006166:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800616a:	482a      	ldr	r0, [pc, #168]	; (8006214 <HAL_TIM_Base_Init+0x14c>)
 800616c:	f7fb fd48 	bl	8001c00 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00e      	beq.n	8006196 <HAL_TIM_Base_Init+0xce>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006180:	d009      	beq.n	8006196 <HAL_TIM_Base_Init+0xce>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800618a:	d004      	beq.n	8006196 <HAL_TIM_Base_Init+0xce>
 800618c:	f240 110d 	movw	r1, #269	; 0x10d
 8006190:	4820      	ldr	r0, [pc, #128]	; (8006214 <HAL_TIM_Base_Init+0x14c>)
 8006192:	f7fb fd35 	bl	8001c00 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d008      	beq.n	80061b0 <HAL_TIM_Base_Init+0xe8>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	2b80      	cmp	r3, #128	; 0x80
 80061a4:	d004      	beq.n	80061b0 <HAL_TIM_Base_Init+0xe8>
 80061a6:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80061aa:	481a      	ldr	r0, [pc, #104]	; (8006214 <HAL_TIM_Base_Init+0x14c>)
 80061ac:	f7fb fd28 	bl	8001c00 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d106      	bne.n	80061ca <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7fc f81f 	bl	8002208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	3304      	adds	r3, #4
 80061da:	4619      	mov	r1, r3
 80061dc:	4610      	mov	r0, r2
 80061de:	f001 f815 	bl	800720c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40000400 	.word	0x40000400
 80061f8:	40000800 	.word	0x40000800
 80061fc:	40000c00 	.word	0x40000c00
 8006200:	40001000 	.word	0x40001000
 8006204:	40001400 	.word	0x40001400
 8006208:	40010800 	.word	0x40010800
 800620c:	40010c00 	.word	0x40010c00
 8006210:	40011000 	.word	0x40011000
 8006214:	0800b650 	.word	0x0800b650

08006218 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006228:	d02c      	beq.n	8006284 <HAL_TIM_Base_Start+0x6c>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a24      	ldr	r2, [pc, #144]	; (80062c0 <HAL_TIM_Base_Start+0xa8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d027      	beq.n	8006284 <HAL_TIM_Base_Start+0x6c>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a22      	ldr	r2, [pc, #136]	; (80062c4 <HAL_TIM_Base_Start+0xac>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d022      	beq.n	8006284 <HAL_TIM_Base_Start+0x6c>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a21      	ldr	r2, [pc, #132]	; (80062c8 <HAL_TIM_Base_Start+0xb0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d01d      	beq.n	8006284 <HAL_TIM_Base_Start+0x6c>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a1f      	ldr	r2, [pc, #124]	; (80062cc <HAL_TIM_Base_Start+0xb4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d018      	beq.n	8006284 <HAL_TIM_Base_Start+0x6c>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1e      	ldr	r2, [pc, #120]	; (80062d0 <HAL_TIM_Base_Start+0xb8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d013      	beq.n	8006284 <HAL_TIM_Base_Start+0x6c>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <HAL_TIM_Base_Start+0xbc>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00e      	beq.n	8006284 <HAL_TIM_Base_Start+0x6c>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1b      	ldr	r2, [pc, #108]	; (80062d8 <HAL_TIM_Base_Start+0xc0>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d009      	beq.n	8006284 <HAL_TIM_Base_Start+0x6c>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a19      	ldr	r2, [pc, #100]	; (80062dc <HAL_TIM_Base_Start+0xc4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d004      	beq.n	8006284 <HAL_TIM_Base_Start+0x6c>
 800627a:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 800627e:	4818      	ldr	r0, [pc, #96]	; (80062e0 <HAL_TIM_Base_Start+0xc8>)
 8006280:	f7fb fcbe 	bl	8001c00 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b06      	cmp	r3, #6
 800629c:	d007      	beq.n	80062ae <HAL_TIM_Base_Start+0x96>
  {
    __HAL_TIM_ENABLE(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f042 0201 	orr.w	r2, r2, #1
 80062ac:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40000400 	.word	0x40000400
 80062c4:	40000800 	.word	0x40000800
 80062c8:	40000c00 	.word	0x40000c00
 80062cc:	40001000 	.word	0x40001000
 80062d0:	40001400 	.word	0x40001400
 80062d4:	40010800 	.word	0x40010800
 80062d8:	40010c00 	.word	0x40010c00
 80062dc:	40011000 	.word	0x40011000
 80062e0:	0800b650 	.word	0x0800b650

080062e4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f4:	d02c      	beq.n	8006350 <HAL_TIM_Base_Stop+0x6c>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a24      	ldr	r2, [pc, #144]	; (800638c <HAL_TIM_Base_Stop+0xa8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d027      	beq.n	8006350 <HAL_TIM_Base_Stop+0x6c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a22      	ldr	r2, [pc, #136]	; (8006390 <HAL_TIM_Base_Stop+0xac>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d022      	beq.n	8006350 <HAL_TIM_Base_Stop+0x6c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a21      	ldr	r2, [pc, #132]	; (8006394 <HAL_TIM_Base_Stop+0xb0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d01d      	beq.n	8006350 <HAL_TIM_Base_Stop+0x6c>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1f      	ldr	r2, [pc, #124]	; (8006398 <HAL_TIM_Base_Stop+0xb4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d018      	beq.n	8006350 <HAL_TIM_Base_Stop+0x6c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1e      	ldr	r2, [pc, #120]	; (800639c <HAL_TIM_Base_Stop+0xb8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d013      	beq.n	8006350 <HAL_TIM_Base_Stop+0x6c>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1c      	ldr	r2, [pc, #112]	; (80063a0 <HAL_TIM_Base_Stop+0xbc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00e      	beq.n	8006350 <HAL_TIM_Base_Stop+0x6c>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1b      	ldr	r2, [pc, #108]	; (80063a4 <HAL_TIM_Base_Stop+0xc0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d009      	beq.n	8006350 <HAL_TIM_Base_Stop+0x6c>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a19      	ldr	r2, [pc, #100]	; (80063a8 <HAL_TIM_Base_Stop+0xc4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <HAL_TIM_Base_Stop+0x6c>
 8006346:	f240 1199 	movw	r1, #409	; 0x199
 800634a:	4818      	ldr	r0, [pc, #96]	; (80063ac <HAL_TIM_Base_Stop+0xc8>)
 800634c:	f7fb fc58 	bl	8001c00 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6a1a      	ldr	r2, [r3, #32]
 800635e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006362:	4013      	ands	r3, r2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d107      	bne.n	8006378 <HAL_TIM_Base_Stop+0x94>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0201 	bic.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	40000400 	.word	0x40000400
 8006390:	40000800 	.word	0x40000800
 8006394:	40000c00 	.word	0x40000c00
 8006398:	40001000 	.word	0x40001000
 800639c:	40001400 	.word	0x40001400
 80063a0:	40010800 	.word	0x40010800
 80063a4:	40010c00 	.word	0x40010c00
 80063a8:	40011000 	.word	0x40011000
 80063ac:	0800b650 	.word	0x0800b650

080063b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c0:	d02c      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x6c>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a24      	ldr	r2, [pc, #144]	; (8006458 <HAL_TIM_Base_Start_IT+0xa8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d027      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x6c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a22      	ldr	r2, [pc, #136]	; (800645c <HAL_TIM_Base_Start_IT+0xac>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d022      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x6c>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a21      	ldr	r2, [pc, #132]	; (8006460 <HAL_TIM_Base_Start_IT+0xb0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d01d      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x6c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a1f      	ldr	r2, [pc, #124]	; (8006464 <HAL_TIM_Base_Start_IT+0xb4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d018      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x6c>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a1e      	ldr	r2, [pc, #120]	; (8006468 <HAL_TIM_Base_Start_IT+0xb8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d013      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x6c>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a1c      	ldr	r2, [pc, #112]	; (800646c <HAL_TIM_Base_Start_IT+0xbc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00e      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x6c>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a1b      	ldr	r2, [pc, #108]	; (8006470 <HAL_TIM_Base_Start_IT+0xc0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d009      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x6c>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a19      	ldr	r2, [pc, #100]	; (8006474 <HAL_TIM_Base_Start_IT+0xc4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d004      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x6c>
 8006412:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8006416:	4818      	ldr	r0, [pc, #96]	; (8006478 <HAL_TIM_Base_Start_IT+0xc8>)
 8006418:	f7fb fbf2 	bl	8001c00 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b06      	cmp	r3, #6
 800643c:	d007      	beq.n	800644e <HAL_TIM_Base_Start_IT+0x9e>
  {
    __HAL_TIM_ENABLE(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f042 0201 	orr.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40000400 	.word	0x40000400
 800645c:	40000800 	.word	0x40000800
 8006460:	40000c00 	.word	0x40000c00
 8006464:	40001000 	.word	0x40001000
 8006468:	40001400 	.word	0x40001400
 800646c:	40010800 	.word	0x40010800
 8006470:	40010c00 	.word	0x40010c00
 8006474:	40011000 	.word	0x40011000
 8006478:	0800b650 	.word	0x0800b650

0800647c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e088      	b.n	80065a0 <HAL_TIM_PWM_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006496:	d02c      	beq.n	80064f2 <HAL_TIM_PWM_Init+0x76>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a42      	ldr	r2, [pc, #264]	; (80065a8 <HAL_TIM_PWM_Init+0x12c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d027      	beq.n	80064f2 <HAL_TIM_PWM_Init+0x76>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a41      	ldr	r2, [pc, #260]	; (80065ac <HAL_TIM_PWM_Init+0x130>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d022      	beq.n	80064f2 <HAL_TIM_PWM_Init+0x76>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a3f      	ldr	r2, [pc, #252]	; (80065b0 <HAL_TIM_PWM_Init+0x134>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d01d      	beq.n	80064f2 <HAL_TIM_PWM_Init+0x76>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a3e      	ldr	r2, [pc, #248]	; (80065b4 <HAL_TIM_PWM_Init+0x138>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d018      	beq.n	80064f2 <HAL_TIM_PWM_Init+0x76>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a3c      	ldr	r2, [pc, #240]	; (80065b8 <HAL_TIM_PWM_Init+0x13c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d013      	beq.n	80064f2 <HAL_TIM_PWM_Init+0x76>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a3b      	ldr	r2, [pc, #236]	; (80065bc <HAL_TIM_PWM_Init+0x140>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00e      	beq.n	80064f2 <HAL_TIM_PWM_Init+0x76>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a39      	ldr	r2, [pc, #228]	; (80065c0 <HAL_TIM_PWM_Init+0x144>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d009      	beq.n	80064f2 <HAL_TIM_PWM_Init+0x76>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a38      	ldr	r2, [pc, #224]	; (80065c4 <HAL_TIM_PWM_Init+0x148>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <HAL_TIM_PWM_Init+0x76>
 80064e8:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80064ec:	4836      	ldr	r0, [pc, #216]	; (80065c8 <HAL_TIM_PWM_Init+0x14c>)
 80064ee:	f7fb fb87 	bl	8001c00 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d014      	beq.n	8006524 <HAL_TIM_PWM_Init+0xa8>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2b10      	cmp	r3, #16
 8006500:	d010      	beq.n	8006524 <HAL_TIM_PWM_Init+0xa8>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	2b20      	cmp	r3, #32
 8006508:	d00c      	beq.n	8006524 <HAL_TIM_PWM_Init+0xa8>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	d008      	beq.n	8006524 <HAL_TIM_PWM_Init+0xa8>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	2b60      	cmp	r3, #96	; 0x60
 8006518:	d004      	beq.n	8006524 <HAL_TIM_PWM_Init+0xa8>
 800651a:	f240 4171 	movw	r1, #1137	; 0x471
 800651e:	482a      	ldr	r0, [pc, #168]	; (80065c8 <HAL_TIM_PWM_Init+0x14c>)
 8006520:	f7fb fb6e 	bl	8001c00 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00e      	beq.n	800654a <HAL_TIM_PWM_Init+0xce>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006534:	d009      	beq.n	800654a <HAL_TIM_PWM_Init+0xce>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800653e:	d004      	beq.n	800654a <HAL_TIM_PWM_Init+0xce>
 8006540:	f240 4172 	movw	r1, #1138	; 0x472
 8006544:	4820      	ldr	r0, [pc, #128]	; (80065c8 <HAL_TIM_PWM_Init+0x14c>)
 8006546:	f7fb fb5b 	bl	8001c00 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <HAL_TIM_PWM_Init+0xe8>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	2b80      	cmp	r3, #128	; 0x80
 8006558:	d004      	beq.n	8006564 <HAL_TIM_PWM_Init+0xe8>
 800655a:	f240 4173 	movw	r1, #1139	; 0x473
 800655e:	481a      	ldr	r0, [pc, #104]	; (80065c8 <HAL_TIM_PWM_Init+0x14c>)
 8006560:	f7fb fb4e 	bl	8001c00 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d106      	bne.n	800657e <HAL_TIM_PWM_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f827 	bl	80065cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2202      	movs	r2, #2
 8006582:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	3304      	adds	r3, #4
 800658e:	4619      	mov	r1, r3
 8006590:	4610      	mov	r0, r2
 8006592:	f000 fe3b 	bl	800720c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40000400 	.word	0x40000400
 80065ac:	40000800 	.word	0x40000800
 80065b0:	40000c00 	.word	0x40000c00
 80065b4:	40001000 	.word	0x40001000
 80065b8:	40001400 	.word	0x40001400
 80065bc:	40010800 	.word	0x40010800
 80065c0:	40010c00 	.word	0x40010c00
 80065c4:	40011000 	.word	0x40011000
 80065c8:	0800b650 	.word	0x0800b650

080065cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	bc80      	pop	{r7}
 80065dc:	4770      	bx	lr
	...

080065e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f2:	d10b      	bne.n	800660c <HAL_TIM_PWM_Start+0x2c>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d05b      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d058      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b08      	cmp	r3, #8
 8006604:	d055      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b0c      	cmp	r3, #12
 800660a:	d052      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a36      	ldr	r2, [pc, #216]	; (80066ec <HAL_TIM_PWM_Start+0x10c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d10b      	bne.n	800662e <HAL_TIM_PWM_Start+0x4e>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d04a      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b04      	cmp	r3, #4
 8006620:	d047      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b08      	cmp	r3, #8
 8006626:	d044      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b0c      	cmp	r3, #12
 800662c:	d041      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a2f      	ldr	r2, [pc, #188]	; (80066f0 <HAL_TIM_PWM_Start+0x110>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d10b      	bne.n	8006650 <HAL_TIM_PWM_Start+0x70>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d039      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b04      	cmp	r3, #4
 8006642:	d036      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b08      	cmp	r3, #8
 8006648:	d033      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b0c      	cmp	r3, #12
 800664e:	d030      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a27      	ldr	r2, [pc, #156]	; (80066f4 <HAL_TIM_PWM_Start+0x114>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d10b      	bne.n	8006672 <HAL_TIM_PWM_Start+0x92>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d028      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b04      	cmp	r3, #4
 8006664:	d025      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b08      	cmp	r3, #8
 800666a:	d022      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b0c      	cmp	r3, #12
 8006670:	d01f      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a20      	ldr	r2, [pc, #128]	; (80066f8 <HAL_TIM_PWM_Start+0x118>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d105      	bne.n	8006688 <HAL_TIM_PWM_Start+0xa8>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d017      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b04      	cmp	r3, #4
 8006686:	d014      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1b      	ldr	r2, [pc, #108]	; (80066fc <HAL_TIM_PWM_Start+0x11c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d102      	bne.n	8006698 <HAL_TIM_PWM_Start+0xb8>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00c      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a18      	ldr	r2, [pc, #96]	; (8006700 <HAL_TIM_PWM_Start+0x120>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d102      	bne.n	80066a8 <HAL_TIM_PWM_Start+0xc8>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d004      	beq.n	80066b2 <HAL_TIM_PWM_Start+0xd2>
 80066a8:	f44f 619d 	mov.w	r1, #1256	; 0x4e8
 80066ac:	4815      	ldr	r0, [pc, #84]	; (8006704 <HAL_TIM_PWM_Start+0x124>)
 80066ae:	f7fb faa7 	bl	8001c00 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2201      	movs	r2, #1
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 ffa2 	bl	8007604 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b06      	cmp	r3, #6
 80066d0:	d007      	beq.n	80066e2 <HAL_TIM_PWM_Start+0x102>
  {
    __HAL_TIM_ENABLE(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0201 	orr.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	40000400 	.word	0x40000400
 80066f0:	40000800 	.word	0x40000800
 80066f4:	40000c00 	.word	0x40000c00
 80066f8:	40010800 	.word	0x40010800
 80066fc:	40010c00 	.word	0x40010c00
 8006700:	40011000 	.word	0x40011000
 8006704:	0800b650 	.word	0x0800b650

08006708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b02      	cmp	r3, #2
 800671c:	d122      	bne.n	8006764 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b02      	cmp	r3, #2
 800672a:	d11b      	bne.n	8006764 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0202 	mvn.w	r2, #2
 8006734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fd43 	bl	80071d6 <HAL_TIM_IC_CaptureCallback>
 8006750:	e005      	b.n	800675e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fd36 	bl	80071c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fd45 	bl	80071e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	f003 0304 	and.w	r3, r3, #4
 800676e:	2b04      	cmp	r3, #4
 8006770:	d122      	bne.n	80067b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b04      	cmp	r3, #4
 800677e:	d11b      	bne.n	80067b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f06f 0204 	mvn.w	r2, #4
 8006788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2202      	movs	r2, #2
 800678e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fd19 	bl	80071d6 <HAL_TIM_IC_CaptureCallback>
 80067a4:	e005      	b.n	80067b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fd0c 	bl	80071c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fd1b 	bl	80071e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d122      	bne.n	800680c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d11b      	bne.n	800680c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f06f 0208 	mvn.w	r2, #8
 80067dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2204      	movs	r2, #4
 80067e2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fcef 	bl	80071d6 <HAL_TIM_IC_CaptureCallback>
 80067f8:	e005      	b.n	8006806 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fce2 	bl	80071c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fcf1 	bl	80071e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b10      	cmp	r3, #16
 8006818:	d122      	bne.n	8006860 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b10      	cmp	r3, #16
 8006826:	d11b      	bne.n	8006860 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f06f 0210 	mvn.w	r2, #16
 8006830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2208      	movs	r2, #8
 8006836:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fcc5 	bl	80071d6 <HAL_TIM_IC_CaptureCallback>
 800684c:	e005      	b.n	800685a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fcb8 	bl	80071c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fcc7 	bl	80071e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b01      	cmp	r3, #1
 800686c:	d10e      	bne.n	800688c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b01      	cmp	r3, #1
 800687a:	d107      	bne.n	800688c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0201 	mvn.w	r2, #1
 8006884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fb f994 	bl	8001bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006896:	2b40      	cmp	r3, #64	; 0x40
 8006898:	d10e      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a4:	2b40      	cmp	r3, #64	; 0x40
 80068a6:	d107      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fca1 	bl	80071fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068b8:	bf00      	nop
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d010      	beq.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x34>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d00d      	beq.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x34>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b08      	cmp	r3, #8
 80068dc:	d00a      	beq.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x34>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b0c      	cmp	r3, #12
 80068e2:	d007      	beq.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x34>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b3c      	cmp	r3, #60	; 0x3c
 80068e8:	d004      	beq.n	80068f4 <HAL_TIM_PWM_ConfigChannel+0x34>
 80068ea:	f640 5169 	movw	r1, #3433	; 0xd69
 80068ee:	488d      	ldr	r0, [pc, #564]	; (8006b24 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80068f0:	f7fb f986 	bl	8001c00 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b60      	cmp	r3, #96	; 0x60
 80068fa:	d008      	beq.n	800690e <HAL_TIM_PWM_ConfigChannel+0x4e>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b70      	cmp	r3, #112	; 0x70
 8006902:	d004      	beq.n	800690e <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006904:	f640 516a 	movw	r1, #3434	; 0xd6a
 8006908:	4886      	ldr	r0, [pc, #536]	; (8006b24 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800690a:	f7fb f979 	bl	8001c00 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d008      	beq.n	8006928 <HAL_TIM_PWM_ConfigChannel+0x68>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d004      	beq.n	8006928 <HAL_TIM_PWM_ConfigChannel+0x68>
 800691e:	f640 516b 	movw	r1, #3435	; 0xd6b
 8006922:	4880      	ldr	r0, [pc, #512]	; (8006b24 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006924:	f7fb f96c 	bl	8001c00 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	2b04      	cmp	r3, #4
 8006936:	d004      	beq.n	8006942 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006938:	f640 516c 	movw	r1, #3436	; 0xd6c
 800693c:	4879      	ldr	r0, [pc, #484]	; (8006b24 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800693e:	f7fb f95f 	bl	8001c00 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_TIM_PWM_ConfigChannel+0x90>
 800694c:	2302      	movs	r3, #2
 800694e:	e13b      	b.n	8006bc8 <HAL_TIM_PWM_ConfigChannel+0x308>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b0c      	cmp	r3, #12
 8006964:	f200 8126 	bhi.w	8006bb4 <HAL_TIM_PWM_ConfigChannel+0x2f4>
 8006968:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 800696a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696e:	bf00      	nop
 8006970:	080069a5 	.word	0x080069a5
 8006974:	08006bb5 	.word	0x08006bb5
 8006978:	08006bb5 	.word	0x08006bb5
 800697c:	08006bb5 	.word	0x08006bb5
 8006980:	08006a35 	.word	0x08006a35
 8006984:	08006bb5 	.word	0x08006bb5
 8006988:	08006bb5 	.word	0x08006bb5
 800698c:	08006bb5 	.word	0x08006bb5
 8006990:	08006ab3 	.word	0x08006ab3
 8006994:	08006bb5 	.word	0x08006bb5
 8006998:	08006bb5 	.word	0x08006bb5
 800699c:	08006bb5 	.word	0x08006bb5
 80069a0:	08006b41 	.word	0x08006b41
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ac:	d022      	beq.n	80069f4 <HAL_TIM_PWM_ConfigChannel+0x134>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a5d      	ldr	r2, [pc, #372]	; (8006b28 <HAL_TIM_PWM_ConfigChannel+0x268>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d01d      	beq.n	80069f4 <HAL_TIM_PWM_ConfigChannel+0x134>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a5b      	ldr	r2, [pc, #364]	; (8006b2c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d018      	beq.n	80069f4 <HAL_TIM_PWM_ConfigChannel+0x134>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a5a      	ldr	r2, [pc, #360]	; (8006b30 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <HAL_TIM_PWM_ConfigChannel+0x134>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a58      	ldr	r2, [pc, #352]	; (8006b34 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00e      	beq.n	80069f4 <HAL_TIM_PWM_ConfigChannel+0x134>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a57      	ldr	r2, [pc, #348]	; (8006b38 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d009      	beq.n	80069f4 <HAL_TIM_PWM_ConfigChannel+0x134>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a55      	ldr	r2, [pc, #340]	; (8006b3c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_TIM_PWM_ConfigChannel+0x134>
 80069ea:	f640 5178 	movw	r1, #3448	; 0xd78
 80069ee:	484d      	ldr	r0, [pc, #308]	; (8006b24 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80069f0:	f7fb f906 	bl	8001c00 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fc76 	bl	80072ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699a      	ldr	r2, [r3, #24]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0208 	orr.w	r2, r2, #8
 8006a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0204 	bic.w	r2, r2, #4
 8006a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6999      	ldr	r1, [r3, #24]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	619a      	str	r2, [r3, #24]
      break;
 8006a32:	e0c0      	b.n	8006bb6 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3c:	d018      	beq.n	8006a70 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a39      	ldr	r2, [pc, #228]	; (8006b28 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d013      	beq.n	8006a70 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a37      	ldr	r2, [pc, #220]	; (8006b2c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00e      	beq.n	8006a70 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a36      	ldr	r2, [pc, #216]	; (8006b30 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d009      	beq.n	8006a70 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a34      	ldr	r2, [pc, #208]	; (8006b34 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d004      	beq.n	8006a70 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8006a66:	f640 5189 	movw	r1, #3465	; 0xd89
 8006a6a:	482e      	ldr	r0, [pc, #184]	; (8006b24 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006a6c:	f7fb f8c8 	bl	8001c00 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fc74 	bl	8007364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699a      	ldr	r2, [r3, #24]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6999      	ldr	r1, [r3, #24]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	021a      	lsls	r2, r3, #8
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	619a      	str	r2, [r3, #24]
      break;
 8006ab0:	e081      	b.n	8006bb6 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aba:	d013      	beq.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x224>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a19      	ldr	r2, [pc, #100]	; (8006b28 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00e      	beq.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x224>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a18      	ldr	r2, [pc, #96]	; (8006b2c <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d009      	beq.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x224>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a16      	ldr	r2, [pc, #88]	; (8006b30 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d004      	beq.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x224>
 8006ada:	f640 519a 	movw	r1, #3482	; 0xd9a
 8006ade:	4811      	ldr	r0, [pc, #68]	; (8006b24 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8006ae0:	f7fb f88e 	bl	8001c00 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 fc78 	bl	80073e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	69da      	ldr	r2, [r3, #28]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0208 	orr.w	r2, r2, #8
 8006afe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	69da      	ldr	r2, [r3, #28]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0204 	bic.w	r2, r2, #4
 8006b0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69d9      	ldr	r1, [r3, #28]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	61da      	str	r2, [r3, #28]
      break;
 8006b22:	e048      	b.n	8006bb6 <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8006b24:	0800b650 	.word	0x0800b650
 8006b28:	40000400 	.word	0x40000400
 8006b2c:	40000800 	.word	0x40000800
 8006b30:	40000c00 	.word	0x40000c00
 8006b34:	40010800 	.word	0x40010800
 8006b38:	40010c00 	.word	0x40010c00
 8006b3c:	40011000 	.word	0x40011000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b48:	d013      	beq.n	8006b72 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a20      	ldr	r2, [pc, #128]	; (8006bd0 <HAL_TIM_PWM_ConfigChannel+0x310>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d00e      	beq.n	8006b72 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1e      	ldr	r2, [pc, #120]	; (8006bd4 <HAL_TIM_PWM_ConfigChannel+0x314>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d009      	beq.n	8006b72 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <HAL_TIM_PWM_ConfigChannel+0x318>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d004      	beq.n	8006b72 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8006b68:	f640 51ab 	movw	r1, #3499	; 0xdab
 8006b6c:	481b      	ldr	r0, [pc, #108]	; (8006bdc <HAL_TIM_PWM_ConfigChannel+0x31c>)
 8006b6e:	f7fb f847 	bl	8001c00 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68b9      	ldr	r1, [r7, #8]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fc6e 	bl	800745a <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69da      	ldr	r2, [r3, #28]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69da      	ldr	r2, [r3, #28]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69d9      	ldr	r1, [r3, #28]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	021a      	lsls	r2, r3, #8
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	61da      	str	r2, [r3, #28]
      break;
 8006bb2:	e000      	b.n	8006bb6 <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    default:
      break;
 8006bb4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40000800 	.word	0x40000800
 8006bd8:	40000c00 	.word	0x40000c00
 8006bdc:	0800b650 	.word	0x0800b650

08006be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_TIM_ConfigClockSource+0x18>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e2d7      	b.n	80071a8 <HAL_TIM_ConfigClockSource+0x5c8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c10:	d029      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x86>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c1a:	d024      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x86>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d020      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x86>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b10      	cmp	r3, #16
 8006c2a:	d01c      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x86>
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b20      	cmp	r3, #32
 8006c32:	d018      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x86>
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b30      	cmp	r3, #48	; 0x30
 8006c3a:	d014      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x86>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b40      	cmp	r3, #64	; 0x40
 8006c42:	d010      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x86>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b50      	cmp	r3, #80	; 0x50
 8006c4a:	d00c      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x86>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b60      	cmp	r3, #96	; 0x60
 8006c52:	d008      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x86>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b70      	cmp	r3, #112	; 0x70
 8006c5a:	d004      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x86>
 8006c5c:	f241 01d0 	movw	r1, #4304	; 0x10d0
 8006c60:	4874      	ldr	r0, [pc, #464]	; (8006e34 <HAL_TIM_ConfigClockSource+0x254>)
 8006c62:	f7fa ffcd 	bl	8001c00 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c74:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c7c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b40      	cmp	r3, #64	; 0x40
 8006c8c:	f000 820a 	beq.w	80070a4 <HAL_TIM_ConfigClockSource+0x4c4>
 8006c90:	2b40      	cmp	r3, #64	; 0x40
 8006c92:	d80f      	bhi.n	8006cb4 <HAL_TIM_ConfigClockSource+0xd4>
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	f000 8256 	beq.w	8007146 <HAL_TIM_ConfigClockSource+0x566>
 8006c9a:	2b10      	cmp	r3, #16
 8006c9c:	d803      	bhi.n	8006ca6 <HAL_TIM_ConfigClockSource+0xc6>
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 8251 	beq.w	8007146 <HAL_TIM_ConfigClockSource+0x566>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006ca4:	e277      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	f000 824d 	beq.w	8007146 <HAL_TIM_ConfigClockSource+0x566>
 8006cac:	2b30      	cmp	r3, #48	; 0x30
 8006cae:	f000 824a 	beq.w	8007146 <HAL_TIM_ConfigClockSource+0x566>
      break;
 8006cb2:	e270      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8006cb4:	2b70      	cmp	r3, #112	; 0x70
 8006cb6:	d04c      	beq.n	8006d52 <HAL_TIM_ConfigClockSource+0x172>
 8006cb8:	2b70      	cmp	r3, #112	; 0x70
 8006cba:	d806      	bhi.n	8006cca <HAL_TIM_ConfigClockSource+0xea>
 8006cbc:	2b50      	cmp	r3, #80	; 0x50
 8006cbe:	f000 8141 	beq.w	8006f44 <HAL_TIM_ConfigClockSource+0x364>
 8006cc2:	2b60      	cmp	r3, #96	; 0x60
 8006cc4:	f000 818f 	beq.w	8006fe6 <HAL_TIM_ConfigClockSource+0x406>
      break;
 8006cc8:	e265      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 8006cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cce:	d004      	beq.n	8006cda <HAL_TIM_ConfigClockSource+0xfa>
 8006cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd4:	f000 80c0 	beq.w	8006e58 <HAL_TIM_ConfigClockSource+0x278>
      break;
 8006cd8:	e25d      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce2:	f000 8257 	beq.w	8007194 <HAL_TIM_ConfigClockSource+0x5b4>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a53      	ldr	r2, [pc, #332]	; (8006e38 <HAL_TIM_ConfigClockSource+0x258>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	f000 8251 	beq.w	8007194 <HAL_TIM_ConfigClockSource+0x5b4>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a51      	ldr	r2, [pc, #324]	; (8006e3c <HAL_TIM_ConfigClockSource+0x25c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	f000 824b 	beq.w	8007194 <HAL_TIM_ConfigClockSource+0x5b4>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a4f      	ldr	r2, [pc, #316]	; (8006e40 <HAL_TIM_ConfigClockSource+0x260>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	f000 8245 	beq.w	8007194 <HAL_TIM_ConfigClockSource+0x5b4>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a4d      	ldr	r2, [pc, #308]	; (8006e44 <HAL_TIM_ConfigClockSource+0x264>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	f000 823f 	beq.w	8007194 <HAL_TIM_ConfigClockSource+0x5b4>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a4b      	ldr	r2, [pc, #300]	; (8006e48 <HAL_TIM_ConfigClockSource+0x268>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	f000 8239 	beq.w	8007194 <HAL_TIM_ConfigClockSource+0x5b4>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a49      	ldr	r2, [pc, #292]	; (8006e4c <HAL_TIM_ConfigClockSource+0x26c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	f000 8233 	beq.w	8007194 <HAL_TIM_ConfigClockSource+0x5b4>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a47      	ldr	r2, [pc, #284]	; (8006e50 <HAL_TIM_ConfigClockSource+0x270>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	f000 822d 	beq.w	8007194 <HAL_TIM_ConfigClockSource+0x5b4>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a45      	ldr	r2, [pc, #276]	; (8006e54 <HAL_TIM_ConfigClockSource+0x274>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	f000 8227 	beq.w	8007194 <HAL_TIM_ConfigClockSource+0x5b4>
 8006d46:	f241 01dc 	movw	r1, #4316	; 0x10dc
 8006d4a:	483a      	ldr	r0, [pc, #232]	; (8006e34 <HAL_TIM_ConfigClockSource+0x254>)
 8006d4c:	f7fa ff58 	bl	8001c00 <assert_failed>
      break;
 8006d50:	e220      	b.n	8007194 <HAL_TIM_ConfigClockSource+0x5b4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5a:	d018      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a35      	ldr	r2, [pc, #212]	; (8006e38 <HAL_TIM_ConfigClockSource+0x258>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d013      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a34      	ldr	r2, [pc, #208]	; (8006e3c <HAL_TIM_ConfigClockSource+0x25c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00e      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a32      	ldr	r2, [pc, #200]	; (8006e40 <HAL_TIM_ConfigClockSource+0x260>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d009      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a33      	ldr	r2, [pc, #204]	; (8006e4c <HAL_TIM_ConfigClockSource+0x26c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d004      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8006d84:	f241 01e3 	movw	r1, #4323	; 0x10e3
 8006d88:	482a      	ldr	r0, [pc, #168]	; (8006e34 <HAL_TIM_ConfigClockSource+0x254>)
 8006d8a:	f7fa ff39 	bl	8001c00 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d013      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x1de>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d9e:	d00e      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x1de>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da8:	d009      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x1de>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006db2:	d004      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x1de>
 8006db4:	f241 01e6 	movw	r1, #4326	; 0x10e6
 8006db8:	481e      	ldr	r0, [pc, #120]	; (8006e34 <HAL_TIM_ConfigClockSource+0x254>)
 8006dba:	f7fa ff21 	bl	8001c00 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc6:	d014      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x212>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d010      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x212>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00c      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x212>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d008      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x212>
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b0a      	cmp	r3, #10
 8006de6:	d004      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x212>
 8006de8:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8006dec:	4811      	ldr	r0, [pc, #68]	; (8006e34 <HAL_TIM_ConfigClockSource+0x254>)
 8006dee:	f7fa ff07 	bl	8001c00 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	2b0f      	cmp	r3, #15
 8006df8:	d904      	bls.n	8006e04 <HAL_TIM_ConfigClockSource+0x224>
 8006dfa:	f241 01e8 	movw	r1, #4328	; 0x10e8
 8006dfe:	480d      	ldr	r0, [pc, #52]	; (8006e34 <HAL_TIM_ConfigClockSource+0x254>)
 8006e00:	f7fa fefe 	bl	8001c00 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	6899      	ldr	r1, [r3, #8]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f000 fbd6 	bl	80075c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	609a      	str	r2, [r3, #8]
      break;
 8006e30:	e1b1      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x5b6>
 8006e32:	bf00      	nop
 8006e34:	0800b650 	.word	0x0800b650
 8006e38:	40000400 	.word	0x40000400
 8006e3c:	40000800 	.word	0x40000800
 8006e40:	40000c00 	.word	0x40000c00
 8006e44:	40001000 	.word	0x40001000
 8006e48:	40001400 	.word	0x40001400
 8006e4c:	40010800 	.word	0x40010800
 8006e50:	40010c00 	.word	0x40010c00
 8006e54:	40011000 	.word	0x40011000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e60:	d022      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0x2c8>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a88      	ldr	r2, [pc, #544]	; (8007088 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d01d      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0x2c8>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a86      	ldr	r2, [pc, #536]	; (800708c <HAL_TIM_ConfigClockSource+0x4ac>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d018      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0x2c8>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a85      	ldr	r2, [pc, #532]	; (8007090 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d013      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0x2c8>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a83      	ldr	r2, [pc, #524]	; (8007094 <HAL_TIM_ConfigClockSource+0x4b4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d00e      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0x2c8>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a82      	ldr	r2, [pc, #520]	; (8007098 <HAL_TIM_ConfigClockSource+0x4b8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d009      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0x2c8>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a80      	ldr	r2, [pc, #512]	; (800709c <HAL_TIM_ConfigClockSource+0x4bc>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d004      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0x2c8>
 8006e9e:	f241 01fb 	movw	r1, #4347	; 0x10fb
 8006ea2:	487f      	ldr	r0, [pc, #508]	; (80070a0 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006ea4:	f7fa feac 	bl	8001c00 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d013      	beq.n	8006ed8 <HAL_TIM_ConfigClockSource+0x2f8>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb8:	d00e      	beq.n	8006ed8 <HAL_TIM_ConfigClockSource+0x2f8>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ec2:	d009      	beq.n	8006ed8 <HAL_TIM_ConfigClockSource+0x2f8>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ecc:	d004      	beq.n	8006ed8 <HAL_TIM_ConfigClockSource+0x2f8>
 8006ece:	f241 01fe 	movw	r1, #4350	; 0x10fe
 8006ed2:	4873      	ldr	r0, [pc, #460]	; (80070a0 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006ed4:	f7fa fe94 	bl	8001c00 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee0:	d014      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x32c>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d010      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x32c>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00c      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x32c>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d008      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x32c>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2b0a      	cmp	r3, #10
 8006f00:	d004      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x32c>
 8006f02:	f241 01ff 	movw	r1, #4351	; 0x10ff
 8006f06:	4866      	ldr	r0, [pc, #408]	; (80070a0 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006f08:	f7fa fe7a 	bl	8001c00 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	2b0f      	cmp	r3, #15
 8006f12:	d904      	bls.n	8006f1e <HAL_TIM_ConfigClockSource+0x33e>
 8006f14:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8006f18:	4861      	ldr	r0, [pc, #388]	; (80070a0 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006f1a:	f7fa fe71 	bl	8001c00 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	6899      	ldr	r1, [r3, #8]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f000 fb49 	bl	80075c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f40:	609a      	str	r2, [r3, #8]
      break;
 8006f42:	e128      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4c:	d018      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0x3a0>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a4d      	ldr	r2, [pc, #308]	; (8007088 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d013      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0x3a0>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a4b      	ldr	r2, [pc, #300]	; (800708c <HAL_TIM_ConfigClockSource+0x4ac>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00e      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0x3a0>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a4a      	ldr	r2, [pc, #296]	; (8007090 <HAL_TIM_ConfigClockSource+0x4b0>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d009      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0x3a0>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a48      	ldr	r2, [pc, #288]	; (8007094 <HAL_TIM_ConfigClockSource+0x4b4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d004      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0x3a0>
 8006f76:	f241 110f 	movw	r1, #4367	; 0x110f
 8006f7a:	4849      	ldr	r0, [pc, #292]	; (80070a0 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006f7c:	f7fa fe40 	bl	8001c00 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f88:	d014      	beq.n	8006fb4 <HAL_TIM_ConfigClockSource+0x3d4>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d010      	beq.n	8006fb4 <HAL_TIM_ConfigClockSource+0x3d4>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00c      	beq.n	8006fb4 <HAL_TIM_ConfigClockSource+0x3d4>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d008      	beq.n	8006fb4 <HAL_TIM_ConfigClockSource+0x3d4>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	2b0a      	cmp	r3, #10
 8006fa8:	d004      	beq.n	8006fb4 <HAL_TIM_ConfigClockSource+0x3d4>
 8006faa:	f241 1112 	movw	r1, #4370	; 0x1112
 8006fae:	483c      	ldr	r0, [pc, #240]	; (80070a0 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006fb0:	f7fa fe26 	bl	8001c00 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	2b0f      	cmp	r3, #15
 8006fba:	d904      	bls.n	8006fc6 <HAL_TIM_ConfigClockSource+0x3e6>
 8006fbc:	f241 1113 	movw	r1, #4371	; 0x1113
 8006fc0:	4837      	ldr	r0, [pc, #220]	; (80070a0 <HAL_TIM_ConfigClockSource+0x4c0>)
 8006fc2:	f7fa fe1d 	bl	8001c00 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6859      	ldr	r1, [r3, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f000 fa7f 	bl	80074d6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2150      	movs	r1, #80	; 0x50
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fad6 	bl	8007590 <TIM_ITRx_SetConfig>
      break;
 8006fe4:	e0d7      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fee:	d018      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x442>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a24      	ldr	r2, [pc, #144]	; (8007088 <HAL_TIM_ConfigClockSource+0x4a8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d013      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x442>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a23      	ldr	r2, [pc, #140]	; (800708c <HAL_TIM_ConfigClockSource+0x4ac>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00e      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x442>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a21      	ldr	r2, [pc, #132]	; (8007090 <HAL_TIM_ConfigClockSource+0x4b0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d009      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x442>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a20      	ldr	r2, [pc, #128]	; (8007094 <HAL_TIM_ConfigClockSource+0x4b4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d004      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x442>
 8007018:	f241 111f 	movw	r1, #4383	; 0x111f
 800701c:	4820      	ldr	r0, [pc, #128]	; (80070a0 <HAL_TIM_ConfigClockSource+0x4c0>)
 800701e:	f7fa fdef 	bl	8001c00 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800702a:	d014      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x476>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d010      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x476>
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00c      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x476>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	2b02      	cmp	r3, #2
 8007042:	d008      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x476>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	2b0a      	cmp	r3, #10
 800704a:	d004      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x476>
 800704c:	f241 1122 	movw	r1, #4386	; 0x1122
 8007050:	4813      	ldr	r0, [pc, #76]	; (80070a0 <HAL_TIM_ConfigClockSource+0x4c0>)
 8007052:	f7fa fdd5 	bl	8001c00 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	2b0f      	cmp	r3, #15
 800705c:	d904      	bls.n	8007068 <HAL_TIM_ConfigClockSource+0x488>
 800705e:	f241 1123 	movw	r1, #4387	; 0x1123
 8007062:	480f      	ldr	r0, [pc, #60]	; (80070a0 <HAL_TIM_ConfigClockSource+0x4c0>)
 8007064:	f7fa fdcc 	bl	8001c00 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6818      	ldr	r0, [r3, #0]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	6859      	ldr	r1, [r3, #4]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	461a      	mov	r2, r3
 8007076:	f000 fa5c 	bl	8007532 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2160      	movs	r1, #96	; 0x60
 8007080:	4618      	mov	r0, r3
 8007082:	f000 fa85 	bl	8007590 <TIM_ITRx_SetConfig>
      break;
 8007086:	e086      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x5b6>
 8007088:	40000400 	.word	0x40000400
 800708c:	40000800 	.word	0x40000800
 8007090:	40000c00 	.word	0x40000c00
 8007094:	40010800 	.word	0x40010800
 8007098:	40010c00 	.word	0x40010c00
 800709c:	40011000 	.word	0x40011000
 80070a0:	0800b650 	.word	0x0800b650
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ac:	d018      	beq.n	80070e0 <HAL_TIM_ConfigClockSource+0x500>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a3f      	ldr	r2, [pc, #252]	; (80071b0 <HAL_TIM_ConfigClockSource+0x5d0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d013      	beq.n	80070e0 <HAL_TIM_ConfigClockSource+0x500>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a3d      	ldr	r2, [pc, #244]	; (80071b4 <HAL_TIM_ConfigClockSource+0x5d4>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00e      	beq.n	80070e0 <HAL_TIM_ConfigClockSource+0x500>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a3c      	ldr	r2, [pc, #240]	; (80071b8 <HAL_TIM_ConfigClockSource+0x5d8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d009      	beq.n	80070e0 <HAL_TIM_ConfigClockSource+0x500>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a3a      	ldr	r2, [pc, #232]	; (80071bc <HAL_TIM_ConfigClockSource+0x5dc>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d004      	beq.n	80070e0 <HAL_TIM_ConfigClockSource+0x500>
 80070d6:	f241 112f 	movw	r1, #4399	; 0x112f
 80070da:	4839      	ldr	r0, [pc, #228]	; (80071c0 <HAL_TIM_ConfigClockSource+0x5e0>)
 80070dc:	f7fa fd90 	bl	8001c00 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e8:	d014      	beq.n	8007114 <HAL_TIM_ConfigClockSource+0x534>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d010      	beq.n	8007114 <HAL_TIM_ConfigClockSource+0x534>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00c      	beq.n	8007114 <HAL_TIM_ConfigClockSource+0x534>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d008      	beq.n	8007114 <HAL_TIM_ConfigClockSource+0x534>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b0a      	cmp	r3, #10
 8007108:	d004      	beq.n	8007114 <HAL_TIM_ConfigClockSource+0x534>
 800710a:	f241 1132 	movw	r1, #4402	; 0x1132
 800710e:	482c      	ldr	r0, [pc, #176]	; (80071c0 <HAL_TIM_ConfigClockSource+0x5e0>)
 8007110:	f7fa fd76 	bl	8001c00 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	2b0f      	cmp	r3, #15
 800711a:	d904      	bls.n	8007126 <HAL_TIM_ConfigClockSource+0x546>
 800711c:	f241 1133 	movw	r1, #4403	; 0x1133
 8007120:	4827      	ldr	r0, [pc, #156]	; (80071c0 <HAL_TIM_ConfigClockSource+0x5e0>)
 8007122:	f7fa fd6d 	bl	8001c00 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	6859      	ldr	r1, [r3, #4]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	461a      	mov	r2, r3
 8007134:	f000 f9cf 	bl	80074d6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2140      	movs	r1, #64	; 0x40
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fa26 	bl	8007590 <TIM_ITRx_SetConfig>
      break;
 8007144:	e027      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800714e:	d018      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0x5a2>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a16      	ldr	r2, [pc, #88]	; (80071b0 <HAL_TIM_ConfigClockSource+0x5d0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d013      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0x5a2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a15      	ldr	r2, [pc, #84]	; (80071b4 <HAL_TIM_ConfigClockSource+0x5d4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d00e      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0x5a2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <HAL_TIM_ConfigClockSource+0x5d8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d009      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0x5a2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a12      	ldr	r2, [pc, #72]	; (80071bc <HAL_TIM_ConfigClockSource+0x5dc>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d004      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0x5a2>
 8007178:	f241 1142 	movw	r1, #4418	; 0x1142
 800717c:	4810      	ldr	r0, [pc, #64]	; (80071c0 <HAL_TIM_ConfigClockSource+0x5e0>)
 800717e:	f7fa fd3f 	bl	8001c00 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4619      	mov	r1, r3
 800718c:	4610      	mov	r0, r2
 800718e:	f000 f9ff 	bl	8007590 <TIM_ITRx_SetConfig>
      break;
 8007192:	e000      	b.n	8007196 <HAL_TIM_ConfigClockSource+0x5b6>
      break;
 8007194:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	40000400 	.word	0x40000400
 80071b4:	40000800 	.word	0x40000800
 80071b8:	40000c00 	.word	0x40000c00
 80071bc:	40010800 	.word	0x40010800
 80071c0:	0800b650 	.word	0x0800b650

080071c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bc80      	pop	{r7}
 80071d4:	4770      	bx	lr

080071d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bc80      	pop	{r7}
 80071e6:	4770      	bx	lr

080071e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bc80      	pop	{r7}
 80071f8:	4770      	bx	lr

080071fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr

0800720c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007222:	d00f      	beq.n	8007244 <TIM_Base_SetConfig+0x38>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a2b      	ldr	r2, [pc, #172]	; (80072d4 <TIM_Base_SetConfig+0xc8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d00b      	beq.n	8007244 <TIM_Base_SetConfig+0x38>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a2a      	ldr	r2, [pc, #168]	; (80072d8 <TIM_Base_SetConfig+0xcc>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d007      	beq.n	8007244 <TIM_Base_SetConfig+0x38>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a29      	ldr	r2, [pc, #164]	; (80072dc <TIM_Base_SetConfig+0xd0>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d003      	beq.n	8007244 <TIM_Base_SetConfig+0x38>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a28      	ldr	r2, [pc, #160]	; (80072e0 <TIM_Base_SetConfig+0xd4>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d108      	bne.n	8007256 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725c:	d017      	beq.n	800728e <TIM_Base_SetConfig+0x82>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a1c      	ldr	r2, [pc, #112]	; (80072d4 <TIM_Base_SetConfig+0xc8>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d013      	beq.n	800728e <TIM_Base_SetConfig+0x82>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a1b      	ldr	r2, [pc, #108]	; (80072d8 <TIM_Base_SetConfig+0xcc>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d00f      	beq.n	800728e <TIM_Base_SetConfig+0x82>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a1a      	ldr	r2, [pc, #104]	; (80072dc <TIM_Base_SetConfig+0xd0>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d00b      	beq.n	800728e <TIM_Base_SetConfig+0x82>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a19      	ldr	r2, [pc, #100]	; (80072e0 <TIM_Base_SetConfig+0xd4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d007      	beq.n	800728e <TIM_Base_SetConfig+0x82>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a18      	ldr	r2, [pc, #96]	; (80072e4 <TIM_Base_SetConfig+0xd8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d003      	beq.n	800728e <TIM_Base_SetConfig+0x82>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a17      	ldr	r2, [pc, #92]	; (80072e8 <TIM_Base_SetConfig+0xdc>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d108      	bne.n	80072a0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	615a      	str	r2, [r3, #20]
}
 80072ca:	bf00      	nop
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr
 80072d4:	40000400 	.word	0x40000400
 80072d8:	40000800 	.word	0x40000800
 80072dc:	40000c00 	.word	0x40000c00
 80072e0:	40010800 	.word	0x40010800
 80072e4:	40010c00 	.word	0x40010c00
 80072e8:	40011000 	.word	0x40011000

080072ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	f023 0201 	bic.w	r2, r3, #1
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0303 	bic.w	r3, r3, #3
 8007322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f023 0302 	bic.w	r3, r3, #2
 8007334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	621a      	str	r2, [r3, #32]
}
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	bc80      	pop	{r7}
 8007362:	4770      	bx	lr

08007364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	f023 0210 	bic.w	r2, r3, #16
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800739a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f023 0320 	bic.w	r3, r3, #32
 80073ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	621a      	str	r2, [r3, #32]
}
 80073d6:	bf00      	nop
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	bc80      	pop	{r7}
 80073de:	4770      	bx	lr

080073e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0303 	bic.w	r3, r3, #3
 8007416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	4313      	orrs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	021b      	lsls	r3, r3, #8
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	621a      	str	r2, [r3, #32]
}
 8007450:	bf00      	nop
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	bc80      	pop	{r7}
 8007458:	4770      	bx	lr

0800745a <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800745a:	b480      	push	{r7}
 800745c:	b087      	sub	sp, #28
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007488:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007490:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	021b      	lsls	r3, r3, #8
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	031b      	lsls	r3, r3, #12
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	621a      	str	r2, [r3, #32]
}
 80074cc:	bf00      	nop
 80074ce:	371c      	adds	r7, #28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr

080074d6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b087      	sub	sp, #28
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	f023 0201 	bic.w	r2, r3, #1
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007500:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	4313      	orrs	r3, r2
 800750a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f023 030a 	bic.w	r3, r3, #10
 8007512:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	4313      	orrs	r3, r2
 800751a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	621a      	str	r2, [r3, #32]
}
 8007528:	bf00      	nop
 800752a:	371c      	adds	r7, #28
 800752c:	46bd      	mov	sp, r7
 800752e:	bc80      	pop	{r7}
 8007530:	4770      	bx	lr

08007532 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007532:	b480      	push	{r7}
 8007534:	b087      	sub	sp, #28
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	f023 0210 	bic.w	r2, r3, #16
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800755c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	031b      	lsls	r3, r3, #12
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	4313      	orrs	r3, r2
 8007566:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800756e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	621a      	str	r2, [r3, #32]
}
 8007586:	bf00      	nop
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr

08007590 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f043 0307 	orr.w	r3, r3, #7
 80075b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	609a      	str	r2, [r3, #8]
}
 80075ba:	bf00      	nop
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	021a      	lsls	r2, r3, #8
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	431a      	orrs	r2, r3
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	609a      	str	r2, [r3, #8]
}
 80075f8:	bf00      	nop
 80075fa:	371c      	adds	r7, #28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bc80      	pop	{r7}
 8007600:	4770      	bx	lr
	...

08007604 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007616:	d01c      	beq.n	8007652 <TIM_CCxChannelCmd+0x4e>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4a26      	ldr	r2, [pc, #152]	; (80076b4 <TIM_CCxChannelCmd+0xb0>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d018      	beq.n	8007652 <TIM_CCxChannelCmd+0x4e>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4a25      	ldr	r2, [pc, #148]	; (80076b8 <TIM_CCxChannelCmd+0xb4>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d014      	beq.n	8007652 <TIM_CCxChannelCmd+0x4e>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4a24      	ldr	r2, [pc, #144]	; (80076bc <TIM_CCxChannelCmd+0xb8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d010      	beq.n	8007652 <TIM_CCxChannelCmd+0x4e>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4a23      	ldr	r2, [pc, #140]	; (80076c0 <TIM_CCxChannelCmd+0xbc>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00c      	beq.n	8007652 <TIM_CCxChannelCmd+0x4e>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4a22      	ldr	r2, [pc, #136]	; (80076c4 <TIM_CCxChannelCmd+0xc0>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d008      	beq.n	8007652 <TIM_CCxChannelCmd+0x4e>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a21      	ldr	r2, [pc, #132]	; (80076c8 <TIM_CCxChannelCmd+0xc4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d004      	beq.n	8007652 <TIM_CCxChannelCmd+0x4e>
 8007648:	f641 0169 	movw	r1, #6249	; 0x1869
 800764c:	481f      	ldr	r0, [pc, #124]	; (80076cc <TIM_CCxChannelCmd+0xc8>)
 800764e:	f7fa fad7 	bl	8001c00 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d010      	beq.n	800767a <TIM_CCxChannelCmd+0x76>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b04      	cmp	r3, #4
 800765c:	d00d      	beq.n	800767a <TIM_CCxChannelCmd+0x76>
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2b08      	cmp	r3, #8
 8007662:	d00a      	beq.n	800767a <TIM_CCxChannelCmd+0x76>
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2b0c      	cmp	r3, #12
 8007668:	d007      	beq.n	800767a <TIM_CCxChannelCmd+0x76>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b3c      	cmp	r3, #60	; 0x3c
 800766e:	d004      	beq.n	800767a <TIM_CCxChannelCmd+0x76>
 8007670:	f641 016a 	movw	r1, #6250	; 0x186a
 8007674:	4815      	ldr	r0, [pc, #84]	; (80076cc <TIM_CCxChannelCmd+0xc8>)
 8007676:	f7fa fac3 	bl	8001c00 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	f003 031f 	and.w	r3, r3, #31
 8007680:	2201      	movs	r2, #1
 8007682:	fa02 f303 	lsl.w	r3, r2, r3
 8007686:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a1a      	ldr	r2, [r3, #32]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	43db      	mvns	r3, r3
 8007690:	401a      	ands	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a1a      	ldr	r2, [r3, #32]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f003 031f 	and.w	r3, r3, #31
 80076a0:	6879      	ldr	r1, [r7, #4]
 80076a2:	fa01 f303 	lsl.w	r3, r1, r3
 80076a6:	431a      	orrs	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	621a      	str	r2, [r3, #32]
}
 80076ac:	bf00      	nop
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	40000400 	.word	0x40000400
 80076b8:	40000800 	.word	0x40000800
 80076bc:	40000c00 	.word	0x40000c00
 80076c0:	40010800 	.word	0x40010800
 80076c4:	40010c00 	.word	0x40010c00
 80076c8:	40011000 	.word	0x40011000
 80076cc:	0800b650 	.word	0x0800b650

080076d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e2:	d017      	beq.n	8007714 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a41      	ldr	r2, [pc, #260]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d012      	beq.n	8007714 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a40      	ldr	r2, [pc, #256]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00d      	beq.n	8007714 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a3e      	ldr	r2, [pc, #248]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d008      	beq.n	8007714 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a3d      	ldr	r2, [pc, #244]	; (80077fc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d003      	beq.n	8007714 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800770c:	215a      	movs	r1, #90	; 0x5a
 800770e:	483c      	ldr	r0, [pc, #240]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007710:	f7fa fa76 	bl	8001c00 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01f      	beq.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b10      	cmp	r3, #16
 8007722:	d01b      	beq.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b20      	cmp	r3, #32
 800772a:	d017      	beq.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b30      	cmp	r3, #48	; 0x30
 8007732:	d013      	beq.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b40      	cmp	r3, #64	; 0x40
 800773a:	d00f      	beq.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b50      	cmp	r3, #80	; 0x50
 8007742:	d00b      	beq.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b60      	cmp	r3, #96	; 0x60
 800774a:	d007      	beq.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b70      	cmp	r3, #112	; 0x70
 8007752:	d003      	beq.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007754:	215b      	movs	r1, #91	; 0x5b
 8007756:	482a      	ldr	r0, [pc, #168]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007758:	f7fa fa52 	bl	8001c00 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	2b80      	cmp	r3, #128	; 0x80
 8007762:	d007      	beq.n	8007774 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800776c:	215c      	movs	r1, #92	; 0x5c
 800776e:	4824      	ldr	r0, [pc, #144]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007770:	f7fa fa46 	bl	8001c00 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 800777e:	2302      	movs	r3, #2
 8007780:	e032      	b.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2202      	movs	r2, #2
 800778e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ba:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	40000400 	.word	0x40000400
 80077f4:	40000800 	.word	0x40000800
 80077f8:	40000c00 	.word	0x40000c00
 80077fc:	40010800 	.word	0x40010800
 8007800:	0800b688 	.word	0x0800b688

08007804 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e0aa      	b.n	800796c <HAL_UART_Init+0x168>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d02c      	beq.n	8007878 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a54      	ldr	r2, [pc, #336]	; (8007974 <HAL_UART_Init+0x170>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d00e      	beq.n	8007846 <HAL_UART_Init+0x42>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a52      	ldr	r2, [pc, #328]	; (8007978 <HAL_UART_Init+0x174>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d009      	beq.n	8007846 <HAL_UART_Init+0x42>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a51      	ldr	r2, [pc, #324]	; (800797c <HAL_UART_Init+0x178>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d004      	beq.n	8007846 <HAL_UART_Init+0x42>
 800783c:	f240 1145 	movw	r1, #325	; 0x145
 8007840:	484f      	ldr	r0, [pc, #316]	; (8007980 <HAL_UART_Init+0x17c>)
 8007842:	f7fa f9dd 	bl	8001c00 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d032      	beq.n	80078b4 <HAL_UART_Init+0xb0>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007856:	d02d      	beq.n	80078b4 <HAL_UART_Init+0xb0>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007860:	d028      	beq.n	80078b4 <HAL_UART_Init+0xb0>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800786a:	d023      	beq.n	80078b4 <HAL_UART_Init+0xb0>
 800786c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007870:	4843      	ldr	r0, [pc, #268]	; (8007980 <HAL_UART_Init+0x17c>)
 8007872:	f7fa f9c5 	bl	8001c00 <assert_failed>
 8007876:	e01d      	b.n	80078b4 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a3d      	ldr	r2, [pc, #244]	; (8007974 <HAL_UART_Init+0x170>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d018      	beq.n	80078b4 <HAL_UART_Init+0xb0>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a3c      	ldr	r2, [pc, #240]	; (8007978 <HAL_UART_Init+0x174>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d013      	beq.n	80078b4 <HAL_UART_Init+0xb0>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a3a      	ldr	r2, [pc, #232]	; (800797c <HAL_UART_Init+0x178>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00e      	beq.n	80078b4 <HAL_UART_Init+0xb0>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a3a      	ldr	r2, [pc, #232]	; (8007984 <HAL_UART_Init+0x180>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d009      	beq.n	80078b4 <HAL_UART_Init+0xb0>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a38      	ldr	r2, [pc, #224]	; (8007988 <HAL_UART_Init+0x184>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d004      	beq.n	80078b4 <HAL_UART_Init+0xb0>
 80078aa:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80078ae:	4834      	ldr	r0, [pc, #208]	; (8007980 <HAL_UART_Init+0x17c>)
 80078b0:	f7fa f9a6 	bl	8001c00 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d009      	beq.n	80078d0 <HAL_UART_Init+0xcc>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c4:	d004      	beq.n	80078d0 <HAL_UART_Init+0xcc>
 80078c6:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80078ca:	482d      	ldr	r0, [pc, #180]	; (8007980 <HAL_UART_Init+0x17c>)
 80078cc:	f7fa f998 	bl	8001c00 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	69db      	ldr	r3, [r3, #28]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d009      	beq.n	80078ec <HAL_UART_Init+0xe8>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078e0:	d004      	beq.n	80078ec <HAL_UART_Init+0xe8>
 80078e2:	f240 114d 	movw	r1, #333	; 0x14d
 80078e6:	4826      	ldr	r0, [pc, #152]	; (8007980 <HAL_UART_Init+0x17c>)
 80078e8:	f7fa f98a 	bl	8001c00 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d106      	bne.n	8007906 <HAL_UART_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7fa fda3 	bl	800244c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2224      	movs	r2, #36	; 0x24
 800790a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68da      	ldr	r2, [r3, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800791c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fa60 	bl	8007de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007932:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	695a      	ldr	r2, [r3, #20]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007942:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007952:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2220      	movs	r2, #32
 800795e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2220      	movs	r2, #32
 8007966:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40013800 	.word	0x40013800
 8007978:	40004400 	.word	0x40004400
 800797c:	40004800 	.word	0x40004800
 8007980:	0800b6c4 	.word	0x0800b6c4
 8007984:	40004c00 	.word	0x40004c00
 8007988:	40005000 	.word	0x40005000

0800798c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af02      	add	r7, sp, #8
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	4613      	mov	r3, r2
 800799a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b20      	cmp	r3, #32
 80079aa:	f040 8083 	bne.w	8007ab4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <HAL_UART_Transmit+0x2e>
 80079b4:	88fb      	ldrh	r3, [r7, #6]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e07b      	b.n	8007ab6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_UART_Transmit+0x40>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e074      	b.n	8007ab6 <HAL_UART_Transmit+0x12a>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2221      	movs	r2, #33	; 0x21
 80079de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80079e2:	f7fa fe1d 	bl	8002620 <HAL_GetTick>
 80079e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	88fa      	ldrh	r2, [r7, #6]
 80079f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079f4:	e042      	b.n	8007a7c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a0c:	d122      	bne.n	8007a54 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	2200      	movs	r2, #0
 8007a16:	2180      	movs	r1, #128	; 0x80
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 f966 	bl	8007cea <UART_WaitOnFlagUntilTimeout>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e046      	b.n	8007ab6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	461a      	mov	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a3a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d103      	bne.n	8007a4c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	3302      	adds	r3, #2
 8007a48:	60bb      	str	r3, [r7, #8]
 8007a4a:	e017      	b.n	8007a7c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	60bb      	str	r3, [r7, #8]
 8007a52:	e013      	b.n	8007a7c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	2180      	movs	r1, #128	; 0x80
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f943 	bl	8007cea <UART_WaitOnFlagUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e023      	b.n	8007ab6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	60ba      	str	r2, [r7, #8]
 8007a74:	781a      	ldrb	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1b7      	bne.n	80079f6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2140      	movs	r1, #64	; 0x40
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 f92a 	bl	8007cea <UART_WaitOnFlagUntilTimeout>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e00a      	b.n	8007ab6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	e000      	b.n	8007ab6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007ab4:	2302      	movs	r3, #2
  }
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
	...

08007ac0 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	4613      	mov	r3, r2
 8007acc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	d166      	bne.n	8007ba8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <HAL_UART_Receive_DMA+0x26>
 8007ae0:	88fb      	ldrh	r3, [r7, #6]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e05f      	b.n	8007baa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <HAL_UART_Receive_DMA+0x38>
 8007af4:	2302      	movs	r3, #2
 8007af6:	e058      	b.n	8007baa <HAL_UART_Receive_DMA+0xea>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	88fa      	ldrh	r2, [r7, #6]
 8007b0a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2222      	movs	r2, #34	; 0x22
 8007b16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1e:	4a25      	ldr	r2, [pc, #148]	; (8007bb4 <HAL_UART_Receive_DMA+0xf4>)
 8007b20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b26:	4a24      	ldr	r2, [pc, #144]	; (8007bb8 <HAL_UART_Receive_DMA+0xf8>)
 8007b28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2e:	4a23      	ldr	r2, [pc, #140]	; (8007bbc <HAL_UART_Receive_DMA+0xfc>)
 8007b30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b36:	2200      	movs	r2, #0
 8007b38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8007b3a:	f107 0308 	add.w	r3, r7, #8
 8007b3e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3304      	adds	r3, #4
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	88fb      	ldrh	r3, [r7, #6]
 8007b52:	f7fb ff27 	bl	80039a4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007b56:	2300      	movs	r3, #0
 8007b58:	613b      	str	r3, [r7, #16]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	613b      	str	r3, [r7, #16]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	613b      	str	r3, [r7, #16]
 8007b6a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b82:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	695a      	ldr	r2, [r3, #20]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f042 0201 	orr.w	r2, r2, #1
 8007b92:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695a      	ldr	r2, [r3, #20]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ba2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	e000      	b.n	8007baa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007ba8:	2302      	movs	r3, #2
  }
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	08007bd3 	.word	0x08007bd3
 8007bb8:	08007c3b 	.word	0x08007c3b
 8007bbc:	08007c57 	.word	0x08007c57

08007bc0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bc80      	pop	{r7}
 8007bd0:	4770      	bx	lr

08007bd2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d11e      	bne.n	8007c2c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c02:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	695a      	ldr	r2, [r3, #20]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f022 0201 	bic.w	r2, r2, #1
 8007c12:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	695a      	ldr	r2, [r3, #20]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c22:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7f9 f959 	bl	8000ee4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c32:	bf00      	nop
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7ff ffb9 	bl	8007bc0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c4e:	bf00      	nop
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c66:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c72:	2b80      	cmp	r3, #128	; 0x80
 8007c74:	bf0c      	ite	eq
 8007c76:	2301      	moveq	r3, #1
 8007c78:	2300      	movne	r3, #0
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b21      	cmp	r3, #33	; 0x21
 8007c88:	d108      	bne.n	8007c9c <UART_DMAError+0x46>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d005      	beq.n	8007c9c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2200      	movs	r2, #0
 8007c94:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007c96:	68b8      	ldr	r0, [r7, #8]
 8007c98:	f000 f871 	bl	8007d7e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca6:	2b40      	cmp	r3, #64	; 0x40
 8007ca8:	bf0c      	ite	eq
 8007caa:	2301      	moveq	r3, #1
 8007cac:	2300      	movne	r3, #0
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b22      	cmp	r3, #34	; 0x22
 8007cbc:	d108      	bne.n	8007cd0 <UART_DMAError+0x7a>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d005      	beq.n	8007cd0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007cca:	68b8      	ldr	r0, [r7, #8]
 8007ccc:	f000 f86c 	bl	8007da8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd4:	f043 0210 	orr.w	r2, r3, #16
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cdc:	68b8      	ldr	r0, [r7, #8]
 8007cde:	f7f9 f923 	bl	8000f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce2:	bf00      	nop
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	603b      	str	r3, [r7, #0]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cfa:	e02c      	b.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d02:	d028      	beq.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d007      	beq.n	8007d1a <UART_WaitOnFlagUntilTimeout+0x30>
 8007d0a:	f7fa fc89 	bl	8002620 <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d21d      	bcs.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d28:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	695a      	ldr	r2, [r3, #20]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0201 	bic.w	r2, r2, #1
 8007d38:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e00f      	b.n	8007d76 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	4013      	ands	r3, r2
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	bf0c      	ite	eq
 8007d66:	2301      	moveq	r3, #1
 8007d68:	2300      	movne	r3, #0
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d0c3      	beq.n	8007cfc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007d94:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bc80      	pop	{r7}
 8007da6:	4770      	bx	lr

08007da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007dbe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	695a      	ldr	r2, [r3, #20]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0201 	bic.w	r2, r2, #1
 8007dce:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr
	...

08007de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	4ab2      	ldr	r2, [pc, #712]	; (80080bc <UART_SetConfig+0x2d8>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d904      	bls.n	8007e00 <UART_SetConfig+0x1c>
 8007df6:	f640 31e2 	movw	r1, #3042	; 0xbe2
 8007dfa:	48b1      	ldr	r0, [pc, #708]	; (80080c0 <UART_SetConfig+0x2dc>)
 8007dfc:	f7f9 ff00 	bl	8001c00 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d009      	beq.n	8007e1c <UART_SetConfig+0x38>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e10:	d004      	beq.n	8007e1c <UART_SetConfig+0x38>
 8007e12:	f640 31e3 	movw	r1, #3043	; 0xbe3
 8007e16:	48aa      	ldr	r0, [pc, #680]	; (80080c0 <UART_SetConfig+0x2dc>)
 8007e18:	f7f9 fef2 	bl	8001c00 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00e      	beq.n	8007e42 <UART_SetConfig+0x5e>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e2c:	d009      	beq.n	8007e42 <UART_SetConfig+0x5e>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007e36:	d004      	beq.n	8007e42 <UART_SetConfig+0x5e>
 8007e38:	f640 31e4 	movw	r1, #3044	; 0xbe4
 8007e3c:	48a0      	ldr	r0, [pc, #640]	; (80080c0 <UART_SetConfig+0x2dc>)
 8007e3e:	f7f9 fedf 	bl	8001c00 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	695a      	ldr	r2, [r3, #20]
 8007e46:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d103      	bne.n	8007e58 <UART_SetConfig+0x74>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	695b      	ldr	r3, [r3, #20]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d104      	bne.n	8007e62 <UART_SetConfig+0x7e>
 8007e58:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8007e5c:	4898      	ldr	r0, [pc, #608]	; (80080c0 <UART_SetConfig+0x2dc>)
 8007e5e:	f7f9 fecf 	bl	8001c00 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68da      	ldr	r2, [r3, #12]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007e9a:	f023 030c 	bic.w	r3, r3, #12
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6812      	ldr	r2, [r2, #0]
 8007ea2:	68f9      	ldr	r1, [r7, #12]
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	699a      	ldr	r2, [r3, #24]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec6:	f040 80a5 	bne.w	8008014 <UART_SetConfig+0x230>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a7d      	ldr	r2, [pc, #500]	; (80080c4 <UART_SetConfig+0x2e0>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d14f      	bne.n	8007f74 <UART_SetConfig+0x190>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ed4:	f7fe f842 	bl	8005f5c <HAL_RCC_GetPCLK2Freq>
 8007ed8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4613      	mov	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	009a      	lsls	r2, r3, #2
 8007ee4:	441a      	add	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	005b      	lsls	r3, r3, #1
 8007eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef0:	4a75      	ldr	r2, [pc, #468]	; (80080c8 <UART_SetConfig+0x2e4>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	095b      	lsrs	r3, r3, #5
 8007ef8:	0119      	lsls	r1, r3, #4
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	4613      	mov	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	009a      	lsls	r2, r3, #2
 8007f04:	441a      	add	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	005b      	lsls	r3, r3, #1
 8007f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f10:	4b6d      	ldr	r3, [pc, #436]	; (80080c8 <UART_SetConfig+0x2e4>)
 8007f12:	fba3 0302 	umull	r0, r3, r3, r2
 8007f16:	095b      	lsrs	r3, r3, #5
 8007f18:	2064      	movs	r0, #100	; 0x64
 8007f1a:	fb00 f303 	mul.w	r3, r0, r3
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	3332      	adds	r3, #50	; 0x32
 8007f24:	4a68      	ldr	r2, [pc, #416]	; (80080c8 <UART_SetConfig+0x2e4>)
 8007f26:	fba2 2303 	umull	r2, r3, r2, r3
 8007f2a:	095b      	lsrs	r3, r3, #5
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f32:	4419      	add	r1, r3
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	009a      	lsls	r2, r3, #2
 8007f3e:	441a      	add	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f4a:	4b5f      	ldr	r3, [pc, #380]	; (80080c8 <UART_SetConfig+0x2e4>)
 8007f4c:	fba3 0302 	umull	r0, r3, r3, r2
 8007f50:	095b      	lsrs	r3, r3, #5
 8007f52:	2064      	movs	r0, #100	; 0x64
 8007f54:	fb00 f303 	mul.w	r3, r0, r3
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	00db      	lsls	r3, r3, #3
 8007f5c:	3332      	adds	r3, #50	; 0x32
 8007f5e:	4a5a      	ldr	r2, [pc, #360]	; (80080c8 <UART_SetConfig+0x2e4>)
 8007f60:	fba2 2303 	umull	r2, r3, r2, r3
 8007f64:	095b      	lsrs	r3, r3, #5
 8007f66:	f003 0207 	and.w	r2, r3, #7
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	440a      	add	r2, r1
 8007f70:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007f72:	e0f9      	b.n	8008168 <UART_SetConfig+0x384>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f74:	f7fd ffde 	bl	8005f34 <HAL_RCC_GetPCLK1Freq>
 8007f78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	009a      	lsls	r2, r3, #2
 8007f84:	441a      	add	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f90:	4a4d      	ldr	r2, [pc, #308]	; (80080c8 <UART_SetConfig+0x2e4>)
 8007f92:	fba2 2303 	umull	r2, r3, r2, r3
 8007f96:	095b      	lsrs	r3, r3, #5
 8007f98:	0119      	lsls	r1, r3, #4
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009a      	lsls	r2, r3, #2
 8007fa4:	441a      	add	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8007fb0:	4b45      	ldr	r3, [pc, #276]	; (80080c8 <UART_SetConfig+0x2e4>)
 8007fb2:	fba3 0302 	umull	r0, r3, r3, r2
 8007fb6:	095b      	lsrs	r3, r3, #5
 8007fb8:	2064      	movs	r0, #100	; 0x64
 8007fba:	fb00 f303 	mul.w	r3, r0, r3
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	3332      	adds	r3, #50	; 0x32
 8007fc4:	4a40      	ldr	r2, [pc, #256]	; (80080c8 <UART_SetConfig+0x2e4>)
 8007fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fca:	095b      	lsrs	r3, r3, #5
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fd2:	4419      	add	r1, r3
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	009a      	lsls	r2, r3, #2
 8007fde:	441a      	add	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	fbb2 f2f3 	udiv	r2, r2, r3
 8007fea:	4b37      	ldr	r3, [pc, #220]	; (80080c8 <UART_SetConfig+0x2e4>)
 8007fec:	fba3 0302 	umull	r0, r3, r3, r2
 8007ff0:	095b      	lsrs	r3, r3, #5
 8007ff2:	2064      	movs	r0, #100	; 0x64
 8007ff4:	fb00 f303 	mul.w	r3, r0, r3
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	3332      	adds	r3, #50	; 0x32
 8007ffe:	4a32      	ldr	r2, [pc, #200]	; (80080c8 <UART_SetConfig+0x2e4>)
 8008000:	fba2 2303 	umull	r2, r3, r2, r3
 8008004:	095b      	lsrs	r3, r3, #5
 8008006:	f003 0207 	and.w	r2, r3, #7
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	440a      	add	r2, r1
 8008010:	609a      	str	r2, [r3, #8]
}
 8008012:	e0a9      	b.n	8008168 <UART_SetConfig+0x384>
    if((huart->Instance == USART1))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a2a      	ldr	r2, [pc, #168]	; (80080c4 <UART_SetConfig+0x2e0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d156      	bne.n	80080cc <UART_SetConfig+0x2e8>
      pclk = HAL_RCC_GetPCLK2Freq();
 800801e:	f7fd ff9d 	bl	8005f5c <HAL_RCC_GetPCLK2Freq>
 8008022:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	009a      	lsls	r2, r3, #2
 800802e:	441a      	add	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	fbb2 f3f3 	udiv	r3, r2, r3
 800803a:	4a23      	ldr	r2, [pc, #140]	; (80080c8 <UART_SetConfig+0x2e4>)
 800803c:	fba2 2303 	umull	r2, r3, r2, r3
 8008040:	095b      	lsrs	r3, r3, #5
 8008042:	0119      	lsls	r1, r3, #4
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	4613      	mov	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	009a      	lsls	r2, r3, #2
 800804e:	441a      	add	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	fbb2 f2f3 	udiv	r2, r2, r3
 800805a:	4b1b      	ldr	r3, [pc, #108]	; (80080c8 <UART_SetConfig+0x2e4>)
 800805c:	fba3 0302 	umull	r0, r3, r3, r2
 8008060:	095b      	lsrs	r3, r3, #5
 8008062:	2064      	movs	r0, #100	; 0x64
 8008064:	fb00 f303 	mul.w	r3, r0, r3
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	3332      	adds	r3, #50	; 0x32
 800806e:	4a16      	ldr	r2, [pc, #88]	; (80080c8 <UART_SetConfig+0x2e4>)
 8008070:	fba2 2303 	umull	r2, r3, r2, r3
 8008074:	095b      	lsrs	r3, r3, #5
 8008076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800807a:	4419      	add	r1, r3
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	4613      	mov	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	009a      	lsls	r2, r3, #2
 8008086:	441a      	add	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008092:	4b0d      	ldr	r3, [pc, #52]	; (80080c8 <UART_SetConfig+0x2e4>)
 8008094:	fba3 0302 	umull	r0, r3, r3, r2
 8008098:	095b      	lsrs	r3, r3, #5
 800809a:	2064      	movs	r0, #100	; 0x64
 800809c:	fb00 f303 	mul.w	r3, r0, r3
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	3332      	adds	r3, #50	; 0x32
 80080a6:	4a08      	ldr	r2, [pc, #32]	; (80080c8 <UART_SetConfig+0x2e4>)
 80080a8:	fba2 2303 	umull	r2, r3, r2, r3
 80080ac:	095b      	lsrs	r3, r3, #5
 80080ae:	f003 020f 	and.w	r2, r3, #15
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	440a      	add	r2, r1
 80080b8:	609a      	str	r2, [r3, #8]
}
 80080ba:	e055      	b.n	8008168 <UART_SetConfig+0x384>
 80080bc:	003d0900 	.word	0x003d0900
 80080c0:	0800b6c4 	.word	0x0800b6c4
 80080c4:	40013800 	.word	0x40013800
 80080c8:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80080cc:	f7fd ff32 	bl	8005f34 <HAL_RCC_GetPCLK1Freq>
 80080d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	4613      	mov	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	009a      	lsls	r2, r3, #2
 80080dc:	441a      	add	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e8:	4a21      	ldr	r2, [pc, #132]	; (8008170 <UART_SetConfig+0x38c>)
 80080ea:	fba2 2303 	umull	r2, r3, r2, r3
 80080ee:	095b      	lsrs	r3, r3, #5
 80080f0:	0119      	lsls	r1, r3, #4
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	4613      	mov	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	009a      	lsls	r2, r3, #2
 80080fc:	441a      	add	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	fbb2 f2f3 	udiv	r2, r2, r3
 8008108:	4b19      	ldr	r3, [pc, #100]	; (8008170 <UART_SetConfig+0x38c>)
 800810a:	fba3 0302 	umull	r0, r3, r3, r2
 800810e:	095b      	lsrs	r3, r3, #5
 8008110:	2064      	movs	r0, #100	; 0x64
 8008112:	fb00 f303 	mul.w	r3, r0, r3
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	3332      	adds	r3, #50	; 0x32
 800811c:	4a14      	ldr	r2, [pc, #80]	; (8008170 <UART_SetConfig+0x38c>)
 800811e:	fba2 2303 	umull	r2, r3, r2, r3
 8008122:	095b      	lsrs	r3, r3, #5
 8008124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008128:	4419      	add	r1, r3
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	009a      	lsls	r2, r3, #2
 8008134:	441a      	add	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008140:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <UART_SetConfig+0x38c>)
 8008142:	fba3 0302 	umull	r0, r3, r3, r2
 8008146:	095b      	lsrs	r3, r3, #5
 8008148:	2064      	movs	r0, #100	; 0x64
 800814a:	fb00 f303 	mul.w	r3, r0, r3
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	011b      	lsls	r3, r3, #4
 8008152:	3332      	adds	r3, #50	; 0x32
 8008154:	4a06      	ldr	r2, [pc, #24]	; (8008170 <UART_SetConfig+0x38c>)
 8008156:	fba2 2303 	umull	r2, r3, r2, r3
 800815a:	095b      	lsrs	r3, r3, #5
 800815c:	f003 020f 	and.w	r2, r3, #15
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	440a      	add	r2, r1
 8008166:	609a      	str	r2, [r3, #8]
}
 8008168:	bf00      	nop
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	51eb851f 	.word	0x51eb851f

08008174 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800817a:	f3ef 8305 	mrs	r3, IPSR
 800817e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008180:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10f      	bne.n	80081a6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008186:	f3ef 8310 	mrs	r3, PRIMASK
 800818a:	607b      	str	r3, [r7, #4]
  return(result);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d109      	bne.n	80081a6 <osKernelInitialize+0x32>
 8008192:	4b10      	ldr	r3, [pc, #64]	; (80081d4 <osKernelInitialize+0x60>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b02      	cmp	r3, #2
 8008198:	d109      	bne.n	80081ae <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800819a:	f3ef 8311 	mrs	r3, BASEPRI
 800819e:	603b      	str	r3, [r7, #0]
  return(result);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80081a6:	f06f 0305 	mvn.w	r3, #5
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	e00c      	b.n	80081c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081ae:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <osKernelInitialize+0x60>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d105      	bne.n	80081c2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80081b6:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <osKernelInitialize+0x60>)
 80081b8:	2201      	movs	r2, #1
 80081ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081bc:	2300      	movs	r3, #0
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	e002      	b.n	80081c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80081c2:	f04f 33ff 	mov.w	r3, #4294967295
 80081c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80081c8:	68fb      	ldr	r3, [r7, #12]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr
 80081d4:	20000040 	.word	0x20000040

080081d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081de:	f3ef 8305 	mrs	r3, IPSR
 80081e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80081e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10f      	bne.n	800820a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081ea:	f3ef 8310 	mrs	r3, PRIMASK
 80081ee:	607b      	str	r3, [r7, #4]
  return(result);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <osKernelStart+0x32>
 80081f6:	4b11      	ldr	r3, [pc, #68]	; (800823c <osKernelStart+0x64>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d109      	bne.n	8008212 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80081fe:	f3ef 8311 	mrs	r3, BASEPRI
 8008202:	603b      	str	r3, [r7, #0]
  return(result);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <osKernelStart+0x3a>
    stat = osErrorISR;
 800820a:	f06f 0305 	mvn.w	r3, #5
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	e00e      	b.n	8008230 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008212:	4b0a      	ldr	r3, [pc, #40]	; (800823c <osKernelStart+0x64>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d107      	bne.n	800822a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800821a:	4b08      	ldr	r3, [pc, #32]	; (800823c <osKernelStart+0x64>)
 800821c:	2202      	movs	r2, #2
 800821e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008220:	f001 fbb2 	bl	8009988 <vTaskStartScheduler>
      stat = osOK;
 8008224:	2300      	movs	r3, #0
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	e002      	b.n	8008230 <osKernelStart+0x58>
    } else {
      stat = osError;
 800822a:	f04f 33ff 	mov.w	r3, #4294967295
 800822e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008230:	68fb      	ldr	r3, [r7, #12]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000040 	.word	0x20000040

08008240 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008240:	b580      	push	{r7, lr}
 8008242:	b092      	sub	sp, #72	; 0x48
 8008244:	af04      	add	r7, sp, #16
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800824c:	2300      	movs	r3, #0
 800824e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008250:	f3ef 8305 	mrs	r3, IPSR
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008258:	2b00      	cmp	r3, #0
 800825a:	f040 8094 	bne.w	8008386 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800825e:	f3ef 8310 	mrs	r3, PRIMASK
 8008262:	623b      	str	r3, [r7, #32]
  return(result);
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	2b00      	cmp	r3, #0
 8008268:	f040 808d 	bne.w	8008386 <osThreadNew+0x146>
 800826c:	4b48      	ldr	r3, [pc, #288]	; (8008390 <osThreadNew+0x150>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b02      	cmp	r3, #2
 8008272:	d106      	bne.n	8008282 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008274:	f3ef 8311 	mrs	r3, BASEPRI
 8008278:	61fb      	str	r3, [r7, #28]
  return(result);
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f040 8082 	bne.w	8008386 <osThreadNew+0x146>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d07e      	beq.n	8008386 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008288:	2380      	movs	r3, #128	; 0x80
 800828a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800828c:	2318      	movs	r3, #24
 800828e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008290:	2300      	movs	r3, #0
 8008292:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008294:	f107 031b 	add.w	r3, r7, #27
 8008298:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800829a:	f04f 33ff 	mov.w	r3, #4294967295
 800829e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d045      	beq.n	8008332 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <osThreadNew+0x74>
        name = attr->name;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d008      	beq.n	80082da <osThreadNew+0x9a>
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	2b38      	cmp	r3, #56	; 0x38
 80082cc:	d805      	bhi.n	80082da <osThreadNew+0x9a>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <osThreadNew+0x9e>
        return (NULL);
 80082da:	2300      	movs	r3, #0
 80082dc:	e054      	b.n	8008388 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	089b      	lsrs	r3, r3, #2
 80082ec:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00e      	beq.n	8008314 <osThreadNew+0xd4>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	2b5b      	cmp	r3, #91	; 0x5b
 80082fc:	d90a      	bls.n	8008314 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008302:	2b00      	cmp	r3, #0
 8008304:	d006      	beq.n	8008314 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <osThreadNew+0xd4>
        mem = 1;
 800830e:	2301      	movs	r3, #1
 8008310:	62bb      	str	r3, [r7, #40]	; 0x28
 8008312:	e010      	b.n	8008336 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10c      	bne.n	8008336 <osThreadNew+0xf6>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d108      	bne.n	8008336 <osThreadNew+0xf6>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <osThreadNew+0xf6>
          mem = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008330:	e001      	b.n	8008336 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008332:	2300      	movs	r3, #0
 8008334:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008338:	2b01      	cmp	r3, #1
 800833a:	d110      	bne.n	800835e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008344:	9202      	str	r2, [sp, #8]
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008350:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f001 f844 	bl	80093e0 <xTaskCreateStatic>
 8008358:	4603      	mov	r3, r0
 800835a:	617b      	str	r3, [r7, #20]
 800835c:	e013      	b.n	8008386 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800835e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008360:	2b00      	cmp	r3, #0
 8008362:	d110      	bne.n	8008386 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008366:	b29a      	uxth	r2, r3
 8008368:	f107 0314 	add.w	r3, r7, #20
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f001 f88b 	bl	8009492 <xTaskCreate>
 800837c:	4603      	mov	r3, r0
 800837e:	2b01      	cmp	r3, #1
 8008380:	d001      	beq.n	8008386 <osThreadNew+0x146>
          hTask = NULL;
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008386:	697b      	ldr	r3, [r7, #20]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3738      	adds	r7, #56	; 0x38
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	20000040 	.word	0x20000040

08008394 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800839c:	f3ef 8305 	mrs	r3, IPSR
 80083a0:	613b      	str	r3, [r7, #16]
  return(result);
 80083a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10f      	bne.n	80083c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083a8:	f3ef 8310 	mrs	r3, PRIMASK
 80083ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d109      	bne.n	80083c8 <osDelay+0x34>
 80083b4:	4b0d      	ldr	r3, [pc, #52]	; (80083ec <osDelay+0x58>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d109      	bne.n	80083d0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083bc:	f3ef 8311 	mrs	r3, BASEPRI
 80083c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <osDelay+0x3c>
    stat = osErrorISR;
 80083c8:	f06f 0305 	mvn.w	r3, #5
 80083cc:	617b      	str	r3, [r7, #20]
 80083ce:	e007      	b.n	80083e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 f994 	bl	8009708 <vTaskDelay>
    }
  }

  return (stat);
 80083e0:	697b      	ldr	r3, [r7, #20]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20000040 	.word	0x20000040

080083f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4a06      	ldr	r2, [pc, #24]	; (8008418 <vApplicationGetIdleTaskMemory+0x28>)
 8008400:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	4a05      	ldr	r2, [pc, #20]	; (800841c <vApplicationGetIdleTaskMemory+0x2c>)
 8008406:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2280      	movs	r2, #128	; 0x80
 800840c:	601a      	str	r2, [r3, #0]
}
 800840e:	bf00      	nop
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	bc80      	pop	{r7}
 8008416:	4770      	bx	lr
 8008418:	20000044 	.word	0x20000044
 800841c:	200000a0 	.word	0x200000a0

08008420 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4a07      	ldr	r2, [pc, #28]	; (800844c <vApplicationGetTimerTaskMemory+0x2c>)
 8008430:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	4a06      	ldr	r2, [pc, #24]	; (8008450 <vApplicationGetTimerTaskMemory+0x30>)
 8008436:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800843e:	601a      	str	r2, [r3, #0]
}
 8008440:	bf00      	nop
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	bc80      	pop	{r7}
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	200002a0 	.word	0x200002a0
 8008450:	200002fc 	.word	0x200002fc

08008454 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800845a:	2020      	movs	r0, #32
 800845c:	f002 fdea 	bl	800b034 <pvPortMalloc>
 8008460:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00a      	beq.n	800847e <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	3304      	adds	r3, #4
 8008472:	4618      	mov	r0, r3
 8008474:	f000 f9f4 	bl	8008860 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800847e:	687b      	ldr	r3, [r7, #4]
	}
 8008480:	4618      	mov	r0, r3
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b090      	sub	sp, #64	; 0x40
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800849e:	2300      	movs	r3, #0
 80084a0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d109      	bne.n	80084bc <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	623b      	str	r3, [r7, #32]
 80084ba:	e7fe      	b.n	80084ba <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d009      	beq.n	80084da <xEventGroupWaitBits+0x52>
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	61fb      	str	r3, [r7, #28]
 80084d8:	e7fe      	b.n	80084d8 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d109      	bne.n	80084f4 <xEventGroupWaitBits+0x6c>
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	61bb      	str	r3, [r7, #24]
 80084f2:	e7fe      	b.n	80084f2 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084f4:	f001 ff4c 	bl	800a390 <xTaskGetSchedulerState>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d102      	bne.n	8008504 <xEventGroupWaitBits+0x7c>
 80084fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <xEventGroupWaitBits+0x80>
 8008504:	2301      	movs	r3, #1
 8008506:	e000      	b.n	800850a <xEventGroupWaitBits+0x82>
 8008508:	2300      	movs	r3, #0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <xEventGroupWaitBits+0x9a>
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	e7fe      	b.n	8008520 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8008522:	f001 fa95 	bl	8009a50 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	68b9      	ldr	r1, [r7, #8]
 8008530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008532:	f000 f960 	bl	80087f6 <prvTestWaitCondition>
 8008536:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00e      	beq.n	800855c <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8008542:	2300      	movs	r3, #0
 8008544:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d028      	beq.n	800859e <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800854c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	43db      	mvns	r3, r3
 8008554:	401a      	ands	r2, r3
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	e020      	b.n	800859e <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800855c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800855e:	2b00      	cmp	r3, #0
 8008560:	d104      	bne.n	800856c <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8008562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008564:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8008566:	2301      	movs	r3, #1
 8008568:	633b      	str	r3, [r7, #48]	; 0x30
 800856a:	e018      	b.n	800859e <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8008572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008574:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008578:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d003      	beq.n	8008588 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8008580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008582:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008586:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858a:	1d18      	adds	r0, r3, #4
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008590:	4313      	orrs	r3, r2
 8008592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008594:	4619      	mov	r1, r3
 8008596:	f001 fc7b 	bl	8009e90 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800859e:	f001 fa65 	bl	8009a6c <xTaskResumeAll>
 80085a2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80085a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d031      	beq.n	800860e <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d107      	bne.n	80085c0 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 80085b0:	4b19      	ldr	r3, [pc, #100]	; (8008618 <xEventGroupWaitBits+0x190>)
 80085b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80085c0:	f001 ff70 	bl	800a4a4 <uxTaskResetEventItemValue>
 80085c4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80085c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d11a      	bne.n	8008606 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80085d0:	f002 fc3a 	bl	800ae48 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80085d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	68b9      	ldr	r1, [r7, #8]
 80085de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80085e0:	f000 f909 	bl	80087f6 <prvTestWaitCondition>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d009      	beq.n	80085fe <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d006      	beq.n	80085fe <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80085f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	43db      	mvns	r3, r3
 80085f8:	401a      	ands	r2, r3
 80085fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80085fe:	2301      	movs	r3, #1
 8008600:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8008602:	f002 fc4f 	bl	800aea4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008608:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800860c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800860e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008610:	4618      	mov	r0, r3
 8008612:	3740      	adds	r7, #64	; 0x40
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	e000ed04 	.word	0xe000ed04

0800861c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d109      	bne.n	8008644 <xEventGroupClearBits+0x28>
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	e7fe      	b.n	8008642 <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d009      	beq.n	8008662 <xEventGroupClearBits+0x46>
 800864e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	60bb      	str	r3, [r7, #8]
 8008660:	e7fe      	b.n	8008660 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 8008662:	f002 fbf1 	bl	800ae48 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	43db      	mvns	r3, r3
 8008674:	401a      	ands	r2, r3
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800867a:	f002 fc13 	bl	800aea4 <vPortExitCritical>

	return uxReturn;
 800867e:	693b      	ldr	r3, [r7, #16]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 8008692:	2300      	movs	r3, #0
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	6879      	ldr	r1, [r7, #4]
 8008698:	4804      	ldr	r0, [pc, #16]	; (80086ac <xEventGroupClearBitsFromISR+0x24>)
 800869a:	f002 facd 	bl	800ac38 <xTimerPendFunctionCallFromISR>
 800869e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80086a0:	68fb      	ldr	r3, [r7, #12]
	}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	080087dd 	.word	0x080087dd

080086b0 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08e      	sub	sp, #56	; 0x38
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80086ba:	2300      	movs	r3, #0
 80086bc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80086c2:	2300      	movs	r3, #0
 80086c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d109      	bne.n	80086e0 <xEventGroupSetBits+0x30>
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	613b      	str	r3, [r7, #16]
 80086de:	e7fe      	b.n	80086de <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d009      	beq.n	80086fe <xEventGroupSetBits+0x4e>
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	e7fe      	b.n	80086fc <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	3304      	adds	r3, #4
 8008702:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	3308      	adds	r3, #8
 8008708:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800870a:	f001 f9a1 	bl	8009a50 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	431a      	orrs	r2, r3
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8008720:	e03c      	b.n	800879c <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8008722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800872e:	2300      	movs	r3, #0
 8008730:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008738:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008740:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d108      	bne.n	800875e <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	4013      	ands	r3, r2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00b      	beq.n	8008770 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8008758:	2301      	movs	r3, #1
 800875a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800875c:	e008      	b.n	8008770 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	4013      	ands	r3, r2
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	429a      	cmp	r2, r3
 800876a:	d101      	bne.n	8008770 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800876c:	2301      	movs	r3, #1
 800876e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	2b00      	cmp	r3, #0
 8008774:	d010      	beq.n	8008798 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d003      	beq.n	8008788 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	4313      	orrs	r3, r2
 8008786:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008790:	4619      	mov	r1, r3
 8008792:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008794:	f001 fc42 	bl	800a01c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800879c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d1be      	bne.n	8008722 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	43db      	mvns	r3, r3
 80087ac:	401a      	ands	r2, r3
 80087ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80087b2:	f001 f95b 	bl	8009a6c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	681b      	ldr	r3, [r3, #0]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3738      	adds	r7, #56	; 0x38
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7ff ff6e 	bl	80086b0 <xEventGroupSetBits>
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7ff ff17 	bl	800861c <xEventGroupClearBits>
}
 80087ee:	bf00      	nop
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80087f6:	b480      	push	{r7}
 80087f8:	b087      	sub	sp, #28
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8008802:	2300      	movs	r3, #0
 8008804:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d107      	bne.n	800881c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	4013      	ands	r3, r2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00a      	beq.n	800882c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008816:	2301      	movs	r3, #1
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	e007      	b.n	800882c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	4013      	ands	r3, r2
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	429a      	cmp	r2, r3
 8008826:	d101      	bne.n	800882c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008828:	2301      	movs	r3, #1
 800882a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800882c:	697b      	ldr	r3, [r7, #20]
}
 800882e:	4618      	mov	r0, r3
 8008830:	371c      	adds	r7, #28
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr

08008838 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	68f9      	ldr	r1, [r7, #12]
 800884a:	4804      	ldr	r0, [pc, #16]	; (800885c <xEventGroupSetBitsFromISR+0x24>)
 800884c:	f002 f9f4 	bl	800ac38 <xTimerPendFunctionCallFromISR>
 8008850:	6178      	str	r0, [r7, #20]

		return xReturn;
 8008852:	697b      	ldr	r3, [r7, #20]
	}
 8008854:	4618      	mov	r0, r3
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	080087c3 	.word	0x080087c3

08008860 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f103 0208 	add.w	r2, r3, #8
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f04f 32ff 	mov.w	r2, #4294967295
 8008878:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f103 0208 	add.w	r2, r3, #8
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f103 0208 	add.w	r2, r3, #8
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	bc80      	pop	{r7}
 800889c:	4770      	bx	lr

0800889e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800889e:	b480      	push	{r7}
 80088a0:	b083      	sub	sp, #12
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	4770      	bx	lr

080088b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088b6:	b480      	push	{r7}
 80088b8:	b085      	sub	sp, #20
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	1c5a      	adds	r2, r3, #1
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	601a      	str	r2, [r3, #0]
}
 80088f2:	bf00      	nop
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bc80      	pop	{r7}
 80088fa:	4770      	bx	lr

080088fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008912:	d103      	bne.n	800891c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	60fb      	str	r3, [r7, #12]
 800891a:	e00c      	b.n	8008936 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3308      	adds	r3, #8
 8008920:	60fb      	str	r3, [r7, #12]
 8008922:	e002      	b.n	800892a <vListInsert+0x2e>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	60fb      	str	r3, [r7, #12]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	429a      	cmp	r2, r3
 8008934:	d2f6      	bcs.n	8008924 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	601a      	str	r2, [r3, #0]
}
 8008962:	bf00      	nop
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	bc80      	pop	{r7}
 800896a:	4770      	bx	lr

0800896c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	6892      	ldr	r2, [r2, #8]
 8008982:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	6852      	ldr	r2, [r2, #4]
 800898c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	429a      	cmp	r2, r3
 8008996:	d103      	bne.n	80089a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689a      	ldr	r2, [r3, #8]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	1e5a      	subs	r2, r3, #1
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bc80      	pop	{r7}
 80089bc:	4770      	bx	lr
	...

080089c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d109      	bne.n	80089e8 <xQueueGenericReset+0x28>
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	60bb      	str	r3, [r7, #8]
 80089e6:	e7fe      	b.n	80089e6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80089e8:	f002 fa2e 	bl	800ae48 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f4:	68f9      	ldr	r1, [r7, #12]
 80089f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089f8:	fb01 f303 	mul.w	r3, r1, r3
 80089fc:	441a      	add	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	68f9      	ldr	r1, [r7, #12]
 8008a1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a1e:	fb01 f303 	mul.w	r3, r1, r3
 8008a22:	441a      	add	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	22ff      	movs	r2, #255	; 0xff
 8008a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	22ff      	movs	r2, #255	; 0xff
 8008a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d114      	bne.n	8008a68 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d01a      	beq.n	8008a7c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	3310      	adds	r3, #16
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f001 fa84 	bl	8009f58 <xTaskRemoveFromEventList>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d012      	beq.n	8008a7c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a56:	4b0d      	ldr	r3, [pc, #52]	; (8008a8c <xQueueGenericReset+0xcc>)
 8008a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	e009      	b.n	8008a7c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3310      	adds	r3, #16
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7ff fef7 	bl	8008860 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3324      	adds	r3, #36	; 0x24
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7ff fef2 	bl	8008860 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a7c:	f002 fa12 	bl	800aea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a80:	2301      	movs	r3, #1
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	e000ed04 	.word	0xe000ed04

08008a90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08e      	sub	sp, #56	; 0x38
 8008a94:	af02      	add	r7, sp, #8
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
 8008a9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d109      	bne.n	8008ab8 <xQueueGenericCreateStatic+0x28>
 8008aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ab6:	e7fe      	b.n	8008ab6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d109      	bne.n	8008ad2 <xQueueGenericCreateStatic+0x42>
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad0:	e7fe      	b.n	8008ad0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <xQueueGenericCreateStatic+0x4e>
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <xQueueGenericCreateStatic+0x52>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e000      	b.n	8008ae4 <xQueueGenericCreateStatic+0x54>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d109      	bne.n	8008afc <xQueueGenericCreateStatic+0x6c>
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	623b      	str	r3, [r7, #32]
 8008afa:	e7fe      	b.n	8008afa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d102      	bne.n	8008b08 <xQueueGenericCreateStatic+0x78>
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <xQueueGenericCreateStatic+0x7c>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e000      	b.n	8008b0e <xQueueGenericCreateStatic+0x7e>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d109      	bne.n	8008b26 <xQueueGenericCreateStatic+0x96>
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	61fb      	str	r3, [r7, #28]
 8008b24:	e7fe      	b.n	8008b24 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b26:	2350      	movs	r3, #80	; 0x50
 8008b28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b50      	cmp	r3, #80	; 0x50
 8008b2e:	d009      	beq.n	8008b44 <xQueueGenericCreateStatic+0xb4>
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	61bb      	str	r3, [r7, #24]
 8008b42:	e7fe      	b.n	8008b42 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00d      	beq.n	8008b6a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 f842 	bl	8008bee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3730      	adds	r7, #48	; 0x30
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08a      	sub	sp, #40	; 0x28
 8008b78:	af02      	add	r7, sp, #8
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d109      	bne.n	8008b9c <xQueueGenericCreate+0x28>
 8008b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	613b      	str	r3, [r7, #16]
 8008b9a:	e7fe      	b.n	8008b9a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d102      	bne.n	8008ba8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	61fb      	str	r3, [r7, #28]
 8008ba6:	e004      	b.n	8008bb2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	fb02 f303 	mul.w	r3, r2, r3
 8008bb0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	3350      	adds	r3, #80	; 0x50
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f002 fa3c 	bl	800b034 <pvPortMalloc>
 8008bbc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00f      	beq.n	8008be4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	3350      	adds	r3, #80	; 0x50
 8008bc8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008bd2:	79fa      	ldrb	r2, [r7, #7]
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 f805 	bl	8008bee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008be4:	69bb      	ldr	r3, [r7, #24]
	}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3720      	adds	r7, #32
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b084      	sub	sp, #16
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	607a      	str	r2, [r7, #4]
 8008bfa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d103      	bne.n	8008c0a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	e002      	b.n	8008c10 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	69b8      	ldr	r0, [r7, #24]
 8008c20:	f7ff fece 	bl	80089c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	78fa      	ldrb	r2, [r7, #3]
 8008c28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008c2c:	bf00      	nop
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08e      	sub	sp, #56	; 0x38
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
 8008c40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c42:	2300      	movs	r3, #0
 8008c44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d109      	bne.n	8008c64 <xQueueGenericSend+0x30>
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c62:	e7fe      	b.n	8008c62 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d103      	bne.n	8008c72 <xQueueGenericSend+0x3e>
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <xQueueGenericSend+0x42>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e000      	b.n	8008c78 <xQueueGenericSend+0x44>
 8008c76:	2300      	movs	r3, #0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d109      	bne.n	8008c90 <xQueueGenericSend+0x5c>
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c8e:	e7fe      	b.n	8008c8e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d103      	bne.n	8008c9e <xQueueGenericSend+0x6a>
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d101      	bne.n	8008ca2 <xQueueGenericSend+0x6e>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e000      	b.n	8008ca4 <xQueueGenericSend+0x70>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d109      	bne.n	8008cbc <xQueueGenericSend+0x88>
 8008ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	623b      	str	r3, [r7, #32]
 8008cba:	e7fe      	b.n	8008cba <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cbc:	f001 fb68 	bl	800a390 <xTaskGetSchedulerState>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d102      	bne.n	8008ccc <xQueueGenericSend+0x98>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d101      	bne.n	8008cd0 <xQueueGenericSend+0x9c>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e000      	b.n	8008cd2 <xQueueGenericSend+0x9e>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d109      	bne.n	8008cea <xQueueGenericSend+0xb6>
 8008cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	61fb      	str	r3, [r7, #28]
 8008ce8:	e7fe      	b.n	8008ce8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cea:	f002 f8ad 	bl	800ae48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d302      	bcc.n	8008d00 <xQueueGenericSend+0xcc>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d129      	bne.n	8008d54 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	68b9      	ldr	r1, [r7, #8]
 8008d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d06:	f000 f9ff 	bl	8009108 <prvCopyDataToQueue>
 8008d0a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d010      	beq.n	8008d36 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d16:	3324      	adds	r3, #36	; 0x24
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f001 f91d 	bl	8009f58 <xTaskRemoveFromEventList>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d013      	beq.n	8008d4c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d24:	4b3f      	ldr	r3, [pc, #252]	; (8008e24 <xQueueGenericSend+0x1f0>)
 8008d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	e00a      	b.n	8008d4c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d007      	beq.n	8008d4c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d3c:	4b39      	ldr	r3, [pc, #228]	; (8008e24 <xQueueGenericSend+0x1f0>)
 8008d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d4c:	f002 f8aa 	bl	800aea4 <vPortExitCritical>
				return pdPASS;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e063      	b.n	8008e1c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d103      	bne.n	8008d62 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d5a:	f002 f8a3 	bl	800aea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	e05c      	b.n	8008e1c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d106      	bne.n	8008d76 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d68:	f107 0314 	add.w	r3, r7, #20
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f001 f9b5 	bl	800a0dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d72:	2301      	movs	r3, #1
 8008d74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d76:	f002 f895 	bl	800aea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d7a:	f000 fe69 	bl	8009a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d7e:	f002 f863 	bl	800ae48 <vPortEnterCritical>
 8008d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d88:	b25b      	sxtb	r3, r3
 8008d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8e:	d103      	bne.n	8008d98 <xQueueGenericSend+0x164>
 8008d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d9e:	b25b      	sxtb	r3, r3
 8008da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da4:	d103      	bne.n	8008dae <xQueueGenericSend+0x17a>
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dae:	f002 f879 	bl	800aea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008db2:	1d3a      	adds	r2, r7, #4
 8008db4:	f107 0314 	add.w	r3, r7, #20
 8008db8:	4611      	mov	r1, r2
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f001 f9a4 	bl	800a108 <xTaskCheckForTimeOut>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d124      	bne.n	8008e10 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dc8:	f000 fa96 	bl	80092f8 <prvIsQueueFull>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d018      	beq.n	8008e04 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd4:	3310      	adds	r3, #16
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	4611      	mov	r1, r2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f001 f834 	bl	8009e48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008de2:	f000 fa21 	bl	8009228 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008de6:	f000 fe41 	bl	8009a6c <xTaskResumeAll>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f47f af7c 	bne.w	8008cea <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008df2:	4b0c      	ldr	r3, [pc, #48]	; (8008e24 <xQueueGenericSend+0x1f0>)
 8008df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	e772      	b.n	8008cea <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e06:	f000 fa0f 	bl	8009228 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e0a:	f000 fe2f 	bl	8009a6c <xTaskResumeAll>
 8008e0e:	e76c      	b.n	8008cea <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e12:	f000 fa09 	bl	8009228 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e16:	f000 fe29 	bl	8009a6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008e1a:	2300      	movs	r3, #0
		}
	}
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3738      	adds	r7, #56	; 0x38
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	e000ed04 	.word	0xe000ed04

08008e28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08e      	sub	sp, #56	; 0x38
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d109      	bne.n	8008e54 <xQueueGenericSendFromISR+0x2c>
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	627b      	str	r3, [r7, #36]	; 0x24
 8008e52:	e7fe      	b.n	8008e52 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d103      	bne.n	8008e62 <xQueueGenericSendFromISR+0x3a>
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <xQueueGenericSendFromISR+0x3e>
 8008e62:	2301      	movs	r3, #1
 8008e64:	e000      	b.n	8008e68 <xQueueGenericSendFromISR+0x40>
 8008e66:	2300      	movs	r3, #0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d109      	bne.n	8008e80 <xQueueGenericSendFromISR+0x58>
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	623b      	str	r3, [r7, #32]
 8008e7e:	e7fe      	b.n	8008e7e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d103      	bne.n	8008e8e <xQueueGenericSendFromISR+0x66>
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d101      	bne.n	8008e92 <xQueueGenericSendFromISR+0x6a>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e000      	b.n	8008e94 <xQueueGenericSendFromISR+0x6c>
 8008e92:	2300      	movs	r3, #0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d109      	bne.n	8008eac <xQueueGenericSendFromISR+0x84>
 8008e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	61fb      	str	r3, [r7, #28]
 8008eaa:	e7fe      	b.n	8008eaa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008eac:	f002 f886 	bl	800afbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008eb0:	f3ef 8211 	mrs	r2, BASEPRI
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	61ba      	str	r2, [r7, #24]
 8008ec6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ec8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008eca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d302      	bcc.n	8008ede <xQueueGenericSendFromISR+0xb6>
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d12c      	bne.n	8008f38 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	68b9      	ldr	r1, [r7, #8]
 8008eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eee:	f000 f90b 	bl	8009108 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ef2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efa:	d112      	bne.n	8008f22 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d016      	beq.n	8008f32 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f06:	3324      	adds	r3, #36	; 0x24
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f001 f825 	bl	8009f58 <xTaskRemoveFromEventList>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00e      	beq.n	8008f32 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00b      	beq.n	8008f32 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	601a      	str	r2, [r3, #0]
 8008f20:	e007      	b.n	8008f32 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f26:	3301      	adds	r3, #1
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	b25a      	sxtb	r2, r3
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f32:	2301      	movs	r3, #1
 8008f34:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008f36:	e001      	b.n	8008f3c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3738      	adds	r7, #56	; 0x38
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08c      	sub	sp, #48	; 0x30
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d109      	bne.n	8008f7e <xQueueReceive+0x2e>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	623b      	str	r3, [r7, #32]
 8008f7c:	e7fe      	b.n	8008f7c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d103      	bne.n	8008f8c <xQueueReceive+0x3c>
 8008f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <xQueueReceive+0x40>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e000      	b.n	8008f92 <xQueueReceive+0x42>
 8008f90:	2300      	movs	r3, #0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d109      	bne.n	8008faa <xQueueReceive+0x5a>
 8008f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	61fb      	str	r3, [r7, #28]
 8008fa8:	e7fe      	b.n	8008fa8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008faa:	f001 f9f1 	bl	800a390 <xTaskGetSchedulerState>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d102      	bne.n	8008fba <xQueueReceive+0x6a>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <xQueueReceive+0x6e>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e000      	b.n	8008fc0 <xQueueReceive+0x70>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d109      	bne.n	8008fd8 <xQueueReceive+0x88>
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	e7fe      	b.n	8008fd6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fd8:	f001 ff36 	bl	800ae48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d01f      	beq.n	8009028 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008fe8:	68b9      	ldr	r1, [r7, #8]
 8008fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fec:	f000 f8f6 	bl	80091dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	1e5a      	subs	r2, r3, #1
 8008ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00f      	beq.n	8009020 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009002:	3310      	adds	r3, #16
 8009004:	4618      	mov	r0, r3
 8009006:	f000 ffa7 	bl	8009f58 <xTaskRemoveFromEventList>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d007      	beq.n	8009020 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009010:	4b3c      	ldr	r3, [pc, #240]	; (8009104 <xQueueReceive+0x1b4>)
 8009012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009020:	f001 ff40 	bl	800aea4 <vPortExitCritical>
				return pdPASS;
 8009024:	2301      	movs	r3, #1
 8009026:	e069      	b.n	80090fc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d103      	bne.n	8009036 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800902e:	f001 ff39 	bl	800aea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009032:	2300      	movs	r3, #0
 8009034:	e062      	b.n	80090fc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009038:	2b00      	cmp	r3, #0
 800903a:	d106      	bne.n	800904a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800903c:	f107 0310 	add.w	r3, r7, #16
 8009040:	4618      	mov	r0, r3
 8009042:	f001 f84b 	bl	800a0dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009046:	2301      	movs	r3, #1
 8009048:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800904a:	f001 ff2b 	bl	800aea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800904e:	f000 fcff 	bl	8009a50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009052:	f001 fef9 	bl	800ae48 <vPortEnterCritical>
 8009056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800905c:	b25b      	sxtb	r3, r3
 800905e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009062:	d103      	bne.n	800906c <xQueueReceive+0x11c>
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009072:	b25b      	sxtb	r3, r3
 8009074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009078:	d103      	bne.n	8009082 <xQueueReceive+0x132>
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009082:	f001 ff0f 	bl	800aea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009086:	1d3a      	adds	r2, r7, #4
 8009088:	f107 0310 	add.w	r3, r7, #16
 800908c:	4611      	mov	r1, r2
 800908e:	4618      	mov	r0, r3
 8009090:	f001 f83a 	bl	800a108 <xTaskCheckForTimeOut>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d123      	bne.n	80090e2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800909a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800909c:	f000 f916 	bl	80092cc <prvIsQueueEmpty>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d017      	beq.n	80090d6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	3324      	adds	r3, #36	; 0x24
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	4611      	mov	r1, r2
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 feca 	bl	8009e48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090b6:	f000 f8b7 	bl	8009228 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090ba:	f000 fcd7 	bl	8009a6c <xTaskResumeAll>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d189      	bne.n	8008fd8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80090c4:	4b0f      	ldr	r3, [pc, #60]	; (8009104 <xQueueReceive+0x1b4>)
 80090c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ca:	601a      	str	r2, [r3, #0]
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	e780      	b.n	8008fd8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80090d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090d8:	f000 f8a6 	bl	8009228 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090dc:	f000 fcc6 	bl	8009a6c <xTaskResumeAll>
 80090e0:	e77a      	b.n	8008fd8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80090e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090e4:	f000 f8a0 	bl	8009228 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090e8:	f000 fcc0 	bl	8009a6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090ee:	f000 f8ed 	bl	80092cc <prvIsQueueEmpty>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f43f af6f 	beq.w	8008fd8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3730      	adds	r7, #48	; 0x30
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	e000ed04 	.word	0xe000ed04

08009108 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009114:	2300      	movs	r3, #0
 8009116:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10d      	bne.n	8009142 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d14d      	bne.n	80091ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	4618      	mov	r0, r3
 8009134:	f001 f94a 	bl	800a3cc <xTaskPriorityDisinherit>
 8009138:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	605a      	str	r2, [r3, #4]
 8009140:	e043      	b.n	80091ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d119      	bne.n	800917c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6898      	ldr	r0, [r3, #8]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009150:	461a      	mov	r2, r3
 8009152:	68b9      	ldr	r1, [r7, #8]
 8009154:	f002 f96a 	bl	800b42c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	689a      	ldr	r2, [r3, #8]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	429a      	cmp	r2, r3
 8009170:	d32b      	bcc.n	80091ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	609a      	str	r2, [r3, #8]
 800917a:	e026      	b.n	80091ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	68d8      	ldr	r0, [r3, #12]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009184:	461a      	mov	r2, r3
 8009186:	68b9      	ldr	r1, [r7, #8]
 8009188:	f002 f950 	bl	800b42c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009194:	425b      	negs	r3, r3
 8009196:	441a      	add	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d207      	bcs.n	80091b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b0:	425b      	negs	r3, r3
 80091b2:	441a      	add	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d105      	bne.n	80091ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	1c5a      	adds	r2, r3, #1
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80091d2:	697b      	ldr	r3, [r7, #20]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d018      	beq.n	8009220 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68da      	ldr	r2, [r3, #12]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	441a      	add	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68da      	ldr	r2, [r3, #12]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	429a      	cmp	r2, r3
 8009206:	d303      	bcc.n	8009210 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68d9      	ldr	r1, [r3, #12]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009218:	461a      	mov	r2, r3
 800921a:	6838      	ldr	r0, [r7, #0]
 800921c:	f002 f906 	bl	800b42c <memcpy>
	}
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009230:	f001 fe0a 	bl	800ae48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800923a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800923c:	e011      	b.n	8009262 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	2b00      	cmp	r3, #0
 8009244:	d012      	beq.n	800926c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3324      	adds	r3, #36	; 0x24
 800924a:	4618      	mov	r0, r3
 800924c:	f000 fe84 	bl	8009f58 <xTaskRemoveFromEventList>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d001      	beq.n	800925a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009256:	f000 ffb7 	bl	800a1c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800925a:	7bfb      	ldrb	r3, [r7, #15]
 800925c:	3b01      	subs	r3, #1
 800925e:	b2db      	uxtb	r3, r3
 8009260:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009266:	2b00      	cmp	r3, #0
 8009268:	dce9      	bgt.n	800923e <prvUnlockQueue+0x16>
 800926a:	e000      	b.n	800926e <prvUnlockQueue+0x46>
					break;
 800926c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	22ff      	movs	r2, #255	; 0xff
 8009272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009276:	f001 fe15 	bl	800aea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800927a:	f001 fde5 	bl	800ae48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009284:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009286:	e011      	b.n	80092ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d012      	beq.n	80092b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3310      	adds	r3, #16
 8009294:	4618      	mov	r0, r3
 8009296:	f000 fe5f 	bl	8009f58 <xTaskRemoveFromEventList>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80092a0:	f000 ff92 	bl	800a1c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
 80092a6:	3b01      	subs	r3, #1
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dce9      	bgt.n	8009288 <prvUnlockQueue+0x60>
 80092b4:	e000      	b.n	80092b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80092b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	22ff      	movs	r2, #255	; 0xff
 80092bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80092c0:	f001 fdf0 	bl	800aea4 <vPortExitCritical>
}
 80092c4:	bf00      	nop
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092d4:	f001 fdb8 	bl	800ae48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d102      	bne.n	80092e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092e0:	2301      	movs	r3, #1
 80092e2:	60fb      	str	r3, [r7, #12]
 80092e4:	e001      	b.n	80092ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092ea:	f001 fddb 	bl	800aea4 <vPortExitCritical>

	return xReturn;
 80092ee:	68fb      	ldr	r3, [r7, #12]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009300:	f001 fda2 	bl	800ae48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800930c:	429a      	cmp	r2, r3
 800930e:	d102      	bne.n	8009316 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009310:	2301      	movs	r3, #1
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	e001      	b.n	800931a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009316:	2300      	movs	r3, #0
 8009318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800931a:	f001 fdc3 	bl	800aea4 <vPortExitCritical>

	return xReturn;
 800931e:	68fb      	ldr	r3, [r7, #12]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	e014      	b.n	8009362 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009338:	4a0e      	ldr	r2, [pc, #56]	; (8009374 <vQueueAddToRegistry+0x4c>)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10b      	bne.n	800935c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009344:	490b      	ldr	r1, [pc, #44]	; (8009374 <vQueueAddToRegistry+0x4c>)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800934e:	4a09      	ldr	r2, [pc, #36]	; (8009374 <vQueueAddToRegistry+0x4c>)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	00db      	lsls	r3, r3, #3
 8009354:	4413      	add	r3, r2
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800935a:	e005      	b.n	8009368 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	3301      	adds	r3, #1
 8009360:	60fb      	str	r3, [r7, #12]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b07      	cmp	r3, #7
 8009366:	d9e7      	bls.n	8009338 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009368:	bf00      	nop
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	bc80      	pop	{r7}
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	2000386c 	.word	0x2000386c

08009378 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009388:	f001 fd5e 	bl	800ae48 <vPortEnterCritical>
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009392:	b25b      	sxtb	r3, r3
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009398:	d103      	bne.n	80093a2 <vQueueWaitForMessageRestricted+0x2a>
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093a8:	b25b      	sxtb	r3, r3
 80093aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ae:	d103      	bne.n	80093b8 <vQueueWaitForMessageRestricted+0x40>
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093b8:	f001 fd74 	bl	800aea4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d106      	bne.n	80093d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	3324      	adds	r3, #36	; 0x24
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	68b9      	ldr	r1, [r7, #8]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 fd99 	bl	8009f04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80093d2:	6978      	ldr	r0, [r7, #20]
 80093d4:	f7ff ff28 	bl	8009228 <prvUnlockQueue>
	}
 80093d8:	bf00      	nop
 80093da:	3718      	adds	r7, #24
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b08e      	sub	sp, #56	; 0x38
 80093e4:	af04      	add	r7, sp, #16
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80093ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d109      	bne.n	8009408 <xTaskCreateStatic+0x28>
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	623b      	str	r3, [r7, #32]
 8009406:	e7fe      	b.n	8009406 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940a:	2b00      	cmp	r3, #0
 800940c:	d109      	bne.n	8009422 <xTaskCreateStatic+0x42>
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	61fb      	str	r3, [r7, #28]
 8009420:	e7fe      	b.n	8009420 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009422:	235c      	movs	r3, #92	; 0x5c
 8009424:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2b5c      	cmp	r3, #92	; 0x5c
 800942a:	d009      	beq.n	8009440 <xTaskCreateStatic+0x60>
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	61bb      	str	r3, [r7, #24]
 800943e:	e7fe      	b.n	800943e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009442:	2b00      	cmp	r3, #0
 8009444:	d01e      	beq.n	8009484 <xTaskCreateStatic+0xa4>
 8009446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009448:	2b00      	cmp	r3, #0
 800944a:	d01b      	beq.n	8009484 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009454:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009458:	2202      	movs	r2, #2
 800945a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800945e:	2300      	movs	r3, #0
 8009460:	9303      	str	r3, [sp, #12]
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	9302      	str	r3, [sp, #8]
 8009466:	f107 0314 	add.w	r3, r7, #20
 800946a:	9301      	str	r3, [sp, #4]
 800946c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	68b9      	ldr	r1, [r7, #8]
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 f850 	bl	800951c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800947c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800947e:	f000 f8d3 	bl	8009628 <prvAddNewTaskToReadyList>
 8009482:	e001      	b.n	8009488 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009484:	2300      	movs	r3, #0
 8009486:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009488:	697b      	ldr	r3, [r7, #20]
	}
 800948a:	4618      	mov	r0, r3
 800948c:	3728      	adds	r7, #40	; 0x28
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009492:	b580      	push	{r7, lr}
 8009494:	b08c      	sub	sp, #48	; 0x30
 8009496:	af04      	add	r7, sp, #16
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	60b9      	str	r1, [r7, #8]
 800949c:	603b      	str	r3, [r7, #0]
 800949e:	4613      	mov	r3, r2
 80094a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a2:	88fb      	ldrh	r3, [r7, #6]
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4618      	mov	r0, r3
 80094a8:	f001 fdc4 	bl	800b034 <pvPortMalloc>
 80094ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00e      	beq.n	80094d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80094b4:	205c      	movs	r0, #92	; 0x5c
 80094b6:	f001 fdbd 	bl	800b034 <pvPortMalloc>
 80094ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d003      	beq.n	80094ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	631a      	str	r2, [r3, #48]	; 0x30
 80094c8:	e005      	b.n	80094d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80094ca:	6978      	ldr	r0, [r7, #20]
 80094cc:	f001 fe78 	bl	800b1c0 <vPortFree>
 80094d0:	e001      	b.n	80094d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d017      	beq.n	800950c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094e4:	88fa      	ldrh	r2, [r7, #6]
 80094e6:	2300      	movs	r3, #0
 80094e8:	9303      	str	r3, [sp, #12]
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	9302      	str	r3, [sp, #8]
 80094ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f0:	9301      	str	r3, [sp, #4]
 80094f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	68b9      	ldr	r1, [r7, #8]
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f000 f80e 	bl	800951c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009500:	69f8      	ldr	r0, [r7, #28]
 8009502:	f000 f891 	bl	8009628 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009506:	2301      	movs	r3, #1
 8009508:	61bb      	str	r3, [r7, #24]
 800950a:	e002      	b.n	8009512 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800950c:	f04f 33ff 	mov.w	r3, #4294967295
 8009510:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009512:	69bb      	ldr	r3, [r7, #24]
	}
 8009514:	4618      	mov	r0, r3
 8009516:	3720      	adds	r7, #32
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b088      	sub	sp, #32
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	461a      	mov	r2, r3
 8009534:	21a5      	movs	r1, #165	; 0xa5
 8009536:	f001 ff84 	bl	800b442 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800953a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009544:	3b01      	subs	r3, #1
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	f023 0307 	bic.w	r3, r3, #7
 8009552:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	f003 0307 	and.w	r3, r3, #7
 800955a:	2b00      	cmp	r3, #0
 800955c:	d009      	beq.n	8009572 <prvInitialiseNewTask+0x56>
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	617b      	str	r3, [r7, #20]
 8009570:	e7fe      	b.n	8009570 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009572:	2300      	movs	r3, #0
 8009574:	61fb      	str	r3, [r7, #28]
 8009576:	e012      	b.n	800959e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	4413      	add	r3, r2
 800957e:	7819      	ldrb	r1, [r3, #0]
 8009580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	4413      	add	r3, r2
 8009586:	3334      	adds	r3, #52	; 0x34
 8009588:	460a      	mov	r2, r1
 800958a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	4413      	add	r3, r2
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d006      	beq.n	80095a6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	3301      	adds	r3, #1
 800959c:	61fb      	str	r3, [r7, #28]
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	2b0f      	cmp	r3, #15
 80095a2:	d9e9      	bls.n	8009578 <prvInitialiseNewTask+0x5c>
 80095a4:	e000      	b.n	80095a8 <prvInitialiseNewTask+0x8c>
		{
			break;
 80095a6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	2b37      	cmp	r3, #55	; 0x37
 80095b4:	d901      	bls.n	80095ba <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80095b6:	2337      	movs	r3, #55	; 0x37
 80095b8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80095ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095c4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	2200      	movs	r2, #0
 80095ca:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80095cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ce:	3304      	adds	r3, #4
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff f964 	bl	800889e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	3318      	adds	r3, #24
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff f95f 	bl	800889e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80095f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	2200      	movs	r2, #0
 80095fa:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	68f9      	ldr	r1, [r7, #12]
 8009608:	69b8      	ldr	r0, [r7, #24]
 800960a:	f001 fb35 	bl	800ac78 <pxPortInitialiseStack>
 800960e:	4602      	mov	r2, r0
 8009610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009612:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800961a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800961e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009620:	bf00      	nop
 8009622:	3720      	adds	r7, #32
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009630:	f001 fc0a 	bl	800ae48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009634:	4b2d      	ldr	r3, [pc, #180]	; (80096ec <prvAddNewTaskToReadyList+0xc4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3301      	adds	r3, #1
 800963a:	4a2c      	ldr	r2, [pc, #176]	; (80096ec <prvAddNewTaskToReadyList+0xc4>)
 800963c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800963e:	4b2c      	ldr	r3, [pc, #176]	; (80096f0 <prvAddNewTaskToReadyList+0xc8>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d109      	bne.n	800965a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009646:	4a2a      	ldr	r2, [pc, #168]	; (80096f0 <prvAddNewTaskToReadyList+0xc8>)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800964c:	4b27      	ldr	r3, [pc, #156]	; (80096ec <prvAddNewTaskToReadyList+0xc4>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d110      	bne.n	8009676 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009654:	f000 fdde 	bl	800a214 <prvInitialiseTaskLists>
 8009658:	e00d      	b.n	8009676 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800965a:	4b26      	ldr	r3, [pc, #152]	; (80096f4 <prvAddNewTaskToReadyList+0xcc>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d109      	bne.n	8009676 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009662:	4b23      	ldr	r3, [pc, #140]	; (80096f0 <prvAddNewTaskToReadyList+0xc8>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966c:	429a      	cmp	r2, r3
 800966e:	d802      	bhi.n	8009676 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009670:	4a1f      	ldr	r2, [pc, #124]	; (80096f0 <prvAddNewTaskToReadyList+0xc8>)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009676:	4b20      	ldr	r3, [pc, #128]	; (80096f8 <prvAddNewTaskToReadyList+0xd0>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3301      	adds	r3, #1
 800967c:	4a1e      	ldr	r2, [pc, #120]	; (80096f8 <prvAddNewTaskToReadyList+0xd0>)
 800967e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009680:	4b1d      	ldr	r3, [pc, #116]	; (80096f8 <prvAddNewTaskToReadyList+0xd0>)
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968c:	4b1b      	ldr	r3, [pc, #108]	; (80096fc <prvAddNewTaskToReadyList+0xd4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	429a      	cmp	r2, r3
 8009692:	d903      	bls.n	800969c <prvAddNewTaskToReadyList+0x74>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	4a18      	ldr	r2, [pc, #96]	; (80096fc <prvAddNewTaskToReadyList+0xd4>)
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a0:	4613      	mov	r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4a15      	ldr	r2, [pc, #84]	; (8009700 <prvAddNewTaskToReadyList+0xd8>)
 80096aa:	441a      	add	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	3304      	adds	r3, #4
 80096b0:	4619      	mov	r1, r3
 80096b2:	4610      	mov	r0, r2
 80096b4:	f7ff f8ff 	bl	80088b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80096b8:	f001 fbf4 	bl	800aea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80096bc:	4b0d      	ldr	r3, [pc, #52]	; (80096f4 <prvAddNewTaskToReadyList+0xcc>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00e      	beq.n	80096e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096c4:	4b0a      	ldr	r3, [pc, #40]	; (80096f0 <prvAddNewTaskToReadyList+0xc8>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d207      	bcs.n	80096e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096d2:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <prvAddNewTaskToReadyList+0xdc>)
 80096d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d8:	601a      	str	r2, [r3, #0]
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096e2:	bf00      	nop
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	20000bd0 	.word	0x20000bd0
 80096f0:	200006fc 	.word	0x200006fc
 80096f4:	20000bdc 	.word	0x20000bdc
 80096f8:	20000bec 	.word	0x20000bec
 80096fc:	20000bd8 	.word	0x20000bd8
 8009700:	20000700 	.word	0x20000700
 8009704:	e000ed04 	.word	0xe000ed04

08009708 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009710:	2300      	movs	r3, #0
 8009712:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d016      	beq.n	8009748 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800971a:	4b13      	ldr	r3, [pc, #76]	; (8009768 <vTaskDelay+0x60>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d009      	beq.n	8009736 <vTaskDelay+0x2e>
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	60bb      	str	r3, [r7, #8]
 8009734:	e7fe      	b.n	8009734 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009736:	f000 f98b 	bl	8009a50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800973a:	2100      	movs	r1, #0
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fec9 	bl	800a4d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009742:	f000 f993 	bl	8009a6c <xTaskResumeAll>
 8009746:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d107      	bne.n	800975e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800974e:	4b07      	ldr	r3, [pc, #28]	; (800976c <vTaskDelay+0x64>)
 8009750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800975e:	bf00      	nop
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20000bf8 	.word	0x20000bf8
 800976c:	e000ed04 	.word	0xe000ed04

08009770 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009778:	f001 fb66 	bl	800ae48 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d102      	bne.n	8009788 <vTaskSuspend+0x18>
 8009782:	4b2f      	ldr	r3, [pc, #188]	; (8009840 <vTaskSuspend+0xd0>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	e000      	b.n	800978a <vTaskSuspend+0x1a>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3304      	adds	r3, #4
 8009790:	4618      	mov	r0, r3
 8009792:	f7ff f8eb 	bl	800896c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979a:	2b00      	cmp	r3, #0
 800979c:	d004      	beq.n	80097a8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3318      	adds	r3, #24
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7ff f8e2 	bl	800896c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3304      	adds	r3, #4
 80097ac:	4619      	mov	r1, r3
 80097ae:	4825      	ldr	r0, [pc, #148]	; (8009844 <vTaskSuspend+0xd4>)
 80097b0:	f7ff f881 	bl	80088b6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d103      	bne.n	80097c8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80097c8:	f001 fb6c 	bl	800aea4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80097cc:	4b1e      	ldr	r3, [pc, #120]	; (8009848 <vTaskSuspend+0xd8>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d005      	beq.n	80097e0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80097d4:	f001 fb38 	bl	800ae48 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80097d8:	f000 fdb6 	bl	800a348 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80097dc:	f001 fb62 	bl	800aea4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80097e0:	4b17      	ldr	r3, [pc, #92]	; (8009840 <vTaskSuspend+0xd0>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d126      	bne.n	8009838 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 80097ea:	4b17      	ldr	r3, [pc, #92]	; (8009848 <vTaskSuspend+0xd8>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d016      	beq.n	8009820 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80097f2:	4b16      	ldr	r3, [pc, #88]	; (800984c <vTaskSuspend+0xdc>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d009      	beq.n	800980e <vTaskSuspend+0x9e>
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	60bb      	str	r3, [r7, #8]
 800980c:	e7fe      	b.n	800980c <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 800980e:	4b10      	ldr	r3, [pc, #64]	; (8009850 <vTaskSuspend+0xe0>)
 8009810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800981e:	e00b      	b.n	8009838 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8009820:	4b08      	ldr	r3, [pc, #32]	; (8009844 <vTaskSuspend+0xd4>)
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <vTaskSuspend+0xe4>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d103      	bne.n	8009834 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 800982c:	4b04      	ldr	r3, [pc, #16]	; (8009840 <vTaskSuspend+0xd0>)
 800982e:	2200      	movs	r2, #0
 8009830:	601a      	str	r2, [r3, #0]
	}
 8009832:	e001      	b.n	8009838 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8009834:	f000 fa9c 	bl	8009d70 <vTaskSwitchContext>
	}
 8009838:	bf00      	nop
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	200006fc 	.word	0x200006fc
 8009844:	20000bbc 	.word	0x20000bbc
 8009848:	20000bdc 	.word	0x20000bdc
 800984c:	20000bf8 	.word	0x20000bf8
 8009850:	e000ed04 	.word	0xe000ed04
 8009854:	20000bd0 	.word	0x20000bd0

08009858 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009858:	b480      	push	{r7}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d109      	bne.n	8009882 <prvTaskIsTaskSuspended+0x2a>
 800986e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	e7fe      	b.n	8009880 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	4a0f      	ldr	r2, [pc, #60]	; (80098c4 <prvTaskIsTaskSuspended+0x6c>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d101      	bne.n	8009890 <prvTaskIsTaskSuspended+0x38>
 800988c:	2301      	movs	r3, #1
 800988e:	e000      	b.n	8009892 <prvTaskIsTaskSuspended+0x3a>
 8009890:	2300      	movs	r3, #0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00f      	beq.n	80098b6 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989a:	4a0b      	ldr	r2, [pc, #44]	; (80098c8 <prvTaskIsTaskSuspended+0x70>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d00a      	beq.n	80098b6 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <prvTaskIsTaskSuspended+0x54>
 80098a8:	2301      	movs	r3, #1
 80098aa:	e000      	b.n	80098ae <prvTaskIsTaskSuspended+0x56>
 80098ac:	2300      	movs	r3, #0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 80098b2:	2301      	movs	r3, #1
 80098b4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098b6:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80098b8:	4618      	mov	r0, r3
 80098ba:	371c      	adds	r7, #28
 80098bc:	46bd      	mov	sp, r7
 80098be:	bc80      	pop	{r7}
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	20000bbc 	.word	0x20000bbc
 80098c8:	20000b90 	.word	0x20000b90

080098cc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d109      	bne.n	80098f2 <vTaskResume+0x26>
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	60bb      	str	r3, [r7, #8]
 80098f0:	e7fe      	b.n	80098f0 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d03a      	beq.n	800996e <vTaskResume+0xa2>
 80098f8:	4b1f      	ldr	r3, [pc, #124]	; (8009978 <vTaskResume+0xac>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d035      	beq.n	800996e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8009902:	f001 faa1 	bl	800ae48 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f7ff ffa6 	bl	8009858 <prvTaskIsTaskSuspended>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d02b      	beq.n	800996a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3304      	adds	r3, #4
 8009916:	4618      	mov	r0, r3
 8009918:	f7ff f828 	bl	800896c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009920:	4b16      	ldr	r3, [pc, #88]	; (800997c <vTaskResume+0xb0>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	429a      	cmp	r2, r3
 8009926:	d903      	bls.n	8009930 <vTaskResume+0x64>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992c:	4a13      	ldr	r2, [pc, #76]	; (800997c <vTaskResume+0xb0>)
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009934:	4613      	mov	r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	4413      	add	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4a10      	ldr	r2, [pc, #64]	; (8009980 <vTaskResume+0xb4>)
 800993e:	441a      	add	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3304      	adds	r3, #4
 8009944:	4619      	mov	r1, r3
 8009946:	4610      	mov	r0, r2
 8009948:	f7fe ffb5 	bl	80088b6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009950:	4b09      	ldr	r3, [pc, #36]	; (8009978 <vTaskResume+0xac>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009956:	429a      	cmp	r2, r3
 8009958:	d307      	bcc.n	800996a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800995a:	4b0a      	ldr	r3, [pc, #40]	; (8009984 <vTaskResume+0xb8>)
 800995c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800996a:	f001 fa9b 	bl	800aea4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800996e:	bf00      	nop
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	200006fc 	.word	0x200006fc
 800997c:	20000bd8 	.word	0x20000bd8
 8009980:	20000700 	.word	0x20000700
 8009984:	e000ed04 	.word	0xe000ed04

08009988 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08a      	sub	sp, #40	; 0x28
 800998c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009992:	2300      	movs	r3, #0
 8009994:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009996:	463a      	mov	r2, r7
 8009998:	1d39      	adds	r1, r7, #4
 800999a:	f107 0308 	add.w	r3, r7, #8
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe fd26 	bl	80083f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	9202      	str	r2, [sp, #8]
 80099ac:	9301      	str	r3, [sp, #4]
 80099ae:	2300      	movs	r3, #0
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	2300      	movs	r3, #0
 80099b4:	460a      	mov	r2, r1
 80099b6:	4920      	ldr	r1, [pc, #128]	; (8009a38 <vTaskStartScheduler+0xb0>)
 80099b8:	4820      	ldr	r0, [pc, #128]	; (8009a3c <vTaskStartScheduler+0xb4>)
 80099ba:	f7ff fd11 	bl	80093e0 <xTaskCreateStatic>
 80099be:	4602      	mov	r2, r0
 80099c0:	4b1f      	ldr	r3, [pc, #124]	; (8009a40 <vTaskStartScheduler+0xb8>)
 80099c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099c4:	4b1e      	ldr	r3, [pc, #120]	; (8009a40 <vTaskStartScheduler+0xb8>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099cc:	2301      	movs	r3, #1
 80099ce:	617b      	str	r3, [r7, #20]
 80099d0:	e001      	b.n	80099d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099d2:	2300      	movs	r3, #0
 80099d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d102      	bne.n	80099e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80099dc:	f000 fdce 	bl	800a57c <xTimerCreateTimerTask>
 80099e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d115      	bne.n	8009a14 <vTaskStartScheduler+0x8c>
 80099e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099fa:	4b12      	ldr	r3, [pc, #72]	; (8009a44 <vTaskStartScheduler+0xbc>)
 80099fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009a00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a02:	4b11      	ldr	r3, [pc, #68]	; (8009a48 <vTaskStartScheduler+0xc0>)
 8009a04:	2201      	movs	r2, #1
 8009a06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009a08:	4b10      	ldr	r3, [pc, #64]	; (8009a4c <vTaskStartScheduler+0xc4>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a0e:	f001 f9ab 	bl	800ad68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a12:	e00d      	b.n	8009a30 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1a:	d109      	bne.n	8009a30 <vTaskStartScheduler+0xa8>
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	60fb      	str	r3, [r7, #12]
 8009a2e:	e7fe      	b.n	8009a2e <vTaskStartScheduler+0xa6>
}
 8009a30:	bf00      	nop
 8009a32:	3718      	adds	r7, #24
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	0800b700 	.word	0x0800b700
 8009a3c:	0800a1e1 	.word	0x0800a1e1
 8009a40:	20000bf4 	.word	0x20000bf4
 8009a44:	20000bf0 	.word	0x20000bf0
 8009a48:	20000bdc 	.word	0x20000bdc
 8009a4c:	20000bd4 	.word	0x20000bd4

08009a50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a50:	b480      	push	{r7}
 8009a52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009a54:	4b04      	ldr	r3, [pc, #16]	; (8009a68 <vTaskSuspendAll+0x18>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	4a03      	ldr	r2, [pc, #12]	; (8009a68 <vTaskSuspendAll+0x18>)
 8009a5c:	6013      	str	r3, [r2, #0]
}
 8009a5e:	bf00      	nop
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bc80      	pop	{r7}
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	20000bf8 	.word	0x20000bf8

08009a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a76:	2300      	movs	r3, #0
 8009a78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a7a:	4b41      	ldr	r3, [pc, #260]	; (8009b80 <xTaskResumeAll+0x114>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <xTaskResumeAll+0x2a>
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	603b      	str	r3, [r7, #0]
 8009a94:	e7fe      	b.n	8009a94 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a96:	f001 f9d7 	bl	800ae48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a9a:	4b39      	ldr	r3, [pc, #228]	; (8009b80 <xTaskResumeAll+0x114>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	4a37      	ldr	r2, [pc, #220]	; (8009b80 <xTaskResumeAll+0x114>)
 8009aa2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aa4:	4b36      	ldr	r3, [pc, #216]	; (8009b80 <xTaskResumeAll+0x114>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d162      	bne.n	8009b72 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009aac:	4b35      	ldr	r3, [pc, #212]	; (8009b84 <xTaskResumeAll+0x118>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d05e      	beq.n	8009b72 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ab4:	e02f      	b.n	8009b16 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009ab6:	4b34      	ldr	r3, [pc, #208]	; (8009b88 <xTaskResumeAll+0x11c>)
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3318      	adds	r3, #24
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe ff52 	bl	800896c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3304      	adds	r3, #4
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7fe ff4d 	bl	800896c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad6:	4b2d      	ldr	r3, [pc, #180]	; (8009b8c <xTaskResumeAll+0x120>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d903      	bls.n	8009ae6 <xTaskResumeAll+0x7a>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae2:	4a2a      	ldr	r2, [pc, #168]	; (8009b8c <xTaskResumeAll+0x120>)
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aea:	4613      	mov	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4a27      	ldr	r2, [pc, #156]	; (8009b90 <xTaskResumeAll+0x124>)
 8009af4:	441a      	add	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3304      	adds	r3, #4
 8009afa:	4619      	mov	r1, r3
 8009afc:	4610      	mov	r0, r2
 8009afe:	f7fe feda 	bl	80088b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b06:	4b23      	ldr	r3, [pc, #140]	; (8009b94 <xTaskResumeAll+0x128>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d302      	bcc.n	8009b16 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009b10:	4b21      	ldr	r3, [pc, #132]	; (8009b98 <xTaskResumeAll+0x12c>)
 8009b12:	2201      	movs	r2, #1
 8009b14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b16:	4b1c      	ldr	r3, [pc, #112]	; (8009b88 <xTaskResumeAll+0x11c>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1cb      	bne.n	8009ab6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b24:	f000 fc10 	bl	800a348 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009b28:	4b1c      	ldr	r3, [pc, #112]	; (8009b9c <xTaskResumeAll+0x130>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d010      	beq.n	8009b56 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b34:	f000 f856 	bl	8009be4 <xTaskIncrementTick>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d002      	beq.n	8009b44 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009b3e:	4b16      	ldr	r3, [pc, #88]	; (8009b98 <xTaskResumeAll+0x12c>)
 8009b40:	2201      	movs	r2, #1
 8009b42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3b01      	subs	r3, #1
 8009b48:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1f1      	bne.n	8009b34 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009b50:	4b12      	ldr	r3, [pc, #72]	; (8009b9c <xTaskResumeAll+0x130>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b56:	4b10      	ldr	r3, [pc, #64]	; (8009b98 <xTaskResumeAll+0x12c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d009      	beq.n	8009b72 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b62:	4b0f      	ldr	r3, [pc, #60]	; (8009ba0 <xTaskResumeAll+0x134>)
 8009b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b72:	f001 f997 	bl	800aea4 <vPortExitCritical>

	return xAlreadyYielded;
 8009b76:	68bb      	ldr	r3, [r7, #8]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	20000bf8 	.word	0x20000bf8
 8009b84:	20000bd0 	.word	0x20000bd0
 8009b88:	20000b90 	.word	0x20000b90
 8009b8c:	20000bd8 	.word	0x20000bd8
 8009b90:	20000700 	.word	0x20000700
 8009b94:	200006fc 	.word	0x200006fc
 8009b98:	20000be4 	.word	0x20000be4
 8009b9c:	20000be0 	.word	0x20000be0
 8009ba0:	e000ed04 	.word	0xe000ed04

08009ba4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009baa:	4b04      	ldr	r3, [pc, #16]	; (8009bbc <xTaskGetTickCount+0x18>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009bb0:	687b      	ldr	r3, [r7, #4]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bc80      	pop	{r7}
 8009bba:	4770      	bx	lr
 8009bbc:	20000bd4 	.word	0x20000bd4

08009bc0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bc6:	f001 f9f9 	bl	800afbc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009bca:	2300      	movs	r3, #0
 8009bcc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009bce:	4b04      	ldr	r3, [pc, #16]	; (8009be0 <xTaskGetTickCountFromISR+0x20>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bd4:	683b      	ldr	r3, [r7, #0]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	20000bd4 	.word	0x20000bd4

08009be4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009bea:	2300      	movs	r3, #0
 8009bec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bee:	4b55      	ldr	r3, [pc, #340]	; (8009d44 <xTaskIncrementTick+0x160>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f040 8093 	bne.w	8009d1e <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bf8:	4b53      	ldr	r3, [pc, #332]	; (8009d48 <xTaskIncrementTick+0x164>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c00:	4a51      	ldr	r2, [pc, #324]	; (8009d48 <xTaskIncrementTick+0x164>)
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d11f      	bne.n	8009c4c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c0c:	4b4f      	ldr	r3, [pc, #316]	; (8009d4c <xTaskIncrementTick+0x168>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d009      	beq.n	8009c2a <xTaskIncrementTick+0x46>
 8009c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1a:	f383 8811 	msr	BASEPRI, r3
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f3bf 8f4f 	dsb	sy
 8009c26:	603b      	str	r3, [r7, #0]
 8009c28:	e7fe      	b.n	8009c28 <xTaskIncrementTick+0x44>
 8009c2a:	4b48      	ldr	r3, [pc, #288]	; (8009d4c <xTaskIncrementTick+0x168>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	60fb      	str	r3, [r7, #12]
 8009c30:	4b47      	ldr	r3, [pc, #284]	; (8009d50 <xTaskIncrementTick+0x16c>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a45      	ldr	r2, [pc, #276]	; (8009d4c <xTaskIncrementTick+0x168>)
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	4a45      	ldr	r2, [pc, #276]	; (8009d50 <xTaskIncrementTick+0x16c>)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	4b45      	ldr	r3, [pc, #276]	; (8009d54 <xTaskIncrementTick+0x170>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3301      	adds	r3, #1
 8009c44:	4a43      	ldr	r2, [pc, #268]	; (8009d54 <xTaskIncrementTick+0x170>)
 8009c46:	6013      	str	r3, [r2, #0]
 8009c48:	f000 fb7e 	bl	800a348 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c4c:	4b42      	ldr	r3, [pc, #264]	; (8009d58 <xTaskIncrementTick+0x174>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d34e      	bcc.n	8009cf4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c56:	4b3d      	ldr	r3, [pc, #244]	; (8009d4c <xTaskIncrementTick+0x168>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <xTaskIncrementTick+0x80>
 8009c60:	2301      	movs	r3, #1
 8009c62:	e000      	b.n	8009c66 <xTaskIncrementTick+0x82>
 8009c64:	2300      	movs	r3, #0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d004      	beq.n	8009c74 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c6a:	4b3b      	ldr	r3, [pc, #236]	; (8009d58 <xTaskIncrementTick+0x174>)
 8009c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c70:	601a      	str	r2, [r3, #0]
					break;
 8009c72:	e03f      	b.n	8009cf4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009c74:	4b35      	ldr	r3, [pc, #212]	; (8009d4c <xTaskIncrementTick+0x168>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d203      	bcs.n	8009c94 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c8c:	4a32      	ldr	r2, [pc, #200]	; (8009d58 <xTaskIncrementTick+0x174>)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6013      	str	r3, [r2, #0]
						break;
 8009c92:	e02f      	b.n	8009cf4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	3304      	adds	r3, #4
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fe fe67 	bl	800896c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d004      	beq.n	8009cb0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	3318      	adds	r3, #24
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fe5e 	bl	800896c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb4:	4b29      	ldr	r3, [pc, #164]	; (8009d5c <xTaskIncrementTick+0x178>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d903      	bls.n	8009cc4 <xTaskIncrementTick+0xe0>
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc0:	4a26      	ldr	r2, [pc, #152]	; (8009d5c <xTaskIncrementTick+0x178>)
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc8:	4613      	mov	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4a23      	ldr	r2, [pc, #140]	; (8009d60 <xTaskIncrementTick+0x17c>)
 8009cd2:	441a      	add	r2, r3
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	4619      	mov	r1, r3
 8009cda:	4610      	mov	r0, r2
 8009cdc:	f7fe fdeb 	bl	80088b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce4:	4b1f      	ldr	r3, [pc, #124]	; (8009d64 <xTaskIncrementTick+0x180>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d3b3      	bcc.n	8009c56 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cf2:	e7b0      	b.n	8009c56 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009cf4:	4b1b      	ldr	r3, [pc, #108]	; (8009d64 <xTaskIncrementTick+0x180>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfa:	4919      	ldr	r1, [pc, #100]	; (8009d60 <xTaskIncrementTick+0x17c>)
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	440b      	add	r3, r1
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d901      	bls.n	8009d10 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8009d10:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <xTaskIncrementTick+0x184>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d109      	bne.n	8009d2c <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8009d18:	f7f7 fd22 	bl	8001760 <vApplicationTickHook>
 8009d1c:	e006      	b.n	8009d2c <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009d1e:	4b12      	ldr	r3, [pc, #72]	; (8009d68 <xTaskIncrementTick+0x184>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3301      	adds	r3, #1
 8009d24:	4a10      	ldr	r2, [pc, #64]	; (8009d68 <xTaskIncrementTick+0x184>)
 8009d26:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8009d28:	f7f7 fd1a 	bl	8001760 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009d2c:	4b0f      	ldr	r3, [pc, #60]	; (8009d6c <xTaskIncrementTick+0x188>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8009d34:	2301      	movs	r3, #1
 8009d36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009d38:	697b      	ldr	r3, [r7, #20]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	20000bf8 	.word	0x20000bf8
 8009d48:	20000bd4 	.word	0x20000bd4
 8009d4c:	20000b88 	.word	0x20000b88
 8009d50:	20000b8c 	.word	0x20000b8c
 8009d54:	20000be8 	.word	0x20000be8
 8009d58:	20000bf0 	.word	0x20000bf0
 8009d5c:	20000bd8 	.word	0x20000bd8
 8009d60:	20000700 	.word	0x20000700
 8009d64:	200006fc 	.word	0x200006fc
 8009d68:	20000be0 	.word	0x20000be0
 8009d6c:	20000be4 	.word	0x20000be4

08009d70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d76:	4b2f      	ldr	r3, [pc, #188]	; (8009e34 <vTaskSwitchContext+0xc4>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d7e:	4b2e      	ldr	r3, [pc, #184]	; (8009e38 <vTaskSwitchContext+0xc8>)
 8009d80:	2201      	movs	r2, #1
 8009d82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d84:	e051      	b.n	8009e2a <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 8009d86:	4b2c      	ldr	r3, [pc, #176]	; (8009e38 <vTaskSwitchContext+0xc8>)
 8009d88:	2200      	movs	r2, #0
 8009d8a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009d8c:	4b2b      	ldr	r3, [pc, #172]	; (8009e3c <vTaskSwitchContext+0xcc>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	4b2a      	ldr	r3, [pc, #168]	; (8009e3c <vTaskSwitchContext+0xcc>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d808      	bhi.n	8009dae <vTaskSwitchContext+0x3e>
 8009d9c:	4b27      	ldr	r3, [pc, #156]	; (8009e3c <vTaskSwitchContext+0xcc>)
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	4b26      	ldr	r3, [pc, #152]	; (8009e3c <vTaskSwitchContext+0xcc>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3334      	adds	r3, #52	; 0x34
 8009da6:	4619      	mov	r1, r3
 8009da8:	4610      	mov	r0, r2
 8009daa:	f7f7 fcdf 	bl	800176c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009dae:	4b24      	ldr	r3, [pc, #144]	; (8009e40 <vTaskSwitchContext+0xd0>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	e00f      	b.n	8009dd6 <vTaskSwitchContext+0x66>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d109      	bne.n	8009dd0 <vTaskSwitchContext+0x60>
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	607b      	str	r3, [r7, #4]
 8009dce:	e7fe      	b.n	8009dce <vTaskSwitchContext+0x5e>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	60fb      	str	r3, [r7, #12]
 8009dd6:	491b      	ldr	r1, [pc, #108]	; (8009e44 <vTaskSwitchContext+0xd4>)
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4413      	add	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	440b      	add	r3, r1
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0e5      	beq.n	8009db6 <vTaskSwitchContext+0x46>
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	4613      	mov	r3, r2
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4413      	add	r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4a13      	ldr	r2, [pc, #76]	; (8009e44 <vTaskSwitchContext+0xd4>)
 8009df6:	4413      	add	r3, r2
 8009df8:	60bb      	str	r3, [r7, #8]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	605a      	str	r2, [r3, #4]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d104      	bne.n	8009e1a <vTaskSwitchContext+0xaa>
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	685a      	ldr	r2, [r3, #4]
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	605a      	str	r2, [r3, #4]
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	4a06      	ldr	r2, [pc, #24]	; (8009e3c <vTaskSwitchContext+0xcc>)
 8009e22:	6013      	str	r3, [r2, #0]
 8009e24:	4a06      	ldr	r2, [pc, #24]	; (8009e40 <vTaskSwitchContext+0xd0>)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6013      	str	r3, [r2, #0]
}
 8009e2a:	bf00      	nop
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20000bf8 	.word	0x20000bf8
 8009e38:	20000be4 	.word	0x20000be4
 8009e3c:	200006fc 	.word	0x200006fc
 8009e40:	20000bd8 	.word	0x20000bd8
 8009e44:	20000700 	.word	0x20000700

08009e48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d109      	bne.n	8009e6c <vTaskPlaceOnEventList+0x24>
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	e7fe      	b.n	8009e6a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e6c:	4b07      	ldr	r3, [pc, #28]	; (8009e8c <vTaskPlaceOnEventList+0x44>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3318      	adds	r3, #24
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7fe fd41 	bl	80088fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	6838      	ldr	r0, [r7, #0]
 8009e7e:	f000 fb29 	bl	800a4d4 <prvAddCurrentTaskToDelayedList>
}
 8009e82:	bf00      	nop
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	200006fc 	.word	0x200006fc

08009e90 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b086      	sub	sp, #24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d109      	bne.n	8009eb6 <vTaskPlaceOnUnorderedEventList+0x26>
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	e7fe      	b.n	8009eb4 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009eb6:	4b11      	ldr	r3, [pc, #68]	; (8009efc <vTaskPlaceOnUnorderedEventList+0x6c>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d109      	bne.n	8009ed2 <vTaskPlaceOnUnorderedEventList+0x42>
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	613b      	str	r3, [r7, #16]
 8009ed0:	e7fe      	b.n	8009ed0 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009ed2:	4b0b      	ldr	r3, [pc, #44]	; (8009f00 <vTaskPlaceOnUnorderedEventList+0x70>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009edc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ede:	4b08      	ldr	r3, [pc, #32]	; (8009f00 <vTaskPlaceOnUnorderedEventList+0x70>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3318      	adds	r3, #24
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f7fe fce5 	bl	80088b6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009eec:	2101      	movs	r1, #1
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 faf0 	bl	800a4d4 <prvAddCurrentTaskToDelayedList>
}
 8009ef4:	bf00      	nop
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	20000bf8 	.word	0x20000bf8
 8009f00:	200006fc 	.word	0x200006fc

08009f04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d109      	bne.n	8009f2a <vTaskPlaceOnEventListRestricted+0x26>
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	e7fe      	b.n	8009f28 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f2a:	4b0a      	ldr	r3, [pc, #40]	; (8009f54 <vTaskPlaceOnEventListRestricted+0x50>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3318      	adds	r3, #24
 8009f30:	4619      	mov	r1, r3
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f7fe fcbf 	bl	80088b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d002      	beq.n	8009f44 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f42:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009f44:	6879      	ldr	r1, [r7, #4]
 8009f46:	68b8      	ldr	r0, [r7, #8]
 8009f48:	f000 fac4 	bl	800a4d4 <prvAddCurrentTaskToDelayedList>
	}
 8009f4c:	bf00      	nop
 8009f4e:	3718      	adds	r7, #24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	200006fc 	.word	0x200006fc

08009f58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d109      	bne.n	8009f82 <xTaskRemoveFromEventList+0x2a>
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	e7fe      	b.n	8009f80 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	3318      	adds	r3, #24
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7fe fcf0 	bl	800896c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f8c:	4b1d      	ldr	r3, [pc, #116]	; (800a004 <xTaskRemoveFromEventList+0xac>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d11d      	bne.n	8009fd0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	3304      	adds	r3, #4
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fe fce7 	bl	800896c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa2:	4b19      	ldr	r3, [pc, #100]	; (800a008 <xTaskRemoveFromEventList+0xb0>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d903      	bls.n	8009fb2 <xTaskRemoveFromEventList+0x5a>
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fae:	4a16      	ldr	r2, [pc, #88]	; (800a008 <xTaskRemoveFromEventList+0xb0>)
 8009fb0:	6013      	str	r3, [r2, #0]
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4a13      	ldr	r2, [pc, #76]	; (800a00c <xTaskRemoveFromEventList+0xb4>)
 8009fc0:	441a      	add	r2, r3
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4610      	mov	r0, r2
 8009fca:	f7fe fc74 	bl	80088b6 <vListInsertEnd>
 8009fce:	e005      	b.n	8009fdc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	3318      	adds	r3, #24
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	480e      	ldr	r0, [pc, #56]	; (800a010 <xTaskRemoveFromEventList+0xb8>)
 8009fd8:	f7fe fc6d 	bl	80088b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe0:	4b0c      	ldr	r3, [pc, #48]	; (800a014 <xTaskRemoveFromEventList+0xbc>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d905      	bls.n	8009ff6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009fea:	2301      	movs	r3, #1
 8009fec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009fee:	4b0a      	ldr	r3, [pc, #40]	; (800a018 <xTaskRemoveFromEventList+0xc0>)
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	e001      	b.n	8009ffa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009ffa:	697b      	ldr	r3, [r7, #20]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3718      	adds	r7, #24
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	20000bf8 	.word	0x20000bf8
 800a008:	20000bd8 	.word	0x20000bd8
 800a00c:	20000700 	.word	0x20000700
 800a010:	20000b90 	.word	0x20000b90
 800a014:	200006fc 	.word	0x200006fc
 800a018:	20000be4 	.word	0x20000be4

0800a01c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a026:	4b28      	ldr	r3, [pc, #160]	; (800a0c8 <vTaskRemoveFromUnorderedEventList+0xac>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d109      	bne.n	800a042 <vTaskRemoveFromUnorderedEventList+0x26>
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	613b      	str	r3, [r7, #16]
 800a040:	e7fe      	b.n	800a040 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d109      	bne.n	800a06c <vTaskRemoveFromUnorderedEventList+0x50>
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	e7fe      	b.n	800a06a <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7fe fc7d 	bl	800896c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	3304      	adds	r3, #4
 800a076:	4618      	mov	r0, r3
 800a078:	f7fe fc78 	bl	800896c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a080:	4b12      	ldr	r3, [pc, #72]	; (800a0cc <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	429a      	cmp	r2, r3
 800a086:	d903      	bls.n	800a090 <vTaskRemoveFromUnorderedEventList+0x74>
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08c:	4a0f      	ldr	r2, [pc, #60]	; (800a0cc <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a094:	4613      	mov	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4a0c      	ldr	r2, [pc, #48]	; (800a0d0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a09e:	441a      	add	r2, r3
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	f7fe fc05 	bl	80088b6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b0:	4b08      	ldr	r3, [pc, #32]	; (800a0d4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d902      	bls.n	800a0c0 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a0ba:	4b07      	ldr	r3, [pc, #28]	; (800a0d8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a0bc:	2201      	movs	r2, #1
 800a0be:	601a      	str	r2, [r3, #0]
	}
}
 800a0c0:	bf00      	nop
 800a0c2:	3718      	adds	r7, #24
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	20000bf8 	.word	0x20000bf8
 800a0cc:	20000bd8 	.word	0x20000bd8
 800a0d0:	20000700 	.word	0x20000700
 800a0d4:	200006fc 	.word	0x200006fc
 800a0d8:	20000be4 	.word	0x20000be4

0800a0dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0e4:	4b06      	ldr	r3, [pc, #24]	; (800a100 <vTaskInternalSetTimeOutState+0x24>)
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0ec:	4b05      	ldr	r3, [pc, #20]	; (800a104 <vTaskInternalSetTimeOutState+0x28>)
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	605a      	str	r2, [r3, #4]
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bc80      	pop	{r7}
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	20000be8 	.word	0x20000be8
 800a104:	20000bd4 	.word	0x20000bd4

0800a108 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b088      	sub	sp, #32
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d109      	bne.n	800a12c <xTaskCheckForTimeOut+0x24>
 800a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	613b      	str	r3, [r7, #16]
 800a12a:	e7fe      	b.n	800a12a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d109      	bne.n	800a146 <xTaskCheckForTimeOut+0x3e>
 800a132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	60fb      	str	r3, [r7, #12]
 800a144:	e7fe      	b.n	800a144 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a146:	f000 fe7f 	bl	800ae48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a14a:	4b1d      	ldr	r3, [pc, #116]	; (800a1c0 <xTaskCheckForTimeOut+0xb8>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a162:	d102      	bne.n	800a16a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a164:	2300      	movs	r3, #0
 800a166:	61fb      	str	r3, [r7, #28]
 800a168:	e023      	b.n	800a1b2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	4b15      	ldr	r3, [pc, #84]	; (800a1c4 <xTaskCheckForTimeOut+0xbc>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	429a      	cmp	r2, r3
 800a174:	d007      	beq.n	800a186 <xTaskCheckForTimeOut+0x7e>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	69ba      	ldr	r2, [r7, #24]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d302      	bcc.n	800a186 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a180:	2301      	movs	r3, #1
 800a182:	61fb      	str	r3, [r7, #28]
 800a184:	e015      	b.n	800a1b2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d20b      	bcs.n	800a1a8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	1ad2      	subs	r2, r2, r3
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7ff ff9d 	bl	800a0dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	61fb      	str	r3, [r7, #28]
 800a1a6:	e004      	b.n	800a1b2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a1b2:	f000 fe77 	bl	800aea4 <vPortExitCritical>

	return xReturn;
 800a1b6:	69fb      	ldr	r3, [r7, #28]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3720      	adds	r7, #32
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	20000bd4 	.word	0x20000bd4
 800a1c4:	20000be8 	.word	0x20000be8

0800a1c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1cc:	4b03      	ldr	r3, [pc, #12]	; (800a1dc <vTaskMissedYield+0x14>)
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	601a      	str	r2, [r3, #0]
}
 800a1d2:	bf00      	nop
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bc80      	pop	{r7}
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	20000be4 	.word	0x20000be4

0800a1e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1e8:	f000 f854 	bl	800a294 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1ec:	4b07      	ldr	r3, [pc, #28]	; (800a20c <prvIdleTask+0x2c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d907      	bls.n	800a204 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a1f4:	4b06      	ldr	r3, [pc, #24]	; (800a210 <prvIdleTask+0x30>)
 800a1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a204:	f7f7 faa6 	bl	8001754 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a208:	e7ee      	b.n	800a1e8 <prvIdleTask+0x8>
 800a20a:	bf00      	nop
 800a20c:	20000700 	.word	0x20000700
 800a210:	e000ed04 	.word	0xe000ed04

0800a214 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a21a:	2300      	movs	r3, #0
 800a21c:	607b      	str	r3, [r7, #4]
 800a21e:	e00c      	b.n	800a23a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	4613      	mov	r3, r2
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4413      	add	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4a12      	ldr	r2, [pc, #72]	; (800a274 <prvInitialiseTaskLists+0x60>)
 800a22c:	4413      	add	r3, r2
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fe fb16 	bl	8008860 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	3301      	adds	r3, #1
 800a238:	607b      	str	r3, [r7, #4]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2b37      	cmp	r3, #55	; 0x37
 800a23e:	d9ef      	bls.n	800a220 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a240:	480d      	ldr	r0, [pc, #52]	; (800a278 <prvInitialiseTaskLists+0x64>)
 800a242:	f7fe fb0d 	bl	8008860 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a246:	480d      	ldr	r0, [pc, #52]	; (800a27c <prvInitialiseTaskLists+0x68>)
 800a248:	f7fe fb0a 	bl	8008860 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a24c:	480c      	ldr	r0, [pc, #48]	; (800a280 <prvInitialiseTaskLists+0x6c>)
 800a24e:	f7fe fb07 	bl	8008860 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a252:	480c      	ldr	r0, [pc, #48]	; (800a284 <prvInitialiseTaskLists+0x70>)
 800a254:	f7fe fb04 	bl	8008860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a258:	480b      	ldr	r0, [pc, #44]	; (800a288 <prvInitialiseTaskLists+0x74>)
 800a25a:	f7fe fb01 	bl	8008860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a25e:	4b0b      	ldr	r3, [pc, #44]	; (800a28c <prvInitialiseTaskLists+0x78>)
 800a260:	4a05      	ldr	r2, [pc, #20]	; (800a278 <prvInitialiseTaskLists+0x64>)
 800a262:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a264:	4b0a      	ldr	r3, [pc, #40]	; (800a290 <prvInitialiseTaskLists+0x7c>)
 800a266:	4a05      	ldr	r2, [pc, #20]	; (800a27c <prvInitialiseTaskLists+0x68>)
 800a268:	601a      	str	r2, [r3, #0]
}
 800a26a:	bf00      	nop
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	20000700 	.word	0x20000700
 800a278:	20000b60 	.word	0x20000b60
 800a27c:	20000b74 	.word	0x20000b74
 800a280:	20000b90 	.word	0x20000b90
 800a284:	20000ba4 	.word	0x20000ba4
 800a288:	20000bbc 	.word	0x20000bbc
 800a28c:	20000b88 	.word	0x20000b88
 800a290:	20000b8c 	.word	0x20000b8c

0800a294 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a29a:	e019      	b.n	800a2d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a29c:	f000 fdd4 	bl	800ae48 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a2a0:	4b0f      	ldr	r3, [pc, #60]	; (800a2e0 <prvCheckTasksWaitingTermination+0x4c>)
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fe fb5d 	bl	800896c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2b2:	4b0c      	ldr	r3, [pc, #48]	; (800a2e4 <prvCheckTasksWaitingTermination+0x50>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	4a0a      	ldr	r2, [pc, #40]	; (800a2e4 <prvCheckTasksWaitingTermination+0x50>)
 800a2ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2bc:	4b0a      	ldr	r3, [pc, #40]	; (800a2e8 <prvCheckTasksWaitingTermination+0x54>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	4a09      	ldr	r2, [pc, #36]	; (800a2e8 <prvCheckTasksWaitingTermination+0x54>)
 800a2c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2c6:	f000 fded 	bl	800aea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f80e 	bl	800a2ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2d0:	4b05      	ldr	r3, [pc, #20]	; (800a2e8 <prvCheckTasksWaitingTermination+0x54>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1e1      	bne.n	800a29c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2d8:	bf00      	nop
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	20000ba4 	.word	0x20000ba4
 800a2e4:	20000bd0 	.word	0x20000bd0
 800a2e8:	20000bb8 	.word	0x20000bb8

0800a2ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d108      	bne.n	800a310 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a302:	4618      	mov	r0, r3
 800a304:	f000 ff5c 	bl	800b1c0 <vPortFree>
				vPortFree( pxTCB );
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 ff59 	bl	800b1c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a30e:	e017      	b.n	800a340 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a316:	2b01      	cmp	r3, #1
 800a318:	d103      	bne.n	800a322 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 ff50 	bl	800b1c0 <vPortFree>
	}
 800a320:	e00e      	b.n	800a340 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d009      	beq.n	800a340 <prvDeleteTCB+0x54>
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	60fb      	str	r3, [r7, #12]
 800a33e:	e7fe      	b.n	800a33e <prvDeleteTCB+0x52>
	}
 800a340:	bf00      	nop
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a34e:	4b0e      	ldr	r3, [pc, #56]	; (800a388 <prvResetNextTaskUnblockTime+0x40>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <prvResetNextTaskUnblockTime+0x14>
 800a358:	2301      	movs	r3, #1
 800a35a:	e000      	b.n	800a35e <prvResetNextTaskUnblockTime+0x16>
 800a35c:	2300      	movs	r3, #0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d004      	beq.n	800a36c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a362:	4b0a      	ldr	r3, [pc, #40]	; (800a38c <prvResetNextTaskUnblockTime+0x44>)
 800a364:	f04f 32ff 	mov.w	r2, #4294967295
 800a368:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a36a:	e008      	b.n	800a37e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a36c:	4b06      	ldr	r3, [pc, #24]	; (800a388 <prvResetNextTaskUnblockTime+0x40>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	4a04      	ldr	r2, [pc, #16]	; (800a38c <prvResetNextTaskUnblockTime+0x44>)
 800a37c:	6013      	str	r3, [r2, #0]
}
 800a37e:	bf00      	nop
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	bc80      	pop	{r7}
 800a386:	4770      	bx	lr
 800a388:	20000b88 	.word	0x20000b88
 800a38c:	20000bf0 	.word	0x20000bf0

0800a390 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a396:	4b0b      	ldr	r3, [pc, #44]	; (800a3c4 <xTaskGetSchedulerState+0x34>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d102      	bne.n	800a3a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	607b      	str	r3, [r7, #4]
 800a3a2:	e008      	b.n	800a3b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3a4:	4b08      	ldr	r3, [pc, #32]	; (800a3c8 <xTaskGetSchedulerState+0x38>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d102      	bne.n	800a3b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	607b      	str	r3, [r7, #4]
 800a3b0:	e001      	b.n	800a3b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3b6:	687b      	ldr	r3, [r7, #4]
	}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bc80      	pop	{r7}
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	20000bdc 	.word	0x20000bdc
 800a3c8:	20000bf8 	.word	0x20000bf8

0800a3cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d054      	beq.n	800a48c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3e2:	4b2d      	ldr	r3, [pc, #180]	; (800a498 <xTaskPriorityDisinherit+0xcc>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d009      	beq.n	800a400 <xTaskPriorityDisinherit+0x34>
 800a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	60fb      	str	r3, [r7, #12]
 800a3fe:	e7fe      	b.n	800a3fe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a404:	2b00      	cmp	r3, #0
 800a406:	d109      	bne.n	800a41c <xTaskPriorityDisinherit+0x50>
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	60bb      	str	r3, [r7, #8]
 800a41a:	e7fe      	b.n	800a41a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a420:	1e5a      	subs	r2, r3, #1
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a42e:	429a      	cmp	r2, r3
 800a430:	d02c      	beq.n	800a48c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a436:	2b00      	cmp	r3, #0
 800a438:	d128      	bne.n	800a48c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	3304      	adds	r3, #4
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe fa94 	bl	800896c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45c:	4b0f      	ldr	r3, [pc, #60]	; (800a49c <xTaskPriorityDisinherit+0xd0>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	429a      	cmp	r2, r3
 800a462:	d903      	bls.n	800a46c <xTaskPriorityDisinherit+0xa0>
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	4a0c      	ldr	r2, [pc, #48]	; (800a49c <xTaskPriorityDisinherit+0xd0>)
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a470:	4613      	mov	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4a09      	ldr	r2, [pc, #36]	; (800a4a0 <xTaskPriorityDisinherit+0xd4>)
 800a47a:	441a      	add	r2, r3
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	3304      	adds	r3, #4
 800a480:	4619      	mov	r1, r3
 800a482:	4610      	mov	r0, r2
 800a484:	f7fe fa17 	bl	80088b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a488:	2301      	movs	r3, #1
 800a48a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a48c:	697b      	ldr	r3, [r7, #20]
	}
 800a48e:	4618      	mov	r0, r3
 800a490:	3718      	adds	r7, #24
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	200006fc 	.word	0x200006fc
 800a49c:	20000bd8 	.word	0x20000bd8
 800a4a0:	20000700 	.word	0x20000700

0800a4a4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a4aa:	4b09      	ldr	r3, [pc, #36]	; (800a4d0 <uxTaskResetEventItemValue+0x2c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4b2:	4b07      	ldr	r3, [pc, #28]	; (800a4d0 <uxTaskResetEventItemValue+0x2c>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b8:	4b05      	ldr	r3, [pc, #20]	; (800a4d0 <uxTaskResetEventItemValue+0x2c>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a4c0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a4c2:	687b      	ldr	r3, [r7, #4]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bc80      	pop	{r7}
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	200006fc 	.word	0x200006fc

0800a4d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4de:	4b21      	ldr	r3, [pc, #132]	; (800a564 <prvAddCurrentTaskToDelayedList+0x90>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4e4:	4b20      	ldr	r3, [pc, #128]	; (800a568 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fe fa3e 	bl	800896c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f6:	d10a      	bne.n	800a50e <prvAddCurrentTaskToDelayedList+0x3a>
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d007      	beq.n	800a50e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4fe:	4b1a      	ldr	r3, [pc, #104]	; (800a568 <prvAddCurrentTaskToDelayedList+0x94>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3304      	adds	r3, #4
 800a504:	4619      	mov	r1, r3
 800a506:	4819      	ldr	r0, [pc, #100]	; (800a56c <prvAddCurrentTaskToDelayedList+0x98>)
 800a508:	f7fe f9d5 	bl	80088b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a50c:	e026      	b.n	800a55c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4413      	add	r3, r2
 800a514:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a516:	4b14      	ldr	r3, [pc, #80]	; (800a568 <prvAddCurrentTaskToDelayedList+0x94>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	429a      	cmp	r2, r3
 800a524:	d209      	bcs.n	800a53a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a526:	4b12      	ldr	r3, [pc, #72]	; (800a570 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	4b0f      	ldr	r3, [pc, #60]	; (800a568 <prvAddCurrentTaskToDelayedList+0x94>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3304      	adds	r3, #4
 800a530:	4619      	mov	r1, r3
 800a532:	4610      	mov	r0, r2
 800a534:	f7fe f9e2 	bl	80088fc <vListInsert>
}
 800a538:	e010      	b.n	800a55c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a53a:	4b0e      	ldr	r3, [pc, #56]	; (800a574 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	4b0a      	ldr	r3, [pc, #40]	; (800a568 <prvAddCurrentTaskToDelayedList+0x94>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3304      	adds	r3, #4
 800a544:	4619      	mov	r1, r3
 800a546:	4610      	mov	r0, r2
 800a548:	f7fe f9d8 	bl	80088fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a54c:	4b0a      	ldr	r3, [pc, #40]	; (800a578 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	429a      	cmp	r2, r3
 800a554:	d202      	bcs.n	800a55c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a556:	4a08      	ldr	r2, [pc, #32]	; (800a578 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	6013      	str	r3, [r2, #0]
}
 800a55c:	bf00      	nop
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	20000bd4 	.word	0x20000bd4
 800a568:	200006fc 	.word	0x200006fc
 800a56c:	20000bbc 	.word	0x20000bbc
 800a570:	20000b8c 	.word	0x20000b8c
 800a574:	20000b88 	.word	0x20000b88
 800a578:	20000bf0 	.word	0x20000bf0

0800a57c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b08a      	sub	sp, #40	; 0x28
 800a580:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a582:	2300      	movs	r3, #0
 800a584:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a586:	f000 fb17 	bl	800abb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a58a:	4b1c      	ldr	r3, [pc, #112]	; (800a5fc <xTimerCreateTimerTask+0x80>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d021      	beq.n	800a5d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a592:	2300      	movs	r3, #0
 800a594:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a596:	2300      	movs	r3, #0
 800a598:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a59a:	1d3a      	adds	r2, r7, #4
 800a59c:	f107 0108 	add.w	r1, r7, #8
 800a5a0:	f107 030c 	add.w	r3, r7, #12
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fd ff3b 	bl	8008420 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5aa:	6879      	ldr	r1, [r7, #4]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	9202      	str	r2, [sp, #8]
 800a5b2:	9301      	str	r3, [sp, #4]
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	460a      	mov	r2, r1
 800a5bc:	4910      	ldr	r1, [pc, #64]	; (800a600 <xTimerCreateTimerTask+0x84>)
 800a5be:	4811      	ldr	r0, [pc, #68]	; (800a604 <xTimerCreateTimerTask+0x88>)
 800a5c0:	f7fe ff0e 	bl	80093e0 <xTaskCreateStatic>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	4b10      	ldr	r3, [pc, #64]	; (800a608 <xTimerCreateTimerTask+0x8c>)
 800a5c8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a5ca:	4b0f      	ldr	r3, [pc, #60]	; (800a608 <xTimerCreateTimerTask+0x8c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d109      	bne.n	800a5f0 <xTimerCreateTimerTask+0x74>
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	613b      	str	r3, [r7, #16]
 800a5ee:	e7fe      	b.n	800a5ee <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a5f0:	697b      	ldr	r3, [r7, #20]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3718      	adds	r7, #24
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	20000c2c 	.word	0x20000c2c
 800a600:	0800b708 	.word	0x0800b708
 800a604:	0800a7c9 	.word	0x0800a7c9
 800a608:	20000c30 	.word	0x20000c30

0800a60c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b088      	sub	sp, #32
 800a610:	af02      	add	r7, sp, #8
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800a61a:	2030      	movs	r0, #48	; 0x30
 800a61c:	f000 fd0a 	bl	800b034 <pvPortMalloc>
 800a620:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00d      	beq.n	800a644 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	9301      	str	r3, [sp, #4]
 800a62c:	6a3b      	ldr	r3, [r7, #32]
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	68b9      	ldr	r1, [r7, #8]
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f000 f809 	bl	800a64e <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800a644:	697b      	ldr	r3, [r7, #20]
	}
 800a646:	4618      	mov	r0, r3
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b086      	sub	sp, #24
 800a652:	af00      	add	r7, sp, #0
 800a654:	60f8      	str	r0, [r7, #12]
 800a656:	60b9      	str	r1, [r7, #8]
 800a658:	607a      	str	r2, [r7, #4]
 800a65a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d109      	bne.n	800a676 <prvInitialiseNewTimer+0x28>
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	617b      	str	r3, [r7, #20]
 800a674:	e7fe      	b.n	800a674 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d015      	beq.n	800a6a8 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a67c:	f000 fa9c 	bl	800abb8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800a692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69a:	6a3a      	ldr	r2, [r7, #32]
 800a69c:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fe f8fb 	bl	800889e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a6a8:	bf00      	nop
 800a6aa:	3718      	adds	r7, #24
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b08a      	sub	sp, #40	; 0x28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
 800a6bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d109      	bne.n	800a6dc <xTimerGenericCommand+0x2c>
 800a6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6cc:	f383 8811 	msr	BASEPRI, r3
 800a6d0:	f3bf 8f6f 	isb	sy
 800a6d4:	f3bf 8f4f 	dsb	sy
 800a6d8:	623b      	str	r3, [r7, #32]
 800a6da:	e7fe      	b.n	800a6da <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a6dc:	4b19      	ldr	r3, [pc, #100]	; (800a744 <xTimerGenericCommand+0x94>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d02a      	beq.n	800a73a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2b05      	cmp	r3, #5
 800a6f4:	dc18      	bgt.n	800a728 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a6f6:	f7ff fe4b 	bl	800a390 <xTaskGetSchedulerState>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d109      	bne.n	800a714 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a700:	4b10      	ldr	r3, [pc, #64]	; (800a744 <xTimerGenericCommand+0x94>)
 800a702:	6818      	ldr	r0, [r3, #0]
 800a704:	f107 0110 	add.w	r1, r7, #16
 800a708:	2300      	movs	r3, #0
 800a70a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a70c:	f7fe fa92 	bl	8008c34 <xQueueGenericSend>
 800a710:	6278      	str	r0, [r7, #36]	; 0x24
 800a712:	e012      	b.n	800a73a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a714:	4b0b      	ldr	r3, [pc, #44]	; (800a744 <xTimerGenericCommand+0x94>)
 800a716:	6818      	ldr	r0, [r3, #0]
 800a718:	f107 0110 	add.w	r1, r7, #16
 800a71c:	2300      	movs	r3, #0
 800a71e:	2200      	movs	r2, #0
 800a720:	f7fe fa88 	bl	8008c34 <xQueueGenericSend>
 800a724:	6278      	str	r0, [r7, #36]	; 0x24
 800a726:	e008      	b.n	800a73a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a728:	4b06      	ldr	r3, [pc, #24]	; (800a744 <xTimerGenericCommand+0x94>)
 800a72a:	6818      	ldr	r0, [r3, #0]
 800a72c:	f107 0110 	add.w	r1, r7, #16
 800a730:	2300      	movs	r3, #0
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	f7fe fb78 	bl	8008e28 <xQueueGenericSendFromISR>
 800a738:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3728      	adds	r7, #40	; 0x28
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	20000c2c 	.word	0x20000c2c

0800a748 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b088      	sub	sp, #32
 800a74c:	af02      	add	r7, sp, #8
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a752:	4b1c      	ldr	r3, [pc, #112]	; (800a7c4 <prvProcessExpiredTimer+0x7c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	3304      	adds	r3, #4
 800a760:	4618      	mov	r0, r3
 800a762:	f7fe f903 	bl	800896c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d121      	bne.n	800a7b2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	699a      	ldr	r2, [r3, #24]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	18d1      	adds	r1, r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	6978      	ldr	r0, [r7, #20]
 800a77c:	f000 f8ca 	bl	800a914 <prvInsertTimerInActiveList>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d015      	beq.n	800a7b2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a786:	2300      	movs	r3, #0
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	2300      	movs	r3, #0
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	2100      	movs	r1, #0
 800a790:	6978      	ldr	r0, [r7, #20]
 800a792:	f7ff ff8d 	bl	800a6b0 <xTimerGenericCommand>
 800a796:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d109      	bne.n	800a7b2 <prvProcessExpiredTimer+0x6a>
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	60fb      	str	r3, [r7, #12]
 800a7b0:	e7fe      	b.n	800a7b0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b6:	6978      	ldr	r0, [r7, #20]
 800a7b8:	4798      	blx	r3
}
 800a7ba:	bf00      	nop
 800a7bc:	3718      	adds	r7, #24
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20000c24 	.word	0x20000c24

0800a7c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800a7d0:	f7f6 ffdc 	bl	800178c <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7d4:	f107 0308 	add.w	r3, r7, #8
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 f857 	bl	800a88c <prvGetNextExpireTime>
 800a7de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f000 f803 	bl	800a7f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a7ea:	f000 f8d5 	bl	800a998 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7ee:	e7f1      	b.n	800a7d4 <prvTimerTask+0xc>

0800a7f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a7fa:	f7ff f929 	bl	8009a50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7fe:	f107 0308 	add.w	r3, r7, #8
 800a802:	4618      	mov	r0, r3
 800a804:	f000 f866 	bl	800a8d4 <prvSampleTimeNow>
 800a808:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d130      	bne.n	800a872 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10a      	bne.n	800a82c <prvProcessTimerOrBlockTask+0x3c>
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d806      	bhi.n	800a82c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a81e:	f7ff f925 	bl	8009a6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a822:	68f9      	ldr	r1, [r7, #12]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f7ff ff8f 	bl	800a748 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a82a:	e024      	b.n	800a876 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d008      	beq.n	800a844 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a832:	4b13      	ldr	r3, [pc, #76]	; (800a880 <prvProcessTimerOrBlockTask+0x90>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	bf0c      	ite	eq
 800a83c:	2301      	moveq	r3, #1
 800a83e:	2300      	movne	r3, #0
 800a840:	b2db      	uxtb	r3, r3
 800a842:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a844:	4b0f      	ldr	r3, [pc, #60]	; (800a884 <prvProcessTimerOrBlockTask+0x94>)
 800a846:	6818      	ldr	r0, [r3, #0]
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	683a      	ldr	r2, [r7, #0]
 800a850:	4619      	mov	r1, r3
 800a852:	f7fe fd91 	bl	8009378 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a856:	f7ff f909 	bl	8009a6c <xTaskResumeAll>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10a      	bne.n	800a876 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a860:	4b09      	ldr	r3, [pc, #36]	; (800a888 <prvProcessTimerOrBlockTask+0x98>)
 800a862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a866:	601a      	str	r2, [r3, #0]
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	f3bf 8f6f 	isb	sy
}
 800a870:	e001      	b.n	800a876 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a872:	f7ff f8fb 	bl	8009a6c <xTaskResumeAll>
}
 800a876:	bf00      	nop
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	20000c28 	.word	0x20000c28
 800a884:	20000c2c 	.word	0x20000c2c
 800a888:	e000ed04 	.word	0xe000ed04

0800a88c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a894:	4b0e      	ldr	r3, [pc, #56]	; (800a8d0 <prvGetNextExpireTime+0x44>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	bf0c      	ite	eq
 800a89e:	2301      	moveq	r3, #1
 800a8a0:	2300      	movne	r3, #0
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d105      	bne.n	800a8be <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8b2:	4b07      	ldr	r3, [pc, #28]	; (800a8d0 <prvGetNextExpireTime+0x44>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	e001      	b.n	800a8c2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bc80      	pop	{r7}
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	20000c24 	.word	0x20000c24

0800a8d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a8dc:	f7ff f962 	bl	8009ba4 <xTaskGetTickCount>
 800a8e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a8e2:	4b0b      	ldr	r3, [pc, #44]	; (800a910 <prvSampleTimeNow+0x3c>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d205      	bcs.n	800a8f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a8ec:	f000 f904 	bl	800aaf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	e002      	b.n	800a8fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8fe:	4a04      	ldr	r2, [pc, #16]	; (800a910 <prvSampleTimeNow+0x3c>)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a904:	68fb      	ldr	r3, [r7, #12]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	20000c34 	.word	0x20000c34

0800a914 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b086      	sub	sp, #24
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
 800a920:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a922:	2300      	movs	r3, #0
 800a924:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a932:	68ba      	ldr	r2, [r7, #8]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	429a      	cmp	r2, r3
 800a938:	d812      	bhi.n	800a960 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	1ad2      	subs	r2, r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	429a      	cmp	r2, r3
 800a946:	d302      	bcc.n	800a94e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a948:	2301      	movs	r3, #1
 800a94a:	617b      	str	r3, [r7, #20]
 800a94c:	e01b      	b.n	800a986 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a94e:	4b10      	ldr	r3, [pc, #64]	; (800a990 <prvInsertTimerInActiveList+0x7c>)
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3304      	adds	r3, #4
 800a956:	4619      	mov	r1, r3
 800a958:	4610      	mov	r0, r2
 800a95a:	f7fd ffcf 	bl	80088fc <vListInsert>
 800a95e:	e012      	b.n	800a986 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	429a      	cmp	r2, r3
 800a966:	d206      	bcs.n	800a976 <prvInsertTimerInActiveList+0x62>
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d302      	bcc.n	800a976 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a970:	2301      	movs	r3, #1
 800a972:	617b      	str	r3, [r7, #20]
 800a974:	e007      	b.n	800a986 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a976:	4b07      	ldr	r3, [pc, #28]	; (800a994 <prvInsertTimerInActiveList+0x80>)
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3304      	adds	r3, #4
 800a97e:	4619      	mov	r1, r3
 800a980:	4610      	mov	r0, r2
 800a982:	f7fd ffbb 	bl	80088fc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a986:	697b      	ldr	r3, [r7, #20]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3718      	adds	r7, #24
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	20000c28 	.word	0x20000c28
 800a994:	20000c24 	.word	0x20000c24

0800a998 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08e      	sub	sp, #56	; 0x38
 800a99c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a99e:	e099      	b.n	800aad4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	da17      	bge.n	800a9d6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a9a6:	1d3b      	adds	r3, r7, #4
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d109      	bne.n	800a9c6 <prvProcessReceivedCommands+0x2e>
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	61fb      	str	r3, [r7, #28]
 800a9c4:	e7fe      	b.n	800a9c4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9cc:	6850      	ldr	r0, [r2, #4]
 800a9ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9d0:	6892      	ldr	r2, [r2, #8]
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	db7a      	blt.n	800aad2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	695b      	ldr	r3, [r3, #20]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d004      	beq.n	800a9f2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fd ffbd 	bl	800896c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9f2:	463b      	mov	r3, r7
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7ff ff6d 	bl	800a8d4 <prvSampleTimeNow>
 800a9fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b09      	cmp	r3, #9
 800aa00:	d868      	bhi.n	800aad4 <prvProcessReceivedCommands+0x13c>
 800aa02:	a201      	add	r2, pc, #4	; (adr r2, 800aa08 <prvProcessReceivedCommands+0x70>)
 800aa04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa08:	0800aa31 	.word	0x0800aa31
 800aa0c:	0800aa31 	.word	0x0800aa31
 800aa10:	0800aa31 	.word	0x0800aa31
 800aa14:	0800aad5 	.word	0x0800aad5
 800aa18:	0800aa8b 	.word	0x0800aa8b
 800aa1c:	0800aac1 	.word	0x0800aac1
 800aa20:	0800aa31 	.word	0x0800aa31
 800aa24:	0800aa31 	.word	0x0800aa31
 800aa28:	0800aad5 	.word	0x0800aad5
 800aa2c:	0800aa8b 	.word	0x0800aa8b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	18d1      	adds	r1, r2, r3
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa3e:	f7ff ff69 	bl	800a914 <prvInsertTimerInActiveList>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d045      	beq.n	800aad4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa4e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800aa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa52:	69db      	ldr	r3, [r3, #28]
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d13d      	bne.n	800aad4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	441a      	add	r2, r3
 800aa60:	2300      	movs	r3, #0
 800aa62:	9300      	str	r3, [sp, #0]
 800aa64:	2300      	movs	r3, #0
 800aa66:	2100      	movs	r1, #0
 800aa68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa6a:	f7ff fe21 	bl	800a6b0 <xTimerGenericCommand>
 800aa6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d12e      	bne.n	800aad4 <prvProcessReceivedCommands+0x13c>
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	61bb      	str	r3, [r7, #24]
 800aa88:	e7fe      	b.n	800aa88 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	699b      	ldr	r3, [r3, #24]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d109      	bne.n	800aaac <prvProcessReceivedCommands+0x114>
 800aa98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9c:	f383 8811 	msr	BASEPRI, r3
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	617b      	str	r3, [r7, #20]
 800aaaa:	e7fe      	b.n	800aaaa <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaae:	699a      	ldr	r2, [r3, #24]
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	18d1      	adds	r1, r2, r3
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaba:	f7ff ff2b 	bl	800a914 <prvInsertTimerInActiveList>
					break;
 800aabe:	e009      	b.n	800aad4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d104      	bne.n	800aad4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800aaca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aacc:	f000 fb78 	bl	800b1c0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aad0:	e000      	b.n	800aad4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aad2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aad4:	4b07      	ldr	r3, [pc, #28]	; (800aaf4 <prvProcessReceivedCommands+0x15c>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	1d39      	adds	r1, r7, #4
 800aada:	2200      	movs	r2, #0
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fe fa37 	bl	8008f50 <xQueueReceive>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f47f af5b 	bne.w	800a9a0 <prvProcessReceivedCommands+0x8>
	}
}
 800aaea:	bf00      	nop
 800aaec:	3730      	adds	r7, #48	; 0x30
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20000c2c 	.word	0x20000c2c

0800aaf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b088      	sub	sp, #32
 800aafc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aafe:	e044      	b.n	800ab8a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab00:	4b2b      	ldr	r3, [pc, #172]	; (800abb0 <prvSwitchTimerLists+0xb8>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab0a:	4b29      	ldr	r3, [pc, #164]	; (800abb0 <prvSwitchTimerLists+0xb8>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	3304      	adds	r3, #4
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fd ff27 	bl	800896c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	69db      	ldr	r3, [r3, #28]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d12d      	bne.n	800ab8a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	693a      	ldr	r2, [r7, #16]
 800ab34:	4413      	add	r3, r2
 800ab36:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d90e      	bls.n	800ab5e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab4c:	4b18      	ldr	r3, [pc, #96]	; (800abb0 <prvSwitchTimerLists+0xb8>)
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	3304      	adds	r3, #4
 800ab54:	4619      	mov	r1, r3
 800ab56:	4610      	mov	r0, r2
 800ab58:	f7fd fed0 	bl	80088fc <vListInsert>
 800ab5c:	e015      	b.n	800ab8a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab5e:	2300      	movs	r3, #0
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	2300      	movs	r3, #0
 800ab64:	693a      	ldr	r2, [r7, #16]
 800ab66:	2100      	movs	r1, #0
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f7ff fda1 	bl	800a6b0 <xTimerGenericCommand>
 800ab6e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d109      	bne.n	800ab8a <prvSwitchTimerLists+0x92>
 800ab76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	603b      	str	r3, [r7, #0]
 800ab88:	e7fe      	b.n	800ab88 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab8a:	4b09      	ldr	r3, [pc, #36]	; (800abb0 <prvSwitchTimerLists+0xb8>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1b5      	bne.n	800ab00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab94:	4b06      	ldr	r3, [pc, #24]	; (800abb0 <prvSwitchTimerLists+0xb8>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab9a:	4b06      	ldr	r3, [pc, #24]	; (800abb4 <prvSwitchTimerLists+0xbc>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a04      	ldr	r2, [pc, #16]	; (800abb0 <prvSwitchTimerLists+0xb8>)
 800aba0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aba2:	4a04      	ldr	r2, [pc, #16]	; (800abb4 <prvSwitchTimerLists+0xbc>)
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	6013      	str	r3, [r2, #0]
}
 800aba8:	bf00      	nop
 800abaa:	3718      	adds	r7, #24
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	20000c24 	.word	0x20000c24
 800abb4:	20000c28 	.word	0x20000c28

0800abb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800abbe:	f000 f943 	bl	800ae48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800abc2:	4b15      	ldr	r3, [pc, #84]	; (800ac18 <prvCheckForValidListAndQueue+0x60>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d120      	bne.n	800ac0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800abca:	4814      	ldr	r0, [pc, #80]	; (800ac1c <prvCheckForValidListAndQueue+0x64>)
 800abcc:	f7fd fe48 	bl	8008860 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800abd0:	4813      	ldr	r0, [pc, #76]	; (800ac20 <prvCheckForValidListAndQueue+0x68>)
 800abd2:	f7fd fe45 	bl	8008860 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800abd6:	4b13      	ldr	r3, [pc, #76]	; (800ac24 <prvCheckForValidListAndQueue+0x6c>)
 800abd8:	4a10      	ldr	r2, [pc, #64]	; (800ac1c <prvCheckForValidListAndQueue+0x64>)
 800abda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800abdc:	4b12      	ldr	r3, [pc, #72]	; (800ac28 <prvCheckForValidListAndQueue+0x70>)
 800abde:	4a10      	ldr	r2, [pc, #64]	; (800ac20 <prvCheckForValidListAndQueue+0x68>)
 800abe0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800abe2:	2300      	movs	r3, #0
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	4b11      	ldr	r3, [pc, #68]	; (800ac2c <prvCheckForValidListAndQueue+0x74>)
 800abe8:	4a11      	ldr	r2, [pc, #68]	; (800ac30 <prvCheckForValidListAndQueue+0x78>)
 800abea:	2110      	movs	r1, #16
 800abec:	200a      	movs	r0, #10
 800abee:	f7fd ff4f 	bl	8008a90 <xQueueGenericCreateStatic>
 800abf2:	4602      	mov	r2, r0
 800abf4:	4b08      	ldr	r3, [pc, #32]	; (800ac18 <prvCheckForValidListAndQueue+0x60>)
 800abf6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800abf8:	4b07      	ldr	r3, [pc, #28]	; (800ac18 <prvCheckForValidListAndQueue+0x60>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d005      	beq.n	800ac0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac00:	4b05      	ldr	r3, [pc, #20]	; (800ac18 <prvCheckForValidListAndQueue+0x60>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	490b      	ldr	r1, [pc, #44]	; (800ac34 <prvCheckForValidListAndQueue+0x7c>)
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fe fb8e 	bl	8009328 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac0c:	f000 f94a 	bl	800aea4 <vPortExitCritical>
}
 800ac10:	bf00      	nop
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	20000c2c 	.word	0x20000c2c
 800ac1c:	20000bfc 	.word	0x20000bfc
 800ac20:	20000c10 	.word	0x20000c10
 800ac24:	20000c24 	.word	0x20000c24
 800ac28:	20000c28 	.word	0x20000c28
 800ac2c:	20000cd8 	.word	0x20000cd8
 800ac30:	20000c38 	.word	0x20000c38
 800ac34:	0800b710 	.word	0x0800b710

0800ac38 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b08a      	sub	sp, #40	; 0x28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
 800ac44:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800ac46:	f06f 0301 	mvn.w	r3, #1
 800ac4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac58:	4b06      	ldr	r3, [pc, #24]	; (800ac74 <xTimerPendFunctionCallFromISR+0x3c>)
 800ac5a:	6818      	ldr	r0, [r3, #0]
 800ac5c:	f107 0114 	add.w	r1, r7, #20
 800ac60:	2300      	movs	r3, #0
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	f7fe f8e0 	bl	8008e28 <xQueueGenericSendFromISR>
 800ac68:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3728      	adds	r7, #40	; 0x28
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	20000c2c 	.word	0x20000c2c

0800ac78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	3b04      	subs	r3, #4
 800ac88:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	3b04      	subs	r3, #4
 800ac96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	f023 0201 	bic.w	r2, r3, #1
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	3b04      	subs	r3, #4
 800aca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aca8:	4a08      	ldr	r2, [pc, #32]	; (800accc <pxPortInitialiseStack+0x54>)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	3b14      	subs	r3, #20
 800acb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3b20      	subs	r3, #32
 800acbe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acc0:	68fb      	ldr	r3, [r7, #12]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bc80      	pop	{r7}
 800acca:	4770      	bx	lr
 800accc:	0800acd1 	.word	0x0800acd1

0800acd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800acd6:	2300      	movs	r3, #0
 800acd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acda:	4b10      	ldr	r3, [pc, #64]	; (800ad1c <prvTaskExitError+0x4c>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace2:	d009      	beq.n	800acf8 <prvTaskExitError+0x28>
 800ace4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	60fb      	str	r3, [r7, #12]
 800acf6:	e7fe      	b.n	800acf6 <prvTaskExitError+0x26>
 800acf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad0a:	bf00      	nop
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d0fc      	beq.n	800ad0c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad12:	bf00      	nop
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bc80      	pop	{r7}
 800ad1a:	4770      	bx	lr
 800ad1c:	20000010 	.word	0x20000010

0800ad20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad20:	4b07      	ldr	r3, [pc, #28]	; (800ad40 <pxCurrentTCBConst2>)
 800ad22:	6819      	ldr	r1, [r3, #0]
 800ad24:	6808      	ldr	r0, [r1, #0]
 800ad26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ad2a:	f380 8809 	msr	PSP, r0
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f04f 0000 	mov.w	r0, #0
 800ad36:	f380 8811 	msr	BASEPRI, r0
 800ad3a:	f04e 0e0d 	orr.w	lr, lr, #13
 800ad3e:	4770      	bx	lr

0800ad40 <pxCurrentTCBConst2>:
 800ad40:	200006fc 	.word	0x200006fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop

0800ad48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800ad48:	4806      	ldr	r0, [pc, #24]	; (800ad64 <prvPortStartFirstTask+0x1c>)
 800ad4a:	6800      	ldr	r0, [r0, #0]
 800ad4c:	6800      	ldr	r0, [r0, #0]
 800ad4e:	f380 8808 	msr	MSP, r0
 800ad52:	b662      	cpsie	i
 800ad54:	b661      	cpsie	f
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	df00      	svc	0
 800ad60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad62:	bf00      	nop
 800ad64:	e000ed08 	.word	0xe000ed08

0800ad68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad6e:	4b31      	ldr	r3, [pc, #196]	; (800ae34 <xPortStartScheduler+0xcc>)
 800ad70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	22ff      	movs	r2, #255	; 0xff
 800ad7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad88:	78fb      	ldrb	r3, [r7, #3]
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad90:	b2da      	uxtb	r2, r3
 800ad92:	4b29      	ldr	r3, [pc, #164]	; (800ae38 <xPortStartScheduler+0xd0>)
 800ad94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad96:	4b29      	ldr	r3, [pc, #164]	; (800ae3c <xPortStartScheduler+0xd4>)
 800ad98:	2207      	movs	r2, #7
 800ad9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad9c:	e009      	b.n	800adb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ad9e:	4b27      	ldr	r3, [pc, #156]	; (800ae3c <xPortStartScheduler+0xd4>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3b01      	subs	r3, #1
 800ada4:	4a25      	ldr	r2, [pc, #148]	; (800ae3c <xPortStartScheduler+0xd4>)
 800ada6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ada8:	78fb      	ldrb	r3, [r7, #3]
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	005b      	lsls	r3, r3, #1
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adb2:	78fb      	ldrb	r3, [r7, #3]
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adba:	2b80      	cmp	r3, #128	; 0x80
 800adbc:	d0ef      	beq.n	800ad9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800adbe:	4b1f      	ldr	r3, [pc, #124]	; (800ae3c <xPortStartScheduler+0xd4>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f1c3 0307 	rsb	r3, r3, #7
 800adc6:	2b04      	cmp	r3, #4
 800adc8:	d009      	beq.n	800adde <xPortStartScheduler+0x76>
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	60bb      	str	r3, [r7, #8]
 800addc:	e7fe      	b.n	800addc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800adde:	4b17      	ldr	r3, [pc, #92]	; (800ae3c <xPortStartScheduler+0xd4>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	021b      	lsls	r3, r3, #8
 800ade4:	4a15      	ldr	r2, [pc, #84]	; (800ae3c <xPortStartScheduler+0xd4>)
 800ade6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ade8:	4b14      	ldr	r3, [pc, #80]	; (800ae3c <xPortStartScheduler+0xd4>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800adf0:	4a12      	ldr	r2, [pc, #72]	; (800ae3c <xPortStartScheduler+0xd4>)
 800adf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	b2da      	uxtb	r2, r3
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800adfc:	4b10      	ldr	r3, [pc, #64]	; (800ae40 <xPortStartScheduler+0xd8>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a0f      	ldr	r2, [pc, #60]	; (800ae40 <xPortStartScheduler+0xd8>)
 800ae02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae08:	4b0d      	ldr	r3, [pc, #52]	; (800ae40 <xPortStartScheduler+0xd8>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a0c      	ldr	r2, [pc, #48]	; (800ae40 <xPortStartScheduler+0xd8>)
 800ae0e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae14:	f000 f8b0 	bl	800af78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae18:	4b0a      	ldr	r3, [pc, #40]	; (800ae44 <xPortStartScheduler+0xdc>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae1e:	f7ff ff93 	bl	800ad48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae22:	f7fe ffa5 	bl	8009d70 <vTaskSwitchContext>
	prvTaskExitError();
 800ae26:	f7ff ff53 	bl	800acd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3710      	adds	r7, #16
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	e000e400 	.word	0xe000e400
 800ae38:	20000d28 	.word	0x20000d28
 800ae3c:	20000d2c 	.word	0x20000d2c
 800ae40:	e000ed20 	.word	0xe000ed20
 800ae44:	20000010 	.word	0x20000010

0800ae48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae60:	4b0e      	ldr	r3, [pc, #56]	; (800ae9c <vPortEnterCritical+0x54>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3301      	adds	r3, #1
 800ae66:	4a0d      	ldr	r2, [pc, #52]	; (800ae9c <vPortEnterCritical+0x54>)
 800ae68:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae6a:	4b0c      	ldr	r3, [pc, #48]	; (800ae9c <vPortEnterCritical+0x54>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d10e      	bne.n	800ae90 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae72:	4b0b      	ldr	r3, [pc, #44]	; (800aea0 <vPortEnterCritical+0x58>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d009      	beq.n	800ae90 <vPortEnterCritical+0x48>
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	603b      	str	r3, [r7, #0]
 800ae8e:	e7fe      	b.n	800ae8e <vPortEnterCritical+0x46>
	}
}
 800ae90:	bf00      	nop
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bc80      	pop	{r7}
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	20000010 	.word	0x20000010
 800aea0:	e000ed04 	.word	0xe000ed04

0800aea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aeaa:	4b10      	ldr	r3, [pc, #64]	; (800aeec <vPortExitCritical+0x48>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d109      	bne.n	800aec6 <vPortExitCritical+0x22>
 800aeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	607b      	str	r3, [r7, #4]
 800aec4:	e7fe      	b.n	800aec4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800aec6:	4b09      	ldr	r3, [pc, #36]	; (800aeec <vPortExitCritical+0x48>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3b01      	subs	r3, #1
 800aecc:	4a07      	ldr	r2, [pc, #28]	; (800aeec <vPortExitCritical+0x48>)
 800aece:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aed0:	4b06      	ldr	r3, [pc, #24]	; (800aeec <vPortExitCritical+0x48>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d104      	bne.n	800aee2 <vPortExitCritical+0x3e>
 800aed8:	2300      	movs	r3, #0
 800aeda:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800aee2:	bf00      	nop
 800aee4:	370c      	adds	r7, #12
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bc80      	pop	{r7}
 800aeea:	4770      	bx	lr
 800aeec:	20000010 	.word	0x20000010

0800aef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aef0:	f3ef 8009 	mrs	r0, PSP
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	4b0d      	ldr	r3, [pc, #52]	; (800af30 <pxCurrentTCBConst>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800af00:	6010      	str	r0, [r2, #0]
 800af02:	e92d 4008 	stmdb	sp!, {r3, lr}
 800af06:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af0a:	f380 8811 	msr	BASEPRI, r0
 800af0e:	f7fe ff2f 	bl	8009d70 <vTaskSwitchContext>
 800af12:	f04f 0000 	mov.w	r0, #0
 800af16:	f380 8811 	msr	BASEPRI, r0
 800af1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800af1e:	6819      	ldr	r1, [r3, #0]
 800af20:	6808      	ldr	r0, [r1, #0]
 800af22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800af26:	f380 8809 	msr	PSP, r0
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	4770      	bx	lr

0800af30 <pxCurrentTCBConst>:
 800af30:	200006fc 	.word	0x200006fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af34:	bf00      	nop
 800af36:	bf00      	nop

0800af38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
	__asm volatile
 800af3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af42:	f383 8811 	msr	BASEPRI, r3
 800af46:	f3bf 8f6f 	isb	sy
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af50:	f7fe fe48 	bl	8009be4 <xTaskIncrementTick>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d003      	beq.n	800af62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af5a:	4b06      	ldr	r3, [pc, #24]	; (800af74 <SysTick_Handler+0x3c>)
 800af5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	2300      	movs	r3, #0
 800af64:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800af6c:	bf00      	nop
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	e000ed04 	.word	0xe000ed04

0800af78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af78:	b480      	push	{r7}
 800af7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af7c:	4b0a      	ldr	r3, [pc, #40]	; (800afa8 <vPortSetupTimerInterrupt+0x30>)
 800af7e:	2200      	movs	r2, #0
 800af80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af82:	4b0a      	ldr	r3, [pc, #40]	; (800afac <vPortSetupTimerInterrupt+0x34>)
 800af84:	2200      	movs	r2, #0
 800af86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af88:	4b09      	ldr	r3, [pc, #36]	; (800afb0 <vPortSetupTimerInterrupt+0x38>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a09      	ldr	r2, [pc, #36]	; (800afb4 <vPortSetupTimerInterrupt+0x3c>)
 800af8e:	fba2 2303 	umull	r2, r3, r2, r3
 800af92:	099b      	lsrs	r3, r3, #6
 800af94:	4a08      	ldr	r2, [pc, #32]	; (800afb8 <vPortSetupTimerInterrupt+0x40>)
 800af96:	3b01      	subs	r3, #1
 800af98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af9a:	4b03      	ldr	r3, [pc, #12]	; (800afa8 <vPortSetupTimerInterrupt+0x30>)
 800af9c:	2207      	movs	r2, #7
 800af9e:	601a      	str	r2, [r3, #0]
}
 800afa0:	bf00      	nop
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bc80      	pop	{r7}
 800afa6:	4770      	bx	lr
 800afa8:	e000e010 	.word	0xe000e010
 800afac:	e000e018 	.word	0xe000e018
 800afb0:	20000004 	.word	0x20000004
 800afb4:	10624dd3 	.word	0x10624dd3
 800afb8:	e000e014 	.word	0xe000e014

0800afbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800afc2:	f3ef 8305 	mrs	r3, IPSR
 800afc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2b0f      	cmp	r3, #15
 800afcc:	d913      	bls.n	800aff6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afce:	4a15      	ldr	r2, [pc, #84]	; (800b024 <vPortValidateInterruptPriority+0x68>)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	4413      	add	r3, r2
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800afd8:	4b13      	ldr	r3, [pc, #76]	; (800b028 <vPortValidateInterruptPriority+0x6c>)
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	7afa      	ldrb	r2, [r7, #11]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d209      	bcs.n	800aff6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	607b      	str	r3, [r7, #4]
 800aff4:	e7fe      	b.n	800aff4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aff6:	4b0d      	ldr	r3, [pc, #52]	; (800b02c <vPortValidateInterruptPriority+0x70>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800affe:	4b0c      	ldr	r3, [pc, #48]	; (800b030 <vPortValidateInterruptPriority+0x74>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	429a      	cmp	r2, r3
 800b004:	d909      	bls.n	800b01a <vPortValidateInterruptPriority+0x5e>
 800b006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00a:	f383 8811 	msr	BASEPRI, r3
 800b00e:	f3bf 8f6f 	isb	sy
 800b012:	f3bf 8f4f 	dsb	sy
 800b016:	603b      	str	r3, [r7, #0]
 800b018:	e7fe      	b.n	800b018 <vPortValidateInterruptPriority+0x5c>
	}
 800b01a:	bf00      	nop
 800b01c:	3714      	adds	r7, #20
 800b01e:	46bd      	mov	sp, r7
 800b020:	bc80      	pop	{r7}
 800b022:	4770      	bx	lr
 800b024:	e000e3f0 	.word	0xe000e3f0
 800b028:	20000d28 	.word	0x20000d28
 800b02c:	e000ed0c 	.word	0xe000ed0c
 800b030:	20000d2c 	.word	0x20000d2c

0800b034 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b08a      	sub	sp, #40	; 0x28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b03c:	2300      	movs	r3, #0
 800b03e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b040:	f7fe fd06 	bl	8009a50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b044:	4b59      	ldr	r3, [pc, #356]	; (800b1ac <pvPortMalloc+0x178>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d101      	bne.n	800b050 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b04c:	f000 f910 	bl	800b270 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b050:	4b57      	ldr	r3, [pc, #348]	; (800b1b0 <pvPortMalloc+0x17c>)
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4013      	ands	r3, r2
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f040 808c 	bne.w	800b176 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d01c      	beq.n	800b09e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b064:	2208      	movs	r2, #8
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4413      	add	r3, r2
 800b06a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f003 0307 	and.w	r3, r3, #7
 800b072:	2b00      	cmp	r3, #0
 800b074:	d013      	beq.n	800b09e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f023 0307 	bic.w	r3, r3, #7
 800b07c:	3308      	adds	r3, #8
 800b07e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f003 0307 	and.w	r3, r3, #7
 800b086:	2b00      	cmp	r3, #0
 800b088:	d009      	beq.n	800b09e <pvPortMalloc+0x6a>
 800b08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	617b      	str	r3, [r7, #20]
 800b09c:	e7fe      	b.n	800b09c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d068      	beq.n	800b176 <pvPortMalloc+0x142>
 800b0a4:	4b43      	ldr	r3, [pc, #268]	; (800b1b4 <pvPortMalloc+0x180>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d863      	bhi.n	800b176 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b0ae:	4b42      	ldr	r3, [pc, #264]	; (800b1b8 <pvPortMalloc+0x184>)
 800b0b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b0b2:	4b41      	ldr	r3, [pc, #260]	; (800b1b8 <pvPortMalloc+0x184>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0b8:	e004      	b.n	800b0c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d903      	bls.n	800b0d6 <pvPortMalloc+0xa2>
 800b0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1f1      	bne.n	800b0ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0d6:	4b35      	ldr	r3, [pc, #212]	; (800b1ac <pvPortMalloc+0x178>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d04a      	beq.n	800b176 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2208      	movs	r2, #8
 800b0e6:	4413      	add	r3, r2
 800b0e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f4:	685a      	ldr	r2, [r3, #4]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	1ad2      	subs	r2, r2, r3
 800b0fa:	2308      	movs	r3, #8
 800b0fc:	005b      	lsls	r3, r3, #1
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d91e      	bls.n	800b140 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4413      	add	r3, r2
 800b108:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	f003 0307 	and.w	r3, r3, #7
 800b110:	2b00      	cmp	r3, #0
 800b112:	d009      	beq.n	800b128 <pvPortMalloc+0xf4>
 800b114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	613b      	str	r3, [r7, #16]
 800b126:	e7fe      	b.n	800b126 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	1ad2      	subs	r2, r2, r3
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b13a:	69b8      	ldr	r0, [r7, #24]
 800b13c:	f000 f8fa 	bl	800b334 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b140:	4b1c      	ldr	r3, [pc, #112]	; (800b1b4 <pvPortMalloc+0x180>)
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	4a1a      	ldr	r2, [pc, #104]	; (800b1b4 <pvPortMalloc+0x180>)
 800b14c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b14e:	4b19      	ldr	r3, [pc, #100]	; (800b1b4 <pvPortMalloc+0x180>)
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	4b1a      	ldr	r3, [pc, #104]	; (800b1bc <pvPortMalloc+0x188>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	429a      	cmp	r2, r3
 800b158:	d203      	bcs.n	800b162 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b15a:	4b16      	ldr	r3, [pc, #88]	; (800b1b4 <pvPortMalloc+0x180>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a17      	ldr	r2, [pc, #92]	; (800b1bc <pvPortMalloc+0x188>)
 800b160:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	685a      	ldr	r2, [r3, #4]
 800b166:	4b12      	ldr	r3, [pc, #72]	; (800b1b0 <pvPortMalloc+0x17c>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	431a      	orrs	r2, r3
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b172:	2200      	movs	r2, #0
 800b174:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b176:	f7fe fc79 	bl	8009a6c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d101      	bne.n	800b184 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b180:	f7f6 fafe 	bl	8001780 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	f003 0307 	and.w	r3, r3, #7
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d009      	beq.n	800b1a2 <pvPortMalloc+0x16e>
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	e7fe      	b.n	800b1a0 <pvPortMalloc+0x16c>
	return pvReturn;
 800b1a2:	69fb      	ldr	r3, [r7, #28]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3728      	adds	r7, #40	; 0x28
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	20003538 	.word	0x20003538
 800b1b0:	20003544 	.word	0x20003544
 800b1b4:	2000353c 	.word	0x2000353c
 800b1b8:	20003530 	.word	0x20003530
 800b1bc:	20003540 	.word	0x20003540

0800b1c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d046      	beq.n	800b260 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1d2:	2308      	movs	r3, #8
 800b1d4:	425b      	negs	r3, r3
 800b1d6:	697a      	ldr	r2, [r7, #20]
 800b1d8:	4413      	add	r3, r2
 800b1da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	685a      	ldr	r2, [r3, #4]
 800b1e4:	4b20      	ldr	r3, [pc, #128]	; (800b268 <vPortFree+0xa8>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d109      	bne.n	800b202 <vPortFree+0x42>
 800b1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	60fb      	str	r3, [r7, #12]
 800b200:	e7fe      	b.n	800b200 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d009      	beq.n	800b21e <vPortFree+0x5e>
 800b20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20e:	f383 8811 	msr	BASEPRI, r3
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	60bb      	str	r3, [r7, #8]
 800b21c:	e7fe      	b.n	800b21c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	685a      	ldr	r2, [r3, #4]
 800b222:	4b11      	ldr	r3, [pc, #68]	; (800b268 <vPortFree+0xa8>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4013      	ands	r3, r2
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d019      	beq.n	800b260 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d115      	bne.n	800b260 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	4b0b      	ldr	r3, [pc, #44]	; (800b268 <vPortFree+0xa8>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	43db      	mvns	r3, r3
 800b23e:	401a      	ands	r2, r3
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b244:	f7fe fc04 	bl	8009a50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	4b07      	ldr	r3, [pc, #28]	; (800b26c <vPortFree+0xac>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4413      	add	r3, r2
 800b252:	4a06      	ldr	r2, [pc, #24]	; (800b26c <vPortFree+0xac>)
 800b254:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b256:	6938      	ldr	r0, [r7, #16]
 800b258:	f000 f86c 	bl	800b334 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b25c:	f7fe fc06 	bl	8009a6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b260:	bf00      	nop
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	20003544 	.word	0x20003544
 800b26c:	2000353c 	.word	0x2000353c

0800b270 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b276:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b27a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b27c:	4b27      	ldr	r3, [pc, #156]	; (800b31c <prvHeapInit+0xac>)
 800b27e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f003 0307 	and.w	r3, r3, #7
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00c      	beq.n	800b2a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	3307      	adds	r3, #7
 800b28e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f023 0307 	bic.w	r3, r3, #7
 800b296:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	4a1f      	ldr	r2, [pc, #124]	; (800b31c <prvHeapInit+0xac>)
 800b2a0:	4413      	add	r3, r2
 800b2a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2a8:	4a1d      	ldr	r2, [pc, #116]	; (800b320 <prvHeapInit+0xb0>)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b2ae:	4b1c      	ldr	r3, [pc, #112]	; (800b320 <prvHeapInit+0xb0>)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	68ba      	ldr	r2, [r7, #8]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2bc:	2208      	movs	r2, #8
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	1a9b      	subs	r3, r3, r2
 800b2c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f023 0307 	bic.w	r3, r3, #7
 800b2ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	4a15      	ldr	r2, [pc, #84]	; (800b324 <prvHeapInit+0xb4>)
 800b2d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2d2:	4b14      	ldr	r3, [pc, #80]	; (800b324 <prvHeapInit+0xb4>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2da:	4b12      	ldr	r3, [pc, #72]	; (800b324 <prvHeapInit+0xb4>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	1ad2      	subs	r2, r2, r3
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b2f0:	4b0c      	ldr	r3, [pc, #48]	; (800b324 <prvHeapInit+0xb4>)
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	4a0a      	ldr	r2, [pc, #40]	; (800b328 <prvHeapInit+0xb8>)
 800b2fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	4a09      	ldr	r2, [pc, #36]	; (800b32c <prvHeapInit+0xbc>)
 800b306:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b308:	4b09      	ldr	r3, [pc, #36]	; (800b330 <prvHeapInit+0xc0>)
 800b30a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b30e:	601a      	str	r2, [r3, #0]
}
 800b310:	bf00      	nop
 800b312:	3714      	adds	r7, #20
 800b314:	46bd      	mov	sp, r7
 800b316:	bc80      	pop	{r7}
 800b318:	4770      	bx	lr
 800b31a:	bf00      	nop
 800b31c:	20000d30 	.word	0x20000d30
 800b320:	20003530 	.word	0x20003530
 800b324:	20003538 	.word	0x20003538
 800b328:	20003540 	.word	0x20003540
 800b32c:	2000353c 	.word	0x2000353c
 800b330:	20003544 	.word	0x20003544

0800b334 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b33c:	4b27      	ldr	r3, [pc, #156]	; (800b3dc <prvInsertBlockIntoFreeList+0xa8>)
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	e002      	b.n	800b348 <prvInsertBlockIntoFreeList+0x14>
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	60fb      	str	r3, [r7, #12]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d8f7      	bhi.n	800b342 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	4413      	add	r3, r2
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	429a      	cmp	r2, r3
 800b362:	d108      	bne.n	800b376 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	685a      	ldr	r2, [r3, #4]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	441a      	add	r2, r3
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	441a      	add	r2, r3
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	429a      	cmp	r2, r3
 800b388:	d118      	bne.n	800b3bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	4b14      	ldr	r3, [pc, #80]	; (800b3e0 <prvInsertBlockIntoFreeList+0xac>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	429a      	cmp	r2, r3
 800b394:	d00d      	beq.n	800b3b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	441a      	add	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	601a      	str	r2, [r3, #0]
 800b3b0:	e008      	b.n	800b3c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3b2:	4b0b      	ldr	r3, [pc, #44]	; (800b3e0 <prvInsertBlockIntoFreeList+0xac>)
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	601a      	str	r2, [r3, #0]
 800b3ba:	e003      	b.n	800b3c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d002      	beq.n	800b3d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3d2:	bf00      	nop
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bc80      	pop	{r7}
 800b3da:	4770      	bx	lr
 800b3dc:	20003530 	.word	0x20003530
 800b3e0:	20003538 	.word	0x20003538

0800b3e4 <__libc_init_array>:
 800b3e4:	b570      	push	{r4, r5, r6, lr}
 800b3e6:	2500      	movs	r5, #0
 800b3e8:	4e0c      	ldr	r6, [pc, #48]	; (800b41c <__libc_init_array+0x38>)
 800b3ea:	4c0d      	ldr	r4, [pc, #52]	; (800b420 <__libc_init_array+0x3c>)
 800b3ec:	1ba4      	subs	r4, r4, r6
 800b3ee:	10a4      	asrs	r4, r4, #2
 800b3f0:	42a5      	cmp	r5, r4
 800b3f2:	d109      	bne.n	800b408 <__libc_init_array+0x24>
 800b3f4:	f000 f82e 	bl	800b454 <_init>
 800b3f8:	2500      	movs	r5, #0
 800b3fa:	4e0a      	ldr	r6, [pc, #40]	; (800b424 <__libc_init_array+0x40>)
 800b3fc:	4c0a      	ldr	r4, [pc, #40]	; (800b428 <__libc_init_array+0x44>)
 800b3fe:	1ba4      	subs	r4, r4, r6
 800b400:	10a4      	asrs	r4, r4, #2
 800b402:	42a5      	cmp	r5, r4
 800b404:	d105      	bne.n	800b412 <__libc_init_array+0x2e>
 800b406:	bd70      	pop	{r4, r5, r6, pc}
 800b408:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b40c:	4798      	blx	r3
 800b40e:	3501      	adds	r5, #1
 800b410:	e7ee      	b.n	800b3f0 <__libc_init_array+0xc>
 800b412:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b416:	4798      	blx	r3
 800b418:	3501      	adds	r5, #1
 800b41a:	e7f2      	b.n	800b402 <__libc_init_array+0x1e>
 800b41c:	0800b804 	.word	0x0800b804
 800b420:	0800b804 	.word	0x0800b804
 800b424:	0800b804 	.word	0x0800b804
 800b428:	0800b808 	.word	0x0800b808

0800b42c <memcpy>:
 800b42c:	b510      	push	{r4, lr}
 800b42e:	1e43      	subs	r3, r0, #1
 800b430:	440a      	add	r2, r1
 800b432:	4291      	cmp	r1, r2
 800b434:	d100      	bne.n	800b438 <memcpy+0xc>
 800b436:	bd10      	pop	{r4, pc}
 800b438:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b43c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b440:	e7f7      	b.n	800b432 <memcpy+0x6>

0800b442 <memset>:
 800b442:	4603      	mov	r3, r0
 800b444:	4402      	add	r2, r0
 800b446:	4293      	cmp	r3, r2
 800b448:	d100      	bne.n	800b44c <memset+0xa>
 800b44a:	4770      	bx	lr
 800b44c:	f803 1b01 	strb.w	r1, [r3], #1
 800b450:	e7f9      	b.n	800b446 <memset+0x4>
	...

0800b454 <_init>:
 800b454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b456:	bf00      	nop
 800b458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b45a:	bc08      	pop	{r3}
 800b45c:	469e      	mov	lr, r3
 800b45e:	4770      	bx	lr

0800b460 <_fini>:
 800b460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b462:	bf00      	nop
 800b464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b466:	bc08      	pop	{r3}
 800b468:	469e      	mov	lr, r3
 800b46a:	4770      	bx	lr
