
Automotive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008574  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a44  08008a44  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008a44  08008a44  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a44  08008a44  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a44  08008a44  00018a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a48  08008a48  00018a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000379c  20000010  08008a5c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200037ac  08008a5c  000237ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027391  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004cb4  00000000  00000000  000473ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b8  00000000  00000000  0004c080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001668  00000000  00000000  0004d938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dccf  00000000  00000000  0004efa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c105  00000000  00000000  0006cc6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a9658  00000000  00000000  00088d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001323cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006318  00000000  00000000  00132448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	0800869c 	.word	0x0800869c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	0800869c 	.word	0x0800869c

08000180 <h_bridge_set_left_duty>:
	htim9.Instance->CCR2 = 0;
	htim3.Instance->CCR3 = 0;
	return true;
}

void h_bridge_set_left_duty(uint8_t percent) {
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
	if (percent > 100)
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	2b64      	cmp	r3, #100	; 0x64
 800018e:	d901      	bls.n	8000194 <h_bridge_set_left_duty+0x14>
		percent = 100;
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	71fb      	strb	r3, [r7, #7]

	if (percent < 1)
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d101      	bne.n	800019e <h_bridge_set_left_duty+0x1e>
		percent = 0;
 800019a:	2300      	movs	r3, #0
 800019c:	71fb      	strb	r3, [r7, #7]

	int value = percent * htim9.Init.Period / 100;
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	4a08      	ldr	r2, [pc, #32]	; (80001c4 <h_bridge_set_left_duty+0x44>)
 80001a2:	68d2      	ldr	r2, [r2, #12]
 80001a4:	fb02 f303 	mul.w	r3, r2, r3
 80001a8:	4a07      	ldr	r2, [pc, #28]	; (80001c8 <h_bridge_set_left_duty+0x48>)
 80001aa:	fba2 2303 	umull	r2, r3, r2, r3
 80001ae:	095b      	lsrs	r3, r3, #5
 80001b0:	60fb      	str	r3, [r7, #12]
	htim9.Instance->CCR2 = value;
 80001b2:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <h_bridge_set_left_duty+0x44>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	68fa      	ldr	r2, [r7, #12]
 80001b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80001ba:	bf00      	nop
 80001bc:	3714      	adds	r7, #20
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	200036b0 	.word	0x200036b0
 80001c8:	51eb851f 	.word	0x51eb851f

080001cc <h_bridge_set_right_duty>:

void h_bridge_set_right_duty(uint8_t percent) {
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
	if (percent > 100)
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	2b64      	cmp	r3, #100	; 0x64
 80001da:	d901      	bls.n	80001e0 <h_bridge_set_right_duty+0x14>
		percent = 100;
 80001dc:	2364      	movs	r3, #100	; 0x64
 80001de:	71fb      	strb	r3, [r7, #7]

	if (percent < 1)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d101      	bne.n	80001ea <h_bridge_set_right_duty+0x1e>
		percent = 0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	71fb      	strb	r3, [r7, #7]

	int value = percent * htim3.Init.Period / 100;
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	4a08      	ldr	r2, [pc, #32]	; (8000210 <h_bridge_set_right_duty+0x44>)
 80001ee:	68d2      	ldr	r2, [r2, #12]
 80001f0:	fb02 f303 	mul.w	r3, r2, r3
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <h_bridge_set_right_duty+0x48>)
 80001f6:	fba2 2303 	umull	r2, r3, r2, r3
 80001fa:	095b      	lsrs	r3, r3, #5
 80001fc:	60fb      	str	r3, [r7, #12]
	htim3.Instance->CCR3 = value;
 80001fe:	4b04      	ldr	r3, [pc, #16]	; (8000210 <h_bridge_set_right_duty+0x44>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	68fa      	ldr	r2, [r7, #12]
 8000204:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	20003674 	.word	0x20003674
 8000214:	51eb851f 	.word	0x51eb851f

08000218 <ble_receive_data>:
	}
	ble_turn_off_transmittion;
	return true;
}

bool ble_receive_data(char *pData) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	ble_turn_on_transmittion;
 8000220:	2200      	movs	r2, #0
 8000222:	2110      	movs	r1, #16
 8000224:	480e      	ldr	r0, [pc, #56]	; (8000260 <ble_receive_data+0x48>)
 8000226:	f002 fa6d 	bl	8002704 <HAL_GPIO_WritePin>
	if (HAL_UART_Receive(&huart3, (uint8_t*) pData, MAX_SIZE, 100)
 800022a:	2364      	movs	r3, #100	; 0x64
 800022c:	2220      	movs	r2, #32
 800022e:	6879      	ldr	r1, [r7, #4]
 8000230:	480c      	ldr	r0, [pc, #48]	; (8000264 <ble_receive_data+0x4c>)
 8000232:	f004 fe5f 	bl	8004ef4 <HAL_UART_Receive>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d006      	beq.n	800024a <ble_receive_data+0x32>
			!= HAL_OK) {
		ble_turn_off_transmittion;
 800023c:	2201      	movs	r2, #1
 800023e:	2110      	movs	r1, #16
 8000240:	4807      	ldr	r0, [pc, #28]	; (8000260 <ble_receive_data+0x48>)
 8000242:	f002 fa5f 	bl	8002704 <HAL_GPIO_WritePin>
		return false;
 8000246:	2300      	movs	r3, #0
 8000248:	e005      	b.n	8000256 <ble_receive_data+0x3e>
	}
	ble_turn_off_transmittion;
 800024a:	2201      	movs	r2, #1
 800024c:	2110      	movs	r1, #16
 800024e:	4804      	ldr	r0, [pc, #16]	; (8000260 <ble_receive_data+0x48>)
 8000250:	f002 fa58 	bl	8002704 <HAL_GPIO_WritePin>
	return true;
 8000254:	2301      	movs	r3, #1
}
 8000256:	4618      	mov	r0, r3
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40020800 	.word	0x40020800
 8000264:	20003728 	.word	0x20003728

08000268 <device_init>:

#include "device_init.h"
#include "stdint.h"


void device_init(void) {
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0

	uint16_t successCnt = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	80fb      	strh	r3, [r7, #6]
	uint16_t modsToInit = 0;
 8000272:	2300      	movs	r3, #0
 8000274:	80bb      	strh	r3, [r7, #4]

	for (uint16_t i = 0; i < /*mod_N*/mod_0; i++) {
 8000276:	2300      	movs	r3, #0
 8000278:	807b      	strh	r3, [r7, #2]
 800027a:	bf00      	nop
		}

		modsToInit++;
	}

	if (modsToInit != successCnt) {
 800027c:	88ba      	ldrh	r2, [r7, #4]
 800027e:	88fb      	ldrh	r3, [r7, #6]
 8000280:	429a      	cmp	r2, r3
 8000282:	d000      	beq.n	8000286 <device_init+0x1e>
		// some kind of error
		while (1)
 8000284:	e7fe      	b.n	8000284 <device_init+0x1c>
			; //TODO: call some error handler
	}

}
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr

08000290 <rt_init>:
TaskHandle_t rt_tasks[rt_task_N];
QueueHandle_t rt_queues[rt_queue_N];
EventGroupHandle_t rt_evgroups[rt_evgroup_N];
TimerHandle_t rt_timers[rt_timer_N];

void rt_init(void) {
 8000290:	b5b0      	push	{r4, r5, r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af02      	add	r7, sp, #8

	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 8000296:	2300      	movs	r3, #0
 8000298:	77fb      	strb	r3, [r7, #31]
 800029a:	e02c      	b.n	80002f6 <rt_init+0x66>
		rt_task_def_t const *def = rt_task_def + task;
 800029c:	7ffa      	ldrb	r2, [r7, #31]
 800029e:	4613      	mov	r3, r2
 80002a0:	009b      	lsls	r3, r3, #2
 80002a2:	4413      	add	r3, r2
 80002a4:	009b      	lsls	r3, r3, #2
 80002a6:	461a      	mov	r2, r3
 80002a8:	4b47      	ldr	r3, [pc, #284]	; (80003c8 <rt_init+0x138>)
 80002aa:	4413      	add	r3, r2
 80002ac:	607b      	str	r3, [r7, #4]
		TaskHandle_t *handle = rt_tasks + task;
 80002ae:	7ffb      	ldrb	r3, [r7, #31]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	4a46      	ldr	r2, [pc, #280]	; (80003cc <rt_init+0x13c>)
 80002b4:	4413      	add	r3, r2
 80002b6:	603b      	str	r3, [r7, #0]
		if (def->active) {
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	7c9b      	ldrb	r3, [r3, #18]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d014      	beq.n	80002ea <rt_init+0x5a>
			if (xTaskCreate(def->pvTaskCode, def->pcName, def->usStackDepth,
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	6818      	ldr	r0, [r3, #0]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	6859      	ldr	r1, [r3, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	8a1c      	ldrh	r4, [r3, #16]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	689d      	ldr	r5, [r3, #8]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	683a      	ldr	r2, [r7, #0]
 80002d6:	9201      	str	r2, [sp, #4]
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	462b      	mov	r3, r5
 80002dc:	4622      	mov	r2, r4
 80002de:	f006 f9fa 	bl	80066d6 <xTaskCreate>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d003      	beq.n	80002f0 <rt_init+0x60>
					def->pvParameters, def->uxPriority, handle) != pdPASS) {
//				error :-(
				while (1)
 80002e8:	e7fe      	b.n	80002e8 <rt_init+0x58>
					;
			}
		} else {
			*handle = 0;
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
	for (rt_task_t task = rt_task_0; task < rt_task_N; task++) {
 80002f0:	7ffb      	ldrb	r3, [r7, #31]
 80002f2:	3301      	adds	r3, #1
 80002f4:	77fb      	strb	r3, [r7, #31]
 80002f6:	7ffb      	ldrb	r3, [r7, #31]
 80002f8:	2b04      	cmp	r3, #4
 80002fa:	d9cf      	bls.n	800029c <rt_init+0xc>
		}
	}

	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 80002fc:	2300      	movs	r3, #0
 80002fe:	77bb      	strb	r3, [r7, #30]
 8000300:	e01c      	b.n	800033c <rt_init+0xac>
		rt_queue_def_t const *def = rt_queue_def + queue;
 8000302:	7fbb      	ldrb	r3, [r7, #30]
 8000304:	011b      	lsls	r3, r3, #4
 8000306:	4a32      	ldr	r2, [pc, #200]	; (80003d0 <rt_init+0x140>)
 8000308:	4413      	add	r3, r2
 800030a:	60fb      	str	r3, [r7, #12]
		QueueHandle_t *handle = rt_queues + queue;
 800030c:	7fbb      	ldrb	r3, [r7, #30]
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	4a30      	ldr	r2, [pc, #192]	; (80003d4 <rt_init+0x144>)
 8000312:	4413      	add	r3, r2
 8000314:	60bb      	str	r3, [r7, #8]

		if ((*handle = xQueueCreate(def->uxQueueLength, def->uxItemSize))
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	6818      	ldr	r0, [r3, #0]
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	2200      	movs	r2, #0
 8000320:	4619      	mov	r1, r3
 8000322:	f005 fd49 	bl	8005db8 <xQueueGenericCreate>
 8000326:	4602      	mov	r2, r0
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d100      	bne.n	8000336 <rt_init+0xa6>
				== 0) {
			while (1)
 8000334:	e7fe      	b.n	8000334 <rt_init+0xa4>
	for (rt_queue_t queue = rt_queue_0; queue < rt_queue_N; queue++) {
 8000336:	7fbb      	ldrb	r3, [r7, #30]
 8000338:	3301      	adds	r3, #1
 800033a:	77bb      	strb	r3, [r7, #30]
 800033c:	7fbb      	ldrb	r3, [r7, #30]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d9df      	bls.n	8000302 <rt_init+0x72>
				;
		}
	}

	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000342:	2300      	movs	r3, #0
 8000344:	777b      	strb	r3, [r7, #29]
 8000346:	e020      	b.n	800038a <rt_init+0xfa>
		rt_timer_def_t const *def = rt_timer_def + timer;
 8000348:	7f7b      	ldrb	r3, [r7, #29]
 800034a:	011b      	lsls	r3, r3, #4
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <rt_init+0x148>)
 800034e:	4413      	add	r3, r2
 8000350:	617b      	str	r3, [r7, #20]
		TimerHandle_t *handle = rt_timers + timer;
 8000352:	7f7b      	ldrb	r3, [r7, #29]
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	4a21      	ldr	r2, [pc, #132]	; (80003dc <rt_init+0x14c>)
 8000358:	4413      	add	r3, r2
 800035a:	613b      	str	r3, [r7, #16]

		if ((*handle = xTimerCreate(def->pcTimerName, def->xTimerPeriodInTicks,
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	6818      	ldr	r0, [r3, #0]
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	6859      	ldr	r1, [r3, #4]
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	689a      	ldr	r2, [r3, #8]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	2300      	movs	r3, #0
 8000370:	f007 fa5c 	bl	800782c <xTimerCreate>
 8000374:	4602      	mov	r2, r0
 8000376:	693b      	ldr	r3, [r7, #16]
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d100      	bne.n	8000384 <rt_init+0xf4>
				def->uxAutoReload, NULL, def->pxCallbackFunction)) == 0)
			while (1)
 8000382:	e7fe      	b.n	8000382 <rt_init+0xf2>
	for (rt_timer_t timer = rt_timer_0; timer < rt_timer_N; timer++) {
 8000384:	7f7b      	ldrb	r3, [r7, #29]
 8000386:	3301      	adds	r3, #1
 8000388:	777b      	strb	r3, [r7, #29]
 800038a:	7f7b      	ldrb	r3, [r7, #29]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d9db      	bls.n	8000348 <rt_init+0xb8>
				;
	}

	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 8000390:	2300      	movs	r3, #0
 8000392:	773b      	strb	r3, [r7, #28]
 8000394:	e011      	b.n	80003ba <rt_init+0x12a>
			evgroup++) {
		EventGroupHandle_t *handle = rt_evgroups + evgroup;
 8000396:	7f3b      	ldrb	r3, [r7, #28]
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	4a11      	ldr	r2, [pc, #68]	; (80003e0 <rt_init+0x150>)
 800039c:	4413      	add	r3, r2
 800039e:	61bb      	str	r3, [r7, #24]

		if ((*handle = xEventGroupCreate()) == 0) {
 80003a0:	f005 f9d0 	bl	8005744 <xEventGroupCreate>
 80003a4:	4602      	mov	r2, r0
 80003a6:	69bb      	ldr	r3, [r7, #24]
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	69bb      	ldr	r3, [r7, #24]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d100      	bne.n	80003b4 <rt_init+0x124>
			while (1)
 80003b2:	e7fe      	b.n	80003b2 <rt_init+0x122>
			evgroup++) {
 80003b4:	7f3b      	ldrb	r3, [r7, #28]
 80003b6:	3301      	adds	r3, #1
 80003b8:	773b      	strb	r3, [r7, #28]
	for (rt_evgroup_t evgroup = rt_evgroup_0; evgroup < rt_evgroup_N;
 80003ba:	7f3b      	ldrb	r3, [r7, #28]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d9ea      	bls.n	8000396 <rt_init+0x106>
				;
		}
	}

}
 80003c0:	bf00      	nop
 80003c2:	3720      	adds	r7, #32
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bdb0      	pop	{r4, r5, r7, pc}
 80003c8:	08008958 	.word	0x08008958
 80003cc:	2000355c 	.word	0x2000355c
 80003d0:	080089bc 	.word	0x080089bc
 80003d4:	20003584 	.word	0x20003584
 80003d8:	080089dc 	.word	0x080089dc
 80003dc:	20003570 	.word	0x20003570
 80003e0:	20003578 	.word	0x20003578

080003e4 <rt_evbitwait_any>:

uint32_t rt_evbitwait_any(rt_evgroup_t Ev) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af02      	add	r7, sp, #8
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	4a09      	ldr	r2, [pc, #36]	; (8000418 <rt_evbitwait_any+0x34>)
 80003f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f6:	60fb      	str	r3, [r7, #12]

	return xEventGroupWaitBits(Evh, 0x00FFFFFFu, pdTRUE, pdFALSE, portMAX_DELAY);
 80003f8:	f04f 33ff 	mov.w	r3, #4294967295
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2300      	movs	r3, #0
 8000400:	2201      	movs	r2, #1
 8000402:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000406:	68f8      	ldr	r0, [r7, #12]
 8000408:	f005 f9b6 	bl	8005778 <xEventGroupWaitBits>
 800040c:	4603      	mov	r3, r0
}
 800040e:	4618      	mov	r0, r3
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20003578 	.word	0x20003578

0800041c <rt_evbit_set>:

void rt_evbit_set(rt_evgroup_t Ev, uint32_t bit) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	6039      	str	r1, [r7, #0]
 8000426:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 8000428:	2201      	movs	r2, #1
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	fa02 f303 	lsl.w	r3, r2, r3
 8000430:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	4a05      	ldr	r2, [pc, #20]	; (800044c <rt_evbit_set+0x30>)
 8000436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800043a:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBits(Evh, msk);
 800043c:	68f9      	ldr	r1, [r7, #12]
 800043e:	68b8      	ldr	r0, [r7, #8]
 8000440:	f005 fa64 	bl	800590c <xEventGroupSetBits>
}
 8000444:	bf00      	nop
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20003578 	.word	0x20003578

08000450 <rt_evbit_set_from_ISR>:

void rt_evbit_set_from_ISR(rt_evgroup_t Ev, uint32_t bit) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	6039      	str	r1, [r7, #0]
 800045a:	71fb      	strb	r3, [r7, #7]
	EventBits_t msk = (1u << bit);
 800045c:	2201      	movs	r2, #1
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	fa02 f303 	lsl.w	r3, r2, r3
 8000464:	60fb      	str	r3, [r7, #12]
	EventGroupHandle_t Evh = rt_evgroups[Ev];
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	4a06      	ldr	r2, [pc, #24]	; (8000484 <rt_evbit_set_from_ISR+0x34>)
 800046a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800046e:	60bb      	str	r3, [r7, #8]
	xEventGroupSetBitsFromISR(Evh, msk, pdFALSE);
 8000470:	2200      	movs	r2, #0
 8000472:	68f9      	ldr	r1, [r7, #12]
 8000474:	68b8      	ldr	r0, [r7, #8]
 8000476:	f005 fb01 	bl	8005a7c <xEventGroupSetBitsFromISR>
	portYIELD_FROM_ISR(pdFALSE);
}
 800047a:	bf00      	nop
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20003578 	.word	0x20003578

08000488 <rt_enqueue_ISR>:
	}

	return false;
}

bool rt_enqueue_ISR(rt_queue_t Q, void const *bf) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	6039      	str	r1, [r7, #0]
 8000492:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <rt_enqueue_ISR+0x3c>)
 8000498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800049c:	60fb      	str	r3, [r7, #12]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 800049e:	2300      	movs	r3, #0
 80004a0:	60bb      	str	r3, [r7, #8]
	if (xQueueSendToBackFromISR(Qh, bf, &xHigherPriorityTaskWoken) == pdPASS) {
 80004a2:	f107 0208 	add.w	r2, r7, #8
 80004a6:	2300      	movs	r3, #0
 80004a8:	6839      	ldr	r1, [r7, #0]
 80004aa:	68f8      	ldr	r0, [r7, #12]
 80004ac:	f005 fdde 	bl	800606c <xQueueGenericSendFromISR>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d101      	bne.n	80004ba <rt_enqueue_ISR+0x32>
		return true;
 80004b6:	2301      	movs	r3, #1
 80004b8:	e000      	b.n	80004bc <rt_enqueue_ISR+0x34>
	}

	return false;
 80004ba:	2300      	movs	r3, #0
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20003584 	.word	0x20003584

080004c8 <rt_dequeue>:

bool rt_dequeue(rt_queue_t Q, void *bf) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
//  assert(Q < rt_queue_N);

	QueueHandle_t Qh = rt_queues[Q];
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	4a0d      	ldr	r2, [pc, #52]	; (800050c <rt_dequeue+0x44>)
 80004d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004dc:	60fb      	str	r3, [r7, #12]
	TickType_t to = rt_queue_def[Q].timeout_deq;
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <rt_dequeue+0x48>)
 80004e2:	011b      	lsls	r3, r3, #4
 80004e4:	4413      	add	r3, r2
 80004e6:	330c      	adds	r3, #12
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	60bb      	str	r3, [r7, #8]

	if (xQueueReceive(Qh, bf, to) == pdPASS) {
 80004ec:	68ba      	ldr	r2, [r7, #8]
 80004ee:	6839      	ldr	r1, [r7, #0]
 80004f0:	68f8      	ldr	r0, [r7, #12]
 80004f2:	f005 fe4f 	bl	8006194 <xQueueReceive>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d101      	bne.n	8000500 <rt_dequeue+0x38>
		return true;
 80004fc:	2301      	movs	r3, #1
 80004fe:	e000      	b.n	8000502 <rt_dequeue+0x3a>
	}

	return false;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20003584 	.word	0x20003584
 8000510:	080089bc 	.word	0x080089bc

08000514 <task_ble>:
#include "bluetooth_le.h"
#include "state_machine.h"
#include <stdio.h>
extern char ble_pData[MAX_SIZE];
// working all the time, checking if something is received or sending data to android device
void task_ble(void *pvParameters) {
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

//	int i = 0;
//	const TickType_t xDelay1000ms = pdMS_TO_TICKS(5000);
	bool status;
	xQueueBleData receivedBleData = { 0 };
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2221      	movs	r2, #33	; 0x21
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f008 f89c 	bl	8008662 <memset>
	for (;;) {

//		vTaskDelay(xDelay1000ms);

		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	4619      	mov	r1, r3
 8000530:	2000      	movs	r0, #0
 8000532:	f7ff ffc9 	bl	80004c8 <rt_dequeue>
 8000536:	4603      	mov	r3, r0
 8000538:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if (status) {
 800053c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f2      	beq.n	800052a <task_ble+0x16>
			if (receivedBleData.info == ble_received) {
 8000544:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000548:	2b00      	cmp	r3, #0
 800054a:	d17a      	bne.n	8000642 <task_ble+0x12e>
				memcpy(ble_pData, receivedBleData.value, MAX_SIZE);
 800054c:	4b3e      	ldr	r3, [pc, #248]	; (8000648 <task_ble+0x134>)
 800054e:	461d      	mov	r5, r3
 8000550:	f107 040c 	add.w	r4, r7, #12
 8000554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000556:	6028      	str	r0, [r5, #0]
 8000558:	6069      	str	r1, [r5, #4]
 800055a:	60aa      	str	r2, [r5, #8]
 800055c:	60eb      	str	r3, [r5, #12]
 800055e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000560:	6128      	str	r0, [r5, #16]
 8000562:	6169      	str	r1, [r5, #20]
 8000564:	61aa      	str	r2, [r5, #24]
 8000566:	61eb      	str	r3, [r5, #28]

				switch (ble_pData[0]) {
 8000568:	4b37      	ldr	r3, [pc, #220]	; (8000648 <task_ble+0x134>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	3b01      	subs	r3, #1
 800056e:	2b1f      	cmp	r3, #31
 8000570:	d860      	bhi.n	8000634 <task_ble+0x120>
 8000572:	a201      	add	r2, pc, #4	; (adr r2, 8000578 <task_ble+0x64>)
 8000574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000578:	080005f9 	.word	0x080005f9
 800057c:	08000603 	.word	0x08000603
 8000580:	08000635 	.word	0x08000635
 8000584:	0800060d 	.word	0x0800060d
 8000588:	08000635 	.word	0x08000635
 800058c:	08000635 	.word	0x08000635
 8000590:	08000635 	.word	0x08000635
 8000594:	08000617 	.word	0x08000617
 8000598:	08000635 	.word	0x08000635
 800059c:	08000635 	.word	0x08000635
 80005a0:	08000635 	.word	0x08000635
 80005a4:	08000635 	.word	0x08000635
 80005a8:	08000635 	.word	0x08000635
 80005ac:	08000635 	.word	0x08000635
 80005b0:	08000635 	.word	0x08000635
 80005b4:	08000621 	.word	0x08000621
 80005b8:	08000635 	.word	0x08000635
 80005bc:	08000635 	.word	0x08000635
 80005c0:	08000635 	.word	0x08000635
 80005c4:	08000635 	.word	0x08000635
 80005c8:	08000635 	.word	0x08000635
 80005cc:	08000635 	.word	0x08000635
 80005d0:	08000635 	.word	0x08000635
 80005d4:	08000635 	.word	0x08000635
 80005d8:	08000635 	.word	0x08000635
 80005dc:	08000635 	.word	0x08000635
 80005e0:	08000635 	.word	0x08000635
 80005e4:	08000635 	.word	0x08000635
 80005e8:	08000635 	.word	0x08000635
 80005ec:	08000635 	.word	0x08000635
 80005f0:	08000635 	.word	0x08000635
 80005f4:	0800062b 	.word	0x0800062b
				case BLE_RECEIVED_DO_NOTHING:
					rt_evbit_set(rt_evgroup_state_machine,
 80005f8:	2101      	movs	r1, #1
 80005fa:	2001      	movs	r0, #1
 80005fc:	f7ff ff0e 	bl	800041c <rt_evbit_set>
							evgroup_state_m_do_nothing);
					break;
 8000600:	e020      	b.n	8000644 <task_ble+0x130>
				case BLE_RECEIVED_AUTO_MANUAL:
					rt_evbit_set(rt_evgroup_state_machine,
 8000602:	2102      	movs	r1, #2
 8000604:	2001      	movs	r0, #1
 8000606:	f7ff ff09 	bl	800041c <rt_evbit_set>
							evgroup_state_m_auto_manual);
					break;
 800060a:	e01b      	b.n	8000644 <task_ble+0x130>
				case BLE_RECEIVED_RIGHT:
					rt_evbit_set(rt_evgroup_state_machine,
 800060c:	2104      	movs	r1, #4
 800060e:	2001      	movs	r0, #1
 8000610:	f7ff ff04 	bl	800041c <rt_evbit_set>
							evgroup_state_m_right);
					break;
 8000614:	e016      	b.n	8000644 <task_ble+0x130>
				case BLE_RECEIVED_FORWARD:
					rt_evbit_set(rt_evgroup_state_machine,
 8000616:	2108      	movs	r1, #8
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff feff 	bl	800041c <rt_evbit_set>
							evgroup_state_m_forward);
					break;
 800061e:	e011      	b.n	8000644 <task_ble+0x130>
				case BLE_RECEIVED_LEFT:
					rt_evbit_set(rt_evgroup_state_machine,
 8000620:	2110      	movs	r1, #16
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff fefa 	bl	800041c <rt_evbit_set>
							evgroup_state_m_left);
					break;
 8000628:	e00c      	b.n	8000644 <task_ble+0x130>
				case BLE_RECEIVED_BACK:
					rt_evbit_set(rt_evgroup_state_machine,
 800062a:	2120      	movs	r1, #32
 800062c:	2001      	movs	r0, #1
 800062e:	f7ff fef5 	bl	800041c <rt_evbit_set>
							evgroup_state_m_back);
					break;
 8000632:	e007      	b.n	8000644 <task_ble+0x130>
				default:
					memset(ble_pData, 0, MAX_SIZE);
 8000634:	2220      	movs	r2, #32
 8000636:	2100      	movs	r1, #0
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <task_ble+0x134>)
 800063a:	f008 f812 	bl	8008662 <memset>
					break;
 800063e:	bf00      	nop
 8000640:	e000      	b.n	8000644 <task_ble+0x130>
				}

			}
 8000642:	bf00      	nop
		status = rt_dequeue(rt_queue_ble, &receivedBleData);
 8000644:	e771      	b.n	800052a <task_ble+0x16>
 8000646:	bf00      	nop
 8000648:	2000353c 	.word	0x2000353c

0800064c <task_eyes>:
 *      Author: Arkadiusz
 */

//#include "task_eyes.h"

void task_eyes(void *pvParameters) {
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 8000654:	e7fe      	b.n	8000654 <task_eyes+0x8>

08000656 <task_memory>:
 *      Author: Arkadiusz
 */

//#include "task_memory.h"

void task_memory(void *pvParameters) {
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	for (;;) {
 800065e:	e7fe      	b.n	800065e <task_memory+0x8>

08000660 <HAL_GPIO_EXTI_Callback>:
bool ultrasound_was = false;
bool ultrasound_done = false;
extern char ble_pData[MAX_SIZE];

// interrupt pin callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
//	IRQ_ULTRASOUND_ECHO_Pin
	if (GPIO_Pin & IRQ_ULTRASOUND_ECHO_Pin) {
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	2b00      	cmp	r3, #0
 8000672:	d01e      	beq.n	80006b2 <HAL_GPIO_EXTI_Callback+0x52>

		if (ultrasound_was == false) {
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	f083 0301 	eor.w	r3, r3, #1
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d008      	beq.n	8000694 <HAL_GPIO_EXTI_Callback+0x34>
			ultrasound_time = HAL_GetTick();
 8000682:	f000 ff77 	bl	8001574 <HAL_GetTick>
 8000686:	4602      	mov	r2, r0
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <HAL_GPIO_EXTI_Callback+0x9c>)
 800068a:	601a      	str	r2, [r3, #0]
			ultrasound_was = true;
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x98>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
 8000692:	e00e      	b.n	80006b2 <HAL_GPIO_EXTI_Callback+0x52>
		} else {
			ultrasound_time = HAL_GetTick() - ultrasound_time;
 8000694:	f000 ff6e 	bl	8001574 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_GPIO_EXTI_Callback+0x9c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	4a16      	ldr	r2, [pc, #88]	; (80006fc <HAL_GPIO_EXTI_Callback+0x9c>)
 80006a2:	6013      	str	r3, [r2, #0]
			ultrasound_was = false;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
			rt_evbit_set_from_ISR(rt_evgroup_sensors,
 80006aa:	2100      	movs	r1, #0
 80006ac:	2000      	movs	r0, #0
 80006ae:	f7ff fecf 	bl	8000450 <rt_evbit_set_from_ISR>
//			ultrasound_done = true;
		}
	}

//	BLE INTERRUPT -> SOMETHING IS RECEIVED
	if (GPIO_Pin & IRQ_BLE_Pin) {
 80006b2:	88fb      	ldrh	r3, [r7, #6]
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d019      	beq.n	80006f0 <HAL_GPIO_EXTI_Callback+0x90>
//		rt_evbit_set_from_ISR(rt_evgroup_ble, evgroup_ble_evbit_received);
		ble_receive_data(ble_pData);
 80006bc:	4810      	ldr	r0, [pc, #64]	; (8000700 <HAL_GPIO_EXTI_Callback+0xa0>)
 80006be:	f7ff fdab 	bl	8000218 <ble_receive_data>
		xQueueBleData ble_queue = { 0 };
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2221      	movs	r2, #33	; 0x21
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f007 ffc9 	bl	8008662 <memset>
		strncpy(ble_queue.value, ble_pData, MAX_SIZE);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2220      	movs	r2, #32
 80006d6:	490a      	ldr	r1, [pc, #40]	; (8000700 <HAL_GPIO_EXTI_Callback+0xa0>)
 80006d8:	4618      	mov	r0, r3
 80006da:	f007 ffca 	bl	8008672 <strncpy>
		ble_queue.info = ble_received;
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		rt_enqueue_ISR(rt_queue_ble, &ble_queue);
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	4619      	mov	r1, r3
 80006ea:	2000      	movs	r0, #0
 80006ec:	f7ff fecc 	bl	8000488 <rt_enqueue_ISR>
//		memset(ble_pData, 0, MAX_SIZE);
	}
}
 80006f0:	bf00      	nop
 80006f2:	3730      	adds	r7, #48	; 0x30
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000030 	.word	0x20000030
 80006fc:	2000002c 	.word	0x2000002c
 8000700:	2000353c 	.word	0x2000353c

08000704 <task_sensors>:

void task_sensors(void *pvParameters) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	(void*) pvParameters;

	uint32_t evgroup = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
		// ultrasound measurment
//		ultrasound_trig();
//		if ( ultrasound_done ) {
//		}

		evgroup = rt_evbitwait_any(rt_evgroup_sensors);
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fe67 	bl	80003e4 <rt_evbitwait_any>
 8000716:	60f8      	str	r0, [r7, #12]

		if (evgroup & (1 << evgroup_ultrasound_evbit_echo)) {
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	2b00      	cmp	r3, #0
 8000720:	d0f6      	beq.n	8000710 <task_sensors+0xc>
			// obsluga sensora ultradzwiekowego
			// policz odleglosc
			// na podstawie na danych zareaguj :)

			// jakis tam bit do ustawienia, np skret w lewo - uzupelnic
			rt_evbit_set(rt_evgroup_state_machine, (1 << 8));
 8000722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff fe78 	bl	800041c <rt_evbit_set>
		evgroup = rt_evbitwait_any(rt_evgroup_sensors);
 800072c:	e7f0      	b.n	8000710 <task_sensors+0xc>
	...

08000730 <task_state_machine>:

//#include "task_state_machine.h"
#include "runtime.h"
#include "state_machine.h"
#define jakis_tam_bit 12
void task_state_machine(void *pvParameters) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

	(void*) pvParameters;

	uint32_t evgroup = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
	bool tasks_disabled = false;
 800073c:	2300      	movs	r3, #0
 800073e:	72fb      	strb	r3, [r7, #11]

	for (;;) {

		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 8000740:	2001      	movs	r0, #1
 8000742:	f7ff fe4f 	bl	80003e4 <rt_evbitwait_any>
 8000746:	60f8      	str	r0, [r7, #12]

		if (evgroup & (1 << evgroup_state_m_do_nothing)) {
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	2b00      	cmp	r3, #0
 8000750:	d005      	beq.n	800075e <task_state_machine+0x2e>
			h_bridge_set_left_duty(0);
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff fd14 	bl	8000180 <h_bridge_set_left_duty>
			h_bridge_set_right_duty(0);
 8000758:	2000      	movs	r0, #0
 800075a:	f7ff fd37 	bl	80001cc <h_bridge_set_right_duty>
		}
		if (evgroup & (1 << evgroup_state_m_auto_manual)) {
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	2b00      	cmp	r3, #0
 8000766:	d021      	beq.n	80007ac <task_state_machine+0x7c>
			if (tasks_disabled) {
 8000768:	7afb      	ldrb	r3, [r7, #11]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d00f      	beq.n	800078e <task_state_machine+0x5e>
				vTaskResume(rt_tasks[rt_task_eyes]);
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <task_state_machine+0x94>)
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	4618      	mov	r0, r3
 8000774:	f006 f9cc 	bl	8006b10 <vTaskResume>
				vTaskResume(rt_tasks[rt_task_memory]);
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <task_state_machine+0x94>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	4618      	mov	r0, r3
 800077e:	f006 f9c7 	bl	8006b10 <vTaskResume>
				vTaskResume(rt_tasks[rt_task_sensors]);
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <task_state_machine+0x94>)
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	4618      	mov	r0, r3
 8000788:	f006 f9c2 	bl	8006b10 <vTaskResume>
 800078c:	e00e      	b.n	80007ac <task_state_machine+0x7c>
			} else {
				vTaskSuspend(rt_tasks[rt_task_eyes]);
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <task_state_machine+0x94>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	4618      	mov	r0, r3
 8000794:	f006 f90e 	bl	80069b4 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_memory]);
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <task_state_machine+0x94>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	4618      	mov	r0, r3
 800079e:	f006 f909 	bl	80069b4 <vTaskSuspend>
				vTaskSuspend(rt_tasks[rt_task_sensors]);
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <task_state_machine+0x94>)
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f006 f904 	bl	80069b4 <vTaskSuspend>
			}
		}
		if (evgroup & (1 << evgroup_state_m_right)) {
			;
		}
		if (evgroup & (1 << evgroup_state_m_forward)) {
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d0c4      	beq.n	8000740 <task_state_machine+0x10>
			h_bridge_set_left_duty(100);
 80007b6:	2064      	movs	r0, #100	; 0x64
 80007b8:	f7ff fce2 	bl	8000180 <h_bridge_set_left_duty>
			h_bridge_set_right_duty(100);
 80007bc:	2064      	movs	r0, #100	; 0x64
 80007be:	f7ff fd05 	bl	80001cc <h_bridge_set_right_duty>
		evgroup = rt_evbitwait_any(rt_evgroup_state_machine);
 80007c2:	e7bd      	b.n	8000740 <task_state_machine+0x10>
 80007c4:	2000355c 	.word	0x2000355c

080007c8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80007d8:	4b25      	ldr	r3, [pc, #148]	; (8000870 <MX_ADC_Init+0xa8>)
 80007da:	4a26      	ldr	r2, [pc, #152]	; (8000874 <MX_ADC_Init+0xac>)
 80007dc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007de:	4b24      	ldr	r3, [pc, #144]	; (8000870 <MX_ADC_Init+0xa8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <MX_ADC_Init+0xa8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <MX_ADC_Init+0xa8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_ADC_Init+0xa8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <MX_ADC_Init+0xa8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_ADC_Init+0xa8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <MX_ADC_Init+0xa8>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_ADC_Init+0xa8>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_ADC_Init+0xa8>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_ADC_Init+0xa8>)
 8000818:	2201      	movs	r2, #1
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_ADC_Init+0xa8>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_ADC_Init+0xa8>)
 8000826:	2210      	movs	r2, #16
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_ADC_Init+0xa8>)
 800082c:	2200      	movs	r2, #0
 800082e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_ADC_Init+0xa8>)
 8000832:	2200      	movs	r2, #0
 8000834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_ADC_Init+0xa8>)
 800083a:	f000 fea5 	bl	8001588 <HAL_ADC_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000844:	f000 fab8 	bl	8000db8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000848:	2301      	movs	r3, #1
 800084a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084c:	2301      	movs	r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_ADC_Init+0xa8>)
 800085a:	f001 f939 	bl	8001ad0 <HAL_ADC_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000864:	f000 faa8 	bl	8000db8 <Error_Handler>
  }

}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000358c 	.word	0x2000358c
 8000874:	40012400 	.word	0x40012400

08000878 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a2d      	ldr	r2, [pc, #180]	; (800094c <HAL_ADC_MspInit+0xd4>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d154      	bne.n	8000944 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800089a:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <HAL_ADC_MspInit+0xd8>)
 800089c:	6a1b      	ldr	r3, [r3, #32]
 800089e:	4a2c      	ldr	r2, [pc, #176]	; (8000950 <HAL_ADC_MspInit+0xd8>)
 80008a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008a4:	6213      	str	r3, [r2, #32]
 80008a6:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <HAL_ADC_MspInit+0xd8>)
 80008a8:	6a1b      	ldr	r3, [r3, #32]
 80008aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b27      	ldr	r3, [pc, #156]	; (8000950 <HAL_ADC_MspInit+0xd8>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a26      	ldr	r2, [pc, #152]	; (8000950 <HAL_ADC_MspInit+0xd8>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b24      	ldr	r3, [pc, #144]	; (8000950 <HAL_ADC_MspInit+0xd8>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <HAL_ADC_MspInit+0xd8>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a20      	ldr	r2, [pc, #128]	; (8000950 <HAL_ADC_MspInit+0xd8>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <HAL_ADC_MspInit+0xd8>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <HAL_ADC_MspInit+0xd8>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a1a      	ldr	r2, [pc, #104]	; (8000950 <HAL_ADC_MspInit+0xd8>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <HAL_ADC_MspInit+0xd8>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA7     ------> ADC_IN7
    PB15     ------> ADC_IN21 
    */
    GPIO_InitStruct.Pin = ADC_BATTERY_VOLTAGE_Pin;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fe:	2303      	movs	r3, #3
 8000900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <HAL_ADC_MspInit+0xdc>)
 800090e:	f001 fc87 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PHOTO_BACK_Pin|ADC_OPTO_LEFT_Pin|ADC_PHOTO_FRONT_Pin;
 8000912:	2386      	movs	r3, #134	; 0x86
 8000914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000916:	2303      	movs	r3, #3
 8000918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <HAL_ADC_MspInit+0xe0>)
 8000926:	f001 fc7b 	bl	8002220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_OPTO_RIGHT_Pin;
 800092a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000930:	2303      	movs	r3, #3
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_OPTO_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4807      	ldr	r0, [pc, #28]	; (800095c <HAL_ADC_MspInit+0xe4>)
 8000940:	f001 fc6e 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000944:	bf00      	nop
 8000946:	3730      	adds	r7, #48	; 0x30
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40012400 	.word	0x40012400
 8000950:	40023800 	.word	0x40023800
 8000954:	40020800 	.word	0x40020800
 8000958:	40020000 	.word	0x40020000
 800095c:	40020400 	.word	0x40020400

08000960 <vApplicationIdleHook>:
void vApplicationMallocFailedHook(void);
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr

0800096c <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009a8:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <MX_FREERTOS_Init+0x1c>)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_FREERTOS_Init+0x20>)
 80009ae:	f004 fdbf 	bl	8005530 <osThreadNew>
 80009b2:	4602      	mov	r2, r0
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <MX_FREERTOS_Init+0x24>)
 80009b6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  rt_init();
 80009b8:	f7ff fc6a 	bl	8000290 <rt_init>
  /* USER CODE END RTOS_THREADS */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	080089fc 	.word	0x080089fc
 80009c4:	080009cd 	.word	0x080009cd
 80009c8:	200035e0 	.word	0x200035e0

080009cc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f004 fe55 	bl	8005684 <osDelay>
 80009da:	e7fb      	b.n	80009d4 <StartDefaultTask+0x8>

080009dc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b72      	ldr	r3, [pc, #456]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	4a71      	ldr	r2, [pc, #452]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	61d3      	str	r3, [r2, #28]
 80009fe:	4b6f      	ldr	r3, [pc, #444]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	4b6c      	ldr	r3, [pc, #432]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a6b      	ldr	r2, [pc, #428]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	61d3      	str	r3, [r2, #28]
 8000a16:	4b69      	ldr	r3, [pc, #420]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b66      	ldr	r3, [pc, #408]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a65      	ldr	r2, [pc, #404]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b63      	ldr	r3, [pc, #396]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b60      	ldr	r3, [pc, #384]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a5f      	ldr	r2, [pc, #380]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b5d      	ldr	r3, [pc, #372]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	4b5a      	ldr	r3, [pc, #360]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a59      	ldr	r2, [pc, #356]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b57      	ldr	r3, [pc, #348]	; (8000bbc <MX_GPIO_Init+0x1e0>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_TEST_Pin 
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f640 616e 	movw	r1, #3694	; 0xe6e
 8000a70:	4853      	ldr	r0, [pc, #332]	; (8000bc0 <MX_GPIO_Init+0x1e4>)
 8000a72:	f001 fe47 	bl	8002704 <HAL_GPIO_WritePin>
                          |OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin|OUT_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000a76:	2200      	movs	r2, #0
 8000a78:	f248 7108 	movw	r1, #34568	; 0x8708
 8000a7c:	4851      	ldr	r0, [pc, #324]	; (8000bc4 <MX_GPIO_Init+0x1e8>)
 8000a7e:	f001 fe41 	bl	8002704 <HAL_GPIO_WritePin>
                          |OUT_LED0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_BLE_EN_GPIO_Port, OUT_BLE_EN_Pin, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2110      	movs	r1, #16
 8000a86:	484e      	ldr	r0, [pc, #312]	; (8000bc0 <MX_GPIO_Init+0x1e4>)
 8000a88:	f001 fe3c 	bl	8002704 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 8000a8c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a92:	2303      	movs	r3, #3
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4847      	ldr	r0, [pc, #284]	; (8000bc0 <MX_GPIO_Init+0x1e4>)
 8000aa2:	f001 fbbd 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OUT_INa_ENGINE_LEFT_Pin|OUT_INnb_ENGINE_LEFT_Pin|OUT_SEL0_ENGINE_LEFT_Pin|OUT_BLE_EN_Pin 
 8000aa6:	f640 637e 	movw	r3, #3710	; 0xe7e
 8000aaa:	617b      	str	r3, [r7, #20]
                          |OUT_BLE_TEST_Pin|OUT_ULTRASOUND_TRIG_Pin|OUT_INb_RIGHT_Pin|OUT_LED1_Pin 
                          |OUT_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4840      	ldr	r0, [pc, #256]	; (8000bc0 <MX_GPIO_Init+0x1e4>)
 8000ac0:	f001 fbae 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = OUT_OPTO_EN_LEFT_Pin|OUT_INa_ENGINE_RIGHT_Pin|OUT_SEL0_ENGINE_RIGHT_Pin|OUT_OPTO_EN_RIGHT_Pin 
 8000ac4:	f248 7308 	movw	r3, #34568	; 0x8708
 8000ac8:	617b      	str	r3, [r7, #20]
                          |OUT_LED0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4839      	ldr	r0, [pc, #228]	; (8000bc4 <MX_GPIO_Init+0x1e8>)
 8000ade:	f001 fb9f 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 8000ae2:	f241 0370 	movw	r3, #4208	; 0x1070
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4833      	ldr	r0, [pc, #204]	; (8000bc4 <MX_GPIO_Init+0x1e8>)
 8000af8:	f001 fb92 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IRQ_BLE_Pin|IRQ_ULTRASOUND_ECHO_Pin;
 8000afc:	2303      	movs	r3, #3
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b00:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <MX_GPIO_Init+0x1ec>)
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	482f      	ldr	r0, [pc, #188]	; (8000bcc <MX_GPIO_Init+0x1f0>)
 8000b10:	f001 fb86 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB3 PB4 
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4 
 8000b14:	f242 333c 	movw	r3, #9020	; 0x233c
 8000b18:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4828      	ldr	r0, [pc, #160]	; (8000bcc <MX_GPIO_Init+0x1f0>)
 8000b2a:	f001 fb79 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_LEFT_Pin;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4822      	ldr	r0, [pc, #136]	; (8000bcc <MX_GPIO_Init+0x1f0>)
 8000b44:	f001 fb6c 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_HALL_FRONT_Pin;
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IN_HALL_FRONT_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4819      	ldr	r0, [pc, #100]	; (8000bc0 <MX_GPIO_Init+0x1e4>)
 8000b5c:	f001 fb60 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INPUT_HALL_RIGHT_Pin;
 8000b60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INPUT_HALL_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <MX_GPIO_Init+0x1e8>)
 8000b76:	f001 fb53 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <MX_GPIO_Init+0x1f4>)
 8000b8e:	f001 fb47 	bl	8002220 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2105      	movs	r1, #5
 8000b96:	2006      	movs	r0, #6
 8000b98:	f001 fafe 	bl	8002198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b9c:	2006      	movs	r0, #6
 8000b9e:	f001 fb27 	bl	80021f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	2007      	movs	r0, #7
 8000ba8:	f001 faf6 	bl	8002198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000bac:	2007      	movs	r0, #7
 8000bae:	f001 fb1f 	bl	80021f0 <HAL_NVIC_EnableIRQ>

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020800 	.word	0x40020800
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	10110000 	.word	0x10110000
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	40020c00 	.word	0x40020c00

08000bd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bda:	4a13      	ldr	r2, [pc, #76]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000be0:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <MX_I2C1_Init+0x58>)
 8000be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c12:	f001 fdc1 	bl	8002798 <HAL_I2C_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c1c:	f000 f8cc 	bl	8000db8 <Error_Handler>
  }

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200035e4 	.word	0x200035e4
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	000186a0 	.word	0x000186a0

08000c30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_I2C_MspInit+0x7c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d127      	bne.n	8000ca2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <HAL_I2C_MspInit+0x80>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	4a16      	ldr	r2, [pc, #88]	; (8000cb0 <HAL_I2C_MspInit+0x80>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	61d3      	str	r3, [r2, #28]
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_I2C_MspInit+0x80>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c6a:	23c0      	movs	r3, #192	; 0xc0
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6e:	2312      	movs	r3, #18
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <HAL_I2C_MspInit+0x84>)
 8000c86:	f001 facb 	bl	8002220 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_I2C_MspInit+0x80>)
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_I2C_MspInit+0x80>)
 8000c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c94:	6253      	str	r3, [r2, #36]	; 0x24
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_I2C_MspInit+0x80>)
 8000c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbc:	f000 fc2f 	bl	800151e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 f818 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc4:	f7ff fe8a 	bl	80009dc <MX_GPIO_Init>
  MX_ADC_Init();
 8000cc8:	f7ff fd7e 	bl	80007c8 <MX_ADC_Init>
  MX_I2C1_Init();
 8000ccc:	f7ff ff82 	bl	8000bd4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000cd0:	f000 f970 	bl	8000fb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cd4:	f000 f9e0 	bl	8001098 <MX_TIM3_Init>
  MX_TIM9_Init();
 8000cd8:	f000 fa52 	bl	8001180 <MX_TIM9_Init>
  MX_USART3_UART_Init();
 8000cdc:	f000 fb8c 	bl	80013f8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	device_init();
 8000ce0:	f7ff fac2 	bl	8000268 <device_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ce4:	f004 fbbe 	bl	8005464 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8000ce8:	f7ff fe5c 	bl	80009a4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000cec:	f004 fbec 	bl	80054c8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000cf0:	e7fe      	b.n	8000cf0 <main+0x38>
	...

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b092      	sub	sp, #72	; 0x48
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2234      	movs	r2, #52	; 0x34
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f007 fcad 	bl	8008662 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <SystemClock_Config+0x9c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <SystemClock_Config+0x9c>)
 8000d20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d24:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d26:	2303      	movs	r3, #3
 8000d28:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d32:	2310      	movs	r3, #16
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	2302      	movs	r3, #2
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000d40:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000d44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000d46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d4a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 fecb 	bl	8002aec <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000d5c:	f000 f82c 	bl	8000db8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d60:	230f      	movs	r3, #15
 8000d62:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d64:	2303      	movs	r3, #3
 8000d66:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	2101      	movs	r1, #1
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 fb35 	bl	80033e8 <HAL_RCC_ClockConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d84:	f000 f818 	bl	8000db8 <Error_Handler>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3748      	adds	r7, #72	; 0x48
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40007000 	.word	0x40007000

08000d94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d101      	bne.n	8000daa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000da6:	f000 fbd3 	bl	8001550 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40000c00 	.word	0x40000c00

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_MspInit+0x64>)
 8000de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de2:	4a16      	ldr	r2, [pc, #88]	; (8000e3c <HAL_MspInit+0x64>)
 8000de4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000de8:	6253      	str	r3, [r2, #36]	; 0x24
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_MspInit+0x64>)
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_MspInit+0x64>)
 8000df8:	6a1b      	ldr	r3, [r3, #32]
 8000dfa:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <HAL_MspInit+0x64>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6213      	str	r3, [r2, #32]
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_MspInit+0x64>)
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_MspInit+0x64>)
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_MspInit+0x64>)
 8000e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e18:	6253      	str	r3, [r2, #36]	; 0x24
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_MspInit+0x64>)
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	210f      	movs	r1, #15
 8000e2a:	f06f 0001 	mvn.w	r0, #1
 8000e2e:	f001 f9b3 	bl	8002198 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08c      	sub	sp, #48	; 0x30
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	202e      	movs	r0, #46	; 0x2e
 8000e56:	f001 f99f 	bl	8002198 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8000e5a:	202e      	movs	r0, #46	; 0x2e
 8000e5c:	f001 f9c8 	bl	80021f0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <HAL_InitTick+0x9c>)
 8000e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e64:	4a1d      	ldr	r2, [pc, #116]	; (8000edc <HAL_InitTick+0x9c>)
 8000e66:	f043 0308 	orr.w	r3, r3, #8
 8000e6a:	6253      	str	r3, [r2, #36]	; 0x24
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <HAL_InitTick+0x9c>)
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	f003 0308 	and.w	r3, r3, #8
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e78:	f107 0210 	add.w	r2, r7, #16
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4611      	mov	r1, r2
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 fcf8 	bl	8003878 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e88:	f002 fcce 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8000e8c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e90:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <HAL_InitTick+0xa0>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	0c9b      	lsrs	r3, r3, #18
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_InitTick+0xa4>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <HAL_InitTick+0xa8>)
 8000ea0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_InitTick+0xa4>)
 8000ea4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_InitTick+0xa4>)
 8000eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eae:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_InitTick+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_InitTick+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000ebc:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <HAL_InitTick+0xa4>)
 8000ebe:	f002 fd7d 	bl	80039bc <HAL_TIM_Base_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d104      	bne.n	8000ed2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000ec8:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <HAL_InitTick+0xa4>)
 8000eca:	f002 fe1f 	bl	8003b0c <HAL_TIM_Base_Start_IT>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3730      	adds	r7, #48	; 0x30
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	431bde83 	.word	0x431bde83
 8000ee4:	20003638 	.word	0x20003638
 8000ee8:	40000c00 	.word	0x40000c00

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <HardFault_Handler+0x4>

08000efe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <UsageFault_Handler+0x4>

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f001 fc21 	bl	8002768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f001 fc1a 	bl	8002768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <TIM5_IRQHandler+0x10>)
 8000f3e:	f002 fefc 	bl	8003d3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20003638 	.word	0x20003638

08000f4c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <SystemInit+0x5c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <SystemInit+0x5c>)
 8000f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <SystemInit+0x5c>)
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	4911      	ldr	r1, [pc, #68]	; (8000fa8 <SystemInit+0x5c>)
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <SystemInit+0x60>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <SystemInit+0x5c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <SystemInit+0x5c>)
 8000f6e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000f72:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000f76:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <SystemInit+0x5c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <SystemInit+0x5c>)
 8000f7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f82:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <SystemInit+0x5c>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <SystemInit+0x5c>)
 8000f8a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000f8e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <SystemInit+0x5c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x64>)
 8000f98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f9c:	609a      	str	r2, [r3, #8]
#endif
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	88ffc00c 	.word	0x88ffc00c
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fba:	f107 0318 	add.w	r3, r7, #24
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000fde:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <MX_TIM2_Init+0xe0>)
 8000fe0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fe6:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <MX_TIM2_Init+0xe0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b29      	ldr	r3, [pc, #164]	; (8001094 <MX_TIM2_Init+0xe0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200;
 8000ff2:	4b28      	ldr	r3, [pc, #160]	; (8001094 <MX_TIM2_Init+0xe0>)
 8000ff4:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000ff8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <MX_TIM2_Init+0xe0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <MX_TIM2_Init+0xe0>)
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001006:	4823      	ldr	r0, [pc, #140]	; (8001094 <MX_TIM2_Init+0xe0>)
 8001008:	f002 fcd8 	bl	80039bc <HAL_TIM_Base_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001012:	f7ff fed1 	bl	8000db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	4619      	mov	r1, r3
 8001022:	481c      	ldr	r0, [pc, #112]	; (8001094 <MX_TIM2_Init+0xe0>)
 8001024:	f003 f8f6 	bl	8004214 <HAL_TIM_ConfigClockSource>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800102e:	f7ff fec3 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001032:	4818      	ldr	r0, [pc, #96]	; (8001094 <MX_TIM2_Init+0xe0>)
 8001034:	f002 fdd0 	bl	8003bd8 <HAL_TIM_PWM_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800103e:	f7ff febb 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	4619      	mov	r1, r3
 8001050:	4810      	ldr	r0, [pc, #64]	; (8001094 <MX_TIM2_Init+0xe0>)
 8001052:	f003 fdf1 	bl	8004c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800105c:	f7ff feac 	bl	8000db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001060:	2360      	movs	r3, #96	; 0x60
 8001062:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <MX_TIM2_Init+0xe0>)
 8001078:	f002 ff3c 	bl	8003ef4 <HAL_TIM_PWM_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001082:	f7ff fe99 	bl	8000db8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001086:	4803      	ldr	r0, [pc, #12]	; (8001094 <MX_TIM2_Init+0xe0>)
 8001088:	f000 f932 	bl	80012f0 <HAL_TIM_MspPostInit>

}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	; 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200036ec 	.word	0x200036ec

08001098 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109e:	f107 0318 	add.w	r3, r7, #24
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b6:	463b      	mov	r3, r7
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <MX_TIM3_Init+0xe0>)
 80010c4:	4a2d      	ldr	r2, [pc, #180]	; (800117c <MX_TIM3_Init+0xe4>)
 80010c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <MX_TIM3_Init+0xe0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <MX_TIM3_Init+0xe0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200;
 80010d4:	4b28      	ldr	r3, [pc, #160]	; (8001178 <MX_TIM3_Init+0xe0>)
 80010d6:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80010da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <MX_TIM3_Init+0xe0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <MX_TIM3_Init+0xe0>)
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010e8:	4823      	ldr	r0, [pc, #140]	; (8001178 <MX_TIM3_Init+0xe0>)
 80010ea:	f002 fc67 	bl	80039bc <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80010f4:	f7ff fe60 	bl	8000db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010fe:	f107 0318 	add.w	r3, r7, #24
 8001102:	4619      	mov	r1, r3
 8001104:	481c      	ldr	r0, [pc, #112]	; (8001178 <MX_TIM3_Init+0xe0>)
 8001106:	f003 f885 	bl	8004214 <HAL_TIM_ConfigClockSource>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001110:	f7ff fe52 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001114:	4818      	ldr	r0, [pc, #96]	; (8001178 <MX_TIM3_Init+0xe0>)
 8001116:	f002 fd5f 	bl	8003bd8 <HAL_TIM_PWM_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001120:	f7ff fe4a 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	4619      	mov	r1, r3
 8001132:	4811      	ldr	r0, [pc, #68]	; (8001178 <MX_TIM3_Init+0xe0>)
 8001134:	f003 fd80 	bl	8004c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800113e:	f7ff fe3b 	bl	8000db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001142:	2360      	movs	r3, #96	; 0x60
 8001144:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	2208      	movs	r2, #8
 8001156:	4619      	mov	r1, r3
 8001158:	4807      	ldr	r0, [pc, #28]	; (8001178 <MX_TIM3_Init+0xe0>)
 800115a:	f002 fecb 	bl	8003ef4 <HAL_TIM_PWM_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001164:	f7ff fe28 	bl	8000db8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <MX_TIM3_Init+0xe0>)
 800116a:	f000 f8c1 	bl	80012f0 <HAL_TIM_MspPostInit>

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	; 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20003674 	.word	0x20003674
 800117c:	40000400 	.word	0x40000400

08001180 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0318 	add.w	r3, r7, #24
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800119e:	463b      	mov	r3, r7
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <MX_TIM9_Init+0xe0>)
 80011ac:	4a2d      	ldr	r2, [pc, #180]	; (8001264 <MX_TIM9_Init+0xe4>)
 80011ae:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32768;
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_TIM9_Init+0xe0>)
 80011b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011b6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <MX_TIM9_Init+0xe0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 19;
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <MX_TIM9_Init+0xe0>)
 80011c0:	2213      	movs	r2, #19
 80011c2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <MX_TIM9_Init+0xe0>)
 80011c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ca:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <MX_TIM9_Init+0xe0>)
 80011ce:	2280      	movs	r2, #128	; 0x80
 80011d0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80011d2:	4823      	ldr	r0, [pc, #140]	; (8001260 <MX_TIM9_Init+0xe0>)
 80011d4:	f002 fbf2 	bl	80039bc <HAL_TIM_Base_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80011de:	f7ff fdeb 	bl	8000db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	4619      	mov	r1, r3
 80011ee:	481c      	ldr	r0, [pc, #112]	; (8001260 <MX_TIM9_Init+0xe0>)
 80011f0:	f003 f810 	bl	8004214 <HAL_TIM_ConfigClockSource>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM9_Init+0x7e>
  {
    Error_Handler();
 80011fa:	f7ff fddd 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80011fe:	4818      	ldr	r0, [pc, #96]	; (8001260 <MX_TIM9_Init+0xe0>)
 8001200:	f002 fcea 	bl	8003bd8 <HAL_TIM_PWM_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM9_Init+0x8e>
  {
    Error_Handler();
 800120a:	f7ff fdd5 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	4619      	mov	r1, r3
 800121c:	4810      	ldr	r0, [pc, #64]	; (8001260 <MX_TIM9_Init+0xe0>)
 800121e:	f003 fd0b 	bl	8004c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8001228:	f7ff fdc6 	bl	8000db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122c:	2360      	movs	r3, #96	; 0x60
 800122e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	2204      	movs	r2, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4807      	ldr	r0, [pc, #28]	; (8001260 <MX_TIM9_Init+0xe0>)
 8001244:	f002 fe56 	bl	8003ef4 <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM9_Init+0xd2>
  {
    Error_Handler();
 800124e:	f7ff fdb3 	bl	8000db8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8001252:	4803      	ldr	r0, [pc, #12]	; (8001260 <MX_TIM9_Init+0xe0>)
 8001254:	f000 f84c 	bl	80012f0 <HAL_TIM_MspPostInit>

}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	; 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200036b0 	.word	0x200036b0
 8001264:	40010800 	.word	0x40010800

08001268 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001278:	d10c      	bne.n	8001294 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6253      	str	r3, [r2, #36]	; 0x24
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001292:	e022      	b.n	80012da <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <HAL_TIM_Base_MspInit+0x80>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d10c      	bne.n	80012b8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	4a10      	ldr	r2, [pc, #64]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6253      	str	r3, [r2, #36]	; 0x24
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
}
 80012b6:	e010      	b.n	80012da <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM9)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <HAL_TIM_Base_MspInit+0x84>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d10b      	bne.n	80012da <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6213      	str	r3, [r2, #32]
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
}
 80012da:	bf00      	nop
 80012dc:	371c      	adds	r7, #28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40000400 	.word	0x40000400
 80012ec:	40010800 	.word	0x40010800

080012f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001310:	d11c      	bne.n	800134c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <HAL_TIM_MspPostInit+0xf0>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a32      	ldr	r2, [pc, #200]	; (80013e0 <HAL_TIM_MspPostInit+0xf0>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <HAL_TIM_MspPostInit+0xf0>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA0-WKUP1     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_ENGINE_LEFT_Pin;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800133a:	2301      	movs	r3, #1
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_LEFT_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4827      	ldr	r0, [pc, #156]	; (80013e4 <HAL_TIM_MspPostInit+0xf4>)
 8001346:	f000 ff6b 	bl	8002220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800134a:	e044      	b.n	80013d6 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a25      	ldr	r2, [pc, #148]	; (80013e8 <HAL_TIM_MspPostInit+0xf8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d11d      	bne.n	8001392 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <HAL_TIM_MspPostInit+0xf0>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a21      	ldr	r2, [pc, #132]	; (80013e0 <HAL_TIM_MspPostInit+0xf0>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	61d3      	str	r3, [r2, #28]
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HAL_TIM_MspPostInit+0xf0>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ENGINE_RIGHT_Pin;
 800136e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001380:	2302      	movs	r3, #2
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_ENGINE_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	4818      	ldr	r0, [pc, #96]	; (80013ec <HAL_TIM_MspPostInit+0xfc>)
 800138c:	f000 ff48 	bl	8002220 <HAL_GPIO_Init>
}
 8001390:	e021      	b.n	80013d6 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM9)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <HAL_TIM_MspPostInit+0x100>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d11c      	bne.n	80013d6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_TIM_MspPostInit+0xf0>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <HAL_TIM_MspPostInit+0xf0>)
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	61d3      	str	r3, [r2, #28]
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_TIM_MspPostInit+0xf0>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_SERVO_Pin;
 80013b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80013c6:	2303      	movs	r3, #3
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_SERVO_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4808      	ldr	r0, [pc, #32]	; (80013f4 <HAL_TIM_MspPostInit+0x104>)
 80013d2:	f000 ff25 	bl	8002220 <HAL_GPIO_Init>
}
 80013d6:	bf00      	nop
 80013d8:	3728      	adds	r7, #40	; 0x28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40000400 	.word	0x40000400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40020400 	.word	0x40020400

080013f8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_USART3_UART_Init+0x50>)
 8001400:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 8001404:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001408:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_USART3_UART_Init+0x4c>)
 8001430:	f003 fc9c 	bl	8004d6c <HAL_UART_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800143a:	f7ff fcbd 	bl	8000db8 <Error_Handler>
  }

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20003728 	.word	0x20003728
 8001448:	40004800 	.word	0x40004800

0800144c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_UART_MspInit+0x7c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d128      	bne.n	80014c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <HAL_UART_MspInit+0x80>)
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	4a16      	ldr	r2, [pc, #88]	; (80014cc <HAL_UART_MspInit+0x80>)
 8001474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001478:	6253      	str	r3, [r2, #36]	; 0x24
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_UART_MspInit+0x80>)
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_UART_MspInit+0x80>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_UART_MspInit+0x80>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	61d3      	str	r3, [r2, #28]
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_UART_MspInit+0x80>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800149e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b0:	2307      	movs	r3, #7
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HAL_UART_MspInit+0x84>)
 80014bc:	f000 feb0 	bl	8002220 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	; 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40004800 	.word	0x40004800
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400

080014d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014d6:	e003      	b.n	80014e0 <LoopCopyDataInit>

080014d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80014da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014de:	3104      	adds	r1, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014e0:	480a      	ldr	r0, [pc, #40]	; (800150c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014e8:	d3f6      	bcc.n	80014d8 <CopyDataInit>
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014ec:	e002      	b.n	80014f4 <LoopFillZerobss>

080014ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014f0:	f842 3b04 	str.w	r3, [r2], #4

080014f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014f8:	d3f9      	bcc.n	80014ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014fa:	f7ff fd27 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f007 f881 	bl	8008604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001502:	f7ff fbd9 	bl	8000cb8 <main>
  bx lr
 8001506:	4770      	bx	lr
  ldr r3, =_sidata
 8001508:	08008a4c 	.word	0x08008a4c
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001510:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001514:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001518:	200037ac 	.word	0x200037ac

0800151c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC1_IRQHandler>

0800151e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001524:	2300      	movs	r3, #0
 8001526:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001528:	2003      	movs	r0, #3
 800152a:	f000 fe15 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800152e:	2000      	movs	r0, #0
 8001530:	f7ff fc86 	bl	8000e40 <HAL_InitTick>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	71fb      	strb	r3, [r7, #7]
 800153e:	e001      	b.n	8001544 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001540:	f7ff fc4a 	bl	8000dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001544:	79fb      	ldrb	r3, [r7, #7]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_IncTick+0x1c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_IncTick+0x20>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4413      	add	r3, r2
 800155e:	4a03      	ldr	r2, [pc, #12]	; (800156c <HAL_IncTick+0x1c>)
 8001560:	6013      	str	r3, [r2, #0]
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20003768 	.word	0x20003768
 8001570:	20000008 	.word	0x20000008

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <HAL_GetTick+0x10>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	20003768 	.word	0x20003768

08001588 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08e      	sub	sp, #56	; 0x38
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e282      	b.n	8001aae <HAL_ADC_Init+0x526>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a9d      	ldr	r2, [pc, #628]	; (8001824 <HAL_ADC_Init+0x29c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d004      	beq.n	80015bc <HAL_ADC_Init+0x34>
 80015b2:	f240 11bd 	movw	r1, #445	; 0x1bd
 80015b6:	489c      	ldr	r0, [pc, #624]	; (8001828 <HAL_ADC_Init+0x2a0>)
 80015b8:	f7ff fc04 	bl	8000dc4 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00e      	beq.n	80015e2 <HAL_ADC_Init+0x5a>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d009      	beq.n	80015e2 <HAL_ADC_Init+0x5a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d6:	d004      	beq.n	80015e2 <HAL_ADC_Init+0x5a>
 80015d8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80015dc:	4892      	ldr	r0, [pc, #584]	; (8001828 <HAL_ADC_Init+0x2a0>)
 80015de:	f7ff fbf1 	bl	8000dc4 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d013      	beq.n	8001612 <HAL_ADC_Init+0x8a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f2:	d00e      	beq.n	8001612 <HAL_ADC_Init+0x8a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015fc:	d009      	beq.n	8001612 <HAL_ADC_Init+0x8a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001606:	d004      	beq.n	8001612 <HAL_ADC_Init+0x8a>
 8001608:	f240 11bf 	movw	r1, #447	; 0x1bf
 800160c:	4886      	ldr	r0, [pc, #536]	; (8001828 <HAL_ADC_Init+0x2a0>)
 800160e:	f7ff fbd9 	bl	8000dc4 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <HAL_ADC_Init+0xa6>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001622:	d004      	beq.n	800162e <HAL_ADC_Init+0xa6>
 8001624:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001628:	487f      	ldr	r0, [pc, #508]	; (8001828 <HAL_ADC_Init+0x2a0>)
 800162a:	f7ff fbcb 	bl	8000dc4 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d009      	beq.n	800164a <HAL_ADC_Init+0xc2>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800163e:	d004      	beq.n	800164a <HAL_ADC_Init+0xc2>
 8001640:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001644:	4878      	ldr	r0, [pc, #480]	; (8001828 <HAL_ADC_Init+0x2a0>)
 8001646:	f7ff fbbd 	bl	8000dc4 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001652:	d008      	beq.n	8001666 <HAL_ADC_Init+0xde>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d004      	beq.n	8001666 <HAL_ADC_Init+0xde>
 800165c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001660:	4871      	ldr	r0, [pc, #452]	; (8001828 <HAL_ADC_Init+0x2a0>)
 8001662:	f7ff fbaf 	bl	8000dc4 <assert_failed>
  assert_param(IS_ADC_AUTOWAIT(hadc->Init.LowPowerAutoWait));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d020      	beq.n	80016b0 <HAL_ADC_Init+0x128>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b10      	cmp	r3, #16
 8001674:	d01c      	beq.n	80016b0 <HAL_ADC_Init+0x128>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b20      	cmp	r3, #32
 800167c:	d018      	beq.n	80016b0 <HAL_ADC_Init+0x128>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b30      	cmp	r3, #48	; 0x30
 8001684:	d014      	beq.n	80016b0 <HAL_ADC_Init+0x128>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	2b40      	cmp	r3, #64	; 0x40
 800168c:	d010      	beq.n	80016b0 <HAL_ADC_Init+0x128>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b50      	cmp	r3, #80	; 0x50
 8001694:	d00c      	beq.n	80016b0 <HAL_ADC_Init+0x128>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	2b60      	cmp	r3, #96	; 0x60
 800169c:	d008      	beq.n	80016b0 <HAL_ADC_Init+0x128>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b70      	cmp	r3, #112	; 0x70
 80016a4:	d004      	beq.n	80016b0 <HAL_ADC_Init+0x128>
 80016a6:	f240 11c3 	movw	r1, #451	; 0x1c3
 80016aa:	485f      	ldr	r0, [pc, #380]	; (8001828 <HAL_ADC_Init+0x2a0>)
 80016ac:	f7ff fb8a 	bl	8000dc4 <assert_failed>
  assert_param(IS_ADC_AUTOPOWEROFF(hadc->Init.LowPowerAutoPowerOff));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d013      	beq.n	80016e0 <HAL_ADC_Init+0x158>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016c0:	d00e      	beq.n	80016e0 <HAL_ADC_Init+0x158>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ca:	d009      	beq.n	80016e0 <HAL_ADC_Init+0x158>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80016d4:	d004      	beq.n	80016e0 <HAL_ADC_Init+0x158>
 80016d6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80016da:	4853      	ldr	r0, [pc, #332]	; (8001828 <HAL_ADC_Init+0x2a0>)
 80016dc:	f7ff fb72 	bl	8000dc4 <assert_failed>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <HAL_ADC_Init+0x172>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d004      	beq.n	80016fa <HAL_ADC_Init+0x172>
 80016f0:	f240 11c5 	movw	r1, #453	; 0x1c5
 80016f4:	484c      	ldr	r0, [pc, #304]	; (8001828 <HAL_ADC_Init+0x2a0>)
 80016f6:	f7ff fb65 	bl	8000dc4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001700:	2b00      	cmp	r3, #0
 8001702:	d009      	beq.n	8001718 <HAL_ADC_Init+0x190>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800170a:	2b01      	cmp	r3, #1
 800170c:	d004      	beq.n	8001718 <HAL_ADC_Init+0x190>
 800170e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8001712:	4845      	ldr	r0, [pc, #276]	; (8001828 <HAL_ADC_Init+0x2a0>)
 8001714:	f7ff fb56 	bl	8000dc4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001720:	d03e      	beq.n	80017a0 <HAL_ADC_Init+0x218>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001726:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800172a:	d039      	beq.n	80017a0 <HAL_ADC_Init+0x218>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001730:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001734:	d034      	beq.n	80017a0 <HAL_ADC_Init+0x218>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800173e:	d02f      	beq.n	80017a0 <HAL_ADC_Init+0x218>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001748:	d02a      	beq.n	80017a0 <HAL_ADC_Init+0x218>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001752:	d025      	beq.n	80017a0 <HAL_ADC_Init+0x218>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001758:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800175c:	d020      	beq.n	80017a0 <HAL_ADC_Init+0x218>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001762:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8001766:	d01b      	beq.n	80017a0 <HAL_ADC_Init+0x218>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001770:	d016      	beq.n	80017a0 <HAL_ADC_Init+0x218>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001776:	2b00      	cmp	r3, #0
 8001778:	d012      	beq.n	80017a0 <HAL_ADC_Init+0x218>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001782:	d00d      	beq.n	80017a0 <HAL_ADC_Init+0x218>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001788:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800178c:	d008      	beq.n	80017a0 <HAL_ADC_Init+0x218>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001792:	2b10      	cmp	r3, #16
 8001794:	d004      	beq.n	80017a0 <HAL_ADC_Init+0x218>
 8001796:	f240 11c7 	movw	r1, #455	; 0x1c7
 800179a:	4823      	ldr	r0, [pc, #140]	; (8001828 <HAL_ADC_Init+0x2a0>)
 800179c:	f7ff fb12 	bl	8000dc4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <HAL_ADC_Init+0x236>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d004      	beq.n	80017be <HAL_ADC_Init+0x236>
 80017b4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 80017b8:	481b      	ldr	r0, [pc, #108]	; (8001828 <HAL_ADC_Init+0x2a0>)
 80017ba:	f7ff fb03 	bl	8000dc4 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d032      	beq.n	800182c <HAL_ADC_Init+0x2a4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_ADC_Init+0x24e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	2b1c      	cmp	r3, #28
 80017d4:	d904      	bls.n	80017e0 <HAL_ADC_Init+0x258>
 80017d6:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80017da:	4813      	ldr	r0, [pc, #76]	; (8001828 <HAL_ADC_Init+0x2a0>)
 80017dc:	f7ff faf2 	bl	8000dc4 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_ADC_Init+0x276>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d004      	beq.n	80017fe <HAL_ADC_Init+0x276>
 80017f4:	f240 11cd 	movw	r1, #461	; 0x1cd
 80017f8:	480b      	ldr	r0, [pc, #44]	; (8001828 <HAL_ADC_Init+0x2a0>)
 80017fa:	f7ff fae3 	bl	8000dc4 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d011      	beq.n	800182c <HAL_ADC_Init+0x2a4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_ADC_Init+0x290>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	2b08      	cmp	r3, #8
 8001816:	d909      	bls.n	800182c <HAL_ADC_Init+0x2a4>
 8001818:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <HAL_ADC_Init+0x2a0>)
 800181e:	f7ff fad1 	bl	8000dc4 <assert_failed>
 8001822:	e003      	b.n	800182c <HAL_ADC_Init+0x2a4>
 8001824:	40012400 	.word	0x40012400
 8001828:	08008770 	.word	0x08008770
    }
  }
      
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001830:	2b10      	cmp	r3, #16
 8001832:	d017      	beq.n	8001864 <HAL_ADC_Init+0x2dc>
  {
    assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001838:	2b00      	cmp	r3, #0
 800183a:	d013      	beq.n	8001864 <HAL_ADC_Init+0x2dc>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001844:	d00e      	beq.n	8001864 <HAL_ADC_Init+0x2dc>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800184e:	d009      	beq.n	8001864 <HAL_ADC_Init+0x2dc>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001854:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001858:	d004      	beq.n	8001864 <HAL_ADC_Init+0x2dc>
 800185a:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800185e:	4896      	ldr	r0, [pc, #600]	; (8001ab8 <HAL_ADC_Init+0x530>)
 8001860:	f7ff fab0 	bl	8000dc4 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001868:	2b00      	cmp	r3, #0
 800186a:	d115      	bne.n	8001898 <HAL_ADC_Init+0x310>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b90      	ldr	r3, [pc, #576]	; (8001abc <HAL_ADC_Init+0x534>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a8f      	ldr	r2, [pc, #572]	; (8001abc <HAL_ADC_Init+0x534>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	4b8d      	ldr	r3, [pc, #564]	; (8001abc <HAL_ADC_Init+0x534>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7fe fff0 	bl	8000878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f040 80ff 	bne.w	8001aa4 <HAL_ADC_Init+0x51c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ae:	f023 0302 	bic.w	r3, r3, #2
 80018b2:	f043 0202 	orr.w	r2, r3, #2
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80018ba:	4b81      	ldr	r3, [pc, #516]	; (8001ac0 <HAL_ADC_Init+0x538>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	497e      	ldr	r1, [pc, #504]	; (8001ac0 <HAL_ADC_Init+0x538>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80018d4:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e2:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	fa93 f3a3 	rbit	r3, r3
 80018ea:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80018f8:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80018fe:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001906:	4619      	mov	r1, r3
 8001908:	2302      	movs	r3, #2
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001920:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001924:	4313      	orrs	r3, r2
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192c:	2b10      	cmp	r3, #16
 800192e:	d007      	beq.n	8001940 <HAL_ADC_Init+0x3b8>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001938:	4313      	orrs	r3, r2
 800193a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800193c:	4313      	orrs	r3, r2
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194a:	2b40      	cmp	r3, #64	; 0x40
 800194c:	d04f      	beq.n	80019ee <HAL_ADC_Init+0x466>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001954:	4313      	orrs	r3, r2
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001960:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6912      	ldr	r2, [r2, #16]
 8001966:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800196a:	d003      	beq.n	8001974 <HAL_ADC_Init+0x3ec>
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6912      	ldr	r2, [r2, #16]
 8001970:	2a01      	cmp	r2, #1
 8001972:	d102      	bne.n	800197a <HAL_ADC_Init+0x3f2>
 8001974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001978:	e000      	b.n	800197c <HAL_ADC_Init+0x3f4>
 800197a:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800197c:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800197e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001980:	4313      	orrs	r3, r2
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800198a:	2b01      	cmp	r3, #1
 800198c:	d125      	bne.n	80019da <HAL_ADC_Init+0x452>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001994:	2b00      	cmp	r3, #0
 8001996:	d114      	bne.n	80019c2 <HAL_ADC_Init+0x43a>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	3b01      	subs	r3, #1
 800199e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80019a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	fa92 f2a2 	rbit	r2, r2
 80019aa:	617a      	str	r2, [r7, #20]
  return result;
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	fab2 f282 	clz	r2, r2
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	4093      	lsls	r3, r2
 80019b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019bc:	4313      	orrs	r3, r2
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
 80019c0:	e00b      	b.n	80019da <HAL_ADC_Init+0x452>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	f043 0220 	orr.w	r2, r3, #32
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_ADC_Init+0x53c>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019ea:	430b      	orrs	r3, r1
 80019ec:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <HAL_ADC_Init+0x540>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019fe:	430b      	orrs	r3, r1
 8001a00:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a0a:	d003      	beq.n	8001a14 <HAL_ADC_Init+0x48c>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d119      	bne.n	8001a48 <HAL_ADC_Init+0x4c0>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001a28:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	fa92 f2a2 	rbit	r2, r2
 8001a30:	60fa      	str	r2, [r7, #12]
  return result;
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	fab2 f282 	clz	r2, r2
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	fa03 f202 	lsl.w	r2, r3, r2
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
 8001a46:	e007      	b.n	8001a58 <HAL_ADC_Init+0x4d0>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_ADC_Init+0x544>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d10b      	bne.n	8001a80 <HAL_ADC_Init+0x4f8>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f023 0303 	bic.w	r3, r3, #3
 8001a76:	f043 0201 	orr.w	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a7e:	e014      	b.n	8001aaa <HAL_ADC_Init+0x522>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a84:	f023 0312 	bic.w	r3, r3, #18
 8001a88:	f043 0210 	orr.w	r2, r3, #16
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a94:	f043 0201 	orr.w	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001aa2:	e002      	b.n	8001aaa <HAL_ADC_Init+0x522>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3738      	adds	r7, #56	; 0x38
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	08008770 	.word	0x08008770
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40012700 	.word	0x40012700
 8001ac4:	fcfc16ff 	.word	0xfcfc16ff
 8001ac8:	c0fff189 	.word	0xc0fff189
 8001acc:	bf80fffe 	.word	0xbf80fffe

08001ad0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a94      	ldr	r2, [pc, #592]	; (8001d38 <HAL_ADC_ConfigChannel+0x268>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d004      	beq.n	8001af6 <HAL_ADC_ConfigChannel+0x26>
 8001aec:	f240 7191 	movw	r1, #1937	; 0x791
 8001af0:	4892      	ldr	r0, [pc, #584]	; (8001d3c <HAL_ADC_ConfigChannel+0x26c>)
 8001af2:	f7ff f967 	bl	8000dc4 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8081 	beq.w	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d07c      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d078      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d074      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d070      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d06c      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b06      	cmp	r3, #6
 8001b2e:	d068      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b07      	cmp	r3, #7
 8001b36:	d064      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d060      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b09      	cmp	r3, #9
 8001b46:	d05c      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b0a      	cmp	r3, #10
 8001b4e:	d058      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b0b      	cmp	r3, #11
 8001b56:	d054      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b0c      	cmp	r3, #12
 8001b5e:	d050      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b0d      	cmp	r3, #13
 8001b66:	d04c      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b0e      	cmp	r3, #14
 8001b6e:	d048      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	d044      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b10      	cmp	r3, #16
 8001b7e:	d040      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b11      	cmp	r3, #17
 8001b86:	d03c      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b12      	cmp	r3, #18
 8001b8e:	d038      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b13      	cmp	r3, #19
 8001b96:	d034      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b14      	cmp	r3, #20
 8001b9e:	d030      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b15      	cmp	r3, #21
 8001ba6:	d02c      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b16      	cmp	r3, #22
 8001bae:	d028      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b17      	cmp	r3, #23
 8001bb6:	d024      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b18      	cmp	r3, #24
 8001bbe:	d020      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b19      	cmp	r3, #25
 8001bc6:	d01c      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b1a      	cmp	r3, #26
 8001bce:	d018      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b1b      	cmp	r3, #27
 8001bd6:	d014      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b1c      	cmp	r3, #28
 8001bde:	d010      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b1d      	cmp	r3, #29
 8001be6:	d00c      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b1e      	cmp	r3, #30
 8001bee:	d008      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b1f      	cmp	r3, #31
 8001bf6:	d004      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x132>
 8001bf8:	f240 7192 	movw	r1, #1938	; 0x792
 8001bfc:	484f      	ldr	r0, [pc, #316]	; (8001d3c <HAL_ADC_ConfigChannel+0x26c>)
 8001bfe:	f7ff f8e1 	bl	8000dc4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d070      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d06c      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d068      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d064      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b05      	cmp	r3, #5
 8001c28:	d060      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d05c      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b07      	cmp	r3, #7
 8001c38:	d058      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d054      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b09      	cmp	r3, #9
 8001c48:	d050      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b0a      	cmp	r3, #10
 8001c50:	d04c      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b0b      	cmp	r3, #11
 8001c58:	d048      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d044      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b0d      	cmp	r3, #13
 8001c68:	d040      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b0e      	cmp	r3, #14
 8001c70:	d03c      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b0f      	cmp	r3, #15
 8001c78:	d038      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d034      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b11      	cmp	r3, #17
 8001c88:	d030      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b12      	cmp	r3, #18
 8001c90:	d02c      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b13      	cmp	r3, #19
 8001c98:	d028      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b14      	cmp	r3, #20
 8001ca0:	d024      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b15      	cmp	r3, #21
 8001ca8:	d020      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b16      	cmp	r3, #22
 8001cb0:	d01c      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b17      	cmp	r3, #23
 8001cb8:	d018      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b18      	cmp	r3, #24
 8001cc0:	d014      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b19      	cmp	r3, #25
 8001cc8:	d010      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b1a      	cmp	r3, #26
 8001cd0:	d00c      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b1b      	cmp	r3, #27
 8001cd8:	d008      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b1c      	cmp	r3, #28
 8001ce0:	d004      	beq.n	8001cec <HAL_ADC_ConfigChannel+0x21c>
 8001ce2:	f240 7193 	movw	r1, #1939	; 0x793
 8001ce6:	4815      	ldr	r0, [pc, #84]	; (8001d3c <HAL_ADC_ConfigChannel+0x26c>)
 8001ce8:	f7ff f86c 	bl	8000dc4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d025      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x270>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d021      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x270>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d01d      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x270>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d019      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x270>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d015      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x270>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d011      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x270>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b06      	cmp	r3, #6
 8001d22:	d00d      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x270>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b07      	cmp	r3, #7
 8001d2a:	d009      	beq.n	8001d40 <HAL_ADC_ConfigChannel+0x270>
 8001d2c:	f240 7194 	movw	r1, #1940	; 0x794
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <HAL_ADC_ConfigChannel+0x26c>)
 8001d32:	f7ff f847 	bl	8000dc4 <assert_failed>
 8001d36:	e003      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x270>
 8001d38:	40012400 	.word	0x40012400
 8001d3c:	08008770 	.word	0x08008770
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x27e>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e14f      	b.n	8001fee <HAL_ADC_ConfigChannel+0x51e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d81c      	bhi.n	8001d98 <HAL_ADC_ConfigChannel+0x2c8>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3b05      	subs	r3, #5
 8001d70:	221f      	movs	r2, #31
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	4019      	ands	r1, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	3b05      	subs	r3, #5
 8001d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
 8001d96:	e07e      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b0c      	cmp	r3, #12
 8001d9e:	d81c      	bhi.n	8001dda <HAL_ADC_ConfigChannel+0x30a>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	3b23      	subs	r3, #35	; 0x23
 8001db2:	221f      	movs	r2, #31
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4019      	ands	r1, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b23      	subs	r3, #35	; 0x23
 8001dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dd8:	e05d      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b12      	cmp	r3, #18
 8001de0:	d81c      	bhi.n	8001e1c <HAL_ADC_ConfigChannel+0x34c>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	3b41      	subs	r3, #65	; 0x41
 8001df4:	221f      	movs	r2, #31
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	4019      	ands	r1, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b41      	subs	r3, #65	; 0x41
 8001e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	639a      	str	r2, [r3, #56]	; 0x38
 8001e1a:	e03c      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b18      	cmp	r3, #24
 8001e22:	d81c      	bhi.n	8001e5e <HAL_ADC_ConfigChannel+0x38e>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3b5f      	subs	r3, #95	; 0x5f
 8001e36:	221f      	movs	r2, #31
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	4019      	ands	r1, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3b5f      	subs	r3, #95	; 0x5f
 8001e50:	fa00 f203 	lsl.w	r2, r0, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e5c:	e01b      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x3c6>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3b7d      	subs	r3, #125	; 0x7d
 8001e70:	221f      	movs	r2, #31
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	4019      	ands	r1, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	3b7d      	subs	r3, #125	; 0x7d
 8001e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b09      	cmp	r3, #9
 8001e9c:	d81a      	bhi.n	8001ed4 <HAL_ADC_ConfigChannel+0x404>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6959      	ldr	r1, [r3, #20]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	2207      	movs	r2, #7
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4019      	ands	r1, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6898      	ldr	r0, [r3, #8]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	615a      	str	r2, [r3, #20]
 8001ed2:	e05d      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b13      	cmp	r3, #19
 8001eda:	d81c      	bhi.n	8001f16 <HAL_ADC_ConfigChannel+0x446>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6919      	ldr	r1, [r3, #16]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	3b1e      	subs	r3, #30
 8001eee:	2207      	movs	r2, #7
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	4019      	ands	r1, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6898      	ldr	r0, [r3, #8]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	3b1e      	subs	r3, #30
 8001f08:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	611a      	str	r2, [r3, #16]
 8001f14:	e03c      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b1d      	cmp	r3, #29
 8001f1c:	d81c      	bhi.n	8001f58 <HAL_ADC_ConfigChannel+0x488>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68d9      	ldr	r1, [r3, #12]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3b3c      	subs	r3, #60	; 0x3c
 8001f30:	2207      	movs	r2, #7
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	4019      	ands	r1, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6898      	ldr	r0, [r3, #8]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	3b3c      	subs	r3, #60	; 0x3c
 8001f4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	e01b      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x4c0>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	3b5a      	subs	r3, #90	; 0x5a
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4019      	ands	r1, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6898      	ldr	r0, [r3, #8]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	3b5a      	subs	r3, #90	; 0x5a
 8001f84:	fa00 f203 	lsl.w	r2, r0, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b10      	cmp	r3, #16
 8001f96:	d003      	beq.n	8001fa0 <HAL_ADC_ConfigChannel+0x4d0>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f9c:	2b11      	cmp	r3, #17
 8001f9e:	d121      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x514>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_ADC_ConfigChannel+0x528>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d11b      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x514>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_ADC_ConfigChannel+0x528>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4a11      	ldr	r2, [pc, #68]	; (8001ff8 <HAL_ADC_ConfigChannel+0x528>)
 8001fb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fb6:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b10      	cmp	r3, #16
 8001fbe:	d111      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x514>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_ADC_ConfigChannel+0x52c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0e      	ldr	r2, [pc, #56]	; (8002000 <HAL_ADC_ConfigChannel+0x530>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0c9a      	lsrs	r2, r3, #18
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001fd6:	e002      	b.n	8001fde <HAL_ADC_ConfigChannel+0x50e>
          {
            wait_loop_index--;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f9      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x508>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40012700 	.word	0x40012700
 8001ffc:	20000000 	.word	0x20000000
 8002000:	431bde83 	.word	0x431bde83

08002004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800202c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <__NVIC_GetPriorityGrouping+0x18>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0307 	and.w	r3, r3, #7
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	2b00      	cmp	r3, #0
 8002078:	db0b      	blt.n	8002092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	f003 021f 	and.w	r2, r3, #31
 8002080:	4906      	ldr	r1, [pc, #24]	; (800209c <__NVIC_EnableIRQ+0x34>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2001      	movs	r0, #1
 800208a:	fa00 f202 	lsl.w	r2, r0, r2
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	e000e100 	.word	0xe000e100

080020a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	6039      	str	r1, [r7, #0]
 80020aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	db0a      	blt.n	80020ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	490c      	ldr	r1, [pc, #48]	; (80020ec <__NVIC_SetPriority+0x4c>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	440b      	add	r3, r1
 80020c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c8:	e00a      	b.n	80020e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4908      	ldr	r1, [pc, #32]	; (80020f0 <__NVIC_SetPriority+0x50>)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	3b04      	subs	r3, #4
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	440b      	add	r3, r1
 80020de:	761a      	strb	r2, [r3, #24]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000e100 	.word	0xe000e100
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f1c3 0307 	rsb	r3, r3, #7
 800210e:	2b04      	cmp	r3, #4
 8002110:	bf28      	it	cs
 8002112:	2304      	movcs	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3304      	adds	r3, #4
 800211a:	2b06      	cmp	r3, #6
 800211c:	d902      	bls.n	8002124 <NVIC_EncodePriority+0x30>
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3b03      	subs	r3, #3
 8002122:	e000      	b.n	8002126 <NVIC_EncodePriority+0x32>
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	401a      	ands	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800213c:	f04f 31ff 	mov.w	r1, #4294967295
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43d9      	mvns	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	4313      	orrs	r3, r2
         );
}
 800214e:	4618      	mov	r0, r3
 8002150:	3724      	adds	r7, #36	; 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b07      	cmp	r3, #7
 8002164:	d00f      	beq.n	8002186 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b06      	cmp	r3, #6
 800216a:	d00c      	beq.n	8002186 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d009      	beq.n	8002186 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d006      	beq.n	8002186 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d003      	beq.n	8002186 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800217e:	21ac      	movs	r1, #172	; 0xac
 8002180:	4804      	ldr	r0, [pc, #16]	; (8002194 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002182:	f7fe fe1f 	bl	8000dc4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ff3c 	bl	8002004 <__NVIC_SetPriorityGrouping>
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	080087a8 	.word	0x080087a8

08002198 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b0f      	cmp	r3, #15
 80021ae:	d903      	bls.n	80021b8 <HAL_NVIC_SetPriority+0x20>
 80021b0:	21c4      	movs	r1, #196	; 0xc4
 80021b2:	480e      	ldr	r0, [pc, #56]	; (80021ec <HAL_NVIC_SetPriority+0x54>)
 80021b4:	f7fe fe06 	bl	8000dc4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b0f      	cmp	r3, #15
 80021bc:	d903      	bls.n	80021c6 <HAL_NVIC_SetPriority+0x2e>
 80021be:	21c5      	movs	r1, #197	; 0xc5
 80021c0:	480a      	ldr	r0, [pc, #40]	; (80021ec <HAL_NVIC_SetPriority+0x54>)
 80021c2:	f7fe fdff 	bl	8000dc4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c6:	f7ff ff41 	bl	800204c <__NVIC_GetPriorityGrouping>
 80021ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	6978      	ldr	r0, [r7, #20]
 80021d2:	f7ff ff8f 	bl	80020f4 <NVIC_EncodePriority>
 80021d6:	4602      	mov	r2, r0
 80021d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff5e 	bl	80020a0 <__NVIC_SetPriority>
}
 80021e4:	bf00      	nop
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	080087a8 	.word	0x080087a8

080021f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da03      	bge.n	800220a <HAL_NVIC_EnableIRQ+0x1a>
 8002202:	21d8      	movs	r1, #216	; 0xd8
 8002204:	4805      	ldr	r0, [pc, #20]	; (800221c <HAL_NVIC_EnableIRQ+0x2c>)
 8002206:	f7fe fddd 	bl	8000dc4 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff2a 	bl	8002068 <__NVIC_EnableIRQ>
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	080087a8 	.word	0x080087a8

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a3f      	ldr	r2, [pc, #252]	; (8002338 <HAL_GPIO_Init+0x118>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01f      	beq.n	800227e <HAL_GPIO_Init+0x5e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a3e      	ldr	r2, [pc, #248]	; (800233c <HAL_GPIO_Init+0x11c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d01b      	beq.n	800227e <HAL_GPIO_Init+0x5e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a3d      	ldr	r2, [pc, #244]	; (8002340 <HAL_GPIO_Init+0x120>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d017      	beq.n	800227e <HAL_GPIO_Init+0x5e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a3c      	ldr	r2, [pc, #240]	; (8002344 <HAL_GPIO_Init+0x124>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_GPIO_Init+0x5e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a3b      	ldr	r2, [pc, #236]	; (8002348 <HAL_GPIO_Init+0x128>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00f      	beq.n	800227e <HAL_GPIO_Init+0x5e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a3a      	ldr	r2, [pc, #232]	; (800234c <HAL_GPIO_Init+0x12c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00b      	beq.n	800227e <HAL_GPIO_Init+0x5e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a39      	ldr	r2, [pc, #228]	; (8002350 <HAL_GPIO_Init+0x130>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <HAL_GPIO_Init+0x5e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a38      	ldr	r2, [pc, #224]	; (8002354 <HAL_GPIO_Init+0x134>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x5e>
 8002276:	21b9      	movs	r1, #185	; 0xb9
 8002278:	4837      	ldr	r0, [pc, #220]	; (8002358 <HAL_GPIO_Init+0x138>)
 800227a:	f7fe fda3 	bl	8000dc4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_GPIO_Init+0x74>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0c1b      	lsrs	r3, r3, #16
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x7c>
 8002294:	21ba      	movs	r1, #186	; 0xba
 8002296:	4830      	ldr	r0, [pc, #192]	; (8002358 <HAL_GPIO_Init+0x138>)
 8002298:	f7fe fd94 	bl	8000dc4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d035      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d031      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b11      	cmp	r3, #17
 80022b2:	d02d      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d029      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b12      	cmp	r3, #18
 80022c2:	d025      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a24      	ldr	r2, [pc, #144]	; (800235c <HAL_GPIO_Init+0x13c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d020      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4a23      	ldr	r2, [pc, #140]	; (8002360 <HAL_GPIO_Init+0x140>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d01b      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a21      	ldr	r2, [pc, #132]	; (8002364 <HAL_GPIO_Init+0x144>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d016      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4a20      	ldr	r2, [pc, #128]	; (8002368 <HAL_GPIO_Init+0x148>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d011      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4a1e      	ldr	r2, [pc, #120]	; (800236c <HAL_GPIO_Init+0x14c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00c      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4a1d      	ldr	r2, [pc, #116]	; (8002370 <HAL_GPIO_Init+0x150>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d007      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
 8002308:	21bb      	movs	r1, #187	; 0xbb
 800230a:	4813      	ldr	r0, [pc, #76]	; (8002358 <HAL_GPIO_Init+0x138>)
 800230c:	f7fe fd5a 	bl	8000dc4 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 81e4 	beq.w	80026e2 <HAL_GPIO_Init+0x4c2>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b01      	cmp	r3, #1
 8002320:	f000 81df 	beq.w	80026e2 <HAL_GPIO_Init+0x4c2>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b02      	cmp	r3, #2
 800232a:	f000 81da 	beq.w	80026e2 <HAL_GPIO_Init+0x4c2>
 800232e:	21bc      	movs	r1, #188	; 0xbc
 8002330:	4809      	ldr	r0, [pc, #36]	; (8002358 <HAL_GPIO_Init+0x138>)
 8002332:	f7fe fd47 	bl	8000dc4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002336:	e1d4      	b.n	80026e2 <HAL_GPIO_Init+0x4c2>
 8002338:	40020000 	.word	0x40020000
 800233c:	40020400 	.word	0x40020400
 8002340:	40020800 	.word	0x40020800
 8002344:	40020c00 	.word	0x40020c00
 8002348:	40021000 	.word	0x40021000
 800234c:	40021800 	.word	0x40021800
 8002350:	40021c00 	.word	0x40021c00
 8002354:	40021400 	.word	0x40021400
 8002358:	080087e4 	.word	0x080087e4
 800235c:	10110000 	.word	0x10110000
 8002360:	10210000 	.word	0x10210000
 8002364:	10310000 	.word	0x10310000
 8002368:	10120000 	.word	0x10120000
 800236c:	10220000 	.word	0x10220000
 8002370:	10320000 	.word	0x10320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 81a8 	beq.w	80026dc <HAL_GPIO_Init+0x4bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x17c>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b12      	cmp	r3, #18
 800239a:	d14f      	bne.n	800243c <HAL_GPIO_Init+0x21c>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a92      	ldr	r2, [pc, #584]	; (80025e8 <HAL_GPIO_Init+0x3c8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d01f      	beq.n	80023e4 <HAL_GPIO_Init+0x1c4>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a91      	ldr	r2, [pc, #580]	; (80025ec <HAL_GPIO_Init+0x3cc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d01b      	beq.n	80023e4 <HAL_GPIO_Init+0x1c4>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a90      	ldr	r2, [pc, #576]	; (80025f0 <HAL_GPIO_Init+0x3d0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d017      	beq.n	80023e4 <HAL_GPIO_Init+0x1c4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a8f      	ldr	r2, [pc, #572]	; (80025f4 <HAL_GPIO_Init+0x3d4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d013      	beq.n	80023e4 <HAL_GPIO_Init+0x1c4>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a8e      	ldr	r2, [pc, #568]	; (80025f8 <HAL_GPIO_Init+0x3d8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00f      	beq.n	80023e4 <HAL_GPIO_Init+0x1c4>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a8d      	ldr	r2, [pc, #564]	; (80025fc <HAL_GPIO_Init+0x3dc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d00b      	beq.n	80023e4 <HAL_GPIO_Init+0x1c4>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a8c      	ldr	r2, [pc, #560]	; (8002600 <HAL_GPIO_Init+0x3e0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d007      	beq.n	80023e4 <HAL_GPIO_Init+0x1c4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a8b      	ldr	r2, [pc, #556]	; (8002604 <HAL_GPIO_Init+0x3e4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x1c4>
 80023dc:	21cb      	movs	r1, #203	; 0xcb
 80023de:	488a      	ldr	r0, [pc, #552]	; (8002608 <HAL_GPIO_Init+0x3e8>)
 80023e0:	f7fe fcf0 	bl	8000dc4 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b0f      	cmp	r3, #15
 80023ea:	d903      	bls.n	80023f4 <HAL_GPIO_Init+0x1d4>
 80023ec:	21cc      	movs	r1, #204	; 0xcc
 80023ee:	4886      	ldr	r0, [pc, #536]	; (8002608 <HAL_GPIO_Init+0x3e8>)
 80023f0:	f7fe fce8 	bl	8000dc4 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	6939      	ldr	r1, [r7, #16]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d00b      	beq.n	8002490 <HAL_GPIO_Init+0x270>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d007      	beq.n	8002490 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002484:	2b11      	cmp	r3, #17
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x270>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b12      	cmp	r3, #18
 800248e:	d144      	bne.n	800251a <HAL_GPIO_Init+0x2fa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00f      	beq.n	80024b8 <HAL_GPIO_Init+0x298>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d00b      	beq.n	80024b8 <HAL_GPIO_Init+0x298>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d007      	beq.n	80024b8 <HAL_GPIO_Init+0x298>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x298>
 80024b0:	21e1      	movs	r1, #225	; 0xe1
 80024b2:	4855      	ldr	r0, [pc, #340]	; (8002608 <HAL_GPIO_Init+0x3e8>)
 80024b4:	f7fe fc86 	bl	8000dc4 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80024ee:	2201      	movs	r2, #1
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 0201 	and.w	r2, r3, #1
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4013      	ands	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80c2 	beq.w	80026dc <HAL_GPIO_Init+0x4bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002558:	4b2c      	ldr	r3, [pc, #176]	; (800260c <HAL_GPIO_Init+0x3ec>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4a2b      	ldr	r2, [pc, #172]	; (800260c <HAL_GPIO_Init+0x3ec>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6213      	str	r3, [r2, #32]
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <HAL_GPIO_Init+0x3ec>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8002570:	4a27      	ldr	r2, [pc, #156]	; (8002610 <HAL_GPIO_Init+0x3f0>)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <HAL_GPIO_Init+0x3c8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d03b      	beq.n	8002614 <HAL_GPIO_Init+0x3f4>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a13      	ldr	r2, [pc, #76]	; (80025ec <HAL_GPIO_Init+0x3cc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d01f      	beq.n	80025e4 <HAL_GPIO_Init+0x3c4>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <HAL_GPIO_Init+0x3d0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d019      	beq.n	80025e0 <HAL_GPIO_Init+0x3c0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <HAL_GPIO_Init+0x3d4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <HAL_GPIO_Init+0x3bc>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <HAL_GPIO_Init+0x3d8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00d      	beq.n	80025d8 <HAL_GPIO_Init+0x3b8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a11      	ldr	r2, [pc, #68]	; (8002604 <HAL_GPIO_Init+0x3e4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d007      	beq.n	80025d4 <HAL_GPIO_Init+0x3b4>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <HAL_GPIO_Init+0x3dc>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d101      	bne.n	80025d0 <HAL_GPIO_Init+0x3b0>
 80025cc:	2306      	movs	r3, #6
 80025ce:	e022      	b.n	8002616 <HAL_GPIO_Init+0x3f6>
 80025d0:	2307      	movs	r3, #7
 80025d2:	e020      	b.n	8002616 <HAL_GPIO_Init+0x3f6>
 80025d4:	2305      	movs	r3, #5
 80025d6:	e01e      	b.n	8002616 <HAL_GPIO_Init+0x3f6>
 80025d8:	2304      	movs	r3, #4
 80025da:	e01c      	b.n	8002616 <HAL_GPIO_Init+0x3f6>
 80025dc:	2303      	movs	r3, #3
 80025de:	e01a      	b.n	8002616 <HAL_GPIO_Init+0x3f6>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e018      	b.n	8002616 <HAL_GPIO_Init+0x3f6>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e016      	b.n	8002616 <HAL_GPIO_Init+0x3f6>
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40020400 	.word	0x40020400
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40021800 	.word	0x40021800
 8002600:	40021c00 	.word	0x40021c00
 8002604:	40021400 	.word	0x40021400
 8002608:	080087e4 	.word	0x080087e4
 800260c:	40023800 	.word	0x40023800
 8002610:	40010000 	.word	0x40010000
 8002614:	2300      	movs	r3, #0
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	f002 0203 	and.w	r2, r2, #3
 800261c:	0092      	lsls	r2, r2, #2
 800261e:	4093      	lsls	r3, r2
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002626:	4935      	ldr	r1, [pc, #212]	; (80026fc <HAL_GPIO_Init+0x4dc>)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3302      	adds	r3, #2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002634:	4b32      	ldr	r3, [pc, #200]	; (8002700 <HAL_GPIO_Init+0x4e0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	43db      	mvns	r3, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x438>
        {
          SET_BIT(temp, iocurrent); 
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002658:	4a29      	ldr	r2, [pc, #164]	; (8002700 <HAL_GPIO_Init+0x4e0>)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800265e:	4b28      	ldr	r3, [pc, #160]	; (8002700 <HAL_GPIO_Init+0x4e0>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43db      	mvns	r3, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x462>
        {
          SET_BIT(temp, iocurrent); 
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002682:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <HAL_GPIO_Init+0x4e0>)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <HAL_GPIO_Init+0x4e0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x48c>
        {
          SET_BIT(temp, iocurrent); 
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <HAL_GPIO_Init+0x4e0>)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b2:	4b13      	ldr	r3, [pc, #76]	; (8002700 <HAL_GPIO_Init+0x4e0>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x4b6>
        {
          SET_BIT(temp, iocurrent); 
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026d6:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <HAL_GPIO_Init+0x4e0>)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3301      	adds	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f47f ae41 	bne.w	8002374 <HAL_GPIO_Init+0x154>
  } 
}
 80026f2:	bf00      	nop
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40010000 	.word	0x40010000
 8002700:	40010400 	.word	0x40010400

08002704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	807b      	strh	r3, [r7, #2]
 8002710:	4613      	mov	r3, r2
 8002712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002714:	887b      	ldrh	r3, [r7, #2]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <HAL_GPIO_WritePin+0x20>
 800271a:	887b      	ldrh	r3, [r7, #2]
 800271c:	0c1b      	lsrs	r3, r3, #16
 800271e:	041b      	lsls	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <HAL_GPIO_WritePin+0x2a>
 8002724:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8002728:	480e      	ldr	r0, [pc, #56]	; (8002764 <HAL_GPIO_WritePin+0x60>)
 800272a:	f7fe fb4b 	bl	8000dc4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800272e:	787b      	ldrb	r3, [r7, #1]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d007      	beq.n	8002744 <HAL_GPIO_WritePin+0x40>
 8002734:	787b      	ldrb	r3, [r7, #1]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d004      	beq.n	8002744 <HAL_GPIO_WritePin+0x40>
 800273a:	f240 11a5 	movw	r1, #421	; 0x1a5
 800273e:	4809      	ldr	r0, [pc, #36]	; (8002764 <HAL_GPIO_WritePin+0x60>)
 8002740:	f7fe fb40 	bl	8000dc4 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002744:	787b      	ldrb	r3, [r7, #1]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800274a:	887a      	ldrh	r2, [r7, #2]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002750:	e003      	b.n	800275a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	041a      	lsls	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	619a      	str	r2, [r3, #24]
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	080087e4 	.word	0x080087e4

08002768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d006      	beq.n	800278c <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd ff6a 	bl	8000660 <HAL_GPIO_EXTI_Callback>
  }
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40010400 	.word	0x40010400

08002798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e19b      	b.n	8002ae2 <HAL_I2C_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a98      	ldr	r2, [pc, #608]	; (8002a10 <HAL_I2C_Init+0x278>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d009      	beq.n	80027c8 <HAL_I2C_Init+0x30>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a96      	ldr	r2, [pc, #600]	; (8002a14 <HAL_I2C_Init+0x27c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d004      	beq.n	80027c8 <HAL_I2C_Init+0x30>
 80027be:	f240 11bb 	movw	r1, #443	; 0x1bb
 80027c2:	4895      	ldr	r0, [pc, #596]	; (8002a18 <HAL_I2C_Init+0x280>)
 80027c4:	f7fe fafe 	bl	8000dc4 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <HAL_I2C_Init+0x42>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a91      	ldr	r2, [pc, #580]	; (8002a1c <HAL_I2C_Init+0x284>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d904      	bls.n	80027e4 <HAL_I2C_Init+0x4c>
 80027da:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80027de:	488e      	ldr	r0, [pc, #568]	; (8002a18 <HAL_I2C_Init+0x280>)
 80027e0:	f7fe faf0 	bl	8000dc4 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d009      	beq.n	8002800 <HAL_I2C_Init+0x68>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027f4:	d004      	beq.n	8002800 <HAL_I2C_Init+0x68>
 80027f6:	f240 11bd 	movw	r1, #445	; 0x1bd
 80027fa:	4887      	ldr	r0, [pc, #540]	; (8002a18 <HAL_I2C_Init+0x280>)
 80027fc:	f7fe fae2 	bl	8000dc4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002808:	f023 0303 	bic.w	r3, r3, #3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <HAL_I2C_Init+0x82>
 8002810:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002814:	4880      	ldr	r0, [pc, #512]	; (8002a18 <HAL_I2C_Init+0x280>)
 8002816:	f7fe fad5 	bl	8000dc4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002822:	d009      	beq.n	8002838 <HAL_I2C_Init+0xa0>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800282c:	d004      	beq.n	8002838 <HAL_I2C_Init+0xa0>
 800282e:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002832:	4879      	ldr	r0, [pc, #484]	; (8002a18 <HAL_I2C_Init+0x280>)
 8002834:	f7fe fac6 	bl	8000dc4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_I2C_Init+0xba>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d004      	beq.n	8002852 <HAL_I2C_Init+0xba>
 8002848:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800284c:	4872      	ldr	r0, [pc, #456]	; (8002a18 <HAL_I2C_Init+0x280>)
 800284e:	f7fe fab9 	bl	8000dc4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800285a:	2b00      	cmp	r3, #0
 800285c:	d004      	beq.n	8002868 <HAL_I2C_Init+0xd0>
 800285e:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002862:	486d      	ldr	r0, [pc, #436]	; (8002a18 <HAL_I2C_Init+0x280>)
 8002864:	f7fe faae 	bl	8000dc4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_I2C_Init+0xea>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d004      	beq.n	8002882 <HAL_I2C_Init+0xea>
 8002878:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800287c:	4866      	ldr	r0, [pc, #408]	; (8002a18 <HAL_I2C_Init+0x280>)
 800287e:	f7fe faa1 	bl	8000dc4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_I2C_Init+0x104>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	2b80      	cmp	r3, #128	; 0x80
 8002890:	d004      	beq.n	800289c <HAL_I2C_Init+0x104>
 8002892:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002896:	4860      	ldr	r0, [pc, #384]	; (8002a18 <HAL_I2C_Init+0x280>)
 8002898:	f7fe fa94 	bl	8000dc4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7fe f9bd 	bl	8000c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2224      	movs	r2, #36	; 0x24
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028ce:	f000 ffab 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 80028d2:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a51      	ldr	r2, [pc, #324]	; (8002a20 <HAL_I2C_Init+0x288>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d807      	bhi.n	80028ee <HAL_I2C_Init+0x156>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4a50      	ldr	r2, [pc, #320]	; (8002a24 <HAL_I2C_Init+0x28c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	bf94      	ite	ls
 80028e6:	2301      	movls	r3, #1
 80028e8:	2300      	movhi	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	e006      	b.n	80028fc <HAL_I2C_Init+0x164>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a4d      	ldr	r2, [pc, #308]	; (8002a28 <HAL_I2C_Init+0x290>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	bf94      	ite	ls
 80028f6:	2301      	movls	r3, #1
 80028f8:	2300      	movhi	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_I2C_Init+0x16c>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0ee      	b.n	8002ae2 <HAL_I2C_Init+0x34a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4a49      	ldr	r2, [pc, #292]	; (8002a2c <HAL_I2C_Init+0x294>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	0c9b      	lsrs	r3, r3, #18
 800290e:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	430a      	orrs	r2, r1
 8002922:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4a3b      	ldr	r2, [pc, #236]	; (8002a20 <HAL_I2C_Init+0x288>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d802      	bhi.n	800293e <HAL_I2C_Init+0x1a6>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	3301      	adds	r3, #1
 800293c:	e009      	b.n	8002952 <HAL_I2C_Init+0x1ba>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	4a39      	ldr	r2, [pc, #228]	; (8002a30 <HAL_I2C_Init+0x298>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	099b      	lsrs	r3, r3, #6
 8002950:	3301      	adds	r3, #1
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	430b      	orrs	r3, r1
 8002958:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002964:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	492c      	ldr	r1, [pc, #176]	; (8002a20 <HAL_I2C_Init+0x288>)
 800296e:	428b      	cmp	r3, r1
 8002970:	d80d      	bhi.n	800298e <HAL_I2C_Init+0x1f6>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1e59      	subs	r1, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002980:	3301      	adds	r3, #1
 8002982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002986:	2b04      	cmp	r3, #4
 8002988:	bf38      	it	cc
 800298a:	2304      	movcc	r3, #4
 800298c:	e062      	b.n	8002a54 <HAL_I2C_Init+0x2bc>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d111      	bne.n	80029ba <HAL_I2C_Init+0x222>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1e58      	subs	r0, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6859      	ldr	r1, [r3, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	440b      	add	r3, r1
 80029a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a8:	3301      	adds	r3, #1
 80029aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	e012      	b.n	80029e0 <HAL_I2C_Init+0x248>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1e58      	subs	r0, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6859      	ldr	r1, [r3, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	0099      	lsls	r1, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_I2C_Init+0x250>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e035      	b.n	8002a54 <HAL_I2C_Init+0x2bc>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d121      	bne.n	8002a34 <HAL_I2C_Init+0x29c>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e58      	subs	r0, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	440b      	add	r3, r1
 80029fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0c:	e022      	b.n	8002a54 <HAL_I2C_Init+0x2bc>
 8002a0e:	bf00      	nop
 8002a10:	40005400 	.word	0x40005400
 8002a14:	40005800 	.word	0x40005800
 8002a18:	08008820 	.word	0x08008820
 8002a1c:	00061a80 	.word	0x00061a80
 8002a20:	000186a0 	.word	0x000186a0
 8002a24:	001e847f 	.word	0x001e847f
 8002a28:	003d08ff 	.word	0x003d08ff
 8002a2c:	431bde83 	.word	0x431bde83
 8002a30:	10624dd3 	.word	0x10624dd3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1e58      	subs	r0, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	0099      	lsls	r1, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	6809      	ldr	r1, [r1, #0]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69da      	ldr	r2, [r3, #28]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6911      	ldr	r1, [r2, #16]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68d2      	ldr	r2, [r2, #12]
 8002a8e:	4311      	orrs	r1, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	430b      	orrs	r3, r1
 8002a96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop

08002aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d102      	bne.n	8002b00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	f000 bc6c 	b.w	80033d8 <HAL_RCC_OscConfig+0x8ec>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d022      	beq.n	8002b4e <HAL_RCC_OscConfig+0x62>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d11c      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d116      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d110      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d104      	bne.n	8002b4e <HAL_RCC_OscConfig+0x62>
 8002b44:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002b48:	4897      	ldr	r0, [pc, #604]	; (8002da8 <HAL_RCC_OscConfig+0x2bc>)
 8002b4a:	f7fe f93b 	bl	8000dc4 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4e:	4b97      	ldr	r3, [pc, #604]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b58:	4b94      	ldr	r3, [pc, #592]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b60:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 808e 	beq.w	8002c8c <HAL_RCC_OscConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00c      	beq.n	8002b92 <HAL_RCC_OscConfig+0xa6>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCC_OscConfig+0xa6>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	d004      	beq.n	8002b92 <HAL_RCC_OscConfig+0xa6>
 8002b88:	f240 1159 	movw	r1, #345	; 0x159
 8002b8c:	4886      	ldr	r0, [pc, #536]	; (8002da8 <HAL_RCC_OscConfig+0x2bc>)
 8002b8e:	f7fe f919 	bl	8000dc4 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d006      	beq.n	8002ba6 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	d110      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xd4>
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xd4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba6:	4b81      	ldr	r3, [pc, #516]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d06b      	beq.n	8002c8a <HAL_RCC_OscConfig+0x19e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d167      	bne.n	8002c8a <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f000 bc0c 	b.w	80033d8 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d106      	bne.n	8002bd6 <HAL_RCC_OscConfig+0xea>
 8002bc8:	4b78      	ldr	r3, [pc, #480]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a77      	ldr	r2, [pc, #476]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	e02d      	b.n	8002c32 <HAL_RCC_OscConfig+0x146>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x10c>
 8002bde:	4b73      	ldr	r3, [pc, #460]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a72      	ldr	r2, [pc, #456]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4b70      	ldr	r3, [pc, #448]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a6f      	ldr	r2, [pc, #444]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e01c      	b.n	8002c32 <HAL_RCC_OscConfig+0x146>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	d10c      	bne.n	8002c1a <HAL_RCC_OscConfig+0x12e>
 8002c00:	4b6a      	ldr	r3, [pc, #424]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a69      	ldr	r2, [pc, #420]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b67      	ldr	r3, [pc, #412]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a66      	ldr	r2, [pc, #408]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	e00b      	b.n	8002c32 <HAL_RCC_OscConfig+0x146>
 8002c1a:	4b64      	ldr	r3, [pc, #400]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a63      	ldr	r2, [pc, #396]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	4b61      	ldr	r3, [pc, #388]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a60      	ldr	r2, [pc, #384]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d013      	beq.n	8002c62 <HAL_RCC_OscConfig+0x176>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fc9b 	bl	8001574 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x168>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c42:	f7fe fc97 	bl	8001574 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b64      	cmp	r3, #100	; 0x64
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x168>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e3c1      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c54:	4b55      	ldr	r3, [pc, #340]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x156>
 8002c60:	e014      	b.n	8002c8c <HAL_RCC_OscConfig+0x1a0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fe fc87 	bl	8001574 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x190>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6a:	f7fe fc83 	bl	8001574 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b64      	cmp	r3, #100	; 0x64
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e3ad      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c7c:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f0      	bne.n	8002c6a <HAL_RCC_OscConfig+0x17e>
 8002c88:	e000      	b.n	8002c8c <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d070      	beq.n	8002d7a <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x1c6>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d004      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x1c6>
 8002ca8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002cac:	483e      	ldr	r0, [pc, #248]	; (8002da8 <HAL_RCC_OscConfig+0x2bc>)
 8002cae:	f7fe f889 	bl	8000dc4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	2b1f      	cmp	r3, #31
 8002cb8:	d904      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x1d8>
 8002cba:	f240 118d 	movw	r1, #397	; 0x18d
 8002cbe:	483a      	ldr	r0, [pc, #232]	; (8002da8 <HAL_RCC_OscConfig+0x2bc>)
 8002cc0:	f7fe f880 	bl	8000dc4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d005      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1ea>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b0c      	cmp	r3, #12
 8002cce:	d119      	bne.n	8002d04 <HAL_RCC_OscConfig+0x218>
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d116      	bne.n	8002d04 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	4b35      	ldr	r3, [pc, #212]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x202>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x202>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e374      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cee:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	492b      	ldr	r1, [pc, #172]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	e03a      	b.n	8002d7a <HAL_RCC_OscConfig+0x28e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d020      	beq.n	8002d4e <HAL_RCC_OscConfig+0x262>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d0c:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <HAL_RCC_OscConfig+0x2c4>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7fe fc2f 	bl	8001574 <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x240>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d1a:	f7fe fc2b 	bl	8001574 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x240>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e355      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d2c:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x22e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	4919      	ldr	r1, [pc, #100]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
 8002d4c:	e015      	b.n	8002d7a <HAL_RCC_OscConfig+0x28e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4e:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <HAL_RCC_OscConfig+0x2c4>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fc0e 	bl	8001574 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x282>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fe fc0a 	bl	8001574 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x282>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e334      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 8129 	beq.w	8002fda <HAL_RCC_OscConfig+0x4ee>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f040 80a4 	bne.w	8002ed8 <HAL_RCC_OscConfig+0x3ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_OscConfig+0x2c0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00b      	beq.n	8002db4 <HAL_RCC_OscConfig+0x2c8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d107      	bne.n	8002db4 <HAL_RCC_OscConfig+0x2c8>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e317      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
 8002da8:	08008858 	.word	0x08008858
 8002dac:	40023800 	.word	0x40023800
 8002db0:	42470000 	.word	0x42470000
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
       /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	2bff      	cmp	r3, #255	; 0xff
 8002dba:	d904      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x2da>
 8002dbc:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002dc0:	48a5      	ldr	r0, [pc, #660]	; (8003058 <HAL_RCC_OscConfig+0x56c>)
 8002dc2:	f7fd ffff 	bl	8000dc4 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d022      	beq.n	8002e14 <HAL_RCC_OscConfig+0x328>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd6:	d01d      	beq.n	8002e14 <HAL_RCC_OscConfig+0x328>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de0:	d018      	beq.n	8002e14 <HAL_RCC_OscConfig+0x328>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002dea:	d013      	beq.n	8002e14 <HAL_RCC_OscConfig+0x328>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df4:	d00e      	beq.n	8002e14 <HAL_RCC_OscConfig+0x328>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002dfe:	d009      	beq.n	8002e14 <HAL_RCC_OscConfig+0x328>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e08:	d004      	beq.n	8002e14 <HAL_RCC_OscConfig+0x328>
 8002e0a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002e0e:	4892      	ldr	r0, [pc, #584]	; (8003058 <HAL_RCC_OscConfig+0x56c>)
 8002e10:	f7fd ffd8 	bl	8000dc4 <assert_failed>

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1a      	ldr	r2, [r3, #32]
 8002e18:	4b90      	ldr	r3, [pc, #576]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d91d      	bls.n	8002e60 <HAL_RCC_OscConfig+0x374>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fd67 	bl	80038fc <RCC_SetFlashLatencyFromMSIRange>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e2cf      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e38:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4985      	ldr	r1, [pc, #532]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4a:	4b84      	ldr	r3, [pc, #528]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	061b      	lsls	r3, r3, #24
 8002e58:	4980      	ldr	r1, [pc, #512]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
 8002e5e:	e01c      	b.n	8002e9a <HAL_RCC_OscConfig+0x3ae>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e60:	4b7e      	ldr	r3, [pc, #504]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	497b      	ldr	r1, [pc, #492]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e72:	4b7a      	ldr	r3, [pc, #488]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	061b      	lsls	r3, r3, #24
 8002e80:	4976      	ldr	r1, [pc, #472]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fd36 	bl	80038fc <RCC_SetFlashLatencyFromMSIRange>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e29e      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	0b5b      	lsrs	r3, r3, #13
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002eaa:	4a6c      	ldr	r2, [pc, #432]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002eac:	6892      	ldr	r2, [r2, #8]
 8002eae:	0912      	lsrs	r2, r2, #4
 8002eb0:	f002 020f 	and.w	r2, r2, #15
 8002eb4:	496a      	ldr	r1, [pc, #424]	; (8003060 <HAL_RCC_OscConfig+0x574>)
 8002eb6:	5c8a      	ldrb	r2, [r1, r2]
 8002eb8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002eba:	4a6a      	ldr	r2, [pc, #424]	; (8003064 <HAL_RCC_OscConfig+0x578>)
 8002ebc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ebe:	4b6a      	ldr	r3, [pc, #424]	; (8003068 <HAL_RCC_OscConfig+0x57c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd ffbc 	bl	8000e40 <HAL_InitTick>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8083 	beq.w	8002fda <HAL_RCC_OscConfig+0x4ee>
        {
          return status;
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	e27f      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x406>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d004      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x406>
 8002ee8:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002eec:	485a      	ldr	r0, [pc, #360]	; (8003058 <HAL_RCC_OscConfig+0x56c>)
 8002eee:	f7fd ff69 	bl	8000dc4 <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d059      	beq.n	8002fae <HAL_RCC_OscConfig+0x4c2>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002efa:	4b5c      	ldr	r3, [pc, #368]	; (800306c <HAL_RCC_OscConfig+0x580>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fe fb38 	bl	8001574 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f08:	f7fe fb34 	bl	8001574 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e25e      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f1a:	4b50      	ldr	r3, [pc, #320]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x41c>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	2bff      	cmp	r3, #255	; 0xff
 8002f2c:	d904      	bls.n	8002f38 <HAL_RCC_OscConfig+0x44c>
 8002f2e:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8002f32:	4849      	ldr	r0, [pc, #292]	; (8003058 <HAL_RCC_OscConfig+0x56c>)
 8002f34:	f7fd ff46 	bl	8000dc4 <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d022      	beq.n	8002f86 <HAL_RCC_OscConfig+0x49a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f48:	d01d      	beq.n	8002f86 <HAL_RCC_OscConfig+0x49a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f52:	d018      	beq.n	8002f86 <HAL_RCC_OscConfig+0x49a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f5c:	d013      	beq.n	8002f86 <HAL_RCC_OscConfig+0x49a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f66:	d00e      	beq.n	8002f86 <HAL_RCC_OscConfig+0x49a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f70:	d009      	beq.n	8002f86 <HAL_RCC_OscConfig+0x49a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f7a:	d004      	beq.n	8002f86 <HAL_RCC_OscConfig+0x49a>
 8002f7c:	f240 211d 	movw	r1, #541	; 0x21d
 8002f80:	4835      	ldr	r0, [pc, #212]	; (8003058 <HAL_RCC_OscConfig+0x56c>)
 8002f82:	f7fd ff1f 	bl	8000dc4 <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f86:	4b35      	ldr	r3, [pc, #212]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	4932      	ldr	r1, [pc, #200]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f98:	4b30      	ldr	r3, [pc, #192]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	061b      	lsls	r3, r3, #24
 8002fa6:	492d      	ldr	r1, [pc, #180]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
 8002fac:	e015      	b.n	8002fda <HAL_RCC_OscConfig+0x4ee>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fae:	4b2f      	ldr	r3, [pc, #188]	; (800306c <HAL_RCC_OscConfig+0x580>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fade 	bl	8001574 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x4e2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fbc:	f7fe fada 	bl	8001574 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e204      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fce:	4b23      	ldr	r3, [pc, #140]	; (800305c <HAL_RCC_OscConfig+0x570>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d04c      	beq.n	8003080 <HAL_RCC_OscConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCC_OscConfig+0x514>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d004      	beq.n	8003000 <HAL_RCC_OscConfig+0x514>
 8002ff6:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8002ffa:	4817      	ldr	r0, [pc, #92]	; (8003058 <HAL_RCC_OscConfig+0x56c>)
 8002ffc:	f7fd fee2 	bl	8000dc4 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d016      	beq.n	8003036 <HAL_RCC_OscConfig+0x54a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_RCC_OscConfig+0x584>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300e:	f7fe fab1 	bl	8001574 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003016:	f7fe faad 	bl	8001574 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e1d7      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <HAL_RCC_OscConfig+0x570>)
 800302a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x52a>
 8003034:	e024      	b.n	8003080 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003036:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <HAL_RCC_OscConfig+0x584>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303c:	f7fe fa9a 	bl	8001574 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003042:	e017      	b.n	8003074 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003044:	f7fe fa96 	bl	8001574 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d910      	bls.n	8003074 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e1c0      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
 8003056:	bf00      	nop
 8003058:	08008858 	.word	0x08008858
 800305c:	40023800 	.word	0x40023800
 8003060:	08008a2c 	.word	0x08008a2c
 8003064:	20000000 	.word	0x20000000
 8003068:	20000004 	.word	0x20000004
 800306c:	42470020 	.word	0x42470020
 8003070:	42470680 	.word	0x42470680
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003074:	4ba2      	ldr	r3, [pc, #648]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e1      	bne.n	8003044 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80b7 	beq.w	80031fc <HAL_RCC_OscConfig+0x710>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <HAL_RCC_OscConfig+0x5c8>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d008      	beq.n	80030b4 <HAL_RCC_OscConfig+0x5c8>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	d004      	beq.n	80030b4 <HAL_RCC_OscConfig+0x5c8>
 80030aa:	f44f 711a 	mov.w	r1, #616	; 0x268
 80030ae:	4895      	ldr	r0, [pc, #596]	; (8003304 <HAL_RCC_OscConfig+0x818>)
 80030b0:	f7fd fe88 	bl	8000dc4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b4:	4b92      	ldr	r3, [pc, #584]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10d      	bne.n	80030dc <HAL_RCC_OscConfig+0x5f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c0:	4b8f      	ldr	r3, [pc, #572]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	4a8e      	ldr	r2, [pc, #568]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 80030c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ca:	6253      	str	r3, [r2, #36]	; 0x24
 80030cc:	4b8c      	ldr	r3, [pc, #560]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d8:	2301      	movs	r3, #1
 80030da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	4b8a      	ldr	r3, [pc, #552]	; (8003308 <HAL_RCC_OscConfig+0x81c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d118      	bne.n	800311a <HAL_RCC_OscConfig+0x62e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e8:	4b87      	ldr	r3, [pc, #540]	; (8003308 <HAL_RCC_OscConfig+0x81c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a86      	ldr	r2, [pc, #536]	; (8003308 <HAL_RCC_OscConfig+0x81c>)
 80030ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f4:	f7fe fa3e 	bl	8001574 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030fc:	f7fe fa3a 	bl	8001574 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b64      	cmp	r3, #100	; 0x64
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e164      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310e:	4b7e      	ldr	r3, [pc, #504]	; (8003308 <HAL_RCC_OscConfig+0x81c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x610>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d106      	bne.n	8003130 <HAL_RCC_OscConfig+0x644>
 8003122:	4b77      	ldr	r3, [pc, #476]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 8003124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003126:	4a76      	ldr	r2, [pc, #472]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6353      	str	r3, [r2, #52]	; 0x34
 800312e:	e02d      	b.n	800318c <HAL_RCC_OscConfig+0x6a0>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10c      	bne.n	8003152 <HAL_RCC_OscConfig+0x666>
 8003138:	4b71      	ldr	r3, [pc, #452]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 800313a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313c:	4a70      	ldr	r2, [pc, #448]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 800313e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003142:	6353      	str	r3, [r2, #52]	; 0x34
 8003144:	4b6e      	ldr	r3, [pc, #440]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 8003146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003148:	4a6d      	ldr	r2, [pc, #436]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 800314a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800314e:	6353      	str	r3, [r2, #52]	; 0x34
 8003150:	e01c      	b.n	800318c <HAL_RCC_OscConfig+0x6a0>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b05      	cmp	r3, #5
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x688>
 800315a:	4b69      	ldr	r3, [pc, #420]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 800315c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315e:	4a68      	ldr	r2, [pc, #416]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 8003160:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003164:	6353      	str	r3, [r2, #52]	; 0x34
 8003166:	4b66      	ldr	r3, [pc, #408]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 8003168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316a:	4a65      	ldr	r2, [pc, #404]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 800316c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003170:	6353      	str	r3, [r2, #52]	; 0x34
 8003172:	e00b      	b.n	800318c <HAL_RCC_OscConfig+0x6a0>
 8003174:	4b62      	ldr	r3, [pc, #392]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003178:	4a61      	ldr	r2, [pc, #388]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 800317a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800317e:	6353      	str	r3, [r2, #52]	; 0x34
 8003180:	4b5f      	ldr	r3, [pc, #380]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 8003182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003184:	4a5e      	ldr	r2, [pc, #376]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 8003186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800318a:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d015      	beq.n	80031c0 <HAL_RCC_OscConfig+0x6d4>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003194:	f7fe f9ee 	bl	8001574 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_OscConfig+0x6c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800319c:	f7fe f9ea 	bl	8001574 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e112      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031b2:	4b53      	ldr	r3, [pc, #332]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 80031b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0ee      	beq.n	800319c <HAL_RCC_OscConfig+0x6b0>
 80031be:	e014      	b.n	80031ea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c0:	f7fe f9d8 	bl	8001574 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031c6:	e00a      	b.n	80031de <HAL_RCC_OscConfig+0x6f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c8:	f7fe f9d4 	bl	8001574 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e0fc      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031de:	4b48      	ldr	r3, [pc, #288]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1ee      	bne.n	80031c8 <HAL_RCC_OscConfig+0x6dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031ea:	7ffb      	ldrb	r3, [r7, #31]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d105      	bne.n	80031fc <HAL_RCC_OscConfig+0x710>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f0:	4b43      	ldr	r3, [pc, #268]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	4a42      	ldr	r2, [pc, #264]	; (8003300 <HAL_RCC_OscConfig+0x814>)
 80031f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031fa:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00c      	beq.n	800321e <HAL_RCC_OscConfig+0x732>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	2b01      	cmp	r3, #1
 800320a:	d008      	beq.n	800321e <HAL_RCC_OscConfig+0x732>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	2b02      	cmp	r3, #2
 8003212:	d004      	beq.n	800321e <HAL_RCC_OscConfig+0x732>
 8003214:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8003218:	483a      	ldr	r0, [pc, #232]	; (8003304 <HAL_RCC_OscConfig+0x818>)
 800321a:	f7fd fdd3 	bl	8000dc4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 80d7 	beq.w	80033d6 <HAL_RCC_OscConfig+0x8ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	f000 80b3 	beq.w	8003396 <HAL_RCC_OscConfig+0x8aa>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	2b02      	cmp	r3, #2
 8003236:	f040 8097 	bne.w	8003368 <HAL_RCC_OscConfig+0x87c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_RCC_OscConfig+0x76a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324a:	d004      	beq.n	8003256 <HAL_RCC_OscConfig+0x76a>
 800324c:	f240 21b5 	movw	r1, #693	; 0x2b5
 8003250:	482c      	ldr	r0, [pc, #176]	; (8003304 <HAL_RCC_OscConfig+0x818>)
 8003252:	f7fd fdb7 	bl	8000dc4 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d02c      	beq.n	80032b8 <HAL_RCC_OscConfig+0x7cc>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003266:	d027      	beq.n	80032b8 <HAL_RCC_OscConfig+0x7cc>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003270:	d022      	beq.n	80032b8 <HAL_RCC_OscConfig+0x7cc>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800327a:	d01d      	beq.n	80032b8 <HAL_RCC_OscConfig+0x7cc>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003284:	d018      	beq.n	80032b8 <HAL_RCC_OscConfig+0x7cc>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800328e:	d013      	beq.n	80032b8 <HAL_RCC_OscConfig+0x7cc>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003298:	d00e      	beq.n	80032b8 <HAL_RCC_OscConfig+0x7cc>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80032a2:	d009      	beq.n	80032b8 <HAL_RCC_OscConfig+0x7cc>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ac:	d004      	beq.n	80032b8 <HAL_RCC_OscConfig+0x7cc>
 80032ae:	f240 21b6 	movw	r1, #694	; 0x2b6
 80032b2:	4814      	ldr	r0, [pc, #80]	; (8003304 <HAL_RCC_OscConfig+0x818>)
 80032b4:	f7fd fd86 	bl	8000dc4 <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c0:	d00e      	beq.n	80032e0 <HAL_RCC_OscConfig+0x7f4>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ca:	d009      	beq.n	80032e0 <HAL_RCC_OscConfig+0x7f4>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032d4:	d004      	beq.n	80032e0 <HAL_RCC_OscConfig+0x7f4>
 80032d6:	f240 21b7 	movw	r1, #695	; 0x2b7
 80032da:	480a      	ldr	r0, [pc, #40]	; (8003304 <HAL_RCC_OscConfig+0x818>)
 80032dc:	f7fd fd72 	bl	8000dc4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e0:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_RCC_OscConfig+0x820>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e6:	f7fe f945 	bl	8001574 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ec:	e010      	b.n	8003310 <HAL_RCC_OscConfig+0x824>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ee:	f7fe f941 	bl	8001574 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d909      	bls.n	8003310 <HAL_RCC_OscConfig+0x824>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e06b      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
 8003300:	40023800 	.word	0x40023800
 8003304:	08008858 	.word	0x08008858
 8003308:	40007000 	.word	0x40007000
 800330c:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003310:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <HAL_RCC_OscConfig+0x8f4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e8      	bne.n	80032ee <HAL_RCC_OscConfig+0x802>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800331c:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <HAL_RCC_OscConfig+0x8f4>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	4319      	orrs	r1, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	430b      	orrs	r3, r1
 8003334:	492a      	ldr	r1, [pc, #168]	; (80033e0 <HAL_RCC_OscConfig+0x8f4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800333a:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <HAL_RCC_OscConfig+0x8f8>)
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fe f918 	bl	8001574 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x86e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003348:	f7fe f914 	bl	8001574 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x86e>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e03e      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800335a:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <HAL_RCC_OscConfig+0x8f4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0x85c>
 8003366:	e036      	b.n	80033d6 <HAL_RCC_OscConfig+0x8ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003368:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <HAL_RCC_OscConfig+0x8f8>)
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336e:	f7fe f901 	bl	8001574 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x89c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003376:	f7fe f8fd 	bl	8001574 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x89c>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e027      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_RCC_OscConfig+0x8f4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0x88a>
 8003394:	e01f      	b.n	80033d6 <HAL_RCC_OscConfig+0x8ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_OscConfig+0x8b6>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e01a      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033a2:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <HAL_RCC_OscConfig+0x8f4>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d10d      	bne.n	80033d2 <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d106      	bne.n	80033d2 <HAL_RCC_OscConfig+0x8e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d001      	beq.n	80033d6 <HAL_RCC_OscConfig+0x8ea>
        {
          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_RCC_OscConfig+0x8ec>
        }
      }
    }
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40023800 	.word	0x40023800
 80033e4:	42470060 	.word	0x42470060

080033e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e1a4      	b.n	8003746 <HAL_RCC_ClockConfig+0x35e>
  }

  assert_param(IS_FLASH_LATENCY(FLatency));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d007      	beq.n	8003412 <HAL_RCC_ClockConfig+0x2a>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d004      	beq.n	8003412 <HAL_RCC_ClockConfig+0x2a>
 8003408:	f240 312a 	movw	r1, #810	; 0x32a
 800340c:	4893      	ldr	r0, [pc, #588]	; (800365c <HAL_RCC_ClockConfig+0x274>)
 800340e:	f7fd fcd9 	bl	8000dc4 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003412:	4b93      	ldr	r3, [pc, #588]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d919      	bls.n	8003454 <HAL_RCC_ClockConfig+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d105      	bne.n	8003432 <HAL_RCC_ClockConfig+0x4a>
 8003426:	4b8e      	ldr	r3, [pc, #568]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a8d      	ldr	r2, [pc, #564]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 800342c:	f043 0304 	orr.w	r3, r3, #4
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b8b      	ldr	r3, [pc, #556]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 0201 	bic.w	r2, r3, #1
 800343a:	4989      	ldr	r1, [pc, #548]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b87      	ldr	r3, [pc, #540]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e178      	b.n	8003746 <HAL_RCC_ClockConfig+0x35e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d031      	beq.n	80034c4 <HAL_RCC_ClockConfig+0xdc>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d024      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xca>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b80      	cmp	r3, #128	; 0x80
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xca>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b90      	cmp	r3, #144	; 0x90
 8003476:	d01c      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xca>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2ba0      	cmp	r3, #160	; 0xa0
 800347e:	d018      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xca>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2bb0      	cmp	r3, #176	; 0xb0
 8003486:	d014      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xca>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2bc0      	cmp	r3, #192	; 0xc0
 800348e:	d010      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xca>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2bd0      	cmp	r3, #208	; 0xd0
 8003496:	d00c      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xca>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2be0      	cmp	r3, #224	; 0xe0
 800349e:	d008      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xca>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2bf0      	cmp	r3, #240	; 0xf0
 80034a6:	d004      	beq.n	80034b2 <HAL_RCC_ClockConfig+0xca>
 80034a8:	f240 3141 	movw	r1, #833	; 0x341
 80034ac:	486b      	ldr	r0, [pc, #428]	; (800365c <HAL_RCC_ClockConfig+0x274>)
 80034ae:	f7fd fc89 	bl	8000dc4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b2:	4b6c      	ldr	r3, [pc, #432]	; (8003664 <HAL_RCC_ClockConfig+0x27c>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4969      	ldr	r1, [pc, #420]	; (8003664 <HAL_RCC_ClockConfig+0x27c>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80a3 	beq.w	8003618 <HAL_RCC_ClockConfig+0x230>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d010      	beq.n	80034fc <HAL_RCC_ClockConfig+0x114>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d00c      	beq.n	80034fc <HAL_RCC_ClockConfig+0x114>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d008      	beq.n	80034fc <HAL_RCC_ClockConfig+0x114>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d004      	beq.n	80034fc <HAL_RCC_ClockConfig+0x114>
 80034f2:	f44f 7152 	mov.w	r1, #840	; 0x348
 80034f6:	4859      	ldr	r0, [pc, #356]	; (800365c <HAL_RCC_ClockConfig+0x274>)
 80034f8:	f7fd fc64 	bl	8000dc4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d107      	bne.n	8003514 <HAL_RCC_ClockConfig+0x12c>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003504:	4b57      	ldr	r3, [pc, #348]	; (8003664 <HAL_RCC_ClockConfig+0x27c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d121      	bne.n	8003554 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e118      	b.n	8003746 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d107      	bne.n	800352c <HAL_RCC_ClockConfig+0x144>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800351c:	4b51      	ldr	r3, [pc, #324]	; (8003664 <HAL_RCC_ClockConfig+0x27c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d115      	bne.n	8003554 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e10c      	b.n	8003746 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d107      	bne.n	8003544 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003534:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <HAL_RCC_ClockConfig+0x27c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d109      	bne.n	8003554 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e100      	b.n	8003746 <HAL_RCC_ClockConfig+0x35e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003544:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_RCC_ClockConfig+0x27c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x16c>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0f8      	b.n	8003746 <HAL_RCC_ClockConfig+0x35e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003554:	4b43      	ldr	r3, [pc, #268]	; (8003664 <HAL_RCC_ClockConfig+0x27c>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f023 0203 	bic.w	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4940      	ldr	r1, [pc, #256]	; (8003664 <HAL_RCC_ClockConfig+0x27c>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003566:	f7fe f805 	bl	8001574 <HAL_GetTick>
 800356a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d112      	bne.n	800359a <HAL_RCC_ClockConfig+0x1b2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003574:	e00a      	b.n	800358c <HAL_RCC_ClockConfig+0x1a4>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003576:	f7fd fffd 	bl	8001574 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	; 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_ClockConfig+0x1a4>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e0dc      	b.n	8003746 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800358c:	4b35      	ldr	r3, [pc, #212]	; (8003664 <HAL_RCC_ClockConfig+0x27c>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d1ee      	bne.n	8003576 <HAL_RCC_ClockConfig+0x18e>
 8003598:	e03e      	b.n	8003618 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d112      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x1e0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_ClockConfig+0x1d2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a4:	f7fd ffe6 	bl	8001574 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x1d2>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e0c5      	b.n	8003746 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ba:	4b2a      	ldr	r3, [pc, #168]	; (8003664 <HAL_RCC_ClockConfig+0x27c>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b0c      	cmp	r3, #12
 80035c4:	d1ee      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x1bc>
 80035c6:	e027      	b.n	8003618 <HAL_RCC_ClockConfig+0x230>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d11d      	bne.n	800360c <HAL_RCC_ClockConfig+0x224>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80035d0:	e00a      	b.n	80035e8 <HAL_RCC_ClockConfig+0x200>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d2:	f7fd ffcf 	bl	8001574 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_ClockConfig+0x200>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e0ae      	b.n	8003746 <HAL_RCC_ClockConfig+0x35e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80035e8:	4b1e      	ldr	r3, [pc, #120]	; (8003664 <HAL_RCC_ClockConfig+0x27c>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d1ee      	bne.n	80035d2 <HAL_RCC_ClockConfig+0x1ea>
 80035f4:	e010      	b.n	8003618 <HAL_RCC_ClockConfig+0x230>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f6:	f7fd ffbd 	bl	8001574 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	f241 3288 	movw	r2, #5000	; 0x1388
 8003604:	4293      	cmp	r3, r2
 8003606:	d901      	bls.n	800360c <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e09c      	b.n	8003746 <HAL_RCC_ClockConfig+0x35e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800360c:	4b15      	ldr	r3, [pc, #84]	; (8003664 <HAL_RCC_ClockConfig+0x27c>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1ee      	bne.n	80035f6 <HAL_RCC_ClockConfig+0x20e>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003618:	4b11      	ldr	r3, [pc, #68]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d220      	bcs.n	8003668 <HAL_RCC_ClockConfig+0x280>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <HAL_RCC_ClockConfig+0x250>
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 8003632:	f043 0304 	orr.w	r3, r3, #4
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f023 0201 	bic.w	r2, r3, #1
 8003640:	4907      	ldr	r1, [pc, #28]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d008      	beq.n	8003668 <HAL_RCC_ClockConfig+0x280>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e075      	b.n	8003746 <HAL_RCC_ClockConfig+0x35e>
 800365a:	bf00      	nop
 800365c:	08008858 	.word	0x08008858
 8003660:	40023c00 	.word	0x40023c00
 8003664:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d025      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d018      	beq.n	80036ae <HAL_RCC_ClockConfig+0x2c6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d013      	beq.n	80036ae <HAL_RCC_ClockConfig+0x2c6>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800368e:	d00e      	beq.n	80036ae <HAL_RCC_ClockConfig+0x2c6>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003698:	d009      	beq.n	80036ae <HAL_RCC_ClockConfig+0x2c6>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036a2:	d004      	beq.n	80036ae <HAL_RCC_ClockConfig+0x2c6>
 80036a4:	f240 31ad 	movw	r1, #941	; 0x3ad
 80036a8:	4829      	ldr	r0, [pc, #164]	; (8003750 <HAL_RCC_ClockConfig+0x368>)
 80036aa:	f7fd fb8b 	bl	8000dc4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ae:	4b29      	ldr	r3, [pc, #164]	; (8003754 <HAL_RCC_ClockConfig+0x36c>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	4926      	ldr	r1, [pc, #152]	; (8003754 <HAL_RCC_ClockConfig+0x36c>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d026      	beq.n	800371a <HAL_RCC_ClockConfig+0x332>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d018      	beq.n	8003706 <HAL_RCC_ClockConfig+0x31e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036dc:	d013      	beq.n	8003706 <HAL_RCC_ClockConfig+0x31e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80036e6:	d00e      	beq.n	8003706 <HAL_RCC_ClockConfig+0x31e>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x31e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036fa:	d004      	beq.n	8003706 <HAL_RCC_ClockConfig+0x31e>
 80036fc:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 8003700:	4813      	ldr	r0, [pc, #76]	; (8003750 <HAL_RCC_ClockConfig+0x368>)
 8003702:	f7fd fb5f 	bl	8000dc4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003706:	4b13      	ldr	r3, [pc, #76]	; (8003754 <HAL_RCC_ClockConfig+0x36c>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	490f      	ldr	r1, [pc, #60]	; (8003754 <HAL_RCC_ClockConfig+0x36c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800371a:	f000 f823 	bl	8003764 <HAL_RCC_GetSysClockFreq>
 800371e:	4601      	mov	r1, r0
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <HAL_RCC_ClockConfig+0x36c>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	4a0b      	ldr	r2, [pc, #44]	; (8003758 <HAL_RCC_ClockConfig+0x370>)
 800372c:	5cd3      	ldrb	r3, [r2, r3]
 800372e:	fa21 f303 	lsr.w	r3, r1, r3
 8003732:	4a0a      	ldr	r2, [pc, #40]	; (800375c <HAL_RCC_ClockConfig+0x374>)
 8003734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCC_ClockConfig+0x378>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd fb80 	bl	8000e40 <HAL_InitTick>
 8003740:	4603      	mov	r3, r0
 8003742:	72fb      	strb	r3, [r7, #11]

  return status;
 8003744:	7afb      	ldrb	r3, [r7, #11]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	08008858 	.word	0x08008858
 8003754:	40023800 	.word	0x40023800
 8003758:	08008a2c 	.word	0x08008a2c
 800375c:	20000000 	.word	0x20000000
 8003760:	20000004 	.word	0x20000004

08003764 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800376a:	4b26      	ldr	r3, [pc, #152]	; (8003804 <HAL_RCC_GetSysClockFreq+0xa0>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b08      	cmp	r3, #8
 8003778:	d006      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x24>
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d007      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x2a>
 800377e:	2b04      	cmp	r3, #4
 8003780:	d12c      	bne.n	80037dc <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003782:	4b21      	ldr	r3, [pc, #132]	; (8003808 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003784:	613b      	str	r3, [r7, #16]
      break;
 8003786:	e037      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003788:	4b20      	ldr	r3, [pc, #128]	; (800380c <HAL_RCC_GetSysClockFreq+0xa8>)
 800378a:	613b      	str	r3, [r7, #16]
      break;
 800378c:	e034      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	0c9b      	lsrs	r3, r3, #18
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <HAL_RCC_GetSysClockFreq+0xac>)
 8003798:	5cd3      	ldrb	r3, [r2, r3]
 800379a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	0d9b      	lsrs	r3, r3, #22
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	3301      	adds	r3, #1
 80037a6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037a8:	4b16      	ldr	r3, [pc, #88]	; (8003804 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4a15      	ldr	r2, [pc, #84]	; (800380c <HAL_RCC_GetSysClockFreq+0xa8>)
 80037b8:	fb02 f203 	mul.w	r2, r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	e007      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4a0f      	ldr	r2, [pc, #60]	; (8003808 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037ca:	fb02 f203 	mul.w	r2, r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	613b      	str	r3, [r7, #16]
      break;
 80037da:	e00d      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80037dc:	4b09      	ldr	r3, [pc, #36]	; (8003804 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	0b5b      	lsrs	r3, r3, #13
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	3301      	adds	r3, #1
 80037ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	613b      	str	r3, [r7, #16]
      break;
 80037f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f8:	693b      	ldr	r3, [r7, #16]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	40023800 	.word	0x40023800
 8003808:	00f42400 	.word	0x00f42400
 800380c:	007a1200 	.word	0x007a1200
 8003810:	08008a20 	.word	0x08008a20

08003814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003818:	4b02      	ldr	r3, [pc, #8]	; (8003824 <HAL_RCC_GetHCLKFreq+0x10>)
 800381a:	681b      	ldr	r3, [r3, #0]
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr
 8003824:	20000000 	.word	0x20000000

08003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800382c:	f7ff fff2 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 8003830:	4601      	mov	r1, r0
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4a03      	ldr	r2, [pc, #12]	; (800384c <HAL_RCC_GetPCLK1Freq+0x24>)
 800383e:	5cd3      	ldrb	r3, [r2, r3]
 8003840:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40023800 	.word	0x40023800
 800384c:	08008a3c 	.word	0x08008a3c

08003850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003854:	f7ff ffde 	bl	8003814 <HAL_RCC_GetHCLKFreq>
 8003858:	4601      	mov	r1, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0adb      	lsrs	r3, r3, #11
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4a03      	ldr	r2, [pc, #12]	; (8003874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003866:	5cd3      	ldrb	r3, [r2, r3]
 8003868:	fa21 f303 	lsr.w	r3, r1, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40023800 	.word	0x40023800
 8003874:	08008a3c 	.word	0x08008a3c

08003878 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <HAL_RCC_GetClockConfig+0x1a>
 8003888:	f240 41fa 	movw	r1, #1274	; 0x4fa
 800388c:	4818      	ldr	r0, [pc, #96]	; (80038f0 <HAL_RCC_GetClockConfig+0x78>)
 800388e:	f7fd fa99 	bl	8000dc4 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <HAL_RCC_GetClockConfig+0x2a>
 8003898:	f240 41fb 	movw	r1, #1275	; 0x4fb
 800389c:	4814      	ldr	r0, [pc, #80]	; (80038f0 <HAL_RCC_GetClockConfig+0x78>)
 800389e:	f7fd fa91 	bl	8000dc4 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	220f      	movs	r2, #15
 80038a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038a8:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_RCC_GetClockConfig+0x7c>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0203 	and.w	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <HAL_RCC_GetClockConfig+0x7c>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <HAL_RCC_GetClockConfig+0x7c>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_RCC_GetClockConfig+0x7c>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	08db      	lsrs	r3, r3, #3
 80038d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80038da:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <HAL_RCC_GetClockConfig+0x80>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0201 	and.w	r2, r3, #1
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	601a      	str	r2, [r3, #0]
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	08008858 	.word	0x08008858
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40023c00 	.word	0x40023c00

080038fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003908:	4b29      	ldr	r3, [pc, #164]	; (80039b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d12c      	bne.n	800396e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003914:	4b26      	ldr	r3, [pc, #152]	; (80039b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003920:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e016      	b.n	800395a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800392c:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	4a1f      	ldr	r2, [pc, #124]	; (80039b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003936:	6253      	str	r3, [r2, #36]	; 0x24
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003944:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800394c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800394e:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003958:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003960:	d105      	bne.n	800396e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003968:	d101      	bne.n	800396e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800396a:	2301      	movs	r3, #1
 800396c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d105      	bne.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003974:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0f      	ldr	r2, [pc, #60]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800397a:	f043 0304 	orr.w	r3, r3, #4
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 0201 	bic.w	r2, r3, #1
 8003988:	490b      	ldr	r1, [pc, #44]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	429a      	cmp	r2, r3
 800399c:	d001      	beq.n	80039a2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40007000 	.word	0x40007000
 80039b8:	40023c00 	.word	0x40023c00

080039bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e088      	b.n	8003ae0 <HAL_TIM_Base_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d6:	d02c      	beq.n	8003a32 <HAL_TIM_Base_Init+0x76>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a42      	ldr	r2, [pc, #264]	; (8003ae8 <HAL_TIM_Base_Init+0x12c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d027      	beq.n	8003a32 <HAL_TIM_Base_Init+0x76>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a41      	ldr	r2, [pc, #260]	; (8003aec <HAL_TIM_Base_Init+0x130>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d022      	beq.n	8003a32 <HAL_TIM_Base_Init+0x76>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a3f      	ldr	r2, [pc, #252]	; (8003af0 <HAL_TIM_Base_Init+0x134>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01d      	beq.n	8003a32 <HAL_TIM_Base_Init+0x76>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a3e      	ldr	r2, [pc, #248]	; (8003af4 <HAL_TIM_Base_Init+0x138>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d018      	beq.n	8003a32 <HAL_TIM_Base_Init+0x76>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a3c      	ldr	r2, [pc, #240]	; (8003af8 <HAL_TIM_Base_Init+0x13c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <HAL_TIM_Base_Init+0x76>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a3b      	ldr	r2, [pc, #236]	; (8003afc <HAL_TIM_Base_Init+0x140>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00e      	beq.n	8003a32 <HAL_TIM_Base_Init+0x76>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a39      	ldr	r2, [pc, #228]	; (8003b00 <HAL_TIM_Base_Init+0x144>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d009      	beq.n	8003a32 <HAL_TIM_Base_Init+0x76>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a38      	ldr	r2, [pc, #224]	; (8003b04 <HAL_TIM_Base_Init+0x148>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d004      	beq.n	8003a32 <HAL_TIM_Base_Init+0x76>
 8003a28:	f240 110b 	movw	r1, #267	; 0x10b
 8003a2c:	4836      	ldr	r0, [pc, #216]	; (8003b08 <HAL_TIM_Base_Init+0x14c>)
 8003a2e:	f7fd f9c9 	bl	8000dc4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d014      	beq.n	8003a64 <HAL_TIM_Base_Init+0xa8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b10      	cmp	r3, #16
 8003a40:	d010      	beq.n	8003a64 <HAL_TIM_Base_Init+0xa8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d00c      	beq.n	8003a64 <HAL_TIM_Base_Init+0xa8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d008      	beq.n	8003a64 <HAL_TIM_Base_Init+0xa8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b60      	cmp	r3, #96	; 0x60
 8003a58:	d004      	beq.n	8003a64 <HAL_TIM_Base_Init+0xa8>
 8003a5a:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8003a5e:	482a      	ldr	r0, [pc, #168]	; (8003b08 <HAL_TIM_Base_Init+0x14c>)
 8003a60:	f7fd f9b0 	bl	8000dc4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00e      	beq.n	8003a8a <HAL_TIM_Base_Init+0xce>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a74:	d009      	beq.n	8003a8a <HAL_TIM_Base_Init+0xce>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a7e:	d004      	beq.n	8003a8a <HAL_TIM_Base_Init+0xce>
 8003a80:	f240 110d 	movw	r1, #269	; 0x10d
 8003a84:	4820      	ldr	r0, [pc, #128]	; (8003b08 <HAL_TIM_Base_Init+0x14c>)
 8003a86:	f7fd f99d 	bl	8000dc4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_TIM_Base_Init+0xe8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	2b80      	cmp	r3, #128	; 0x80
 8003a98:	d004      	beq.n	8003aa4 <HAL_TIM_Base_Init+0xe8>
 8003a9a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003a9e:	481a      	ldr	r0, [pc, #104]	; (8003b08 <HAL_TIM_Base_Init+0x14c>)
 8003aa0:	f7fd f990 	bl	8000dc4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d106      	bne.n	8003abe <HAL_TIM_Base_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fd fbd5 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3304      	adds	r3, #4
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	f000 feb5 	bl	8004840 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40000800 	.word	0x40000800
 8003af0:	40000c00 	.word	0x40000c00
 8003af4:	40001000 	.word	0x40001000
 8003af8:	40001400 	.word	0x40001400
 8003afc:	40010800 	.word	0x40010800
 8003b00:	40010c00 	.word	0x40010c00
 8003b04:	40011000 	.word	0x40011000
 8003b08:	08008890 	.word	0x08008890

08003b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1c:	d02c      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0x6c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a24      	ldr	r2, [pc, #144]	; (8003bb4 <HAL_TIM_Base_Start_IT+0xa8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d027      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0x6c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a22      	ldr	r2, [pc, #136]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xac>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d022      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0x6c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a21      	ldr	r2, [pc, #132]	; (8003bbc <HAL_TIM_Base_Start_IT+0xb0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d01d      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0x6c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1f      	ldr	r2, [pc, #124]	; (8003bc0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d018      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0x6c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1e      	ldr	r2, [pc, #120]	; (8003bc4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0x6c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00e      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0x6c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <HAL_TIM_Base_Start_IT+0xc0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d009      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0x6c>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0x6c>
 8003b6e:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8003b72:	4818      	ldr	r0, [pc, #96]	; (8003bd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b74:	f7fd f926 	bl	8000dc4 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b06      	cmp	r3, #6
 8003b98:	d007      	beq.n	8003baa <HAL_TIM_Base_Start_IT+0x9e>
  {
    __HAL_TIM_ENABLE(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800
 8003bbc:	40000c00 	.word	0x40000c00
 8003bc0:	40001000 	.word	0x40001000
 8003bc4:	40001400 	.word	0x40001400
 8003bc8:	40010800 	.word	0x40010800
 8003bcc:	40010c00 	.word	0x40010c00
 8003bd0:	40011000 	.word	0x40011000
 8003bd4:	08008890 	.word	0x08008890

08003bd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e088      	b.n	8003cfc <HAL_TIM_PWM_Init+0x124>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d02c      	beq.n	8003c4e <HAL_TIM_PWM_Init+0x76>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a42      	ldr	r2, [pc, #264]	; (8003d04 <HAL_TIM_PWM_Init+0x12c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d027      	beq.n	8003c4e <HAL_TIM_PWM_Init+0x76>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a41      	ldr	r2, [pc, #260]	; (8003d08 <HAL_TIM_PWM_Init+0x130>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d022      	beq.n	8003c4e <HAL_TIM_PWM_Init+0x76>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a3f      	ldr	r2, [pc, #252]	; (8003d0c <HAL_TIM_PWM_Init+0x134>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01d      	beq.n	8003c4e <HAL_TIM_PWM_Init+0x76>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a3e      	ldr	r2, [pc, #248]	; (8003d10 <HAL_TIM_PWM_Init+0x138>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d018      	beq.n	8003c4e <HAL_TIM_PWM_Init+0x76>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a3c      	ldr	r2, [pc, #240]	; (8003d14 <HAL_TIM_PWM_Init+0x13c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_TIM_PWM_Init+0x76>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a3b      	ldr	r2, [pc, #236]	; (8003d18 <HAL_TIM_PWM_Init+0x140>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00e      	beq.n	8003c4e <HAL_TIM_PWM_Init+0x76>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a39      	ldr	r2, [pc, #228]	; (8003d1c <HAL_TIM_PWM_Init+0x144>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d009      	beq.n	8003c4e <HAL_TIM_PWM_Init+0x76>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a38      	ldr	r2, [pc, #224]	; (8003d20 <HAL_TIM_PWM_Init+0x148>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d004      	beq.n	8003c4e <HAL_TIM_PWM_Init+0x76>
 8003c44:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003c48:	4836      	ldr	r0, [pc, #216]	; (8003d24 <HAL_TIM_PWM_Init+0x14c>)
 8003c4a:	f7fd f8bb 	bl	8000dc4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d014      	beq.n	8003c80 <HAL_TIM_PWM_Init+0xa8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d010      	beq.n	8003c80 <HAL_TIM_PWM_Init+0xa8>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d00c      	beq.n	8003c80 <HAL_TIM_PWM_Init+0xa8>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	d008      	beq.n	8003c80 <HAL_TIM_PWM_Init+0xa8>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b60      	cmp	r3, #96	; 0x60
 8003c74:	d004      	beq.n	8003c80 <HAL_TIM_PWM_Init+0xa8>
 8003c76:	f240 4171 	movw	r1, #1137	; 0x471
 8003c7a:	482a      	ldr	r0, [pc, #168]	; (8003d24 <HAL_TIM_PWM_Init+0x14c>)
 8003c7c:	f7fd f8a2 	bl	8000dc4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00e      	beq.n	8003ca6 <HAL_TIM_PWM_Init+0xce>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c90:	d009      	beq.n	8003ca6 <HAL_TIM_PWM_Init+0xce>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c9a:	d004      	beq.n	8003ca6 <HAL_TIM_PWM_Init+0xce>
 8003c9c:	f240 4172 	movw	r1, #1138	; 0x472
 8003ca0:	4820      	ldr	r0, [pc, #128]	; (8003d24 <HAL_TIM_PWM_Init+0x14c>)
 8003ca2:	f7fd f88f 	bl	8000dc4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d008      	beq.n	8003cc0 <HAL_TIM_PWM_Init+0xe8>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b80      	cmp	r3, #128	; 0x80
 8003cb4:	d004      	beq.n	8003cc0 <HAL_TIM_PWM_Init+0xe8>
 8003cb6:	f240 4173 	movw	r1, #1139	; 0x473
 8003cba:	481a      	ldr	r0, [pc, #104]	; (8003d24 <HAL_TIM_PWM_Init+0x14c>)
 8003cbc:	f7fd f882 	bl	8000dc4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <HAL_TIM_PWM_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f827 	bl	8003d28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f000 fda7 	bl	8004840 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40000400 	.word	0x40000400
 8003d08:	40000800 	.word	0x40000800
 8003d0c:	40000c00 	.word	0x40000c00
 8003d10:	40001000 	.word	0x40001000
 8003d14:	40001400 	.word	0x40001400
 8003d18:	40010800 	.word	0x40010800
 8003d1c:	40010c00 	.word	0x40010c00
 8003d20:	40011000 	.word	0x40011000
 8003d24:	08008890 	.word	0x08008890

08003d28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d122      	bne.n	8003d96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d11b      	bne.n	8003d96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f06f 0202 	mvn.w	r2, #2
 8003d66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fd44 	bl	800480a <HAL_TIM_IC_CaptureCallback>
 8003d82:	e005      	b.n	8003d90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fd37 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fd46 	bl	800481c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d122      	bne.n	8003dea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d11b      	bne.n	8003dea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f06f 0204 	mvn.w	r2, #4
 8003dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d003      	beq.n	8003dd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fd1a 	bl	800480a <HAL_TIM_IC_CaptureCallback>
 8003dd6:	e005      	b.n	8003de4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fd0d 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fd1c 	bl	800481c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d122      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d11b      	bne.n	8003e3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f06f 0208 	mvn.w	r2, #8
 8003e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2204      	movs	r2, #4
 8003e14:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fcf0 	bl	800480a <HAL_TIM_IC_CaptureCallback>
 8003e2a:	e005      	b.n	8003e38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fce3 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fcf2 	bl	800481c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b10      	cmp	r3, #16
 8003e4a:	d122      	bne.n	8003e92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d11b      	bne.n	8003e92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f06f 0210 	mvn.w	r2, #16
 8003e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2208      	movs	r2, #8
 8003e68:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fcc6 	bl	800480a <HAL_TIM_IC_CaptureCallback>
 8003e7e:	e005      	b.n	8003e8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fcb9 	bl	80047f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fcc8 	bl	800481c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d10e      	bne.n	8003ebe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d107      	bne.n	8003ebe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f06f 0201 	mvn.w	r2, #1
 8003eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7fc ff6b 	bl	8000d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d10e      	bne.n	8003eea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d107      	bne.n	8003eea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 fca2 	bl	800482e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d010      	beq.n	8003f28 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d00d      	beq.n	8003f28 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d00a      	beq.n	8003f28 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b0c      	cmp	r3, #12
 8003f16:	d007      	beq.n	8003f28 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b3c      	cmp	r3, #60	; 0x3c
 8003f1c:	d004      	beq.n	8003f28 <HAL_TIM_PWM_ConfigChannel+0x34>
 8003f1e:	f640 5169 	movw	r1, #3433	; 0xd69
 8003f22:	488d      	ldr	r0, [pc, #564]	; (8004158 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003f24:	f7fc ff4e 	bl	8000dc4 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b60      	cmp	r3, #96	; 0x60
 8003f2e:	d008      	beq.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b70      	cmp	r3, #112	; 0x70
 8003f36:	d004      	beq.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8003f38:	f640 516a 	movw	r1, #3434	; 0xd6a
 8003f3c:	4886      	ldr	r0, [pc, #536]	; (8004158 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003f3e:	f7fc ff41 	bl	8000dc4 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x68>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d004      	beq.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x68>
 8003f52:	f640 516b 	movw	r1, #3435	; 0xd6b
 8003f56:	4880      	ldr	r0, [pc, #512]	; (8004158 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003f58:	f7fc ff34 	bl	8000dc4 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x82>
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d004      	beq.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x82>
 8003f6c:	f640 516c 	movw	r1, #3436	; 0xd6c
 8003f70:	4879      	ldr	r0, [pc, #484]	; (8004158 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8003f72:	f7fc ff27 	bl	8000dc4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_TIM_PWM_ConfigChannel+0x90>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e13b      	b.n	80041fc <HAL_TIM_PWM_ConfigChannel+0x308>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  switch (Channel)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b0c      	cmp	r3, #12
 8003f98:	f200 8126 	bhi.w	80041e8 <HAL_TIM_PWM_ConfigChannel+0x2f4>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	080041e9 	.word	0x080041e9
 8003fac:	080041e9 	.word	0x080041e9
 8003fb0:	080041e9 	.word	0x080041e9
 8003fb4:	08004069 	.word	0x08004069
 8003fb8:	080041e9 	.word	0x080041e9
 8003fbc:	080041e9 	.word	0x080041e9
 8003fc0:	080041e9 	.word	0x080041e9
 8003fc4:	080040e7 	.word	0x080040e7
 8003fc8:	080041e9 	.word	0x080041e9
 8003fcc:	080041e9 	.word	0x080041e9
 8003fd0:	080041e9 	.word	0x080041e9
 8003fd4:	08004175 	.word	0x08004175
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe0:	d022      	beq.n	8004028 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a5d      	ldr	r2, [pc, #372]	; (800415c <HAL_TIM_PWM_ConfigChannel+0x268>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d01d      	beq.n	8004028 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a5b      	ldr	r2, [pc, #364]	; (8004160 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d018      	beq.n	8004028 <HAL_TIM_PWM_ConfigChannel+0x134>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a5a      	ldr	r2, [pc, #360]	; (8004164 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d013      	beq.n	8004028 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a58      	ldr	r2, [pc, #352]	; (8004168 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00e      	beq.n	8004028 <HAL_TIM_PWM_ConfigChannel+0x134>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a57      	ldr	r2, [pc, #348]	; (800416c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d009      	beq.n	8004028 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a55      	ldr	r2, [pc, #340]	; (8004170 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d004      	beq.n	8004028 <HAL_TIM_PWM_ConfigChannel+0x134>
 800401e:	f640 5178 	movw	r1, #3448	; 0xd78
 8004022:	484d      	ldr	r0, [pc, #308]	; (8004158 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004024:	f7fc fece 	bl	8000dc4 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fc76 	bl	8004920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699a      	ldr	r2, [r3, #24]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0208 	orr.w	r2, r2, #8
 8004042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0204 	bic.w	r2, r2, #4
 8004052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6999      	ldr	r1, [r3, #24]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	619a      	str	r2, [r3, #24]
      break;
 8004066:	e0c0      	b.n	80041ea <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004070:	d018      	beq.n	80040a4 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a39      	ldr	r2, [pc, #228]	; (800415c <HAL_TIM_PWM_ConfigChannel+0x268>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d013      	beq.n	80040a4 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a37      	ldr	r2, [pc, #220]	; (8004160 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00e      	beq.n	80040a4 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a36      	ldr	r2, [pc, #216]	; (8004164 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d009      	beq.n	80040a4 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a34      	ldr	r2, [pc, #208]	; (8004168 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d004      	beq.n	80040a4 <HAL_TIM_PWM_ConfigChannel+0x1b0>
 800409a:	f640 5189 	movw	r1, #3465	; 0xd89
 800409e:	482e      	ldr	r0, [pc, #184]	; (8004158 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80040a0:	f7fc fe90 	bl	8000dc4 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fc74 	bl	8004998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6999      	ldr	r1, [r3, #24]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	021a      	lsls	r2, r3, #8
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	619a      	str	r2, [r3, #24]
      break;
 80040e4:	e081      	b.n	80041ea <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ee:	d013      	beq.n	8004118 <HAL_TIM_PWM_ConfigChannel+0x224>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a19      	ldr	r2, [pc, #100]	; (800415c <HAL_TIM_PWM_ConfigChannel+0x268>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00e      	beq.n	8004118 <HAL_TIM_PWM_ConfigChannel+0x224>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a18      	ldr	r2, [pc, #96]	; (8004160 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d009      	beq.n	8004118 <HAL_TIM_PWM_ConfigChannel+0x224>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a16      	ldr	r2, [pc, #88]	; (8004164 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <HAL_TIM_PWM_ConfigChannel+0x224>
 800410e:	f640 519a 	movw	r1, #3482	; 0xd9a
 8004112:	4811      	ldr	r0, [pc, #68]	; (8004158 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004114:	f7fc fe56 	bl	8000dc4 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fc78 	bl	8004a14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0208 	orr.w	r2, r2, #8
 8004132:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	69da      	ldr	r2, [r3, #28]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0204 	bic.w	r2, r2, #4
 8004142:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69d9      	ldr	r1, [r3, #28]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	61da      	str	r2, [r3, #28]
      break;
 8004156:	e048      	b.n	80041ea <HAL_TIM_PWM_ConfigChannel+0x2f6>
 8004158:	08008890 	.word	0x08008890
 800415c:	40000400 	.word	0x40000400
 8004160:	40000800 	.word	0x40000800
 8004164:	40000c00 	.word	0x40000c00
 8004168:	40010800 	.word	0x40010800
 800416c:	40010c00 	.word	0x40010c00
 8004170:	40011000 	.word	0x40011000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417c:	d013      	beq.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a20      	ldr	r2, [pc, #128]	; (8004204 <HAL_TIM_PWM_ConfigChannel+0x310>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00e      	beq.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1e      	ldr	r2, [pc, #120]	; (8004208 <HAL_TIM_PWM_ConfigChannel+0x314>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d009      	beq.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1d      	ldr	r2, [pc, #116]	; (800420c <HAL_TIM_PWM_ConfigChannel+0x318>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d004      	beq.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x2b2>
 800419c:	f640 51ab 	movw	r1, #3499	; 0xdab
 80041a0:	481b      	ldr	r0, [pc, #108]	; (8004210 <HAL_TIM_PWM_ConfigChannel+0x31c>)
 80041a2:	f7fc fe0f 	bl	8000dc4 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fc6e 	bl	8004a8e <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69d9      	ldr	r1, [r3, #28]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	021a      	lsls	r2, r3, #8
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	61da      	str	r2, [r3, #28]
      break;
 80041e6:	e000      	b.n	80041ea <HAL_TIM_PWM_ConfigChannel+0x2f6>
    }

    default:
      break;
 80041e8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40000c00 	.word	0x40000c00
 8004210:	08008890 	.word	0x08008890

08004214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_TIM_ConfigClockSource+0x18>
 8004228:	2302      	movs	r3, #2
 800422a:	e2d7      	b.n	80047dc <HAL_TIM_ConfigClockSource+0x5c8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004244:	d029      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x86>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800424e:	d024      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x86>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d020      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x86>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b10      	cmp	r3, #16
 800425e:	d01c      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x86>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b20      	cmp	r3, #32
 8004266:	d018      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x86>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b30      	cmp	r3, #48	; 0x30
 800426e:	d014      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x86>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b40      	cmp	r3, #64	; 0x40
 8004276:	d010      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x86>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b50      	cmp	r3, #80	; 0x50
 800427e:	d00c      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x86>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b60      	cmp	r3, #96	; 0x60
 8004286:	d008      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x86>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b70      	cmp	r3, #112	; 0x70
 800428e:	d004      	beq.n	800429a <HAL_TIM_ConfigClockSource+0x86>
 8004290:	f241 01d0 	movw	r1, #4304	; 0x10d0
 8004294:	4874      	ldr	r0, [pc, #464]	; (8004468 <HAL_TIM_ConfigClockSource+0x254>)
 8004296:	f7fc fd95 	bl	8000dc4 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042b0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b40      	cmp	r3, #64	; 0x40
 80042c0:	f000 820a 	beq.w	80046d8 <HAL_TIM_ConfigClockSource+0x4c4>
 80042c4:	2b40      	cmp	r3, #64	; 0x40
 80042c6:	d80f      	bhi.n	80042e8 <HAL_TIM_ConfigClockSource+0xd4>
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	f000 8256 	beq.w	800477a <HAL_TIM_ConfigClockSource+0x566>
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d803      	bhi.n	80042da <HAL_TIM_ConfigClockSource+0xc6>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8251 	beq.w	800477a <HAL_TIM_ConfigClockSource+0x566>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80042d8:	e277      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 80042da:	2b20      	cmp	r3, #32
 80042dc:	f000 824d 	beq.w	800477a <HAL_TIM_ConfigClockSource+0x566>
 80042e0:	2b30      	cmp	r3, #48	; 0x30
 80042e2:	f000 824a 	beq.w	800477a <HAL_TIM_ConfigClockSource+0x566>
      break;
 80042e6:	e270      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 80042e8:	2b70      	cmp	r3, #112	; 0x70
 80042ea:	d04c      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x172>
 80042ec:	2b70      	cmp	r3, #112	; 0x70
 80042ee:	d806      	bhi.n	80042fe <HAL_TIM_ConfigClockSource+0xea>
 80042f0:	2b50      	cmp	r3, #80	; 0x50
 80042f2:	f000 8141 	beq.w	8004578 <HAL_TIM_ConfigClockSource+0x364>
 80042f6:	2b60      	cmp	r3, #96	; 0x60
 80042f8:	f000 818f 	beq.w	800461a <HAL_TIM_ConfigClockSource+0x406>
      break;
 80042fc:	e265      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x5b6>
  switch (sClockSourceConfig->ClockSource)
 80042fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004302:	d004      	beq.n	800430e <HAL_TIM_ConfigClockSource+0xfa>
 8004304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004308:	f000 80c0 	beq.w	800448c <HAL_TIM_ConfigClockSource+0x278>
      break;
 800430c:	e25d      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004316:	f000 8257 	beq.w	80047c8 <HAL_TIM_ConfigClockSource+0x5b4>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a53      	ldr	r2, [pc, #332]	; (800446c <HAL_TIM_ConfigClockSource+0x258>)
 8004320:	4293      	cmp	r3, r2
 8004322:	f000 8251 	beq.w	80047c8 <HAL_TIM_ConfigClockSource+0x5b4>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a51      	ldr	r2, [pc, #324]	; (8004470 <HAL_TIM_ConfigClockSource+0x25c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	f000 824b 	beq.w	80047c8 <HAL_TIM_ConfigClockSource+0x5b4>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a4f      	ldr	r2, [pc, #316]	; (8004474 <HAL_TIM_ConfigClockSource+0x260>)
 8004338:	4293      	cmp	r3, r2
 800433a:	f000 8245 	beq.w	80047c8 <HAL_TIM_ConfigClockSource+0x5b4>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a4d      	ldr	r2, [pc, #308]	; (8004478 <HAL_TIM_ConfigClockSource+0x264>)
 8004344:	4293      	cmp	r3, r2
 8004346:	f000 823f 	beq.w	80047c8 <HAL_TIM_ConfigClockSource+0x5b4>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a4b      	ldr	r2, [pc, #300]	; (800447c <HAL_TIM_ConfigClockSource+0x268>)
 8004350:	4293      	cmp	r3, r2
 8004352:	f000 8239 	beq.w	80047c8 <HAL_TIM_ConfigClockSource+0x5b4>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a49      	ldr	r2, [pc, #292]	; (8004480 <HAL_TIM_ConfigClockSource+0x26c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	f000 8233 	beq.w	80047c8 <HAL_TIM_ConfigClockSource+0x5b4>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a47      	ldr	r2, [pc, #284]	; (8004484 <HAL_TIM_ConfigClockSource+0x270>)
 8004368:	4293      	cmp	r3, r2
 800436a:	f000 822d 	beq.w	80047c8 <HAL_TIM_ConfigClockSource+0x5b4>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a45      	ldr	r2, [pc, #276]	; (8004488 <HAL_TIM_ConfigClockSource+0x274>)
 8004374:	4293      	cmp	r3, r2
 8004376:	f000 8227 	beq.w	80047c8 <HAL_TIM_ConfigClockSource+0x5b4>
 800437a:	f241 01dc 	movw	r1, #4316	; 0x10dc
 800437e:	483a      	ldr	r0, [pc, #232]	; (8004468 <HAL_TIM_ConfigClockSource+0x254>)
 8004380:	f7fc fd20 	bl	8000dc4 <assert_failed>
      break;
 8004384:	e220      	b.n	80047c8 <HAL_TIM_ConfigClockSource+0x5b4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438e:	d018      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a35      	ldr	r2, [pc, #212]	; (800446c <HAL_TIM_ConfigClockSource+0x258>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x1ae>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a34      	ldr	r2, [pc, #208]	; (8004470 <HAL_TIM_ConfigClockSource+0x25c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00e      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a32      	ldr	r2, [pc, #200]	; (8004474 <HAL_TIM_ConfigClockSource+0x260>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a33      	ldr	r2, [pc, #204]	; (8004480 <HAL_TIM_ConfigClockSource+0x26c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d004      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x1ae>
 80043b8:	f241 01e3 	movw	r1, #4323	; 0x10e3
 80043bc:	482a      	ldr	r0, [pc, #168]	; (8004468 <HAL_TIM_ConfigClockSource+0x254>)
 80043be:	f7fc fd01 	bl	8000dc4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d013      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x1de>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d2:	d00e      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x1de>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043dc:	d009      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x1de>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043e6:	d004      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x1de>
 80043e8:	f241 01e6 	movw	r1, #4326	; 0x10e6
 80043ec:	481e      	ldr	r0, [pc, #120]	; (8004468 <HAL_TIM_ConfigClockSource+0x254>)
 80043ee:	f7fc fce9 	bl	8000dc4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fa:	d014      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x212>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d010      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x212>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00c      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x212>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d008      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x212>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b0a      	cmp	r3, #10
 800441a:	d004      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x212>
 800441c:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8004420:	4811      	ldr	r0, [pc, #68]	; (8004468 <HAL_TIM_ConfigClockSource+0x254>)
 8004422:	f7fc fccf 	bl	8000dc4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b0f      	cmp	r3, #15
 800442c:	d904      	bls.n	8004438 <HAL_TIM_ConfigClockSource+0x224>
 800442e:	f241 01e8 	movw	r1, #4328	; 0x10e8
 8004432:	480d      	ldr	r0, [pc, #52]	; (8004468 <HAL_TIM_ConfigClockSource+0x254>)
 8004434:	f7fc fcc6 	bl	8000dc4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6899      	ldr	r1, [r3, #8]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f000 fbd6 	bl	8004bf8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800445a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	609a      	str	r2, [r3, #8]
      break;
 8004464:	e1b1      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x5b6>
 8004466:	bf00      	nop
 8004468:	08008890 	.word	0x08008890
 800446c:	40000400 	.word	0x40000400
 8004470:	40000800 	.word	0x40000800
 8004474:	40000c00 	.word	0x40000c00
 8004478:	40001000 	.word	0x40001000
 800447c:	40001400 	.word	0x40001400
 8004480:	40010800 	.word	0x40010800
 8004484:	40010c00 	.word	0x40010c00
 8004488:	40011000 	.word	0x40011000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004494:	d022      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0x2c8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a88      	ldr	r2, [pc, #544]	; (80046bc <HAL_TIM_ConfigClockSource+0x4a8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d01d      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0x2c8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a86      	ldr	r2, [pc, #536]	; (80046c0 <HAL_TIM_ConfigClockSource+0x4ac>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d018      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0x2c8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a85      	ldr	r2, [pc, #532]	; (80046c4 <HAL_TIM_ConfigClockSource+0x4b0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0x2c8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a83      	ldr	r2, [pc, #524]	; (80046c8 <HAL_TIM_ConfigClockSource+0x4b4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00e      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0x2c8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a82      	ldr	r2, [pc, #520]	; (80046cc <HAL_TIM_ConfigClockSource+0x4b8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0x2c8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a80      	ldr	r2, [pc, #512]	; (80046d0 <HAL_TIM_ConfigClockSource+0x4bc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0x2c8>
 80044d2:	f241 01fb 	movw	r1, #4347	; 0x10fb
 80044d6:	487f      	ldr	r0, [pc, #508]	; (80046d4 <HAL_TIM_ConfigClockSource+0x4c0>)
 80044d8:	f7fc fc74 	bl	8000dc4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_TIM_ConfigClockSource+0x2f8>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ec:	d00e      	beq.n	800450c <HAL_TIM_ConfigClockSource+0x2f8>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f6:	d009      	beq.n	800450c <HAL_TIM_ConfigClockSource+0x2f8>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004500:	d004      	beq.n	800450c <HAL_TIM_ConfigClockSource+0x2f8>
 8004502:	f241 01fe 	movw	r1, #4350	; 0x10fe
 8004506:	4873      	ldr	r0, [pc, #460]	; (80046d4 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004508:	f7fc fc5c 	bl	8000dc4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004514:	d014      	beq.n	8004540 <HAL_TIM_ConfigClockSource+0x32c>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d010      	beq.n	8004540 <HAL_TIM_ConfigClockSource+0x32c>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00c      	beq.n	8004540 <HAL_TIM_ConfigClockSource+0x32c>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d008      	beq.n	8004540 <HAL_TIM_ConfigClockSource+0x32c>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b0a      	cmp	r3, #10
 8004534:	d004      	beq.n	8004540 <HAL_TIM_ConfigClockSource+0x32c>
 8004536:	f241 01ff 	movw	r1, #4351	; 0x10ff
 800453a:	4866      	ldr	r0, [pc, #408]	; (80046d4 <HAL_TIM_ConfigClockSource+0x4c0>)
 800453c:	f7fc fc42 	bl	8000dc4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	2b0f      	cmp	r3, #15
 8004546:	d904      	bls.n	8004552 <HAL_TIM_ConfigClockSource+0x33e>
 8004548:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800454c:	4861      	ldr	r0, [pc, #388]	; (80046d4 <HAL_TIM_ConfigClockSource+0x4c0>)
 800454e:	f7fc fc39 	bl	8000dc4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6899      	ldr	r1, [r3, #8]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f000 fb49 	bl	8004bf8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004574:	609a      	str	r2, [r3, #8]
      break;
 8004576:	e128      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004580:	d018      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0x3a0>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a4d      	ldr	r2, [pc, #308]	; (80046bc <HAL_TIM_ConfigClockSource+0x4a8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d013      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0x3a0>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a4b      	ldr	r2, [pc, #300]	; (80046c0 <HAL_TIM_ConfigClockSource+0x4ac>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00e      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0x3a0>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a4a      	ldr	r2, [pc, #296]	; (80046c4 <HAL_TIM_ConfigClockSource+0x4b0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d009      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0x3a0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a48      	ldr	r2, [pc, #288]	; (80046c8 <HAL_TIM_ConfigClockSource+0x4b4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d004      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0x3a0>
 80045aa:	f241 110f 	movw	r1, #4367	; 0x110f
 80045ae:	4849      	ldr	r0, [pc, #292]	; (80046d4 <HAL_TIM_ConfigClockSource+0x4c0>)
 80045b0:	f7fc fc08 	bl	8000dc4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045bc:	d014      	beq.n	80045e8 <HAL_TIM_ConfigClockSource+0x3d4>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d010      	beq.n	80045e8 <HAL_TIM_ConfigClockSource+0x3d4>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00c      	beq.n	80045e8 <HAL_TIM_ConfigClockSource+0x3d4>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d008      	beq.n	80045e8 <HAL_TIM_ConfigClockSource+0x3d4>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b0a      	cmp	r3, #10
 80045dc:	d004      	beq.n	80045e8 <HAL_TIM_ConfigClockSource+0x3d4>
 80045de:	f241 1112 	movw	r1, #4370	; 0x1112
 80045e2:	483c      	ldr	r0, [pc, #240]	; (80046d4 <HAL_TIM_ConfigClockSource+0x4c0>)
 80045e4:	f7fc fbee 	bl	8000dc4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b0f      	cmp	r3, #15
 80045ee:	d904      	bls.n	80045fa <HAL_TIM_ConfigClockSource+0x3e6>
 80045f0:	f241 1113 	movw	r1, #4371	; 0x1113
 80045f4:	4837      	ldr	r0, [pc, #220]	; (80046d4 <HAL_TIM_ConfigClockSource+0x4c0>)
 80045f6:	f7fc fbe5 	bl	8000dc4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	461a      	mov	r2, r3
 8004608:	f000 fa7f 	bl	8004b0a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2150      	movs	r1, #80	; 0x50
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fad6 	bl	8004bc4 <TIM_ITRx_SetConfig>
      break;
 8004618:	e0d7      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004622:	d018      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x442>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a24      	ldr	r2, [pc, #144]	; (80046bc <HAL_TIM_ConfigClockSource+0x4a8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x442>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a23      	ldr	r2, [pc, #140]	; (80046c0 <HAL_TIM_ConfigClockSource+0x4ac>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00e      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x442>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a21      	ldr	r2, [pc, #132]	; (80046c4 <HAL_TIM_ConfigClockSource+0x4b0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d009      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x442>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a20      	ldr	r2, [pc, #128]	; (80046c8 <HAL_TIM_ConfigClockSource+0x4b4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x442>
 800464c:	f241 111f 	movw	r1, #4383	; 0x111f
 8004650:	4820      	ldr	r0, [pc, #128]	; (80046d4 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004652:	f7fc fbb7 	bl	8000dc4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800465e:	d014      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x476>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d010      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x476>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00c      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x476>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d008      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x476>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b0a      	cmp	r3, #10
 800467e:	d004      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x476>
 8004680:	f241 1122 	movw	r1, #4386	; 0x1122
 8004684:	4813      	ldr	r0, [pc, #76]	; (80046d4 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004686:	f7fc fb9d 	bl	8000dc4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b0f      	cmp	r3, #15
 8004690:	d904      	bls.n	800469c <HAL_TIM_ConfigClockSource+0x488>
 8004692:	f241 1123 	movw	r1, #4387	; 0x1123
 8004696:	480f      	ldr	r0, [pc, #60]	; (80046d4 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004698:	f7fc fb94 	bl	8000dc4 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	461a      	mov	r2, r3
 80046aa:	f000 fa5c 	bl	8004b66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2160      	movs	r1, #96	; 0x60
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fa85 	bl	8004bc4 <TIM_ITRx_SetConfig>
      break;
 80046ba:	e086      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x5b6>
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40000c00 	.word	0x40000c00
 80046c8:	40010800 	.word	0x40010800
 80046cc:	40010c00 	.word	0x40010c00
 80046d0:	40011000 	.word	0x40011000
 80046d4:	08008890 	.word	0x08008890
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e0:	d018      	beq.n	8004714 <HAL_TIM_ConfigClockSource+0x500>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a3f      	ldr	r2, [pc, #252]	; (80047e4 <HAL_TIM_ConfigClockSource+0x5d0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <HAL_TIM_ConfigClockSource+0x500>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a3d      	ldr	r2, [pc, #244]	; (80047e8 <HAL_TIM_ConfigClockSource+0x5d4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00e      	beq.n	8004714 <HAL_TIM_ConfigClockSource+0x500>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a3c      	ldr	r2, [pc, #240]	; (80047ec <HAL_TIM_ConfigClockSource+0x5d8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d009      	beq.n	8004714 <HAL_TIM_ConfigClockSource+0x500>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a3a      	ldr	r2, [pc, #232]	; (80047f0 <HAL_TIM_ConfigClockSource+0x5dc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_TIM_ConfigClockSource+0x500>
 800470a:	f241 112f 	movw	r1, #4399	; 0x112f
 800470e:	4839      	ldr	r0, [pc, #228]	; (80047f4 <HAL_TIM_ConfigClockSource+0x5e0>)
 8004710:	f7fc fb58 	bl	8000dc4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471c:	d014      	beq.n	8004748 <HAL_TIM_ConfigClockSource+0x534>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d010      	beq.n	8004748 <HAL_TIM_ConfigClockSource+0x534>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00c      	beq.n	8004748 <HAL_TIM_ConfigClockSource+0x534>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b02      	cmp	r3, #2
 8004734:	d008      	beq.n	8004748 <HAL_TIM_ConfigClockSource+0x534>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b0a      	cmp	r3, #10
 800473c:	d004      	beq.n	8004748 <HAL_TIM_ConfigClockSource+0x534>
 800473e:	f241 1132 	movw	r1, #4402	; 0x1132
 8004742:	482c      	ldr	r0, [pc, #176]	; (80047f4 <HAL_TIM_ConfigClockSource+0x5e0>)
 8004744:	f7fc fb3e 	bl	8000dc4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	2b0f      	cmp	r3, #15
 800474e:	d904      	bls.n	800475a <HAL_TIM_ConfigClockSource+0x546>
 8004750:	f241 1133 	movw	r1, #4403	; 0x1133
 8004754:	4827      	ldr	r0, [pc, #156]	; (80047f4 <HAL_TIM_ConfigClockSource+0x5e0>)
 8004756:	f7fc fb35 	bl	8000dc4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6859      	ldr	r1, [r3, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	461a      	mov	r2, r3
 8004768:	f000 f9cf 	bl	8004b0a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2140      	movs	r1, #64	; 0x40
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fa26 	bl	8004bc4 <TIM_ITRx_SetConfig>
      break;
 8004778:	e027      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x5b6>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004782:	d018      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x5a2>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a16      	ldr	r2, [pc, #88]	; (80047e4 <HAL_TIM_ConfigClockSource+0x5d0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d013      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x5a2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a15      	ldr	r2, [pc, #84]	; (80047e8 <HAL_TIM_ConfigClockSource+0x5d4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00e      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x5a2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a13      	ldr	r2, [pc, #76]	; (80047ec <HAL_TIM_ConfigClockSource+0x5d8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d009      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x5a2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a12      	ldr	r2, [pc, #72]	; (80047f0 <HAL_TIM_ConfigClockSource+0x5dc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d004      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x5a2>
 80047ac:	f241 1142 	movw	r1, #4418	; 0x1142
 80047b0:	4810      	ldr	r0, [pc, #64]	; (80047f4 <HAL_TIM_ConfigClockSource+0x5e0>)
 80047b2:	f7fc fb07 	bl	8000dc4 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4619      	mov	r1, r3
 80047c0:	4610      	mov	r0, r2
 80047c2:	f000 f9ff 	bl	8004bc4 <TIM_ITRx_SetConfig>
      break;
 80047c6:	e000      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x5b6>
      break;
 80047c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40010800 	.word	0x40010800
 80047f4:	08008890 	.word	0x08008890

080047f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr

0800480a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr

0800482e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr

08004840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004856:	d00f      	beq.n	8004878 <TIM_Base_SetConfig+0x38>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a2b      	ldr	r2, [pc, #172]	; (8004908 <TIM_Base_SetConfig+0xc8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00b      	beq.n	8004878 <TIM_Base_SetConfig+0x38>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a2a      	ldr	r2, [pc, #168]	; (800490c <TIM_Base_SetConfig+0xcc>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d007      	beq.n	8004878 <TIM_Base_SetConfig+0x38>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a29      	ldr	r2, [pc, #164]	; (8004910 <TIM_Base_SetConfig+0xd0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <TIM_Base_SetConfig+0x38>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a28      	ldr	r2, [pc, #160]	; (8004914 <TIM_Base_SetConfig+0xd4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d108      	bne.n	800488a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004890:	d017      	beq.n	80048c2 <TIM_Base_SetConfig+0x82>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <TIM_Base_SetConfig+0xc8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <TIM_Base_SetConfig+0x82>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a1b      	ldr	r2, [pc, #108]	; (800490c <TIM_Base_SetConfig+0xcc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00f      	beq.n	80048c2 <TIM_Base_SetConfig+0x82>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a1a      	ldr	r2, [pc, #104]	; (8004910 <TIM_Base_SetConfig+0xd0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00b      	beq.n	80048c2 <TIM_Base_SetConfig+0x82>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a19      	ldr	r2, [pc, #100]	; (8004914 <TIM_Base_SetConfig+0xd4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d007      	beq.n	80048c2 <TIM_Base_SetConfig+0x82>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a18      	ldr	r2, [pc, #96]	; (8004918 <TIM_Base_SetConfig+0xd8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_Base_SetConfig+0x82>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a17      	ldr	r2, [pc, #92]	; (800491c <TIM_Base_SetConfig+0xdc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d108      	bne.n	80048d4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	615a      	str	r2, [r3, #20]
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40010800 	.word	0x40010800
 8004918:	40010c00 	.word	0x40010c00
 800491c:	40011000 	.word	0x40011000

08004920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f023 0201 	bic.w	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f023 0302 	bic.w	r3, r3, #2
 8004968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr

08004998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f023 0210 	bic.w	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f023 0320 	bic.w	r3, r3, #32
 80049e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0303 	bic.w	r3, r3, #3
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	621a      	str	r2, [r3, #32]
}
 8004a84:	bf00      	nop
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr

08004a8e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b087      	sub	sp, #28
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004abc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	031b      	lsls	r3, r3, #12
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	621a      	str	r2, [r3, #32]
}
 8004b00:	bf00      	nop
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr

08004b0a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b087      	sub	sp, #28
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f023 0201 	bic.w	r2, r3, #1
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f023 030a 	bic.w	r3, r3, #10
 8004b46:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	621a      	str	r2, [r3, #32]
}
 8004b5c:	bf00      	nop
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr

08004b66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b087      	sub	sp, #28
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f023 0210 	bic.w	r2, r3, #16
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	031b      	lsls	r3, r3, #12
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ba2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f043 0307 	orr.w	r3, r3, #7
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	609a      	str	r2, [r3, #8]
}
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr

08004bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	021a      	lsls	r2, r3, #8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	609a      	str	r2, [r3, #8]
}
 8004c2c:	bf00      	nop
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr
	...

08004c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4a:	d017      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a41      	ldr	r2, [pc, #260]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d012      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a40      	ldr	r2, [pc, #256]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d00d      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a3e      	ldr	r2, [pc, #248]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d008      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a3d      	ldr	r2, [pc, #244]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d003      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8004c74:	215a      	movs	r1, #90	; 0x5a
 8004c76:	483c      	ldr	r0, [pc, #240]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004c78:	f7fc f8a4 	bl	8000dc4 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01f      	beq.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d01b      	beq.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d017      	beq.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b30      	cmp	r3, #48	; 0x30
 8004c9a:	d013      	beq.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b40      	cmp	r3, #64	; 0x40
 8004ca2:	d00f      	beq.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b50      	cmp	r3, #80	; 0x50
 8004caa:	d00b      	beq.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b60      	cmp	r3, #96	; 0x60
 8004cb2:	d007      	beq.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b70      	cmp	r3, #112	; 0x70
 8004cba:	d003      	beq.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cbc:	215b      	movs	r1, #91	; 0x5b
 8004cbe:	482a      	ldr	r0, [pc, #168]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004cc0:	f7fc f880 	bl	8000dc4 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b80      	cmp	r3, #128	; 0x80
 8004cca:	d007      	beq.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004cd4:	215c      	movs	r1, #92	; 0x5c
 8004cd6:	4824      	ldr	r0, [pc, #144]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004cd8:	f7fc f874 	bl	8000dc4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_TIMEx_MasterConfigSynchronization+0xb2>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e032      	b.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x118>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d22:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800
 8004d60:	40000c00 	.word	0x40000c00
 8004d64:	40010800 	.word	0x40010800
 8004d68:	080088c8 	.word	0x080088c8

08004d6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e0aa      	b.n	8004ed4 <HAL_UART_Init+0x168>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d02c      	beq.n	8004de0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a54      	ldr	r2, [pc, #336]	; (8004edc <HAL_UART_Init+0x170>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00e      	beq.n	8004dae <HAL_UART_Init+0x42>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a52      	ldr	r2, [pc, #328]	; (8004ee0 <HAL_UART_Init+0x174>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d009      	beq.n	8004dae <HAL_UART_Init+0x42>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a51      	ldr	r2, [pc, #324]	; (8004ee4 <HAL_UART_Init+0x178>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_UART_Init+0x42>
 8004da4:	f240 1145 	movw	r1, #325	; 0x145
 8004da8:	484f      	ldr	r0, [pc, #316]	; (8004ee8 <HAL_UART_Init+0x17c>)
 8004daa:	f7fc f80b 	bl	8000dc4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d032      	beq.n	8004e1c <HAL_UART_Init+0xb0>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dbe:	d02d      	beq.n	8004e1c <HAL_UART_Init+0xb0>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc8:	d028      	beq.n	8004e1c <HAL_UART_Init+0xb0>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd2:	d023      	beq.n	8004e1c <HAL_UART_Init+0xb0>
 8004dd4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004dd8:	4843      	ldr	r0, [pc, #268]	; (8004ee8 <HAL_UART_Init+0x17c>)
 8004dda:	f7fb fff3 	bl	8000dc4 <assert_failed>
 8004dde:	e01d      	b.n	8004e1c <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a3d      	ldr	r2, [pc, #244]	; (8004edc <HAL_UART_Init+0x170>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d018      	beq.n	8004e1c <HAL_UART_Init+0xb0>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a3c      	ldr	r2, [pc, #240]	; (8004ee0 <HAL_UART_Init+0x174>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d013      	beq.n	8004e1c <HAL_UART_Init+0xb0>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a3a      	ldr	r2, [pc, #232]	; (8004ee4 <HAL_UART_Init+0x178>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00e      	beq.n	8004e1c <HAL_UART_Init+0xb0>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a3a      	ldr	r2, [pc, #232]	; (8004eec <HAL_UART_Init+0x180>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d009      	beq.n	8004e1c <HAL_UART_Init+0xb0>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a38      	ldr	r2, [pc, #224]	; (8004ef0 <HAL_UART_Init+0x184>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d004      	beq.n	8004e1c <HAL_UART_Init+0xb0>
 8004e12:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004e16:	4834      	ldr	r0, [pc, #208]	; (8004ee8 <HAL_UART_Init+0x17c>)
 8004e18:	f7fb ffd4 	bl	8000dc4 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <HAL_UART_Init+0xcc>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2c:	d004      	beq.n	8004e38 <HAL_UART_Init+0xcc>
 8004e2e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004e32:	482d      	ldr	r0, [pc, #180]	; (8004ee8 <HAL_UART_Init+0x17c>)
 8004e34:	f7fb ffc6 	bl	8000dc4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d009      	beq.n	8004e54 <HAL_UART_Init+0xe8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e48:	d004      	beq.n	8004e54 <HAL_UART_Init+0xe8>
 8004e4a:	f240 114d 	movw	r1, #333	; 0x14d
 8004e4e:	4826      	ldr	r0, [pc, #152]	; (8004ee8 <HAL_UART_Init+0x17c>)
 8004e50:	f7fb ffb8 	bl	8000dc4 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <HAL_UART_Init+0x102>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7fc faef 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2224      	movs	r2, #36	; 0x24
 8004e72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f924 	bl	80050d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695a      	ldr	r2, [r3, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eaa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40013800 	.word	0x40013800
 8004ee0:	40004400 	.word	0x40004400
 8004ee4:	40004800 	.word	0x40004800
 8004ee8:	08008904 	.word	0x08008904
 8004eec:	40004c00 	.word	0x40004c00
 8004ef0:	40005000 	.word	0x40005000

08004ef4 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	f040 8090 	bne.w	8005036 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_UART_Receive+0x2e>
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e088      	b.n	8005038 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_UART_Receive+0x40>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e081      	b.n	8005038 <HAL_UART_Receive+0x144>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2222      	movs	r2, #34	; 0x22
 8004f46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004f4a:	f7fc fb13 	bl	8001574 <HAL_GetTick>
 8004f4e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	88fa      	ldrh	r2, [r7, #6]
 8004f54:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	88fa      	ldrh	r2, [r7, #6]
 8004f5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004f5c:	e05c      	b.n	8005018 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f74:	d12b      	bne.n	8004fce <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2120      	movs	r1, #32
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f85d 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e053      	b.n	8005038 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10c      	bne.n	8004fb6 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	60bb      	str	r3, [r7, #8]
 8004fb4:	e030      	b.n	8005018 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	e024      	b.n	8005018 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2120      	movs	r1, #32
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f831 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e027      	b.n	8005038 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d108      	bne.n	8005002 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	60ba      	str	r2, [r7, #8]
 8004ffc:	b2ca      	uxtb	r2, r1
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	e00a      	b.n	8005018 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	b2da      	uxtb	r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	1c59      	adds	r1, r3, #1
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d19d      	bne.n	8004f5e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	e000      	b.n	8005038 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005036:	2302      	movs	r3, #2
  }
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	4613      	mov	r3, r2
 800504e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005050:	e02c      	b.n	80050ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005058:	d028      	beq.n	80050ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <UART_WaitOnFlagUntilTimeout+0x30>
 8005060:	f7fc fa88 	bl	8001574 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	429a      	cmp	r2, r3
 800506e:	d21d      	bcs.n	80050ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800507e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695a      	ldr	r2, [r3, #20]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0201 	bic.w	r2, r2, #1
 800508e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e00f      	b.n	80050cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4013      	ands	r3, r2
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d0c3      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	4ab2      	ldr	r2, [pc, #712]	; (80053ac <UART_SetConfig+0x2d8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d904      	bls.n	80050f0 <UART_SetConfig+0x1c>
 80050e6:	f640 31e2 	movw	r1, #3042	; 0xbe2
 80050ea:	48b1      	ldr	r0, [pc, #708]	; (80053b0 <UART_SetConfig+0x2dc>)
 80050ec:	f7fb fe6a 	bl	8000dc4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d009      	beq.n	800510c <UART_SetConfig+0x38>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005100:	d004      	beq.n	800510c <UART_SetConfig+0x38>
 8005102:	f640 31e3 	movw	r1, #3043	; 0xbe3
 8005106:	48aa      	ldr	r0, [pc, #680]	; (80053b0 <UART_SetConfig+0x2dc>)
 8005108:	f7fb fe5c 	bl	8000dc4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00e      	beq.n	8005132 <UART_SetConfig+0x5e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511c:	d009      	beq.n	8005132 <UART_SetConfig+0x5e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005126:	d004      	beq.n	8005132 <UART_SetConfig+0x5e>
 8005128:	f640 31e4 	movw	r1, #3044	; 0xbe4
 800512c:	48a0      	ldr	r0, [pc, #640]	; (80053b0 <UART_SetConfig+0x2dc>)
 800512e:	f7fb fe49 	bl	8000dc4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d103      	bne.n	8005148 <UART_SetConfig+0x74>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <UART_SetConfig+0x7e>
 8005148:	f640 31e5 	movw	r1, #3045	; 0xbe5
 800514c:	4898      	ldr	r0, [pc, #608]	; (80053b0 <UART_SetConfig+0x2dc>)
 800514e:	f7fb fe39 	bl	8000dc4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800518a:	f023 030c 	bic.w	r3, r3, #12
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	68f9      	ldr	r1, [r7, #12]
 8005194:	430b      	orrs	r3, r1
 8005196:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699a      	ldr	r2, [r3, #24]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b6:	f040 80a5 	bne.w	8005304 <UART_SetConfig+0x230>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a7d      	ldr	r2, [pc, #500]	; (80053b4 <UART_SetConfig+0x2e0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d14f      	bne.n	8005264 <UART_SetConfig+0x190>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051c4:	f7fe fb44 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 80051c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	009a      	lsls	r2, r3, #2
 80051d4:	441a      	add	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e0:	4a75      	ldr	r2, [pc, #468]	; (80053b8 <UART_SetConfig+0x2e4>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	0119      	lsls	r1, r3, #4
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	009a      	lsls	r2, r3, #2
 80051f4:	441a      	add	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005200:	4b6d      	ldr	r3, [pc, #436]	; (80053b8 <UART_SetConfig+0x2e4>)
 8005202:	fba3 0302 	umull	r0, r3, r3, r2
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	2064      	movs	r0, #100	; 0x64
 800520a:	fb00 f303 	mul.w	r3, r0, r3
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	3332      	adds	r3, #50	; 0x32
 8005214:	4a68      	ldr	r2, [pc, #416]	; (80053b8 <UART_SetConfig+0x2e4>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005222:	4419      	add	r1, r3
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	009a      	lsls	r2, r3, #2
 800522e:	441a      	add	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	fbb2 f2f3 	udiv	r2, r2, r3
 800523a:	4b5f      	ldr	r3, [pc, #380]	; (80053b8 <UART_SetConfig+0x2e4>)
 800523c:	fba3 0302 	umull	r0, r3, r3, r2
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	2064      	movs	r0, #100	; 0x64
 8005244:	fb00 f303 	mul.w	r3, r0, r3
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	3332      	adds	r3, #50	; 0x32
 800524e:	4a5a      	ldr	r2, [pc, #360]	; (80053b8 <UART_SetConfig+0x2e4>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	f003 0207 	and.w	r2, r3, #7
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	440a      	add	r2, r1
 8005260:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005262:	e0f9      	b.n	8005458 <UART_SetConfig+0x384>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005264:	f7fe fae0 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8005268:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	009a      	lsls	r2, r3, #2
 8005274:	441a      	add	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	4a4d      	ldr	r2, [pc, #308]	; (80053b8 <UART_SetConfig+0x2e4>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	0119      	lsls	r1, r3, #4
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	009a      	lsls	r2, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	fbb2 f2f3 	udiv	r2, r2, r3
 80052a0:	4b45      	ldr	r3, [pc, #276]	; (80053b8 <UART_SetConfig+0x2e4>)
 80052a2:	fba3 0302 	umull	r0, r3, r3, r2
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	2064      	movs	r0, #100	; 0x64
 80052aa:	fb00 f303 	mul.w	r3, r0, r3
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	3332      	adds	r3, #50	; 0x32
 80052b4:	4a40      	ldr	r2, [pc, #256]	; (80053b8 <UART_SetConfig+0x2e4>)
 80052b6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052c2:	4419      	add	r1, r3
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009a      	lsls	r2, r3, #2
 80052ce:	441a      	add	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80052da:	4b37      	ldr	r3, [pc, #220]	; (80053b8 <UART_SetConfig+0x2e4>)
 80052dc:	fba3 0302 	umull	r0, r3, r3, r2
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	2064      	movs	r0, #100	; 0x64
 80052e4:	fb00 f303 	mul.w	r3, r0, r3
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	3332      	adds	r3, #50	; 0x32
 80052ee:	4a32      	ldr	r2, [pc, #200]	; (80053b8 <UART_SetConfig+0x2e4>)
 80052f0:	fba2 2303 	umull	r2, r3, r2, r3
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	f003 0207 	and.w	r2, r3, #7
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	440a      	add	r2, r1
 8005300:	609a      	str	r2, [r3, #8]
}
 8005302:	e0a9      	b.n	8005458 <UART_SetConfig+0x384>
    if((huart->Instance == USART1))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a2a      	ldr	r2, [pc, #168]	; (80053b4 <UART_SetConfig+0x2e0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d156      	bne.n	80053bc <UART_SetConfig+0x2e8>
      pclk = HAL_RCC_GetPCLK2Freq();
 800530e:	f7fe fa9f 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 8005312:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	4613      	mov	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	009a      	lsls	r2, r3, #2
 800531e:	441a      	add	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	fbb2 f3f3 	udiv	r3, r2, r3
 800532a:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <UART_SetConfig+0x2e4>)
 800532c:	fba2 2303 	umull	r2, r3, r2, r3
 8005330:	095b      	lsrs	r3, r3, #5
 8005332:	0119      	lsls	r1, r3, #4
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009a      	lsls	r2, r3, #2
 800533e:	441a      	add	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	fbb2 f2f3 	udiv	r2, r2, r3
 800534a:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <UART_SetConfig+0x2e4>)
 800534c:	fba3 0302 	umull	r0, r3, r3, r2
 8005350:	095b      	lsrs	r3, r3, #5
 8005352:	2064      	movs	r0, #100	; 0x64
 8005354:	fb00 f303 	mul.w	r3, r0, r3
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	3332      	adds	r3, #50	; 0x32
 800535e:	4a16      	ldr	r2, [pc, #88]	; (80053b8 <UART_SetConfig+0x2e4>)
 8005360:	fba2 2303 	umull	r2, r3, r2, r3
 8005364:	095b      	lsrs	r3, r3, #5
 8005366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800536a:	4419      	add	r1, r3
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	009a      	lsls	r2, r3, #2
 8005376:	441a      	add	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005382:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <UART_SetConfig+0x2e4>)
 8005384:	fba3 0302 	umull	r0, r3, r3, r2
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	2064      	movs	r0, #100	; 0x64
 800538c:	fb00 f303 	mul.w	r3, r0, r3
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	3332      	adds	r3, #50	; 0x32
 8005396:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <UART_SetConfig+0x2e4>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	f003 020f 	and.w	r2, r3, #15
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	440a      	add	r2, r1
 80053a8:	609a      	str	r2, [r3, #8]
}
 80053aa:	e055      	b.n	8005458 <UART_SetConfig+0x384>
 80053ac:	003d0900 	.word	0x003d0900
 80053b0:	08008904 	.word	0x08008904
 80053b4:	40013800 	.word	0x40013800
 80053b8:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80053bc:	f7fe fa34 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 80053c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009a      	lsls	r2, r3, #2
 80053cc:	441a      	add	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d8:	4a21      	ldr	r2, [pc, #132]	; (8005460 <UART_SetConfig+0x38c>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	0119      	lsls	r1, r3, #4
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	009a      	lsls	r2, r3, #2
 80053ec:	441a      	add	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80053f8:	4b19      	ldr	r3, [pc, #100]	; (8005460 <UART_SetConfig+0x38c>)
 80053fa:	fba3 0302 	umull	r0, r3, r3, r2
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	2064      	movs	r0, #100	; 0x64
 8005402:	fb00 f303 	mul.w	r3, r0, r3
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	3332      	adds	r3, #50	; 0x32
 800540c:	4a14      	ldr	r2, [pc, #80]	; (8005460 <UART_SetConfig+0x38c>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005418:	4419      	add	r1, r3
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009a      	lsls	r2, r3, #2
 8005424:	441a      	add	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <UART_SetConfig+0x38c>)
 8005432:	fba3 0302 	umull	r0, r3, r3, r2
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	2064      	movs	r0, #100	; 0x64
 800543a:	fb00 f303 	mul.w	r3, r0, r3
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	3332      	adds	r3, #50	; 0x32
 8005444:	4a06      	ldr	r2, [pc, #24]	; (8005460 <UART_SetConfig+0x38c>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	f003 020f 	and.w	r2, r3, #15
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	440a      	add	r2, r1
 8005456:	609a      	str	r2, [r3, #8]
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	51eb851f 	.word	0x51eb851f

08005464 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800546a:	f3ef 8305 	mrs	r3, IPSR
 800546e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005470:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10f      	bne.n	8005496 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005476:	f3ef 8310 	mrs	r3, PRIMASK
 800547a:	607b      	str	r3, [r7, #4]
  return(result);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <osKernelInitialize+0x32>
 8005482:	4b10      	ldr	r3, [pc, #64]	; (80054c4 <osKernelInitialize+0x60>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d109      	bne.n	800549e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800548a:	f3ef 8311 	mrs	r3, BASEPRI
 800548e:	603b      	str	r3, [r7, #0]
  return(result);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005496:	f06f 0305 	mvn.w	r3, #5
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e00c      	b.n	80054b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800549e:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <osKernelInitialize+0x60>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d105      	bne.n	80054b2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80054a6:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <osKernelInitialize+0x60>)
 80054a8:	2201      	movs	r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	e002      	b.n	80054b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80054b2:	f04f 33ff 	mov.w	r3, #4294967295
 80054b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80054b8:	68fb      	ldr	r3, [r7, #12]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr
 80054c4:	20000034 	.word	0x20000034

080054c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ce:	f3ef 8305 	mrs	r3, IPSR
 80054d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80054d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10f      	bne.n	80054fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054da:	f3ef 8310 	mrs	r3, PRIMASK
 80054de:	607b      	str	r3, [r7, #4]
  return(result);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <osKernelStart+0x32>
 80054e6:	4b11      	ldr	r3, [pc, #68]	; (800552c <osKernelStart+0x64>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d109      	bne.n	8005502 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054ee:	f3ef 8311 	mrs	r3, BASEPRI
 80054f2:	603b      	str	r3, [r7, #0]
  return(result);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <osKernelStart+0x3a>
    stat = osErrorISR;
 80054fa:	f06f 0305 	mvn.w	r3, #5
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	e00e      	b.n	8005520 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005502:	4b0a      	ldr	r3, [pc, #40]	; (800552c <osKernelStart+0x64>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d107      	bne.n	800551a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800550a:	4b08      	ldr	r3, [pc, #32]	; (800552c <osKernelStart+0x64>)
 800550c:	2202      	movs	r2, #2
 800550e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005510:	f001 fb5c 	bl	8006bcc <vTaskStartScheduler>
      stat = osOK;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]
 8005518:	e002      	b.n	8005520 <osKernelStart+0x58>
    } else {
      stat = osError;
 800551a:	f04f 33ff 	mov.w	r3, #4294967295
 800551e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005520:	68fb      	ldr	r3, [r7, #12]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000034 	.word	0x20000034

08005530 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b092      	sub	sp, #72	; 0x48
 8005534:	af04      	add	r7, sp, #16
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005540:	f3ef 8305 	mrs	r3, IPSR
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005548:	2b00      	cmp	r3, #0
 800554a:	f040 8094 	bne.w	8005676 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800554e:	f3ef 8310 	mrs	r3, PRIMASK
 8005552:	623b      	str	r3, [r7, #32]
  return(result);
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 808d 	bne.w	8005676 <osThreadNew+0x146>
 800555c:	4b48      	ldr	r3, [pc, #288]	; (8005680 <osThreadNew+0x150>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d106      	bne.n	8005572 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005564:	f3ef 8311 	mrs	r3, BASEPRI
 8005568:	61fb      	str	r3, [r7, #28]
  return(result);
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	2b00      	cmp	r3, #0
 800556e:	f040 8082 	bne.w	8005676 <osThreadNew+0x146>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d07e      	beq.n	8005676 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005578:	2380      	movs	r3, #128	; 0x80
 800557a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800557c:	2318      	movs	r3, #24
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005580:	2300      	movs	r3, #0
 8005582:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005584:	f107 031b 	add.w	r3, r7, #27
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800558a:	f04f 33ff 	mov.w	r3, #4294967295
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d045      	beq.n	8005622 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <osThreadNew+0x74>
        name = attr->name;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <osThreadNew+0x9a>
 80055b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ba:	2b38      	cmp	r3, #56	; 0x38
 80055bc:	d805      	bhi.n	80055ca <osThreadNew+0x9a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <osThreadNew+0x9e>
        return (NULL);
 80055ca:	2300      	movs	r3, #0
 80055cc:	e054      	b.n	8005678 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	089b      	lsrs	r3, r3, #2
 80055dc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00e      	beq.n	8005604 <osThreadNew+0xd4>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	2b5b      	cmp	r3, #91	; 0x5b
 80055ec:	d90a      	bls.n	8005604 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d006      	beq.n	8005604 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <osThreadNew+0xd4>
        mem = 1;
 80055fe:	2301      	movs	r3, #1
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
 8005602:	e010      	b.n	8005626 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10c      	bne.n	8005626 <osThreadNew+0xf6>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d108      	bne.n	8005626 <osThreadNew+0xf6>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d104      	bne.n	8005626 <osThreadNew+0xf6>
          mem = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005620:	e001      	b.n	8005626 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	2b01      	cmp	r3, #1
 800562a:	d110      	bne.n	800564e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005634:	9202      	str	r2, [sp, #8]
 8005636:	9301      	str	r3, [sp, #4]
 8005638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005640:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 ffee 	bl	8006624 <xTaskCreateStatic>
 8005648:	4603      	mov	r3, r0
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	e013      	b.n	8005676 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	2b00      	cmp	r3, #0
 8005652:	d110      	bne.n	8005676 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	b29a      	uxth	r2, r3
 8005658:	f107 0314 	add.w	r3, r7, #20
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f001 f835 	bl	80066d6 <xTaskCreate>
 800566c:	4603      	mov	r3, r0
 800566e:	2b01      	cmp	r3, #1
 8005670:	d001      	beq.n	8005676 <osThreadNew+0x146>
          hTask = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005676:	697b      	ldr	r3, [r7, #20]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3738      	adds	r7, #56	; 0x38
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20000034 	.word	0x20000034

08005684 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800568c:	f3ef 8305 	mrs	r3, IPSR
 8005690:	613b      	str	r3, [r7, #16]
  return(result);
 8005692:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10f      	bne.n	80056b8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005698:	f3ef 8310 	mrs	r3, PRIMASK
 800569c:	60fb      	str	r3, [r7, #12]
  return(result);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d109      	bne.n	80056b8 <osDelay+0x34>
 80056a4:	4b0d      	ldr	r3, [pc, #52]	; (80056dc <osDelay+0x58>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d109      	bne.n	80056c0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056ac:	f3ef 8311 	mrs	r3, BASEPRI
 80056b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <osDelay+0x3c>
    stat = osErrorISR;
 80056b8:	f06f 0305 	mvn.w	r3, #5
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	e007      	b.n	80056d0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f001 f93e 	bl	800694c <vTaskDelay>
    }
  }

  return (stat);
 80056d0:	697b      	ldr	r3, [r7, #20]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000034 	.word	0x20000034

080056e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4a06      	ldr	r2, [pc, #24]	; (8005708 <vApplicationGetIdleTaskMemory+0x28>)
 80056f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4a05      	ldr	r2, [pc, #20]	; (800570c <vApplicationGetIdleTaskMemory+0x2c>)
 80056f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2280      	movs	r2, #128	; 0x80
 80056fc:	601a      	str	r2, [r3, #0]
}
 80056fe:	bf00      	nop
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr
 8005708:	20000038 	.word	0x20000038
 800570c:	20000094 	.word	0x20000094

08005710 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4a07      	ldr	r2, [pc, #28]	; (800573c <vApplicationGetTimerTaskMemory+0x2c>)
 8005720:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	4a06      	ldr	r2, [pc, #24]	; (8005740 <vApplicationGetTimerTaskMemory+0x30>)
 8005726:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800572e:	601a      	str	r2, [r3, #0]
}
 8005730:	bf00      	nop
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	20000294 	.word	0x20000294
 8005740:	200002f0 	.word	0x200002f0

08005744 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800574a:	2020      	movs	r0, #32
 800574c:	f002 fd82 	bl	8008254 <pvPortMalloc>
 8005750:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00a      	beq.n	800576e <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3304      	adds	r3, #4
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f99e 	bl	8005aa4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800576e:	687b      	ldr	r3, [r7, #4]
	}
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b090      	sub	sp, #64	; 0x40
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800578a:	2300      	movs	r3, #0
 800578c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800578e:	2300      	movs	r3, #0
 8005790:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d109      	bne.n	80057ac <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	623b      	str	r3, [r7, #32]
 80057aa:	e7fe      	b.n	80057aa <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <xEventGroupWaitBits+0x52>
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	61fb      	str	r3, [r7, #28]
 80057c8:	e7fe      	b.n	80057c8 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d109      	bne.n	80057e4 <xEventGroupWaitBits+0x6c>
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	e7fe      	b.n	80057e2 <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057e4:	f001 fee4 	bl	80075b0 <xTaskGetSchedulerState>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <xEventGroupWaitBits+0x7c>
 80057ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <xEventGroupWaitBits+0x80>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <xEventGroupWaitBits+0x82>
 80057f8:	2300      	movs	r3, #0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d109      	bne.n	8005812 <xEventGroupWaitBits+0x9a>
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e7fe      	b.n	8005810 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8005812:	f001 fa3f 	bl	8006c94 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005822:	f000 f909 	bl	8005a38 <prvTestWaitCondition>
 8005826:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00e      	beq.n	800584c <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005832:	2300      	movs	r3, #0
 8005834:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d028      	beq.n	800588e <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800583c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	43db      	mvns	r3, r3
 8005844:	401a      	ands	r2, r3
 8005846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	e020      	b.n	800588e <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800584c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800584e:	2b00      	cmp	r3, #0
 8005850:	d104      	bne.n	800585c <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005856:	2301      	movs	r3, #1
 8005858:	633b      	str	r3, [r7, #48]	; 0x30
 800585a:	e018      	b.n	800588e <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005868:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005876:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587a:	1d18      	adds	r0, r3, #4
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	4313      	orrs	r3, r2
 8005882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005884:	4619      	mov	r1, r3
 8005886:	f001 fc13 	bl	80070b0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800588a:	2300      	movs	r3, #0
 800588c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800588e:	f001 fa0f 	bl	8006cb0 <xTaskResumeAll>
 8005892:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005896:	2b00      	cmp	r3, #0
 8005898:	d031      	beq.n	80058fe <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	2b00      	cmp	r3, #0
 800589e:	d107      	bne.n	80058b0 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 80058a0:	4b19      	ldr	r3, [pc, #100]	; (8005908 <xEventGroupWaitBits+0x190>)
 80058a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80058b0:	f001 ff08 	bl	80076c4 <uxTaskResetEventItemValue>
 80058b4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80058b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d11a      	bne.n	80058f6 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 80058c0:	f002 fbd2 	bl	8008068 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80058c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80058d0:	f000 f8b2 	bl	8005a38 <prvTestWaitCondition>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d006      	beq.n	80058ee <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	43db      	mvns	r3, r3
 80058e8:	401a      	ands	r2, r3
 80058ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ec:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80058ee:	2301      	movs	r3, #1
 80058f0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80058f2:	f002 fbe7 	bl	80080c4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80058f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80058fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005900:	4618      	mov	r0, r3
 8005902:	3740      	adds	r7, #64	; 0x40
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08e      	sub	sp, #56	; 0x38
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005916:	2300      	movs	r3, #0
 8005918:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800591e:	2300      	movs	r3, #0
 8005920:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d109      	bne.n	800593c <xEventGroupSetBits+0x30>
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	e7fe      	b.n	800593a <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d009      	beq.n	800595a <xEventGroupSetBits+0x4e>
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e7fe      	b.n	8005958 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	3304      	adds	r3, #4
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	3308      	adds	r3, #8
 8005964:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005966:	f001 f995 	bl	8006c94 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	431a      	orrs	r2, r3
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800597c:	e03c      	b.n	80059f8 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800597e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800598a:	2300      	movs	r3, #0
 800598c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005994:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800599c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d108      	bne.n	80059ba <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	4013      	ands	r3, r2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00b      	beq.n	80059cc <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 80059b4:	2301      	movs	r3, #1
 80059b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b8:	e008      	b.n	80059cc <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	4013      	ands	r3, r2
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d101      	bne.n	80059cc <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80059c8:	2301      	movs	r3, #1
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80059cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d010      	beq.n	80059f4 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80059dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80059ec:	4619      	mov	r1, r3
 80059ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059f0:	f001 fc24 	bl	800723c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80059f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d1be      	bne.n	800597e <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	43db      	mvns	r3, r3
 8005a08:	401a      	ands	r2, r3
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005a0e:	f001 f94f 	bl	8006cb0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	681b      	ldr	r3, [r3, #0]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3738      	adds	r7, #56	; 0x38
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff ff6e 	bl	800590c <xEventGroupSetBits>
}
 8005a30:	bf00      	nop
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d107      	bne.n	8005a5e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	4013      	ands	r3, r2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e007      	b.n	8005a6e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4013      	ands	r3, r2
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d101      	bne.n	8005a6e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005a6e:	697b      	ldr	r3, [r7, #20]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr
	...

08005a7c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	68f9      	ldr	r1, [r7, #12]
 8005a8e:	4804      	ldr	r0, [pc, #16]	; (8005aa0 <xEventGroupSetBitsFromISR+0x24>)
 8005a90:	f002 f9e2 	bl	8007e58 <xTimerPendFunctionCallFromISR>
 8005a94:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005a96:	697b      	ldr	r3, [r7, #20]
	}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	08005a1f 	.word	0x08005a1f

08005aa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f103 0208 	add.w	r2, r3, #8
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8005abc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f103 0208 	add.w	r2, r3, #8
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f103 0208 	add.w	r2, r3, #8
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr

08005ae2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr

08005afa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	601a      	str	r2, [r3, #0]
}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr

08005b40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b56:	d103      	bne.n	8005b60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	e00c      	b.n	8005b7a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3308      	adds	r3, #8
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e002      	b.n	8005b6e <vListInsert+0x2e>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d2f6      	bcs.n	8005b68 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	601a      	str	r2, [r3, #0]
}
 8005ba6:	bf00      	nop
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr

08005bb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6892      	ldr	r2, [r2, #8]
 8005bc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6852      	ldr	r2, [r2, #4]
 8005bd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d103      	bne.n	8005be4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	1e5a      	subs	r2, r3, #1
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc80      	pop	{r7}
 8005c00:	4770      	bx	lr
	...

08005c04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d109      	bne.n	8005c2c <xQueueGenericReset+0x28>
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	e7fe      	b.n	8005c2a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005c2c:	f002 fa1c 	bl	8008068 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c38:	68f9      	ldr	r1, [r7, #12]
 8005c3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	441a      	add	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	68f9      	ldr	r1, [r7, #12]
 8005c60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c62:	fb01 f303 	mul.w	r3, r1, r3
 8005c66:	441a      	add	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	22ff      	movs	r2, #255	; 0xff
 8005c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	22ff      	movs	r2, #255	; 0xff
 8005c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d114      	bne.n	8005cac <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01a      	beq.n	8005cc0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3310      	adds	r3, #16
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f001 fa72 	bl	8007178 <xTaskRemoveFromEventList>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d012      	beq.n	8005cc0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <xQueueGenericReset+0xcc>)
 8005c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	e009      	b.n	8005cc0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3310      	adds	r3, #16
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fef7 	bl	8005aa4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3324      	adds	r3, #36	; 0x24
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff fef2 	bl	8005aa4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005cc0:	f002 fa00 	bl	80080c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005cc4:	2301      	movs	r3, #1
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	e000ed04 	.word	0xe000ed04

08005cd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08e      	sub	sp, #56	; 0x38
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d109      	bne.n	8005cfc <xQueueGenericCreateStatic+0x28>
 8005ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cfa:	e7fe      	b.n	8005cfa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <xQueueGenericCreateStatic+0x42>
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
 8005d14:	e7fe      	b.n	8005d14 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <xQueueGenericCreateStatic+0x4e>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <xQueueGenericCreateStatic+0x52>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <xQueueGenericCreateStatic+0x54>
 8005d26:	2300      	movs	r3, #0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d109      	bne.n	8005d40 <xQueueGenericCreateStatic+0x6c>
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	e7fe      	b.n	8005d3e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d102      	bne.n	8005d4c <xQueueGenericCreateStatic+0x78>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <xQueueGenericCreateStatic+0x7c>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <xQueueGenericCreateStatic+0x7e>
 8005d50:	2300      	movs	r3, #0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <xQueueGenericCreateStatic+0x96>
 8005d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	e7fe      	b.n	8005d68 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d6a:	2350      	movs	r3, #80	; 0x50
 8005d6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b50      	cmp	r3, #80	; 0x50
 8005d72:	d009      	beq.n	8005d88 <xQueueGenericCreateStatic+0xb4>
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	e7fe      	b.n	8005d86 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00d      	beq.n	8005dae <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	4613      	mov	r3, r2
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f842 	bl	8005e32 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3730      	adds	r7, #48	; 0x30
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08a      	sub	sp, #40	; 0x28
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d109      	bne.n	8005de0 <xQueueGenericCreate+0x28>
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	e7fe      	b.n	8005dde <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d102      	bne.n	8005dec <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	61fb      	str	r3, [r7, #28]
 8005dea:	e004      	b.n	8005df6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	fb02 f303 	mul.w	r3, r2, r3
 8005df4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	3350      	adds	r3, #80	; 0x50
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f002 fa2a 	bl	8008254 <pvPortMalloc>
 8005e00:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00f      	beq.n	8005e28 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	3350      	adds	r3, #80	; 0x50
 8005e0c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e16:	79fa      	ldrb	r2, [r7, #7]
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 f805 	bl	8005e32 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005e28:	69bb      	ldr	r3, [r7, #24]
	}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3720      	adds	r7, #32
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	e002      	b.n	8005e54 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e60:	2101      	movs	r1, #1
 8005e62:	69b8      	ldr	r0, [r7, #24]
 8005e64:	f7ff fece 	bl	8005c04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	78fa      	ldrb	r2, [r7, #3]
 8005e6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08e      	sub	sp, #56	; 0x38
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e86:	2300      	movs	r3, #0
 8005e88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d109      	bne.n	8005ea8 <xQueueGenericSend+0x30>
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ea6:	e7fe      	b.n	8005ea6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <xQueueGenericSend+0x3e>
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <xQueueGenericSend+0x42>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <xQueueGenericSend+0x44>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d109      	bne.n	8005ed4 <xQueueGenericSend+0x5c>
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed2:	e7fe      	b.n	8005ed2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d103      	bne.n	8005ee2 <xQueueGenericSend+0x6a>
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d101      	bne.n	8005ee6 <xQueueGenericSend+0x6e>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e000      	b.n	8005ee8 <xQueueGenericSend+0x70>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d109      	bne.n	8005f00 <xQueueGenericSend+0x88>
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	623b      	str	r3, [r7, #32]
 8005efe:	e7fe      	b.n	8005efe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f00:	f001 fb56 	bl	80075b0 <xTaskGetSchedulerState>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d102      	bne.n	8005f10 <xQueueGenericSend+0x98>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <xQueueGenericSend+0x9c>
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <xQueueGenericSend+0x9e>
 8005f14:	2300      	movs	r3, #0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d109      	bne.n	8005f2e <xQueueGenericSend+0xb6>
 8005f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	61fb      	str	r3, [r7, #28]
 8005f2c:	e7fe      	b.n	8005f2c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f2e:	f002 f89b 	bl	8008068 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d302      	bcc.n	8005f44 <xQueueGenericSend+0xcc>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d129      	bne.n	8005f98 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f4a:	f000 f9ff 	bl	800634c <prvCopyDataToQueue>
 8005f4e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d010      	beq.n	8005f7a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	3324      	adds	r3, #36	; 0x24
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 f90b 	bl	8007178 <xTaskRemoveFromEventList>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d013      	beq.n	8005f90 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f68:	4b3f      	ldr	r3, [pc, #252]	; (8006068 <xQueueGenericSend+0x1f0>)
 8005f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	e00a      	b.n	8005f90 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f80:	4b39      	ldr	r3, [pc, #228]	; (8006068 <xQueueGenericSend+0x1f0>)
 8005f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f90:	f002 f898 	bl	80080c4 <vPortExitCritical>
				return pdPASS;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e063      	b.n	8006060 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d103      	bne.n	8005fa6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f9e:	f002 f891 	bl	80080c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e05c      	b.n	8006060 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d106      	bne.n	8005fba <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fac:	f107 0314 	add.w	r3, r7, #20
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f001 f9a3 	bl	80072fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fba:	f002 f883 	bl	80080c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fbe:	f000 fe69 	bl	8006c94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fc2:	f002 f851 	bl	8008068 <vPortEnterCritical>
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fcc:	b25b      	sxtb	r3, r3
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd2:	d103      	bne.n	8005fdc <xQueueGenericSend+0x164>
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fe2:	b25b      	sxtb	r3, r3
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d103      	bne.n	8005ff2 <xQueueGenericSend+0x17a>
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ff2:	f002 f867 	bl	80080c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ff6:	1d3a      	adds	r2, r7, #4
 8005ff8:	f107 0314 	add.w	r3, r7, #20
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 f992 	bl	8007328 <xTaskCheckForTimeOut>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d124      	bne.n	8006054 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800600a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800600c:	f000 fa96 	bl	800653c <prvIsQueueFull>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d018      	beq.n	8006048 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	3310      	adds	r3, #16
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	4611      	mov	r1, r2
 800601e:	4618      	mov	r0, r3
 8006020:	f001 f822 	bl	8007068 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006026:	f000 fa21 	bl	800646c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800602a:	f000 fe41 	bl	8006cb0 <xTaskResumeAll>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	f47f af7c 	bne.w	8005f2e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006036:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <xQueueGenericSend+0x1f0>)
 8006038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	e772      	b.n	8005f2e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800604a:	f000 fa0f 	bl	800646c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800604e:	f000 fe2f 	bl	8006cb0 <xTaskResumeAll>
 8006052:	e76c      	b.n	8005f2e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006056:	f000 fa09 	bl	800646c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800605a:	f000 fe29 	bl	8006cb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800605e:	2300      	movs	r3, #0
		}
	}
}
 8006060:	4618      	mov	r0, r3
 8006062:	3738      	adds	r7, #56	; 0x38
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08e      	sub	sp, #56	; 0x38
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	2b00      	cmp	r3, #0
 8006082:	d109      	bne.n	8006098 <xQueueGenericSendFromISR+0x2c>
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
 8006096:	e7fe      	b.n	8006096 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d103      	bne.n	80060a6 <xQueueGenericSendFromISR+0x3a>
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <xQueueGenericSendFromISR+0x3e>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <xQueueGenericSendFromISR+0x40>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d109      	bne.n	80060c4 <xQueueGenericSendFromISR+0x58>
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	623b      	str	r3, [r7, #32]
 80060c2:	e7fe      	b.n	80060c2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d103      	bne.n	80060d2 <xQueueGenericSendFromISR+0x66>
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <xQueueGenericSendFromISR+0x6a>
 80060d2:	2301      	movs	r3, #1
 80060d4:	e000      	b.n	80060d8 <xQueueGenericSendFromISR+0x6c>
 80060d6:	2300      	movs	r3, #0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d109      	bne.n	80060f0 <xQueueGenericSendFromISR+0x84>
 80060dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	e7fe      	b.n	80060ee <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060f0:	f002 f874 	bl	80081dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060f4:	f3ef 8211 	mrs	r2, BASEPRI
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	61ba      	str	r2, [r7, #24]
 800610a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800610c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006118:	429a      	cmp	r2, r3
 800611a:	d302      	bcc.n	8006122 <xQueueGenericSendFromISR+0xb6>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d12c      	bne.n	800617c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006132:	f000 f90b 	bl	800634c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006136:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d112      	bne.n	8006166 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	2b00      	cmp	r3, #0
 8006146:	d016      	beq.n	8006176 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	3324      	adds	r3, #36	; 0x24
 800614c:	4618      	mov	r0, r3
 800614e:	f001 f813 	bl	8007178 <xTaskRemoveFromEventList>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00e      	beq.n	8006176 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00b      	beq.n	8006176 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	e007      	b.n	8006176 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006166:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800616a:	3301      	adds	r3, #1
 800616c:	b2db      	uxtb	r3, r3
 800616e:	b25a      	sxtb	r2, r3
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006176:	2301      	movs	r3, #1
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800617a:	e001      	b.n	8006180 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800617c:	2300      	movs	r3, #0
 800617e:	637b      	str	r3, [r7, #52]	; 0x34
 8006180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006182:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800618a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800618c:	4618      	mov	r0, r3
 800618e:	3738      	adds	r7, #56	; 0x38
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08c      	sub	sp, #48	; 0x30
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061a0:	2300      	movs	r3, #0
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d109      	bne.n	80061c2 <xQueueReceive+0x2e>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	623b      	str	r3, [r7, #32]
 80061c0:	e7fe      	b.n	80061c0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d103      	bne.n	80061d0 <xQueueReceive+0x3c>
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <xQueueReceive+0x40>
 80061d0:	2301      	movs	r3, #1
 80061d2:	e000      	b.n	80061d6 <xQueueReceive+0x42>
 80061d4:	2300      	movs	r3, #0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d109      	bne.n	80061ee <xQueueReceive+0x5a>
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	e7fe      	b.n	80061ec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061ee:	f001 f9df 	bl	80075b0 <xTaskGetSchedulerState>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d102      	bne.n	80061fe <xQueueReceive+0x6a>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <xQueueReceive+0x6e>
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <xQueueReceive+0x70>
 8006202:	2300      	movs	r3, #0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d109      	bne.n	800621c <xQueueReceive+0x88>
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	e7fe      	b.n	800621a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800621c:	f001 ff24 	bl	8008068 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01f      	beq.n	800626c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006230:	f000 f8f6 	bl	8006420 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	1e5a      	subs	r2, r3, #1
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00f      	beq.n	8006264 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	3310      	adds	r3, #16
 8006248:	4618      	mov	r0, r3
 800624a:	f000 ff95 	bl	8007178 <xTaskRemoveFromEventList>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d007      	beq.n	8006264 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006254:	4b3c      	ldr	r3, [pc, #240]	; (8006348 <xQueueReceive+0x1b4>)
 8006256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006264:	f001 ff2e 	bl	80080c4 <vPortExitCritical>
				return pdPASS;
 8006268:	2301      	movs	r3, #1
 800626a:	e069      	b.n	8006340 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d103      	bne.n	800627a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006272:	f001 ff27 	bl	80080c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006276:	2300      	movs	r3, #0
 8006278:	e062      	b.n	8006340 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d106      	bne.n	800628e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006280:	f107 0310 	add.w	r3, r7, #16
 8006284:	4618      	mov	r0, r3
 8006286:	f001 f839 	bl	80072fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800628a:	2301      	movs	r3, #1
 800628c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800628e:	f001 ff19 	bl	80080c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006292:	f000 fcff 	bl	8006c94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006296:	f001 fee7 	bl	8008068 <vPortEnterCritical>
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062a0:	b25b      	sxtb	r3, r3
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d103      	bne.n	80062b0 <xQueueReceive+0x11c>
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062b6:	b25b      	sxtb	r3, r3
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d103      	bne.n	80062c6 <xQueueReceive+0x132>
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062c6:	f001 fefd 	bl	80080c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062ca:	1d3a      	adds	r2, r7, #4
 80062cc:	f107 0310 	add.w	r3, r7, #16
 80062d0:	4611      	mov	r1, r2
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 f828 	bl	8007328 <xTaskCheckForTimeOut>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d123      	bne.n	8006326 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e0:	f000 f916 	bl	8006510 <prvIsQueueEmpty>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d017      	beq.n	800631a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	3324      	adds	r3, #36	; 0x24
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	4611      	mov	r1, r2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 feb8 	bl	8007068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062fa:	f000 f8b7 	bl	800646c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062fe:	f000 fcd7 	bl	8006cb0 <xTaskResumeAll>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d189      	bne.n	800621c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006308:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <xQueueReceive+0x1b4>)
 800630a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	e780      	b.n	800621c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800631a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800631c:	f000 f8a6 	bl	800646c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006320:	f000 fcc6 	bl	8006cb0 <xTaskResumeAll>
 8006324:	e77a      	b.n	800621c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006328:	f000 f8a0 	bl	800646c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800632c:	f000 fcc0 	bl	8006cb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006332:	f000 f8ed 	bl	8006510 <prvIsQueueEmpty>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	f43f af6f 	beq.w	800621c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800633e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006340:	4618      	mov	r0, r3
 8006342:	3730      	adds	r7, #48	; 0x30
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10d      	bne.n	8006386 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d14d      	bne.n	800640e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	4618      	mov	r0, r3
 8006378:	f001 f938 	bl	80075ec <xTaskPriorityDisinherit>
 800637c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	605a      	str	r2, [r3, #4]
 8006384:	e043      	b.n	800640e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d119      	bne.n	80063c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6898      	ldr	r0, [r3, #8]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	461a      	mov	r2, r3
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	f002 f958 	bl	800864c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	441a      	add	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d32b      	bcc.n	800640e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	609a      	str	r2, [r3, #8]
 80063be:	e026      	b.n	800640e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	68d8      	ldr	r0, [r3, #12]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	461a      	mov	r2, r3
 80063ca:	68b9      	ldr	r1, [r7, #8]
 80063cc:	f002 f93e 	bl	800864c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	425b      	negs	r3, r3
 80063da:	441a      	add	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d207      	bcs.n	80063fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	425b      	negs	r3, r3
 80063f6:	441a      	add	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d105      	bne.n	800640e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	3b01      	subs	r3, #1
 800640c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006416:	697b      	ldr	r3, [r7, #20]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	d018      	beq.n	8006464 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	441a      	add	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	429a      	cmp	r2, r3
 800644a:	d303      	bcc.n	8006454 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	68d9      	ldr	r1, [r3, #12]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	461a      	mov	r2, r3
 800645e:	6838      	ldr	r0, [r7, #0]
 8006460:	f002 f8f4 	bl	800864c <memcpy>
	}
}
 8006464:	bf00      	nop
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006474:	f001 fdf8 	bl	8008068 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800647e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006480:	e011      	b.n	80064a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	2b00      	cmp	r3, #0
 8006488:	d012      	beq.n	80064b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3324      	adds	r3, #36	; 0x24
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fe72 	bl	8007178 <xTaskRemoveFromEventList>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800649a:	f000 ffa5 	bl	80073e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	dce9      	bgt.n	8006482 <prvUnlockQueue+0x16>
 80064ae:	e000      	b.n	80064b2 <prvUnlockQueue+0x46>
					break;
 80064b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	22ff      	movs	r2, #255	; 0xff
 80064b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80064ba:	f001 fe03 	bl	80080c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064be:	f001 fdd3 	bl	8008068 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064ca:	e011      	b.n	80064f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d012      	beq.n	80064fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3310      	adds	r3, #16
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fe4d 	bl	8007178 <xTaskRemoveFromEventList>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064e4:	f000 ff80 	bl	80073e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	dce9      	bgt.n	80064cc <prvUnlockQueue+0x60>
 80064f8:	e000      	b.n	80064fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80064fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	22ff      	movs	r2, #255	; 0xff
 8006500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006504:	f001 fdde 	bl	80080c4 <vPortExitCritical>
}
 8006508:	bf00      	nop
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006518:	f001 fda6 	bl	8008068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	2b00      	cmp	r3, #0
 8006522:	d102      	bne.n	800652a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006524:	2301      	movs	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e001      	b.n	800652e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800652e:	f001 fdc9 	bl	80080c4 <vPortExitCritical>

	return xReturn;
 8006532:	68fb      	ldr	r3, [r7, #12]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006544:	f001 fd90 	bl	8008068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006550:	429a      	cmp	r2, r3
 8006552:	d102      	bne.n	800655a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006554:	2301      	movs	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e001      	b.n	800655e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800655e:	f001 fdb1 	bl	80080c4 <vPortExitCritical>

	return xReturn;
 8006562:	68fb      	ldr	r3, [r7, #12]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	e014      	b.n	80065a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800657c:	4a0e      	ldr	r2, [pc, #56]	; (80065b8 <vQueueAddToRegistry+0x4c>)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10b      	bne.n	80065a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006588:	490b      	ldr	r1, [pc, #44]	; (80065b8 <vQueueAddToRegistry+0x4c>)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006592:	4a09      	ldr	r2, [pc, #36]	; (80065b8 <vQueueAddToRegistry+0x4c>)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	4413      	add	r3, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800659e:	e005      	b.n	80065ac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3301      	adds	r3, #1
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b07      	cmp	r3, #7
 80065aa:	d9e7      	bls.n	800657c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065ac:	bf00      	nop
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bc80      	pop	{r7}
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	2000376c 	.word	0x2000376c

080065bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065cc:	f001 fd4c 	bl	8008068 <vPortEnterCritical>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065d6:	b25b      	sxtb	r3, r3
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d103      	bne.n	80065e6 <vQueueWaitForMessageRestricted+0x2a>
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065ec:	b25b      	sxtb	r3, r3
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f2:	d103      	bne.n	80065fc <vQueueWaitForMessageRestricted+0x40>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065fc:	f001 fd62 	bl	80080c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	2b00      	cmp	r3, #0
 8006606:	d106      	bne.n	8006616 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	3324      	adds	r3, #36	; 0x24
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fd87 	bl	8007124 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006616:	6978      	ldr	r0, [r7, #20]
 8006618:	f7ff ff28 	bl	800646c <prvUnlockQueue>
	}
 800661c:	bf00      	nop
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08e      	sub	sp, #56	; 0x38
 8006628:	af04      	add	r7, sp, #16
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <xTaskCreateStatic+0x28>
 8006638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	623b      	str	r3, [r7, #32]
 800664a:	e7fe      	b.n	800664a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664e:	2b00      	cmp	r3, #0
 8006650:	d109      	bne.n	8006666 <xTaskCreateStatic+0x42>
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	e7fe      	b.n	8006664 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006666:	235c      	movs	r3, #92	; 0x5c
 8006668:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b5c      	cmp	r3, #92	; 0x5c
 800666e:	d009      	beq.n	8006684 <xTaskCreateStatic+0x60>
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	61bb      	str	r3, [r7, #24]
 8006682:	e7fe      	b.n	8006682 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	2b00      	cmp	r3, #0
 8006688:	d01e      	beq.n	80066c8 <xTaskCreateStatic+0xa4>
 800668a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01b      	beq.n	80066c8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006698:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	2202      	movs	r2, #2
 800669e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066a2:	2300      	movs	r3, #0
 80066a4:	9303      	str	r3, [sp, #12]
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	9302      	str	r3, [sp, #8]
 80066aa:	f107 0314 	add.w	r3, r7, #20
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f850 	bl	8006760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066c2:	f000 f8d3 	bl	800686c <prvAddNewTaskToReadyList>
 80066c6:	e001      	b.n	80066cc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80066c8:	2300      	movs	r3, #0
 80066ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066cc:	697b      	ldr	r3, [r7, #20]
	}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3728      	adds	r7, #40	; 0x28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b08c      	sub	sp, #48	; 0x30
 80066da:	af04      	add	r7, sp, #16
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	4613      	mov	r3, r2
 80066e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e6:	88fb      	ldrh	r3, [r7, #6]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 fdb2 	bl	8008254 <pvPortMalloc>
 80066f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00e      	beq.n	8006716 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80066f8:	205c      	movs	r0, #92	; 0x5c
 80066fa:	f001 fdab 	bl	8008254 <pvPortMalloc>
 80066fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
 800670c:	e005      	b.n	800671a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800670e:	6978      	ldr	r0, [r7, #20]
 8006710:	f001 fe66 	bl	80083e0 <vPortFree>
 8006714:	e001      	b.n	800671a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d017      	beq.n	8006750 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006728:	88fa      	ldrh	r2, [r7, #6]
 800672a:	2300      	movs	r3, #0
 800672c:	9303      	str	r3, [sp, #12]
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	9302      	str	r3, [sp, #8]
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 f80e 	bl	8006760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006744:	69f8      	ldr	r0, [r7, #28]
 8006746:	f000 f891 	bl	800686c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800674a:	2301      	movs	r3, #1
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	e002      	b.n	8006756 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006750:	f04f 33ff 	mov.w	r3, #4294967295
 8006754:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006756:	69bb      	ldr	r3, [r7, #24]
	}
 8006758:	4618      	mov	r0, r3
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	461a      	mov	r2, r3
 8006778:	21a5      	movs	r1, #165	; 0xa5
 800677a:	f001 ff72 	bl	8008662 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006788:	3b01      	subs	r3, #1
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	f023 0307 	bic.w	r3, r3, #7
 8006796:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <prvInitialiseNewTask+0x56>
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	e7fe      	b.n	80067b4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067b6:	2300      	movs	r3, #0
 80067b8:	61fb      	str	r3, [r7, #28]
 80067ba:	e012      	b.n	80067e2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	4413      	add	r3, r2
 80067c2:	7819      	ldrb	r1, [r3, #0]
 80067c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	3334      	adds	r3, #52	; 0x34
 80067cc:	460a      	mov	r2, r1
 80067ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	4413      	add	r3, r2
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d006      	beq.n	80067ea <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	3301      	adds	r3, #1
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	2b0f      	cmp	r3, #15
 80067e6:	d9e9      	bls.n	80067bc <prvInitialiseNewTask+0x5c>
 80067e8:	e000      	b.n	80067ec <prvInitialiseNewTask+0x8c>
		{
			break;
 80067ea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	2b37      	cmp	r3, #55	; 0x37
 80067f8:	d901      	bls.n	80067fe <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067fa:	2337      	movs	r3, #55	; 0x37
 80067fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006802:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006808:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	2200      	movs	r2, #0
 800680e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006812:	3304      	adds	r3, #4
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff f964 	bl	8005ae2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	3318      	adds	r3, #24
 800681e:	4618      	mov	r0, r3
 8006820:	f7ff f95f 	bl	8005ae2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006828:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006838:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	2200      	movs	r2, #0
 800683e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	68f9      	ldr	r1, [r7, #12]
 800684c:	69b8      	ldr	r0, [r7, #24]
 800684e:	f001 fb23 	bl	8007e98 <pxPortInitialiseStack>
 8006852:	4602      	mov	r2, r0
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006862:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006864:	bf00      	nop
 8006866:	3720      	adds	r7, #32
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006874:	f001 fbf8 	bl	8008068 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006878:	4b2d      	ldr	r3, [pc, #180]	; (8006930 <prvAddNewTaskToReadyList+0xc4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3301      	adds	r3, #1
 800687e:	4a2c      	ldr	r2, [pc, #176]	; (8006930 <prvAddNewTaskToReadyList+0xc4>)
 8006880:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006882:	4b2c      	ldr	r3, [pc, #176]	; (8006934 <prvAddNewTaskToReadyList+0xc8>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d109      	bne.n	800689e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800688a:	4a2a      	ldr	r2, [pc, #168]	; (8006934 <prvAddNewTaskToReadyList+0xc8>)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006890:	4b27      	ldr	r3, [pc, #156]	; (8006930 <prvAddNewTaskToReadyList+0xc4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d110      	bne.n	80068ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006898:	f000 fdcc 	bl	8007434 <prvInitialiseTaskLists>
 800689c:	e00d      	b.n	80068ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800689e:	4b26      	ldr	r3, [pc, #152]	; (8006938 <prvAddNewTaskToReadyList+0xcc>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068a6:	4b23      	ldr	r3, [pc, #140]	; (8006934 <prvAddNewTaskToReadyList+0xc8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d802      	bhi.n	80068ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068b4:	4a1f      	ldr	r2, [pc, #124]	; (8006934 <prvAddNewTaskToReadyList+0xc8>)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068ba:	4b20      	ldr	r3, [pc, #128]	; (800693c <prvAddNewTaskToReadyList+0xd0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3301      	adds	r3, #1
 80068c0:	4a1e      	ldr	r2, [pc, #120]	; (800693c <prvAddNewTaskToReadyList+0xd0>)
 80068c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80068c4:	4b1d      	ldr	r3, [pc, #116]	; (800693c <prvAddNewTaskToReadyList+0xd0>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d0:	4b1b      	ldr	r3, [pc, #108]	; (8006940 <prvAddNewTaskToReadyList+0xd4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d903      	bls.n	80068e0 <prvAddNewTaskToReadyList+0x74>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	4a18      	ldr	r2, [pc, #96]	; (8006940 <prvAddNewTaskToReadyList+0xd4>)
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4a15      	ldr	r2, [pc, #84]	; (8006944 <prvAddNewTaskToReadyList+0xd8>)
 80068ee:	441a      	add	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	3304      	adds	r3, #4
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f7ff f8ff 	bl	8005afa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068fc:	f001 fbe2 	bl	80080c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006900:	4b0d      	ldr	r3, [pc, #52]	; (8006938 <prvAddNewTaskToReadyList+0xcc>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00e      	beq.n	8006926 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006908:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <prvAddNewTaskToReadyList+0xc8>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006912:	429a      	cmp	r2, r3
 8006914:	d207      	bcs.n	8006926 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006916:	4b0c      	ldr	r3, [pc, #48]	; (8006948 <prvAddNewTaskToReadyList+0xdc>)
 8006918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006926:	bf00      	nop
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20000bc4 	.word	0x20000bc4
 8006934:	200006f0 	.word	0x200006f0
 8006938:	20000bd0 	.word	0x20000bd0
 800693c:	20000be0 	.word	0x20000be0
 8006940:	20000bcc 	.word	0x20000bcc
 8006944:	200006f4 	.word	0x200006f4
 8006948:	e000ed04 	.word	0xe000ed04

0800694c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006954:	2300      	movs	r3, #0
 8006956:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d016      	beq.n	800698c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800695e:	4b13      	ldr	r3, [pc, #76]	; (80069ac <vTaskDelay+0x60>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <vTaskDelay+0x2e>
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	60bb      	str	r3, [r7, #8]
 8006978:	e7fe      	b.n	8006978 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800697a:	f000 f98b 	bl	8006c94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800697e:	2100      	movs	r1, #0
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 feb7 	bl	80076f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006986:	f000 f993 	bl	8006cb0 <xTaskResumeAll>
 800698a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d107      	bne.n	80069a2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006992:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <vTaskDelay+0x64>)
 8006994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	20000bec 	.word	0x20000bec
 80069b0:	e000ed04 	.word	0xe000ed04

080069b4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80069bc:	f001 fb54 	bl	8008068 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d102      	bne.n	80069cc <vTaskSuspend+0x18>
 80069c6:	4b2f      	ldr	r3, [pc, #188]	; (8006a84 <vTaskSuspend+0xd0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	e000      	b.n	80069ce <vTaskSuspend+0x1a>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3304      	adds	r3, #4
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff f8eb 	bl	8005bb0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d004      	beq.n	80069ec <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3318      	adds	r3, #24
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff f8e2 	bl	8005bb0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3304      	adds	r3, #4
 80069f0:	4619      	mov	r1, r3
 80069f2:	4825      	ldr	r0, [pc, #148]	; (8006a88 <vTaskSuspend+0xd4>)
 80069f4:	f7ff f881 	bl	8005afa <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d103      	bne.n	8006a0c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006a0c:	f001 fb5a 	bl	80080c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006a10:	4b1e      	ldr	r3, [pc, #120]	; (8006a8c <vTaskSuspend+0xd8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006a18:	f001 fb26 	bl	8008068 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006a1c:	f000 fda4 	bl	8007568 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006a20:	f001 fb50 	bl	80080c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006a24:	4b17      	ldr	r3, [pc, #92]	; (8006a84 <vTaskSuspend+0xd0>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d126      	bne.n	8006a7c <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 8006a2e:	4b17      	ldr	r3, [pc, #92]	; (8006a8c <vTaskSuspend+0xd8>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d016      	beq.n	8006a64 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006a36:	4b16      	ldr	r3, [pc, #88]	; (8006a90 <vTaskSuspend+0xdc>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d009      	beq.n	8006a52 <vTaskSuspend+0x9e>
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	60bb      	str	r3, [r7, #8]
 8006a50:	e7fe      	b.n	8006a50 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8006a52:	4b10      	ldr	r3, [pc, #64]	; (8006a94 <vTaskSuspend+0xe0>)
 8006a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a62:	e00b      	b.n	8006a7c <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8006a64:	4b08      	ldr	r3, [pc, #32]	; (8006a88 <vTaskSuspend+0xd4>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <vTaskSuspend+0xe4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d103      	bne.n	8006a78 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8006a70:	4b04      	ldr	r3, [pc, #16]	; (8006a84 <vTaskSuspend+0xd0>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
	}
 8006a76:	e001      	b.n	8006a7c <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8006a78:	f000 fa8a 	bl	8006f90 <vTaskSwitchContext>
	}
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	200006f0 	.word	0x200006f0
 8006a88:	20000bb0 	.word	0x20000bb0
 8006a8c:	20000bd0 	.word	0x20000bd0
 8006a90:	20000bec 	.word	0x20000bec
 8006a94:	e000ed04 	.word	0xe000ed04
 8006a98:	20000bc4 	.word	0x20000bc4

08006a9c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d109      	bne.n	8006ac6 <prvTaskIsTaskSuspended+0x2a>
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	e7fe      	b.n	8006ac4 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	4a0f      	ldr	r2, [pc, #60]	; (8006b08 <prvTaskIsTaskSuspended+0x6c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d101      	bne.n	8006ad4 <prvTaskIsTaskSuspended+0x38>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <prvTaskIsTaskSuspended+0x3a>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00f      	beq.n	8006afa <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	4a0b      	ldr	r2, [pc, #44]	; (8006b0c <prvTaskIsTaskSuspended+0x70>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00a      	beq.n	8006afa <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <prvTaskIsTaskSuspended+0x54>
 8006aec:	2301      	movs	r3, #1
 8006aee:	e000      	b.n	8006af2 <prvTaskIsTaskSuspended+0x56>
 8006af0:	2300      	movs	r3, #0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8006af6:	2301      	movs	r3, #1
 8006af8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006afa:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006afc:	4618      	mov	r0, r3
 8006afe:	371c      	adds	r7, #28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	20000bb0 	.word	0x20000bb0
 8006b0c:	20000b84 	.word	0x20000b84

08006b10 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d109      	bne.n	8006b36 <vTaskResume+0x26>
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	60bb      	str	r3, [r7, #8]
 8006b34:	e7fe      	b.n	8006b34 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d03a      	beq.n	8006bb2 <vTaskResume+0xa2>
 8006b3c:	4b1f      	ldr	r3, [pc, #124]	; (8006bbc <vTaskResume+0xac>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d035      	beq.n	8006bb2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8006b46:	f001 fa8f 	bl	8008068 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f7ff ffa6 	bl	8006a9c <prvTaskIsTaskSuspended>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d02b      	beq.n	8006bae <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7ff f828 	bl	8005bb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b64:	4b16      	ldr	r3, [pc, #88]	; (8006bc0 <vTaskResume+0xb0>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d903      	bls.n	8006b74 <vTaskResume+0x64>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	4a13      	ldr	r2, [pc, #76]	; (8006bc0 <vTaskResume+0xb0>)
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4a10      	ldr	r2, [pc, #64]	; (8006bc4 <vTaskResume+0xb4>)
 8006b82:	441a      	add	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3304      	adds	r3, #4
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	f7fe ffb5 	bl	8005afa <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b94:	4b09      	ldr	r3, [pc, #36]	; (8006bbc <vTaskResume+0xac>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d307      	bcc.n	8006bae <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006b9e:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <vTaskResume+0xb8>)
 8006ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006bae:	f001 fa89 	bl	80080c4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bb2:	bf00      	nop
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	200006f0 	.word	0x200006f0
 8006bc0:	20000bcc 	.word	0x20000bcc
 8006bc4:	200006f4 	.word	0x200006f4
 8006bc8:	e000ed04 	.word	0xe000ed04

08006bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08a      	sub	sp, #40	; 0x28
 8006bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bda:	463a      	mov	r2, r7
 8006bdc:	1d39      	adds	r1, r7, #4
 8006bde:	f107 0308 	add.w	r3, r7, #8
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fe fd7c 	bl	80056e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	9202      	str	r2, [sp, #8]
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	460a      	mov	r2, r1
 8006bfa:	4920      	ldr	r1, [pc, #128]	; (8006c7c <vTaskStartScheduler+0xb0>)
 8006bfc:	4820      	ldr	r0, [pc, #128]	; (8006c80 <vTaskStartScheduler+0xb4>)
 8006bfe:	f7ff fd11 	bl	8006624 <xTaskCreateStatic>
 8006c02:	4602      	mov	r2, r0
 8006c04:	4b1f      	ldr	r3, [pc, #124]	; (8006c84 <vTaskStartScheduler+0xb8>)
 8006c06:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c08:	4b1e      	ldr	r3, [pc, #120]	; (8006c84 <vTaskStartScheduler+0xb8>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c10:	2301      	movs	r3, #1
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	e001      	b.n	8006c1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d102      	bne.n	8006c26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c20:	f000 fdbc 	bl	800779c <xTimerCreateTimerTask>
 8006c24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d115      	bne.n	8006c58 <vTaskStartScheduler+0x8c>
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c3e:	4b12      	ldr	r3, [pc, #72]	; (8006c88 <vTaskStartScheduler+0xbc>)
 8006c40:	f04f 32ff 	mov.w	r2, #4294967295
 8006c44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c46:	4b11      	ldr	r3, [pc, #68]	; (8006c8c <vTaskStartScheduler+0xc0>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006c4c:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <vTaskStartScheduler+0xc4>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c52:	f001 f999 	bl	8007f88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c56:	e00d      	b.n	8006c74 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5e:	d109      	bne.n	8006c74 <vTaskStartScheduler+0xa8>
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	e7fe      	b.n	8006c72 <vTaskStartScheduler+0xa6>
}
 8006c74:	bf00      	nop
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	08008940 	.word	0x08008940
 8006c80:	08007401 	.word	0x08007401
 8006c84:	20000be8 	.word	0x20000be8
 8006c88:	20000be4 	.word	0x20000be4
 8006c8c:	20000bd0 	.word	0x20000bd0
 8006c90:	20000bc8 	.word	0x20000bc8

08006c94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c94:	b480      	push	{r7}
 8006c96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c98:	4b04      	ldr	r3, [pc, #16]	; (8006cac <vTaskSuspendAll+0x18>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	4a03      	ldr	r2, [pc, #12]	; (8006cac <vTaskSuspendAll+0x18>)
 8006ca0:	6013      	str	r3, [r2, #0]
}
 8006ca2:	bf00      	nop
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc80      	pop	{r7}
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	20000bec 	.word	0x20000bec

08006cb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cbe:	4b41      	ldr	r3, [pc, #260]	; (8006dc4 <xTaskResumeAll+0x114>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d109      	bne.n	8006cda <xTaskResumeAll+0x2a>
 8006cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	603b      	str	r3, [r7, #0]
 8006cd8:	e7fe      	b.n	8006cd8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cda:	f001 f9c5 	bl	8008068 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cde:	4b39      	ldr	r3, [pc, #228]	; (8006dc4 <xTaskResumeAll+0x114>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	4a37      	ldr	r2, [pc, #220]	; (8006dc4 <xTaskResumeAll+0x114>)
 8006ce6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ce8:	4b36      	ldr	r3, [pc, #216]	; (8006dc4 <xTaskResumeAll+0x114>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d162      	bne.n	8006db6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cf0:	4b35      	ldr	r3, [pc, #212]	; (8006dc8 <xTaskResumeAll+0x118>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d05e      	beq.n	8006db6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cf8:	e02f      	b.n	8006d5a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006cfa:	4b34      	ldr	r3, [pc, #208]	; (8006dcc <xTaskResumeAll+0x11c>)
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3318      	adds	r3, #24
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe ff52 	bl	8005bb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe ff4d 	bl	8005bb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1a:	4b2d      	ldr	r3, [pc, #180]	; (8006dd0 <xTaskResumeAll+0x120>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d903      	bls.n	8006d2a <xTaskResumeAll+0x7a>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d26:	4a2a      	ldr	r2, [pc, #168]	; (8006dd0 <xTaskResumeAll+0x120>)
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4a27      	ldr	r2, [pc, #156]	; (8006dd4 <xTaskResumeAll+0x124>)
 8006d38:	441a      	add	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4610      	mov	r0, r2
 8006d42:	f7fe feda 	bl	8005afa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4a:	4b23      	ldr	r3, [pc, #140]	; (8006dd8 <xTaskResumeAll+0x128>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d302      	bcc.n	8006d5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d54:	4b21      	ldr	r3, [pc, #132]	; (8006ddc <xTaskResumeAll+0x12c>)
 8006d56:	2201      	movs	r2, #1
 8006d58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d5a:	4b1c      	ldr	r3, [pc, #112]	; (8006dcc <xTaskResumeAll+0x11c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1cb      	bne.n	8006cfa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d68:	f000 fbfe 	bl	8007568 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d6c:	4b1c      	ldr	r3, [pc, #112]	; (8006de0 <xTaskResumeAll+0x130>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d010      	beq.n	8006d9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d78:	f000 f844 	bl	8006e04 <xTaskIncrementTick>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d82:	4b16      	ldr	r3, [pc, #88]	; (8006ddc <xTaskResumeAll+0x12c>)
 8006d84:	2201      	movs	r2, #1
 8006d86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1f1      	bne.n	8006d78 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006d94:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <xTaskResumeAll+0x130>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d9a:	4b10      	ldr	r3, [pc, #64]	; (8006ddc <xTaskResumeAll+0x12c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006da2:	2301      	movs	r3, #1
 8006da4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006da6:	4b0f      	ldr	r3, [pc, #60]	; (8006de4 <xTaskResumeAll+0x134>)
 8006da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006db6:	f001 f985 	bl	80080c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006dba:	68bb      	ldr	r3, [r7, #8]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20000bec 	.word	0x20000bec
 8006dc8:	20000bc4 	.word	0x20000bc4
 8006dcc:	20000b84 	.word	0x20000b84
 8006dd0:	20000bcc 	.word	0x20000bcc
 8006dd4:	200006f4 	.word	0x200006f4
 8006dd8:	200006f0 	.word	0x200006f0
 8006ddc:	20000bd8 	.word	0x20000bd8
 8006de0:	20000bd4 	.word	0x20000bd4
 8006de4:	e000ed04 	.word	0xe000ed04

08006de8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006dee:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <xTaskGetTickCount+0x18>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006df4:	687b      	ldr	r3, [r7, #4]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr
 8006e00:	20000bc8 	.word	0x20000bc8

08006e04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e0e:	4b55      	ldr	r3, [pc, #340]	; (8006f64 <xTaskIncrementTick+0x160>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f040 8093 	bne.w	8006f3e <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e18:	4b53      	ldr	r3, [pc, #332]	; (8006f68 <xTaskIncrementTick+0x164>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e20:	4a51      	ldr	r2, [pc, #324]	; (8006f68 <xTaskIncrementTick+0x164>)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d11f      	bne.n	8006e6c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e2c:	4b4f      	ldr	r3, [pc, #316]	; (8006f6c <xTaskIncrementTick+0x168>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <xTaskIncrementTick+0x46>
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	e7fe      	b.n	8006e48 <xTaskIncrementTick+0x44>
 8006e4a:	4b48      	ldr	r3, [pc, #288]	; (8006f6c <xTaskIncrementTick+0x168>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	4b47      	ldr	r3, [pc, #284]	; (8006f70 <xTaskIncrementTick+0x16c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a45      	ldr	r2, [pc, #276]	; (8006f6c <xTaskIncrementTick+0x168>)
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	4a45      	ldr	r2, [pc, #276]	; (8006f70 <xTaskIncrementTick+0x16c>)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	4b45      	ldr	r3, [pc, #276]	; (8006f74 <xTaskIncrementTick+0x170>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3301      	adds	r3, #1
 8006e64:	4a43      	ldr	r2, [pc, #268]	; (8006f74 <xTaskIncrementTick+0x170>)
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	f000 fb7e 	bl	8007568 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e6c:	4b42      	ldr	r3, [pc, #264]	; (8006f78 <xTaskIncrementTick+0x174>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d34e      	bcc.n	8006f14 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e76:	4b3d      	ldr	r3, [pc, #244]	; (8006f6c <xTaskIncrementTick+0x168>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <xTaskIncrementTick+0x80>
 8006e80:	2301      	movs	r3, #1
 8006e82:	e000      	b.n	8006e86 <xTaskIncrementTick+0x82>
 8006e84:	2300      	movs	r3, #0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d004      	beq.n	8006e94 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e8a:	4b3b      	ldr	r3, [pc, #236]	; (8006f78 <xTaskIncrementTick+0x174>)
 8006e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e90:	601a      	str	r2, [r3, #0]
					break;
 8006e92:	e03f      	b.n	8006f14 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e94:	4b35      	ldr	r3, [pc, #212]	; (8006f6c <xTaskIncrementTick+0x168>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d203      	bcs.n	8006eb4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006eac:	4a32      	ldr	r2, [pc, #200]	; (8006f78 <xTaskIncrementTick+0x174>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6013      	str	r3, [r2, #0]
						break;
 8006eb2:	e02f      	b.n	8006f14 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe fe79 	bl	8005bb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d004      	beq.n	8006ed0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	3318      	adds	r3, #24
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fe fe70 	bl	8005bb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed4:	4b29      	ldr	r3, [pc, #164]	; (8006f7c <xTaskIncrementTick+0x178>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d903      	bls.n	8006ee4 <xTaskIncrementTick+0xe0>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	4a26      	ldr	r2, [pc, #152]	; (8006f7c <xTaskIncrementTick+0x178>)
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4a23      	ldr	r2, [pc, #140]	; (8006f80 <xTaskIncrementTick+0x17c>)
 8006ef2:	441a      	add	r2, r3
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7fe fdfd 	bl	8005afa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f04:	4b1f      	ldr	r3, [pc, #124]	; (8006f84 <xTaskIncrementTick+0x180>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d3b3      	bcc.n	8006e76 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f12:	e7b0      	b.n	8006e76 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f14:	4b1b      	ldr	r3, [pc, #108]	; (8006f84 <xTaskIncrementTick+0x180>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1a:	4919      	ldr	r1, [pc, #100]	; (8006f80 <xTaskIncrementTick+0x17c>)
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d901      	bls.n	8006f30 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8006f30:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <xTaskIncrementTick+0x184>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d109      	bne.n	8006f4c <xTaskIncrementTick+0x148>
			{
				vApplicationTickHook();
 8006f38:	f7f9 fd18 	bl	800096c <vApplicationTickHook>
 8006f3c:	e006      	b.n	8006f4c <xTaskIncrementTick+0x148>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f3e:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <xTaskIncrementTick+0x184>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3301      	adds	r3, #1
 8006f44:	4a10      	ldr	r2, [pc, #64]	; (8006f88 <xTaskIncrementTick+0x184>)
 8006f46:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8006f48:	f7f9 fd10 	bl	800096c <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f4c:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <xTaskIncrementTick+0x188>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <xTaskIncrementTick+0x154>
		{
			xSwitchRequired = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f58:	697b      	ldr	r3, [r7, #20]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20000bec 	.word	0x20000bec
 8006f68:	20000bc8 	.word	0x20000bc8
 8006f6c:	20000b7c 	.word	0x20000b7c
 8006f70:	20000b80 	.word	0x20000b80
 8006f74:	20000bdc 	.word	0x20000bdc
 8006f78:	20000be4 	.word	0x20000be4
 8006f7c:	20000bcc 	.word	0x20000bcc
 8006f80:	200006f4 	.word	0x200006f4
 8006f84:	200006f0 	.word	0x200006f0
 8006f88:	20000bd4 	.word	0x20000bd4
 8006f8c:	20000bd8 	.word	0x20000bd8

08006f90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f96:	4b2f      	ldr	r3, [pc, #188]	; (8007054 <vTaskSwitchContext+0xc4>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f9e:	4b2e      	ldr	r3, [pc, #184]	; (8007058 <vTaskSwitchContext+0xc8>)
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fa4:	e051      	b.n	800704a <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 8006fa6:	4b2c      	ldr	r3, [pc, #176]	; (8007058 <vTaskSwitchContext+0xc8>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006fac:	4b2b      	ldr	r3, [pc, #172]	; (800705c <vTaskSwitchContext+0xcc>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	4b2a      	ldr	r3, [pc, #168]	; (800705c <vTaskSwitchContext+0xcc>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d808      	bhi.n	8006fce <vTaskSwitchContext+0x3e>
 8006fbc:	4b27      	ldr	r3, [pc, #156]	; (800705c <vTaskSwitchContext+0xcc>)
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	4b26      	ldr	r3, [pc, #152]	; (800705c <vTaskSwitchContext+0xcc>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	3334      	adds	r3, #52	; 0x34
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4610      	mov	r0, r2
 8006fca:	f7f9 fcd5 	bl	8000978 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006fce:	4b24      	ldr	r3, [pc, #144]	; (8007060 <vTaskSwitchContext+0xd0>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	e00f      	b.n	8006ff6 <vTaskSwitchContext+0x66>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d109      	bne.n	8006ff0 <vTaskSwitchContext+0x60>
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	607b      	str	r3, [r7, #4]
 8006fee:	e7fe      	b.n	8006fee <vTaskSwitchContext+0x5e>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	491b      	ldr	r1, [pc, #108]	; (8007064 <vTaskSwitchContext+0xd4>)
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0e5      	beq.n	8006fd6 <vTaskSwitchContext+0x46>
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4a13      	ldr	r2, [pc, #76]	; (8007064 <vTaskSwitchContext+0xd4>)
 8007016:	4413      	add	r3, r2
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	605a      	str	r2, [r3, #4]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	3308      	adds	r3, #8
 800702c:	429a      	cmp	r2, r3
 800702e:	d104      	bne.n	800703a <vTaskSwitchContext+0xaa>
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	605a      	str	r2, [r3, #4]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	4a06      	ldr	r2, [pc, #24]	; (800705c <vTaskSwitchContext+0xcc>)
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	4a06      	ldr	r2, [pc, #24]	; (8007060 <vTaskSwitchContext+0xd0>)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6013      	str	r3, [r2, #0]
}
 800704a:	bf00      	nop
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000bec 	.word	0x20000bec
 8007058:	20000bd8 	.word	0x20000bd8
 800705c:	200006f0 	.word	0x200006f0
 8007060:	20000bcc 	.word	0x20000bcc
 8007064:	200006f4 	.word	0x200006f4

08007068 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d109      	bne.n	800708c <vTaskPlaceOnEventList+0x24>
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	60fb      	str	r3, [r7, #12]
 800708a:	e7fe      	b.n	800708a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800708c:	4b07      	ldr	r3, [pc, #28]	; (80070ac <vTaskPlaceOnEventList+0x44>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3318      	adds	r3, #24
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7fe fd53 	bl	8005b40 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800709a:	2101      	movs	r1, #1
 800709c:	6838      	ldr	r0, [r7, #0]
 800709e:	f000 fb29 	bl	80076f4 <prvAddCurrentTaskToDelayedList>
}
 80070a2:	bf00      	nop
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	200006f0 	.word	0x200006f0

080070b0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d109      	bne.n	80070d6 <vTaskPlaceOnUnorderedEventList+0x26>
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	617b      	str	r3, [r7, #20]
 80070d4:	e7fe      	b.n	80070d4 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80070d6:	4b11      	ldr	r3, [pc, #68]	; (800711c <vTaskPlaceOnUnorderedEventList+0x6c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d109      	bne.n	80070f2 <vTaskPlaceOnUnorderedEventList+0x42>
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	613b      	str	r3, [r7, #16]
 80070f0:	e7fe      	b.n	80070f0 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80070f2:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <vTaskPlaceOnUnorderedEventList+0x70>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80070fc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070fe:	4b08      	ldr	r3, [pc, #32]	; (8007120 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3318      	adds	r3, #24
 8007104:	4619      	mov	r1, r3
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f7fe fcf7 	bl	8005afa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800710c:	2101      	movs	r1, #1
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 faf0 	bl	80076f4 <prvAddCurrentTaskToDelayedList>
}
 8007114:	bf00      	nop
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	20000bec 	.word	0x20000bec
 8007120:	200006f0 	.word	0x200006f0

08007124 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d109      	bne.n	800714a <vTaskPlaceOnEventListRestricted+0x26>
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	e7fe      	b.n	8007148 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800714a:	4b0a      	ldr	r3, [pc, #40]	; (8007174 <vTaskPlaceOnEventListRestricted+0x50>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3318      	adds	r3, #24
 8007150:	4619      	mov	r1, r3
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f7fe fcd1 	bl	8005afa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800715e:	f04f 33ff 	mov.w	r3, #4294967295
 8007162:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007164:	6879      	ldr	r1, [r7, #4]
 8007166:	68b8      	ldr	r0, [r7, #8]
 8007168:	f000 fac4 	bl	80076f4 <prvAddCurrentTaskToDelayedList>
	}
 800716c:	bf00      	nop
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	200006f0 	.word	0x200006f0

08007178 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d109      	bne.n	80071a2 <xTaskRemoveFromEventList+0x2a>
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	e7fe      	b.n	80071a0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	3318      	adds	r3, #24
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fd02 	bl	8005bb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ac:	4b1d      	ldr	r3, [pc, #116]	; (8007224 <xTaskRemoveFromEventList+0xac>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d11d      	bne.n	80071f0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fe fcf9 	bl	8005bb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c2:	4b19      	ldr	r3, [pc, #100]	; (8007228 <xTaskRemoveFromEventList+0xb0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d903      	bls.n	80071d2 <xTaskRemoveFromEventList+0x5a>
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	4a16      	ldr	r2, [pc, #88]	; (8007228 <xTaskRemoveFromEventList+0xb0>)
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4a13      	ldr	r2, [pc, #76]	; (800722c <xTaskRemoveFromEventList+0xb4>)
 80071e0:	441a      	add	r2, r3
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7fe fc86 	bl	8005afa <vListInsertEnd>
 80071ee:	e005      	b.n	80071fc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	3318      	adds	r3, #24
 80071f4:	4619      	mov	r1, r3
 80071f6:	480e      	ldr	r0, [pc, #56]	; (8007230 <xTaskRemoveFromEventList+0xb8>)
 80071f8:	f7fe fc7f 	bl	8005afa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007200:	4b0c      	ldr	r3, [pc, #48]	; (8007234 <xTaskRemoveFromEventList+0xbc>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	429a      	cmp	r2, r3
 8007208:	d905      	bls.n	8007216 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800720a:	2301      	movs	r3, #1
 800720c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800720e:	4b0a      	ldr	r3, [pc, #40]	; (8007238 <xTaskRemoveFromEventList+0xc0>)
 8007210:	2201      	movs	r2, #1
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	e001      	b.n	800721a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007216:	2300      	movs	r3, #0
 8007218:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800721a:	697b      	ldr	r3, [r7, #20]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	20000bec 	.word	0x20000bec
 8007228:	20000bcc 	.word	0x20000bcc
 800722c:	200006f4 	.word	0x200006f4
 8007230:	20000b84 	.word	0x20000b84
 8007234:	200006f0 	.word	0x200006f0
 8007238:	20000bd8 	.word	0x20000bd8

0800723c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007246:	4b28      	ldr	r3, [pc, #160]	; (80072e8 <vTaskRemoveFromUnorderedEventList+0xac>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <vTaskRemoveFromUnorderedEventList+0x26>
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	613b      	str	r3, [r7, #16]
 8007260:	e7fe      	b.n	8007260 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d109      	bne.n	800728c <vTaskRemoveFromUnorderedEventList+0x50>
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	e7fe      	b.n	800728a <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7fe fc8f 	bl	8005bb0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	3304      	adds	r3, #4
 8007296:	4618      	mov	r0, r3
 8007298:	f7fe fc8a 	bl	8005bb0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a0:	4b12      	ldr	r3, [pc, #72]	; (80072ec <vTaskRemoveFromUnorderedEventList+0xb0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d903      	bls.n	80072b0 <vTaskRemoveFromUnorderedEventList+0x74>
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	4a0f      	ldr	r2, [pc, #60]	; (80072ec <vTaskRemoveFromUnorderedEventList+0xb0>)
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b4:	4613      	mov	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4a0c      	ldr	r2, [pc, #48]	; (80072f0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80072be:	441a      	add	r2, r3
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4619      	mov	r1, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	f7fe fc17 	bl	8005afa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d0:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d902      	bls.n	80072e0 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80072da:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80072dc:	2201      	movs	r2, #1
 80072de:	601a      	str	r2, [r3, #0]
	}
}
 80072e0:	bf00      	nop
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	20000bec 	.word	0x20000bec
 80072ec:	20000bcc 	.word	0x20000bcc
 80072f0:	200006f4 	.word	0x200006f4
 80072f4:	200006f0 	.word	0x200006f0
 80072f8:	20000bd8 	.word	0x20000bd8

080072fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007304:	4b06      	ldr	r3, [pc, #24]	; (8007320 <vTaskInternalSetTimeOutState+0x24>)
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800730c:	4b05      	ldr	r3, [pc, #20]	; (8007324 <vTaskInternalSetTimeOutState+0x28>)
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	605a      	str	r2, [r3, #4]
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	bc80      	pop	{r7}
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	20000bdc 	.word	0x20000bdc
 8007324:	20000bc8 	.word	0x20000bc8

08007328 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b088      	sub	sp, #32
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d109      	bne.n	800734c <xTaskCheckForTimeOut+0x24>
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	e7fe      	b.n	800734a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <xTaskCheckForTimeOut+0x3e>
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	e7fe      	b.n	8007364 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007366:	f000 fe7f 	bl	8008068 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800736a:	4b1d      	ldr	r3, [pc, #116]	; (80073e0 <xTaskCheckForTimeOut+0xb8>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d102      	bne.n	800738a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007384:	2300      	movs	r3, #0
 8007386:	61fb      	str	r3, [r7, #28]
 8007388:	e023      	b.n	80073d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	4b15      	ldr	r3, [pc, #84]	; (80073e4 <xTaskCheckForTimeOut+0xbc>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	429a      	cmp	r2, r3
 8007394:	d007      	beq.n	80073a6 <xTaskCheckForTimeOut+0x7e>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	429a      	cmp	r2, r3
 800739e:	d302      	bcc.n	80073a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073a0:	2301      	movs	r3, #1
 80073a2:	61fb      	str	r3, [r7, #28]
 80073a4:	e015      	b.n	80073d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d20b      	bcs.n	80073c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	1ad2      	subs	r2, r2, r3
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff ff9d 	bl	80072fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073c2:	2300      	movs	r3, #0
 80073c4:	61fb      	str	r3, [r7, #28]
 80073c6:	e004      	b.n	80073d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2200      	movs	r2, #0
 80073cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073ce:	2301      	movs	r3, #1
 80073d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073d2:	f000 fe77 	bl	80080c4 <vPortExitCritical>

	return xReturn;
 80073d6:	69fb      	ldr	r3, [r7, #28]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3720      	adds	r7, #32
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20000bc8 	.word	0x20000bc8
 80073e4:	20000bdc 	.word	0x20000bdc

080073e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073ec:	4b03      	ldr	r3, [pc, #12]	; (80073fc <vTaskMissedYield+0x14>)
 80073ee:	2201      	movs	r2, #1
 80073f0:	601a      	str	r2, [r3, #0]
}
 80073f2:	bf00      	nop
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000bd8 	.word	0x20000bd8

08007400 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007408:	f000 f854 	bl	80074b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800740c:	4b07      	ldr	r3, [pc, #28]	; (800742c <prvIdleTask+0x2c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d907      	bls.n	8007424 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007414:	4b06      	ldr	r3, [pc, #24]	; (8007430 <prvIdleTask+0x30>)
 8007416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007424:	f7f9 fa9c 	bl	8000960 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007428:	e7ee      	b.n	8007408 <prvIdleTask+0x8>
 800742a:	bf00      	nop
 800742c:	200006f4 	.word	0x200006f4
 8007430:	e000ed04 	.word	0xe000ed04

08007434 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800743a:	2300      	movs	r3, #0
 800743c:	607b      	str	r3, [r7, #4]
 800743e:	e00c      	b.n	800745a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4a12      	ldr	r2, [pc, #72]	; (8007494 <prvInitialiseTaskLists+0x60>)
 800744c:	4413      	add	r3, r2
 800744e:	4618      	mov	r0, r3
 8007450:	f7fe fb28 	bl	8005aa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3301      	adds	r3, #1
 8007458:	607b      	str	r3, [r7, #4]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b37      	cmp	r3, #55	; 0x37
 800745e:	d9ef      	bls.n	8007440 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007460:	480d      	ldr	r0, [pc, #52]	; (8007498 <prvInitialiseTaskLists+0x64>)
 8007462:	f7fe fb1f 	bl	8005aa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007466:	480d      	ldr	r0, [pc, #52]	; (800749c <prvInitialiseTaskLists+0x68>)
 8007468:	f7fe fb1c 	bl	8005aa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800746c:	480c      	ldr	r0, [pc, #48]	; (80074a0 <prvInitialiseTaskLists+0x6c>)
 800746e:	f7fe fb19 	bl	8005aa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007472:	480c      	ldr	r0, [pc, #48]	; (80074a4 <prvInitialiseTaskLists+0x70>)
 8007474:	f7fe fb16 	bl	8005aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007478:	480b      	ldr	r0, [pc, #44]	; (80074a8 <prvInitialiseTaskLists+0x74>)
 800747a:	f7fe fb13 	bl	8005aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800747e:	4b0b      	ldr	r3, [pc, #44]	; (80074ac <prvInitialiseTaskLists+0x78>)
 8007480:	4a05      	ldr	r2, [pc, #20]	; (8007498 <prvInitialiseTaskLists+0x64>)
 8007482:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007484:	4b0a      	ldr	r3, [pc, #40]	; (80074b0 <prvInitialiseTaskLists+0x7c>)
 8007486:	4a05      	ldr	r2, [pc, #20]	; (800749c <prvInitialiseTaskLists+0x68>)
 8007488:	601a      	str	r2, [r3, #0]
}
 800748a:	bf00      	nop
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	200006f4 	.word	0x200006f4
 8007498:	20000b54 	.word	0x20000b54
 800749c:	20000b68 	.word	0x20000b68
 80074a0:	20000b84 	.word	0x20000b84
 80074a4:	20000b98 	.word	0x20000b98
 80074a8:	20000bb0 	.word	0x20000bb0
 80074ac:	20000b7c 	.word	0x20000b7c
 80074b0:	20000b80 	.word	0x20000b80

080074b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074ba:	e019      	b.n	80074f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074bc:	f000 fdd4 	bl	8008068 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80074c0:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <prvCheckTasksWaitingTermination+0x4c>)
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fe fb6f 	bl	8005bb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <prvCheckTasksWaitingTermination+0x50>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	4a0a      	ldr	r2, [pc, #40]	; (8007504 <prvCheckTasksWaitingTermination+0x50>)
 80074da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074dc:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <prvCheckTasksWaitingTermination+0x54>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3b01      	subs	r3, #1
 80074e2:	4a09      	ldr	r2, [pc, #36]	; (8007508 <prvCheckTasksWaitingTermination+0x54>)
 80074e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074e6:	f000 fded 	bl	80080c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f80e 	bl	800750c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074f0:	4b05      	ldr	r3, [pc, #20]	; (8007508 <prvCheckTasksWaitingTermination+0x54>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e1      	bne.n	80074bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20000b98 	.word	0x20000b98
 8007504:	20000bc4 	.word	0x20000bc4
 8007508:	20000bac 	.word	0x20000bac

0800750c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800751a:	2b00      	cmp	r3, #0
 800751c:	d108      	bne.n	8007530 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	4618      	mov	r0, r3
 8007524:	f000 ff5c 	bl	80083e0 <vPortFree>
				vPortFree( pxTCB );
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 ff59 	bl	80083e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800752e:	e017      	b.n	8007560 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007536:	2b01      	cmp	r3, #1
 8007538:	d103      	bne.n	8007542 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 ff50 	bl	80083e0 <vPortFree>
	}
 8007540:	e00e      	b.n	8007560 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007548:	2b02      	cmp	r3, #2
 800754a:	d009      	beq.n	8007560 <prvDeleteTCB+0x54>
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	e7fe      	b.n	800755e <prvDeleteTCB+0x52>
	}
 8007560:	bf00      	nop
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800756e:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <prvResetNextTaskUnblockTime+0x40>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <prvResetNextTaskUnblockTime+0x14>
 8007578:	2301      	movs	r3, #1
 800757a:	e000      	b.n	800757e <prvResetNextTaskUnblockTime+0x16>
 800757c:	2300      	movs	r3, #0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d004      	beq.n	800758c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007582:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <prvResetNextTaskUnblockTime+0x44>)
 8007584:	f04f 32ff 	mov.w	r2, #4294967295
 8007588:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800758a:	e008      	b.n	800759e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800758c:	4b06      	ldr	r3, [pc, #24]	; (80075a8 <prvResetNextTaskUnblockTime+0x40>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	4a04      	ldr	r2, [pc, #16]	; (80075ac <prvResetNextTaskUnblockTime+0x44>)
 800759c:	6013      	str	r3, [r2, #0]
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr
 80075a8:	20000b7c 	.word	0x20000b7c
 80075ac:	20000be4 	.word	0x20000be4

080075b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075b6:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <xTaskGetSchedulerState+0x34>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d102      	bne.n	80075c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075be:	2301      	movs	r3, #1
 80075c0:	607b      	str	r3, [r7, #4]
 80075c2:	e008      	b.n	80075d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075c4:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <xTaskGetSchedulerState+0x38>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d102      	bne.n	80075d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075cc:	2302      	movs	r3, #2
 80075ce:	607b      	str	r3, [r7, #4]
 80075d0:	e001      	b.n	80075d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075d2:	2300      	movs	r3, #0
 80075d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075d6:	687b      	ldr	r3, [r7, #4]
	}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	bc80      	pop	{r7}
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	20000bd0 	.word	0x20000bd0
 80075e8:	20000bec 	.word	0x20000bec

080075ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d054      	beq.n	80076ac <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007602:	4b2d      	ldr	r3, [pc, #180]	; (80076b8 <xTaskPriorityDisinherit+0xcc>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	429a      	cmp	r2, r3
 800760a:	d009      	beq.n	8007620 <xTaskPriorityDisinherit+0x34>
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	e7fe      	b.n	800761e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007624:	2b00      	cmp	r3, #0
 8007626:	d109      	bne.n	800763c <xTaskPriorityDisinherit+0x50>
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	60bb      	str	r3, [r7, #8]
 800763a:	e7fe      	b.n	800763a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007640:	1e5a      	subs	r2, r3, #1
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764e:	429a      	cmp	r2, r3
 8007650:	d02c      	beq.n	80076ac <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007656:	2b00      	cmp	r3, #0
 8007658:	d128      	bne.n	80076ac <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	3304      	adds	r3, #4
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe faa6 	bl	8005bb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800767c:	4b0f      	ldr	r3, [pc, #60]	; (80076bc <xTaskPriorityDisinherit+0xd0>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	429a      	cmp	r2, r3
 8007682:	d903      	bls.n	800768c <xTaskPriorityDisinherit+0xa0>
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	4a0c      	ldr	r2, [pc, #48]	; (80076bc <xTaskPriorityDisinherit+0xd0>)
 800768a:	6013      	str	r3, [r2, #0]
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4a09      	ldr	r2, [pc, #36]	; (80076c0 <xTaskPriorityDisinherit+0xd4>)
 800769a:	441a      	add	r2, r3
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	3304      	adds	r3, #4
 80076a0:	4619      	mov	r1, r3
 80076a2:	4610      	mov	r0, r2
 80076a4:	f7fe fa29 	bl	8005afa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076a8:	2301      	movs	r3, #1
 80076aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076ac:	697b      	ldr	r3, [r7, #20]
	}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	200006f0 	.word	0x200006f0
 80076bc:	20000bcc 	.word	0x20000bcc
 80076c0:	200006f4 	.word	0x200006f4

080076c4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80076ca:	4b09      	ldr	r3, [pc, #36]	; (80076f0 <uxTaskResetEventItemValue+0x2c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076d2:	4b07      	ldr	r3, [pc, #28]	; (80076f0 <uxTaskResetEventItemValue+0x2c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d8:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <uxTaskResetEventItemValue+0x2c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80076e0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80076e2:	687b      	ldr	r3, [r7, #4]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bc80      	pop	{r7}
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	200006f0 	.word	0x200006f0

080076f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076fe:	4b21      	ldr	r3, [pc, #132]	; (8007784 <prvAddCurrentTaskToDelayedList+0x90>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007704:	4b20      	ldr	r3, [pc, #128]	; (8007788 <prvAddCurrentTaskToDelayedList+0x94>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3304      	adds	r3, #4
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe fa50 	bl	8005bb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007716:	d10a      	bne.n	800772e <prvAddCurrentTaskToDelayedList+0x3a>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d007      	beq.n	800772e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800771e:	4b1a      	ldr	r3, [pc, #104]	; (8007788 <prvAddCurrentTaskToDelayedList+0x94>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3304      	adds	r3, #4
 8007724:	4619      	mov	r1, r3
 8007726:	4819      	ldr	r0, [pc, #100]	; (800778c <prvAddCurrentTaskToDelayedList+0x98>)
 8007728:	f7fe f9e7 	bl	8005afa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800772c:	e026      	b.n	800777c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4413      	add	r3, r2
 8007734:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007736:	4b14      	ldr	r3, [pc, #80]	; (8007788 <prvAddCurrentTaskToDelayedList+0x94>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	429a      	cmp	r2, r3
 8007744:	d209      	bcs.n	800775a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007746:	4b12      	ldr	r3, [pc, #72]	; (8007790 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <prvAddCurrentTaskToDelayedList+0x94>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3304      	adds	r3, #4
 8007750:	4619      	mov	r1, r3
 8007752:	4610      	mov	r0, r2
 8007754:	f7fe f9f4 	bl	8005b40 <vListInsert>
}
 8007758:	e010      	b.n	800777c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800775a:	4b0e      	ldr	r3, [pc, #56]	; (8007794 <prvAddCurrentTaskToDelayedList+0xa0>)
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	4b0a      	ldr	r3, [pc, #40]	; (8007788 <prvAddCurrentTaskToDelayedList+0x94>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3304      	adds	r3, #4
 8007764:	4619      	mov	r1, r3
 8007766:	4610      	mov	r0, r2
 8007768:	f7fe f9ea 	bl	8005b40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800776c:	4b0a      	ldr	r3, [pc, #40]	; (8007798 <prvAddCurrentTaskToDelayedList+0xa4>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	429a      	cmp	r2, r3
 8007774:	d202      	bcs.n	800777c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007776:	4a08      	ldr	r2, [pc, #32]	; (8007798 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	6013      	str	r3, [r2, #0]
}
 800777c:	bf00      	nop
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	20000bc8 	.word	0x20000bc8
 8007788:	200006f0 	.word	0x200006f0
 800778c:	20000bb0 	.word	0x20000bb0
 8007790:	20000b80 	.word	0x20000b80
 8007794:	20000b7c 	.word	0x20000b7c
 8007798:	20000be4 	.word	0x20000be4

0800779c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08a      	sub	sp, #40	; 0x28
 80077a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077a6:	f000 fb17 	bl	8007dd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80077aa:	4b1c      	ldr	r3, [pc, #112]	; (800781c <xTimerCreateTimerTask+0x80>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d021      	beq.n	80077f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80077ba:	1d3a      	adds	r2, r7, #4
 80077bc:	f107 0108 	add.w	r1, r7, #8
 80077c0:	f107 030c 	add.w	r3, r7, #12
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fd ffa3 	bl	8005710 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	9202      	str	r2, [sp, #8]
 80077d2:	9301      	str	r3, [sp, #4]
 80077d4:	2302      	movs	r3, #2
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	2300      	movs	r3, #0
 80077da:	460a      	mov	r2, r1
 80077dc:	4910      	ldr	r1, [pc, #64]	; (8007820 <xTimerCreateTimerTask+0x84>)
 80077de:	4811      	ldr	r0, [pc, #68]	; (8007824 <xTimerCreateTimerTask+0x88>)
 80077e0:	f7fe ff20 	bl	8006624 <xTaskCreateStatic>
 80077e4:	4602      	mov	r2, r0
 80077e6:	4b10      	ldr	r3, [pc, #64]	; (8007828 <xTimerCreateTimerTask+0x8c>)
 80077e8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077ea:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <xTimerCreateTimerTask+0x8c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077f2:	2301      	movs	r3, #1
 80077f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d109      	bne.n	8007810 <xTimerCreateTimerTask+0x74>
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	613b      	str	r3, [r7, #16]
 800780e:	e7fe      	b.n	800780e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007810:	697b      	ldr	r3, [r7, #20]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20000c20 	.word	0x20000c20
 8007820:	08008948 	.word	0x08008948
 8007824:	080079e9 	.word	0x080079e9
 8007828:	20000c24 	.word	0x20000c24

0800782c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af02      	add	r7, sp, #8
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800783a:	2030      	movs	r0, #48	; 0x30
 800783c:	f000 fd0a 	bl	8008254 <pvPortMalloc>
 8007840:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00d      	beq.n	8007864 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	9301      	str	r3, [sp, #4]
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	68b9      	ldr	r1, [r7, #8]
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 f809 	bl	800786e <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007864:	697b      	ldr	r3, [r7, #20]
	}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b086      	sub	sp, #24
 8007872:	af00      	add	r7, sp, #0
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	607a      	str	r2, [r7, #4]
 800787a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <prvInitialiseNewTimer+0x28>
 8007882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	e7fe      	b.n	8007894 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d015      	beq.n	80078c8 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800789c:	f000 fa9c 	bl	8007dd8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80078b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	6a3a      	ldr	r2, [r7, #32]
 80078bc:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	3304      	adds	r3, #4
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe f90d 	bl	8005ae2 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80078c8:	bf00      	nop
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08a      	sub	sp, #40	; 0x28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078de:	2300      	movs	r3, #0
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d109      	bne.n	80078fc <xTimerGenericCommand+0x2c>
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	623b      	str	r3, [r7, #32]
 80078fa:	e7fe      	b.n	80078fa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078fc:	4b19      	ldr	r3, [pc, #100]	; (8007964 <xTimerGenericCommand+0x94>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d02a      	beq.n	800795a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b05      	cmp	r3, #5
 8007914:	dc18      	bgt.n	8007948 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007916:	f7ff fe4b 	bl	80075b0 <xTaskGetSchedulerState>
 800791a:	4603      	mov	r3, r0
 800791c:	2b02      	cmp	r3, #2
 800791e:	d109      	bne.n	8007934 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007920:	4b10      	ldr	r3, [pc, #64]	; (8007964 <xTimerGenericCommand+0x94>)
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	f107 0110 	add.w	r1, r7, #16
 8007928:	2300      	movs	r3, #0
 800792a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800792c:	f7fe faa4 	bl	8005e78 <xQueueGenericSend>
 8007930:	6278      	str	r0, [r7, #36]	; 0x24
 8007932:	e012      	b.n	800795a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007934:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <xTimerGenericCommand+0x94>)
 8007936:	6818      	ldr	r0, [r3, #0]
 8007938:	f107 0110 	add.w	r1, r7, #16
 800793c:	2300      	movs	r3, #0
 800793e:	2200      	movs	r2, #0
 8007940:	f7fe fa9a 	bl	8005e78 <xQueueGenericSend>
 8007944:	6278      	str	r0, [r7, #36]	; 0x24
 8007946:	e008      	b.n	800795a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007948:	4b06      	ldr	r3, [pc, #24]	; (8007964 <xTimerGenericCommand+0x94>)
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	f107 0110 	add.w	r1, r7, #16
 8007950:	2300      	movs	r3, #0
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	f7fe fb8a 	bl	800606c <xQueueGenericSendFromISR>
 8007958:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800795c:	4618      	mov	r0, r3
 800795e:	3728      	adds	r7, #40	; 0x28
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20000c20 	.word	0x20000c20

08007968 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af02      	add	r7, sp, #8
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007972:	4b1c      	ldr	r3, [pc, #112]	; (80079e4 <prvProcessExpiredTimer+0x7c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	3304      	adds	r3, #4
 8007980:	4618      	mov	r0, r3
 8007982:	f7fe f915 	bl	8005bb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d121      	bne.n	80079d2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	18d1      	adds	r1, r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	6978      	ldr	r0, [r7, #20]
 800799c:	f000 f8ca 	bl	8007b34 <prvInsertTimerInActiveList>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d015      	beq.n	80079d2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079a6:	2300      	movs	r3, #0
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	2300      	movs	r3, #0
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	2100      	movs	r1, #0
 80079b0:	6978      	ldr	r0, [r7, #20]
 80079b2:	f7ff ff8d 	bl	80078d0 <xTimerGenericCommand>
 80079b6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d109      	bne.n	80079d2 <prvProcessExpiredTimer+0x6a>
 80079be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	e7fe      	b.n	80079d0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	6978      	ldr	r0, [r7, #20]
 80079d8:	4798      	blx	r3
}
 80079da:	bf00      	nop
 80079dc:	3718      	adds	r7, #24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	20000c18 	.word	0x20000c18

080079e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 80079f0:	f7f8 ffd2 	bl	8000998 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079f4:	f107 0308 	add.w	r3, r7, #8
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 f857 	bl	8007aac <prvGetNextExpireTime>
 80079fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	4619      	mov	r1, r3
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 f803 	bl	8007a10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a0a:	f000 f8d5 	bl	8007bb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a0e:	e7f1      	b.n	80079f4 <prvTimerTask+0xc>

08007a10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a1a:	f7ff f93b 	bl	8006c94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a1e:	f107 0308 	add.w	r3, r7, #8
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 f866 	bl	8007af4 <prvSampleTimeNow>
 8007a28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d130      	bne.n	8007a92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10a      	bne.n	8007a4c <prvProcessTimerOrBlockTask+0x3c>
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d806      	bhi.n	8007a4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a3e:	f7ff f937 	bl	8006cb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a42:	68f9      	ldr	r1, [r7, #12]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff ff8f 	bl	8007968 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a4a:	e024      	b.n	8007a96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d008      	beq.n	8007a64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a52:	4b13      	ldr	r3, [pc, #76]	; (8007aa0 <prvProcessTimerOrBlockTask+0x90>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	bf0c      	ite	eq
 8007a5c:	2301      	moveq	r3, #1
 8007a5e:	2300      	movne	r3, #0
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a64:	4b0f      	ldr	r3, [pc, #60]	; (8007aa4 <prvProcessTimerOrBlockTask+0x94>)
 8007a66:	6818      	ldr	r0, [r3, #0]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	4619      	mov	r1, r3
 8007a72:	f7fe fda3 	bl	80065bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a76:	f7ff f91b 	bl	8006cb0 <xTaskResumeAll>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a80:	4b09      	ldr	r3, [pc, #36]	; (8007aa8 <prvProcessTimerOrBlockTask+0x98>)
 8007a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	f3bf 8f6f 	isb	sy
}
 8007a90:	e001      	b.n	8007a96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a92:	f7ff f90d 	bl	8006cb0 <xTaskResumeAll>
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000c1c 	.word	0x20000c1c
 8007aa4:	20000c20 	.word	0x20000c20
 8007aa8:	e000ed04 	.word	0xe000ed04

08007aac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <prvGetNextExpireTime+0x44>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bf0c      	ite	eq
 8007abe:	2301      	moveq	r3, #1
 8007ac0:	2300      	movne	r3, #0
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d105      	bne.n	8007ade <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ad2:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <prvGetNextExpireTime+0x44>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	e001      	b.n	8007ae2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bc80      	pop	{r7}
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	20000c18 	.word	0x20000c18

08007af4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007afc:	f7ff f974 	bl	8006de8 <xTaskGetTickCount>
 8007b00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b02:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <prvSampleTimeNow+0x3c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d205      	bcs.n	8007b18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b0c:	f000 f904 	bl	8007d18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	e002      	b.n	8007b1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b1e:	4a04      	ldr	r2, [pc, #16]	; (8007b30 <prvSampleTimeNow+0x3c>)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b24:	68fb      	ldr	r3, [r7, #12]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000c28 	.word	0x20000c28

08007b34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b42:	2300      	movs	r3, #0
 8007b44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d812      	bhi.n	8007b80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	1ad2      	subs	r2, r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d302      	bcc.n	8007b6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	617b      	str	r3, [r7, #20]
 8007b6c:	e01b      	b.n	8007ba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b6e:	4b10      	ldr	r3, [pc, #64]	; (8007bb0 <prvInsertTimerInActiveList+0x7c>)
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3304      	adds	r3, #4
 8007b76:	4619      	mov	r1, r3
 8007b78:	4610      	mov	r0, r2
 8007b7a:	f7fd ffe1 	bl	8005b40 <vListInsert>
 8007b7e:	e012      	b.n	8007ba6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d206      	bcs.n	8007b96 <prvInsertTimerInActiveList+0x62>
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d302      	bcc.n	8007b96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b90:	2301      	movs	r3, #1
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	e007      	b.n	8007ba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b96:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <prvInsertTimerInActiveList+0x80>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	f7fd ffcd 	bl	8005b40 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ba6:	697b      	ldr	r3, [r7, #20]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3718      	adds	r7, #24
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	20000c1c 	.word	0x20000c1c
 8007bb4:	20000c18 	.word	0x20000c18

08007bb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08e      	sub	sp, #56	; 0x38
 8007bbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bbe:	e099      	b.n	8007cf4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	da17      	bge.n	8007bf6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007bc6:	1d3b      	adds	r3, r7, #4
 8007bc8:	3304      	adds	r3, #4
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d109      	bne.n	8007be6 <prvProcessReceivedCommands+0x2e>
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	61fb      	str	r3, [r7, #28]
 8007be4:	e7fe      	b.n	8007be4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bec:	6850      	ldr	r0, [r2, #4]
 8007bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bf0:	6892      	ldr	r2, [r2, #8]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	db7a      	blt.n	8007cf2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d004      	beq.n	8007c12 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fd ffcf 	bl	8005bb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c12:	463b      	mov	r3, r7
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7ff ff6d 	bl	8007af4 <prvSampleTimeNow>
 8007c1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b09      	cmp	r3, #9
 8007c20:	d868      	bhi.n	8007cf4 <prvProcessReceivedCommands+0x13c>
 8007c22:	a201      	add	r2, pc, #4	; (adr r2, 8007c28 <prvProcessReceivedCommands+0x70>)
 8007c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c28:	08007c51 	.word	0x08007c51
 8007c2c:	08007c51 	.word	0x08007c51
 8007c30:	08007c51 	.word	0x08007c51
 8007c34:	08007cf5 	.word	0x08007cf5
 8007c38:	08007cab 	.word	0x08007cab
 8007c3c:	08007ce1 	.word	0x08007ce1
 8007c40:	08007c51 	.word	0x08007c51
 8007c44:	08007c51 	.word	0x08007c51
 8007c48:	08007cf5 	.word	0x08007cf5
 8007c4c:	08007cab 	.word	0x08007cab
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	18d1      	adds	r1, r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c5e:	f7ff ff69 	bl	8007b34 <prvInsertTimerInActiveList>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d045      	beq.n	8007cf4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c6e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	69db      	ldr	r3, [r3, #28]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d13d      	bne.n	8007cf4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	441a      	add	r2, r3
 8007c80:	2300      	movs	r3, #0
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	2300      	movs	r3, #0
 8007c86:	2100      	movs	r1, #0
 8007c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c8a:	f7ff fe21 	bl	80078d0 <xTimerGenericCommand>
 8007c8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d12e      	bne.n	8007cf4 <prvProcessReceivedCommands+0x13c>
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	61bb      	str	r3, [r7, #24]
 8007ca8:	e7fe      	b.n	8007ca8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d109      	bne.n	8007ccc <prvProcessReceivedCommands+0x114>
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	617b      	str	r3, [r7, #20]
 8007cca:	e7fe      	b.n	8007cca <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	699a      	ldr	r2, [r3, #24]
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	18d1      	adds	r1, r2, r3
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cda:	f7ff ff2b 	bl	8007b34 <prvInsertTimerInActiveList>
					break;
 8007cde:	e009      	b.n	8007cf4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d104      	bne.n	8007cf4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cec:	f000 fb78 	bl	80083e0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007cf0:	e000      	b.n	8007cf4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007cf2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cf4:	4b07      	ldr	r3, [pc, #28]	; (8007d14 <prvProcessReceivedCommands+0x15c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	1d39      	adds	r1, r7, #4
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7fe fa49 	bl	8006194 <xQueueReceive>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f47f af5b 	bne.w	8007bc0 <prvProcessReceivedCommands+0x8>
	}
}
 8007d0a:	bf00      	nop
 8007d0c:	3730      	adds	r7, #48	; 0x30
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000c20 	.word	0x20000c20

08007d18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b088      	sub	sp, #32
 8007d1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d1e:	e044      	b.n	8007daa <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d20:	4b2b      	ldr	r3, [pc, #172]	; (8007dd0 <prvSwitchTimerLists+0xb8>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d2a:	4b29      	ldr	r3, [pc, #164]	; (8007dd0 <prvSwitchTimerLists+0xb8>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3304      	adds	r3, #4
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fd ff39 	bl	8005bb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d12d      	bne.n	8007daa <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4413      	add	r3, r2
 8007d56:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d90e      	bls.n	8007d7e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d6c:	4b18      	ldr	r3, [pc, #96]	; (8007dd0 <prvSwitchTimerLists+0xb8>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4619      	mov	r1, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	f7fd fee2 	bl	8005b40 <vListInsert>
 8007d7c:	e015      	b.n	8007daa <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d7e:	2300      	movs	r3, #0
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	2300      	movs	r3, #0
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	2100      	movs	r1, #0
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f7ff fda1 	bl	80078d0 <xTimerGenericCommand>
 8007d8e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d109      	bne.n	8007daa <prvSwitchTimerLists+0x92>
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	e7fe      	b.n	8007da8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007daa:	4b09      	ldr	r3, [pc, #36]	; (8007dd0 <prvSwitchTimerLists+0xb8>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1b5      	bne.n	8007d20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007db4:	4b06      	ldr	r3, [pc, #24]	; (8007dd0 <prvSwitchTimerLists+0xb8>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007dba:	4b06      	ldr	r3, [pc, #24]	; (8007dd4 <prvSwitchTimerLists+0xbc>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a04      	ldr	r2, [pc, #16]	; (8007dd0 <prvSwitchTimerLists+0xb8>)
 8007dc0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007dc2:	4a04      	ldr	r2, [pc, #16]	; (8007dd4 <prvSwitchTimerLists+0xbc>)
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	6013      	str	r3, [r2, #0]
}
 8007dc8:	bf00      	nop
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20000c18 	.word	0x20000c18
 8007dd4:	20000c1c 	.word	0x20000c1c

08007dd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007dde:	f000 f943 	bl	8008068 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007de2:	4b15      	ldr	r3, [pc, #84]	; (8007e38 <prvCheckForValidListAndQueue+0x60>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d120      	bne.n	8007e2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dea:	4814      	ldr	r0, [pc, #80]	; (8007e3c <prvCheckForValidListAndQueue+0x64>)
 8007dec:	f7fd fe5a 	bl	8005aa4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007df0:	4813      	ldr	r0, [pc, #76]	; (8007e40 <prvCheckForValidListAndQueue+0x68>)
 8007df2:	f7fd fe57 	bl	8005aa4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007df6:	4b13      	ldr	r3, [pc, #76]	; (8007e44 <prvCheckForValidListAndQueue+0x6c>)
 8007df8:	4a10      	ldr	r2, [pc, #64]	; (8007e3c <prvCheckForValidListAndQueue+0x64>)
 8007dfa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007dfc:	4b12      	ldr	r3, [pc, #72]	; (8007e48 <prvCheckForValidListAndQueue+0x70>)
 8007dfe:	4a10      	ldr	r2, [pc, #64]	; (8007e40 <prvCheckForValidListAndQueue+0x68>)
 8007e00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e02:	2300      	movs	r3, #0
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	4b11      	ldr	r3, [pc, #68]	; (8007e4c <prvCheckForValidListAndQueue+0x74>)
 8007e08:	4a11      	ldr	r2, [pc, #68]	; (8007e50 <prvCheckForValidListAndQueue+0x78>)
 8007e0a:	2110      	movs	r1, #16
 8007e0c:	200a      	movs	r0, #10
 8007e0e:	f7fd ff61 	bl	8005cd4 <xQueueGenericCreateStatic>
 8007e12:	4602      	mov	r2, r0
 8007e14:	4b08      	ldr	r3, [pc, #32]	; (8007e38 <prvCheckForValidListAndQueue+0x60>)
 8007e16:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e18:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <prvCheckForValidListAndQueue+0x60>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d005      	beq.n	8007e2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e20:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <prvCheckForValidListAndQueue+0x60>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	490b      	ldr	r1, [pc, #44]	; (8007e54 <prvCheckForValidListAndQueue+0x7c>)
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe fba0 	bl	800656c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e2c:	f000 f94a 	bl	80080c4 <vPortExitCritical>
}
 8007e30:	bf00      	nop
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20000c20 	.word	0x20000c20
 8007e3c:	20000bf0 	.word	0x20000bf0
 8007e40:	20000c04 	.word	0x20000c04
 8007e44:	20000c18 	.word	0x20000c18
 8007e48:	20000c1c 	.word	0x20000c1c
 8007e4c:	20000ccc 	.word	0x20000ccc
 8007e50:	20000c2c 	.word	0x20000c2c
 8007e54:	08008950 	.word	0x08008950

08007e58 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08a      	sub	sp, #40	; 0x28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007e66:	f06f 0301 	mvn.w	r3, #1
 8007e6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e78:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <xTimerPendFunctionCallFromISR+0x3c>)
 8007e7a:	6818      	ldr	r0, [r3, #0]
 8007e7c:	f107 0114 	add.w	r1, r7, #20
 8007e80:	2300      	movs	r3, #0
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	f7fe f8f2 	bl	800606c <xQueueGenericSendFromISR>
 8007e88:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3728      	adds	r7, #40	; 0x28
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	20000c20 	.word	0x20000c20

08007e98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3b04      	subs	r3, #4
 8007ea8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3b04      	subs	r3, #4
 8007eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f023 0201 	bic.w	r2, r3, #1
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3b04      	subs	r3, #4
 8007ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ec8:	4a08      	ldr	r2, [pc, #32]	; (8007eec <pxPortInitialiseStack+0x54>)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3b14      	subs	r3, #20
 8007ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3b20      	subs	r3, #32
 8007ede:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr
 8007eec:	08007ef1 	.word	0x08007ef1

08007ef0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007efa:	4b10      	ldr	r3, [pc, #64]	; (8007f3c <prvTaskExitError+0x4c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f02:	d009      	beq.n	8007f18 <prvTaskExitError+0x28>
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	e7fe      	b.n	8007f16 <prvTaskExitError+0x26>
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f2a:	bf00      	nop
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0fc      	beq.n	8007f2c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f32:	bf00      	nop
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bc80      	pop	{r7}
 8007f3a:	4770      	bx	lr
 8007f3c:	2000000c 	.word	0x2000000c

08007f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f40:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <pxCurrentTCBConst2>)
 8007f42:	6819      	ldr	r1, [r3, #0]
 8007f44:	6808      	ldr	r0, [r1, #0]
 8007f46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f4a:	f380 8809 	msr	PSP, r0
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f04f 0000 	mov.w	r0, #0
 8007f56:	f380 8811 	msr	BASEPRI, r0
 8007f5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007f5e:	4770      	bx	lr

08007f60 <pxCurrentTCBConst2>:
 8007f60:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop

08007f68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007f68:	4806      	ldr	r0, [pc, #24]	; (8007f84 <prvPortStartFirstTask+0x1c>)
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	6800      	ldr	r0, [r0, #0]
 8007f6e:	f380 8808 	msr	MSP, r0
 8007f72:	b662      	cpsie	i
 8007f74:	b661      	cpsie	f
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	df00      	svc	0
 8007f80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f82:	bf00      	nop
 8007f84:	e000ed08 	.word	0xe000ed08

08007f88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f8e:	4b31      	ldr	r3, [pc, #196]	; (8008054 <xPortStartScheduler+0xcc>)
 8007f90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	22ff      	movs	r2, #255	; 0xff
 8007f9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	4b29      	ldr	r3, [pc, #164]	; (8008058 <xPortStartScheduler+0xd0>)
 8007fb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fb6:	4b29      	ldr	r3, [pc, #164]	; (800805c <xPortStartScheduler+0xd4>)
 8007fb8:	2207      	movs	r2, #7
 8007fba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fbc:	e009      	b.n	8007fd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007fbe:	4b27      	ldr	r3, [pc, #156]	; (800805c <xPortStartScheduler+0xd4>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	4a25      	ldr	r2, [pc, #148]	; (800805c <xPortStartScheduler+0xd4>)
 8007fc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fd2:	78fb      	ldrb	r3, [r7, #3]
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fda:	2b80      	cmp	r3, #128	; 0x80
 8007fdc:	d0ef      	beq.n	8007fbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fde:	4b1f      	ldr	r3, [pc, #124]	; (800805c <xPortStartScheduler+0xd4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f1c3 0307 	rsb	r3, r3, #7
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d009      	beq.n	8007ffe <xPortStartScheduler+0x76>
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	60bb      	str	r3, [r7, #8]
 8007ffc:	e7fe      	b.n	8007ffc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ffe:	4b17      	ldr	r3, [pc, #92]	; (800805c <xPortStartScheduler+0xd4>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	021b      	lsls	r3, r3, #8
 8008004:	4a15      	ldr	r2, [pc, #84]	; (800805c <xPortStartScheduler+0xd4>)
 8008006:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008008:	4b14      	ldr	r3, [pc, #80]	; (800805c <xPortStartScheduler+0xd4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008010:	4a12      	ldr	r2, [pc, #72]	; (800805c <xPortStartScheduler+0xd4>)
 8008012:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	b2da      	uxtb	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800801c:	4b10      	ldr	r3, [pc, #64]	; (8008060 <xPortStartScheduler+0xd8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a0f      	ldr	r2, [pc, #60]	; (8008060 <xPortStartScheduler+0xd8>)
 8008022:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008026:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008028:	4b0d      	ldr	r3, [pc, #52]	; (8008060 <xPortStartScheduler+0xd8>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a0c      	ldr	r2, [pc, #48]	; (8008060 <xPortStartScheduler+0xd8>)
 800802e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008032:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008034:	f000 f8b0 	bl	8008198 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <xPortStartScheduler+0xdc>)
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800803e:	f7ff ff93 	bl	8007f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008042:	f7fe ffa5 	bl	8006f90 <vTaskSwitchContext>
	prvTaskExitError();
 8008046:	f7ff ff53 	bl	8007ef0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	e000e400 	.word	0xe000e400
 8008058:	20000d1c 	.word	0x20000d1c
 800805c:	20000d20 	.word	0x20000d20
 8008060:	e000ed20 	.word	0xe000ed20
 8008064:	2000000c 	.word	0x2000000c

08008068 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008080:	4b0e      	ldr	r3, [pc, #56]	; (80080bc <vPortEnterCritical+0x54>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3301      	adds	r3, #1
 8008086:	4a0d      	ldr	r2, [pc, #52]	; (80080bc <vPortEnterCritical+0x54>)
 8008088:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800808a:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <vPortEnterCritical+0x54>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d10e      	bne.n	80080b0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008092:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <vPortEnterCritical+0x58>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d009      	beq.n	80080b0 <vPortEnterCritical+0x48>
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	603b      	str	r3, [r7, #0]
 80080ae:	e7fe      	b.n	80080ae <vPortEnterCritical+0x46>
	}
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bc80      	pop	{r7}
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	2000000c 	.word	0x2000000c
 80080c0:	e000ed04 	.word	0xe000ed04

080080c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080ca:	4b10      	ldr	r3, [pc, #64]	; (800810c <vPortExitCritical+0x48>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d109      	bne.n	80080e6 <vPortExitCritical+0x22>
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	607b      	str	r3, [r7, #4]
 80080e4:	e7fe      	b.n	80080e4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80080e6:	4b09      	ldr	r3, [pc, #36]	; (800810c <vPortExitCritical+0x48>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	4a07      	ldr	r2, [pc, #28]	; (800810c <vPortExitCritical+0x48>)
 80080ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080f0:	4b06      	ldr	r3, [pc, #24]	; (800810c <vPortExitCritical+0x48>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <vPortExitCritical+0x3e>
 80080f8:	2300      	movs	r3, #0
 80080fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008102:	bf00      	nop
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	bc80      	pop	{r7}
 800810a:	4770      	bx	lr
 800810c:	2000000c 	.word	0x2000000c

08008110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008110:	f3ef 8009 	mrs	r0, PSP
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	4b0d      	ldr	r3, [pc, #52]	; (8008150 <pxCurrentTCBConst>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008120:	6010      	str	r0, [r2, #0]
 8008122:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008126:	f04f 0050 	mov.w	r0, #80	; 0x50
 800812a:	f380 8811 	msr	BASEPRI, r0
 800812e:	f7fe ff2f 	bl	8006f90 <vTaskSwitchContext>
 8008132:	f04f 0000 	mov.w	r0, #0
 8008136:	f380 8811 	msr	BASEPRI, r0
 800813a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800813e:	6819      	ldr	r1, [r3, #0]
 8008140:	6808      	ldr	r0, [r1, #0]
 8008142:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008146:	f380 8809 	msr	PSP, r0
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	4770      	bx	lr

08008150 <pxCurrentTCBConst>:
 8008150:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008154:	bf00      	nop
 8008156:	bf00      	nop

08008158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008170:	f7fe fe48 	bl	8006e04 <xTaskIncrementTick>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800817a:	4b06      	ldr	r3, [pc, #24]	; (8008194 <SysTick_Handler+0x3c>)
 800817c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	2300      	movs	r3, #0
 8008184:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	e000ed04 	.word	0xe000ed04

08008198 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008198:	b480      	push	{r7}
 800819a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800819c:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <vPortSetupTimerInterrupt+0x30>)
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081a2:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <vPortSetupTimerInterrupt+0x34>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081a8:	4b09      	ldr	r3, [pc, #36]	; (80081d0 <vPortSetupTimerInterrupt+0x38>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a09      	ldr	r2, [pc, #36]	; (80081d4 <vPortSetupTimerInterrupt+0x3c>)
 80081ae:	fba2 2303 	umull	r2, r3, r2, r3
 80081b2:	099b      	lsrs	r3, r3, #6
 80081b4:	4a08      	ldr	r2, [pc, #32]	; (80081d8 <vPortSetupTimerInterrupt+0x40>)
 80081b6:	3b01      	subs	r3, #1
 80081b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ba:	4b03      	ldr	r3, [pc, #12]	; (80081c8 <vPortSetupTimerInterrupt+0x30>)
 80081bc:	2207      	movs	r2, #7
 80081be:	601a      	str	r2, [r3, #0]
}
 80081c0:	bf00      	nop
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bc80      	pop	{r7}
 80081c6:	4770      	bx	lr
 80081c8:	e000e010 	.word	0xe000e010
 80081cc:	e000e018 	.word	0xe000e018
 80081d0:	20000000 	.word	0x20000000
 80081d4:	10624dd3 	.word	0x10624dd3
 80081d8:	e000e014 	.word	0xe000e014

080081dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081e2:	f3ef 8305 	mrs	r3, IPSR
 80081e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2b0f      	cmp	r3, #15
 80081ec:	d913      	bls.n	8008216 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081ee:	4a15      	ldr	r2, [pc, #84]	; (8008244 <vPortValidateInterruptPriority+0x68>)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4413      	add	r3, r2
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081f8:	4b13      	ldr	r3, [pc, #76]	; (8008248 <vPortValidateInterruptPriority+0x6c>)
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	7afa      	ldrb	r2, [r7, #11]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d209      	bcs.n	8008216 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	607b      	str	r3, [r7, #4]
 8008214:	e7fe      	b.n	8008214 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008216:	4b0d      	ldr	r3, [pc, #52]	; (800824c <vPortValidateInterruptPriority+0x70>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800821e:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <vPortValidateInterruptPriority+0x74>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d909      	bls.n	800823a <vPortValidateInterruptPriority+0x5e>
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	603b      	str	r3, [r7, #0]
 8008238:	e7fe      	b.n	8008238 <vPortValidateInterruptPriority+0x5c>
	}
 800823a:	bf00      	nop
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	bc80      	pop	{r7}
 8008242:	4770      	bx	lr
 8008244:	e000e3f0 	.word	0xe000e3f0
 8008248:	20000d1c 	.word	0x20000d1c
 800824c:	e000ed0c 	.word	0xe000ed0c
 8008250:	20000d20 	.word	0x20000d20

08008254 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08a      	sub	sp, #40	; 0x28
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800825c:	2300      	movs	r3, #0
 800825e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008260:	f7fe fd18 	bl	8006c94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008264:	4b59      	ldr	r3, [pc, #356]	; (80083cc <pvPortMalloc+0x178>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800826c:	f000 f910 	bl	8008490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008270:	4b57      	ldr	r3, [pc, #348]	; (80083d0 <pvPortMalloc+0x17c>)
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4013      	ands	r3, r2
 8008278:	2b00      	cmp	r3, #0
 800827a:	f040 808c 	bne.w	8008396 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d01c      	beq.n	80082be <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008284:	2208      	movs	r2, #8
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4413      	add	r3, r2
 800828a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f003 0307 	and.w	r3, r3, #7
 8008292:	2b00      	cmp	r3, #0
 8008294:	d013      	beq.n	80082be <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f023 0307 	bic.w	r3, r3, #7
 800829c:	3308      	adds	r3, #8
 800829e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d009      	beq.n	80082be <pvPortMalloc+0x6a>
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	617b      	str	r3, [r7, #20]
 80082bc:	e7fe      	b.n	80082bc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d068      	beq.n	8008396 <pvPortMalloc+0x142>
 80082c4:	4b43      	ldr	r3, [pc, #268]	; (80083d4 <pvPortMalloc+0x180>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d863      	bhi.n	8008396 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082ce:	4b42      	ldr	r3, [pc, #264]	; (80083d8 <pvPortMalloc+0x184>)
 80082d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082d2:	4b41      	ldr	r3, [pc, #260]	; (80083d8 <pvPortMalloc+0x184>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082d8:	e004      	b.n	80082e4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d903      	bls.n	80082f6 <pvPortMalloc+0xa2>
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1f1      	bne.n	80082da <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082f6:	4b35      	ldr	r3, [pc, #212]	; (80083cc <pvPortMalloc+0x178>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d04a      	beq.n	8008396 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2208      	movs	r2, #8
 8008306:	4413      	add	r3, r2
 8008308:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	1ad2      	subs	r2, r2, r3
 800831a:	2308      	movs	r3, #8
 800831c:	005b      	lsls	r3, r3, #1
 800831e:	429a      	cmp	r2, r3
 8008320:	d91e      	bls.n	8008360 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4413      	add	r3, r2
 8008328:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	f003 0307 	and.w	r3, r3, #7
 8008330:	2b00      	cmp	r3, #0
 8008332:	d009      	beq.n	8008348 <pvPortMalloc+0xf4>
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	613b      	str	r3, [r7, #16]
 8008346:	e7fe      	b.n	8008346 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	1ad2      	subs	r2, r2, r3
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800835a:	69b8      	ldr	r0, [r7, #24]
 800835c:	f000 f8fa 	bl	8008554 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008360:	4b1c      	ldr	r3, [pc, #112]	; (80083d4 <pvPortMalloc+0x180>)
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	4a1a      	ldr	r2, [pc, #104]	; (80083d4 <pvPortMalloc+0x180>)
 800836c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800836e:	4b19      	ldr	r3, [pc, #100]	; (80083d4 <pvPortMalloc+0x180>)
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	4b1a      	ldr	r3, [pc, #104]	; (80083dc <pvPortMalloc+0x188>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	429a      	cmp	r2, r3
 8008378:	d203      	bcs.n	8008382 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800837a:	4b16      	ldr	r3, [pc, #88]	; (80083d4 <pvPortMalloc+0x180>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a17      	ldr	r2, [pc, #92]	; (80083dc <pvPortMalloc+0x188>)
 8008380:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	4b12      	ldr	r3, [pc, #72]	; (80083d0 <pvPortMalloc+0x17c>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	431a      	orrs	r2, r3
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008396:	f7fe fc8b 	bl	8006cb0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80083a0:	f7f8 faf4 	bl	800098c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d009      	beq.n	80083c2 <pvPortMalloc+0x16e>
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	e7fe      	b.n	80083c0 <pvPortMalloc+0x16c>
	return pvReturn;
 80083c2:	69fb      	ldr	r3, [r7, #28]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3728      	adds	r7, #40	; 0x28
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	2000352c 	.word	0x2000352c
 80083d0:	20003538 	.word	0x20003538
 80083d4:	20003530 	.word	0x20003530
 80083d8:	20003524 	.word	0x20003524
 80083dc:	20003534 	.word	0x20003534

080083e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d046      	beq.n	8008480 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083f2:	2308      	movs	r3, #8
 80083f4:	425b      	negs	r3, r3
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	4413      	add	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	4b20      	ldr	r3, [pc, #128]	; (8008488 <vPortFree+0xa8>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4013      	ands	r3, r2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d109      	bne.n	8008422 <vPortFree+0x42>
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	e7fe      	b.n	8008420 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d009      	beq.n	800843e <vPortFree+0x5e>
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	60bb      	str	r3, [r7, #8]
 800843c:	e7fe      	b.n	800843c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	4b11      	ldr	r3, [pc, #68]	; (8008488 <vPortFree+0xa8>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4013      	ands	r3, r2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d019      	beq.n	8008480 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d115      	bne.n	8008480 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	4b0b      	ldr	r3, [pc, #44]	; (8008488 <vPortFree+0xa8>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	43db      	mvns	r3, r3
 800845e:	401a      	ands	r2, r3
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008464:	f7fe fc16 	bl	8006c94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	4b07      	ldr	r3, [pc, #28]	; (800848c <vPortFree+0xac>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4413      	add	r3, r2
 8008472:	4a06      	ldr	r2, [pc, #24]	; (800848c <vPortFree+0xac>)
 8008474:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008476:	6938      	ldr	r0, [r7, #16]
 8008478:	f000 f86c 	bl	8008554 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800847c:	f7fe fc18 	bl	8006cb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008480:	bf00      	nop
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	20003538 	.word	0x20003538
 800848c:	20003530 	.word	0x20003530

08008490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008496:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800849a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800849c:	4b27      	ldr	r3, [pc, #156]	; (800853c <prvHeapInit+0xac>)
 800849e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00c      	beq.n	80084c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3307      	adds	r3, #7
 80084ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f023 0307 	bic.w	r3, r3, #7
 80084b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	4a1f      	ldr	r2, [pc, #124]	; (800853c <prvHeapInit+0xac>)
 80084c0:	4413      	add	r3, r2
 80084c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084c8:	4a1d      	ldr	r2, [pc, #116]	; (8008540 <prvHeapInit+0xb0>)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084ce:	4b1c      	ldr	r3, [pc, #112]	; (8008540 <prvHeapInit+0xb0>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	4413      	add	r3, r2
 80084da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084dc:	2208      	movs	r2, #8
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	1a9b      	subs	r3, r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0307 	bic.w	r3, r3, #7
 80084ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4a15      	ldr	r2, [pc, #84]	; (8008544 <prvHeapInit+0xb4>)
 80084f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084f2:	4b14      	ldr	r3, [pc, #80]	; (8008544 <prvHeapInit+0xb4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2200      	movs	r2, #0
 80084f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084fa:	4b12      	ldr	r3, [pc, #72]	; (8008544 <prvHeapInit+0xb4>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2200      	movs	r2, #0
 8008500:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	1ad2      	subs	r2, r2, r3
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008510:	4b0c      	ldr	r3, [pc, #48]	; (8008544 <prvHeapInit+0xb4>)
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	4a0a      	ldr	r2, [pc, #40]	; (8008548 <prvHeapInit+0xb8>)
 800851e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	4a09      	ldr	r2, [pc, #36]	; (800854c <prvHeapInit+0xbc>)
 8008526:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008528:	4b09      	ldr	r3, [pc, #36]	; (8008550 <prvHeapInit+0xc0>)
 800852a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800852e:	601a      	str	r2, [r3, #0]
}
 8008530:	bf00      	nop
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	bc80      	pop	{r7}
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	20000d24 	.word	0x20000d24
 8008540:	20003524 	.word	0x20003524
 8008544:	2000352c 	.word	0x2000352c
 8008548:	20003534 	.word	0x20003534
 800854c:	20003530 	.word	0x20003530
 8008550:	20003538 	.word	0x20003538

08008554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800855c:	4b27      	ldr	r3, [pc, #156]	; (80085fc <prvInsertBlockIntoFreeList+0xa8>)
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	e002      	b.n	8008568 <prvInsertBlockIntoFreeList+0x14>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	60fb      	str	r3, [r7, #12]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	429a      	cmp	r2, r3
 8008570:	d8f7      	bhi.n	8008562 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	4413      	add	r3, r2
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	429a      	cmp	r2, r3
 8008582:	d108      	bne.n	8008596 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	441a      	add	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	441a      	add	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d118      	bne.n	80085dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	4b14      	ldr	r3, [pc, #80]	; (8008600 <prvInsertBlockIntoFreeList+0xac>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d00d      	beq.n	80085d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	441a      	add	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	e008      	b.n	80085e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085d2:	4b0b      	ldr	r3, [pc, #44]	; (8008600 <prvInsertBlockIntoFreeList+0xac>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	e003      	b.n	80085e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d002      	beq.n	80085f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085f2:	bf00      	nop
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bc80      	pop	{r7}
 80085fa:	4770      	bx	lr
 80085fc:	20003524 	.word	0x20003524
 8008600:	2000352c 	.word	0x2000352c

08008604 <__libc_init_array>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	2500      	movs	r5, #0
 8008608:	4e0c      	ldr	r6, [pc, #48]	; (800863c <__libc_init_array+0x38>)
 800860a:	4c0d      	ldr	r4, [pc, #52]	; (8008640 <__libc_init_array+0x3c>)
 800860c:	1ba4      	subs	r4, r4, r6
 800860e:	10a4      	asrs	r4, r4, #2
 8008610:	42a5      	cmp	r5, r4
 8008612:	d109      	bne.n	8008628 <__libc_init_array+0x24>
 8008614:	f000 f842 	bl	800869c <_init>
 8008618:	2500      	movs	r5, #0
 800861a:	4e0a      	ldr	r6, [pc, #40]	; (8008644 <__libc_init_array+0x40>)
 800861c:	4c0a      	ldr	r4, [pc, #40]	; (8008648 <__libc_init_array+0x44>)
 800861e:	1ba4      	subs	r4, r4, r6
 8008620:	10a4      	asrs	r4, r4, #2
 8008622:	42a5      	cmp	r5, r4
 8008624:	d105      	bne.n	8008632 <__libc_init_array+0x2e>
 8008626:	bd70      	pop	{r4, r5, r6, pc}
 8008628:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800862c:	4798      	blx	r3
 800862e:	3501      	adds	r5, #1
 8008630:	e7ee      	b.n	8008610 <__libc_init_array+0xc>
 8008632:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008636:	4798      	blx	r3
 8008638:	3501      	adds	r5, #1
 800863a:	e7f2      	b.n	8008622 <__libc_init_array+0x1e>
 800863c:	08008a44 	.word	0x08008a44
 8008640:	08008a44 	.word	0x08008a44
 8008644:	08008a44 	.word	0x08008a44
 8008648:	08008a48 	.word	0x08008a48

0800864c <memcpy>:
 800864c:	b510      	push	{r4, lr}
 800864e:	1e43      	subs	r3, r0, #1
 8008650:	440a      	add	r2, r1
 8008652:	4291      	cmp	r1, r2
 8008654:	d100      	bne.n	8008658 <memcpy+0xc>
 8008656:	bd10      	pop	{r4, pc}
 8008658:	f811 4b01 	ldrb.w	r4, [r1], #1
 800865c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008660:	e7f7      	b.n	8008652 <memcpy+0x6>

08008662 <memset>:
 8008662:	4603      	mov	r3, r0
 8008664:	4402      	add	r2, r0
 8008666:	4293      	cmp	r3, r2
 8008668:	d100      	bne.n	800866c <memset+0xa>
 800866a:	4770      	bx	lr
 800866c:	f803 1b01 	strb.w	r1, [r3], #1
 8008670:	e7f9      	b.n	8008666 <memset+0x4>

08008672 <strncpy>:
 8008672:	b570      	push	{r4, r5, r6, lr}
 8008674:	4604      	mov	r4, r0
 8008676:	3901      	subs	r1, #1
 8008678:	b902      	cbnz	r2, 800867c <strncpy+0xa>
 800867a:	bd70      	pop	{r4, r5, r6, pc}
 800867c:	4623      	mov	r3, r4
 800867e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8008682:	1e56      	subs	r6, r2, #1
 8008684:	f803 5b01 	strb.w	r5, [r3], #1
 8008688:	b92d      	cbnz	r5, 8008696 <strncpy+0x24>
 800868a:	4414      	add	r4, r2
 800868c:	42a3      	cmp	r3, r4
 800868e:	d0f4      	beq.n	800867a <strncpy+0x8>
 8008690:	f803 5b01 	strb.w	r5, [r3], #1
 8008694:	e7fa      	b.n	800868c <strncpy+0x1a>
 8008696:	461c      	mov	r4, r3
 8008698:	4632      	mov	r2, r6
 800869a:	e7ed      	b.n	8008678 <strncpy+0x6>

0800869c <_init>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	bf00      	nop
 80086a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a2:	bc08      	pop	{r3}
 80086a4:	469e      	mov	lr, r3
 80086a6:	4770      	bx	lr

080086a8 <_fini>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	bf00      	nop
 80086ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ae:	bc08      	pop	{r3}
 80086b0:	469e      	mov	lr, r3
 80086b2:	4770      	bx	lr
